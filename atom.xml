<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>XiShui&#39;s Blog</title>
  
  <subtitle>以梦为马，不负年华</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://krrrr.top/"/>
  <updated>2020-11-08T08:33:34.519Z</updated>
  <id>http://krrrr.top/</id>
  
  <author>
    <name>兮水XiShui丶</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>多项式学习笔记</title>
    <link href="http://krrrr.top/2020/11/02/%E5%A4%9A%E9%A1%B9%E5%BC%8F%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://krrrr.top/2020/11/02/多项式学习笔记/</id>
    <published>2020-11-02T08:11:32.000Z</published>
    <updated>2020-11-08T08:33:34.519Z</updated>
    
    <content type="html"><![CDATA[<p>开始跳楼了</p><a id="more"></a><h1 id="多项式部分简介"><a href="#多项式部分简介" class="headerlink" title="多项式部分简介"></a>多项式部分简介</h1><h2 id="定义简介"><a href="#定义简介" class="headerlink" title="定义简介"></a>定义简介</h2><p>一个以$x$为变量的定义在代数域$F$上,将函数$A(x)$表示为:  </p><script type="math/tex; mode=display">A(x)=\sum_{j=0}^{n-1}a_jx^j</script><p>其中我们称$a_0,a_1,\dots,a_{n-1}$为系数,如果一个多项式的最高次的非零系数为$a_k$,那么称$A(x)$的次数为$k$,记为$degree(A)=k$,任何一个大于该多项式次数的整数都是这个多项式的<strong>次数界</strong>.  </p><h2 id="多项式的表示"><a href="#多项式的表示" class="headerlink" title="多项式的表示"></a>多项式的表示</h2><ol><li><p>系数表达  :<br>对一个次数界为$n$的多项式$A(x)=\sum_{j=0}^{n-1}a_jx^j$而言,其系数表达是一个由系数组成的向量$\text{a}=(a_0,a_1,\dots,a_{n-1})$.<br>在给定系数求值时,采用霍纳法则(秦九邵算法)可以实现在$O(n)$的复杂度内完成求值运算.  </p><script type="math/tex; mode=display">A(x_0)=a_0+x_0(a_1+x_0(a_2+\dots+x_0(a_{n-1})))</script><p>扩充:霍纳法则:  </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Horner</span> <span class="params">()</span></span>&#123;</span><br><span class="line">   <span class="keyword">for</span>(<span class="keyword">int</span> i=n<span class="number">-1</span>;i&gt;=<span class="number">1</span>;i--)</span><br><span class="line">      ans*=x,ans+=a[i];</span><br></pre></td></tr></table></figure></li><li><p>点值表达<br>一个次数界为$n$的多项式$A(x)$的点值表达就是一个由$n$个点值对组成的集合  </p><script type="math/tex; mode=display">\{(x_0,y_0),(x_1,y_1),\dots,(x_{n-1},y_{n-1})\}</script><p>使得对$k=0,1,\dots,n-1$,所有$x_k$各不相同  </p><script type="math/tex; mode=display">y_k=A(x_k)=a_0x_k+a_1x+k+\dots+a_{n-1}x_k</script><p>则$A(x)=\sum_{j=0}^{n-1}A(x_j)$   </p></li></ol><h2 id="多项式的乘法"><a href="#多项式的乘法" class="headerlink" title="多项式的乘法"></a>多项式的乘法</h2><p>这是多项式<strong>最核心</strong>的操作<br>即给定两个多项式$f(x)$和$g(x)$  </p><script type="math/tex; mode=display">f(x)=a_0+a_1x+a_2x^2+\dots+a_nx^{n}</script><script type="math/tex; mode=display">g(x)=b_0+b_1x+b_2x^2+\dots+b_mx^m</script><p>要计算多项式$Q(x)=f(x).g(x):$   </p><script type="math/tex; mode=display">Q(x)=\sum_{i=0}^n\sum_{j=0}^ma_ib_jx_{i+j}=c_0+c_1x+\dots+c_{n+m}x^{n+m}</script><p>常规系数表达的计算是$O(n^2)$的,可以通过快速傅里叶变换在$O(nlogn)$下计算</p><h2 id="多项式的逆元"><a href="#多项式的逆元" class="headerlink" title="多项式的逆元"></a>多项式的逆元</h2><p>对于多项式$f(x)$,若存在$g(x)$满足:  </p><script type="math/tex; mode=display">f(x)g(x)\equiv1 \ (mod \ x^n)</script><script type="math/tex; mode=display">degree(x) \leq degree(f)</script><p>则称$g(x)$为$f(x)$在模$x^n$下的逆元,记作$f^{-1}(x)$  </p><h2 id="多项式的余数和商"><a href="#多项式的余数和商" class="headerlink" title="多项式的余数和商"></a>多项式的余数和商</h2><p>对于多项式$f(x),g(x)$ ,存在<strong>唯一</strong>的$Q(x)$满足:  </p><script type="math/tex; mode=display">f(x)=Q(x)g(x)+R(x)</script><script type="math/tex; mode=display">degree(Q)=degree(f)-degree(g)</script><script type="math/tex; mode=display">degree(R) < degree(g)</script><p>则称$Q(x)$为$f(x)$除$g(x)$的商,$R(x)$为$f(x)$除$g(x)$的余数.亦可记作  </p><script type="math/tex; mode=display">f(x)\equiv R(x) \ (mod \ g(x))</script><h2 id="多项式的对数函数与指数函数"><a href="#多项式的对数函数与指数函数" class="headerlink" title="多项式的对数函数与指数函数"></a>多项式的对数函数与指数函数</h2><ol><li><p>对数<br>对于一个多项式 $f(x),$ 可以将其对数函数看作其与麦克劳林级数的复合:</p><script type="math/tex; mode=display">\begin{aligned}\ln (1-f(x)) &=-\sum_{i=1}^{+\infty} \frac{f^{i}(x)}{i} \\\ln (1+f(x))=& \sum_{i=1}^{+\infty} \frac{(-1)^{i-1} f^{i}(x)}{i}\end{aligned}</script><p>注意这里常数项必须为$1$,也就是说求对数的多项式必须满足 $A(x)=1+\sum_{i=1}^{\infty} a_{i} z^{i}$ 。</p></li><li><p>多项式exp<br>其指数函数同样可以这样定义：</p><script type="math/tex; mode=display">\exp f(x)=e^{f(x)}=\sum_{i=0}^{+\infty} \frac{f^{i}(x)}{i !}</script><p>看到这种 $e^{A(x)}$ 的指数形式显然非常不好处理, 于是采用等式两边同时 $\ln$ 的方式。设 $F(x)=e^{f(x)},$ 则有 $\ln F(x)-f(x) \equiv 0 \quad\left(\bmod x^{n}\right)$ 。构造函数<br>$G(F(x))=\ln F(x)-f(x),$ 牛顿迭代即可。  </p></li><li><p>多项式的$k$次幂  </p><p>注意这里的$k$可以是一个实数,对于$k$的整数部分显然可以直接用快速幂优化,而对于$k$的小数部分,我们可以运用$A^k(x)=e^{k  ln A(x)}$进行求解.事实上当 $A(x)$的常数项不为$1$的时候我们是可以进行这样的运算的,可以直接把$C^{-1}$乘到前面去 $\left(C^{-1}\right.$ 为 $A(x)$ 的常数项的逆$)$，于是可以用 $A^{k}(x)=C^{k}\left(C^{-1} A\right)^{k}(x)=C^{k} e^{k \ln \left(C^{-1} A(x)\right)}$ 来进行求解。但是注意到如果仅仅是求In的<br>话是不能乘上逆元的, 因为把 $\ln \left(C^{-1} A(x)\right)$ 拆开来之后变成了 $\ln C^{-1}+\ln A(x),$ 而<br>$\ln C^{-1}$ 本身就是没有定义的。</p></li></ol><h3 id="多项式的对数一般求法"><a href="#多项式的对数一般求法" class="headerlink" title="多项式的对数一般求法"></a>多项式的对数一般求法</h3><p>我们设$f(x)$是一个平静的多项式,我们要求$ln[f(x)]$<br>则我们设$g(x)=ln[f(x)]$,那么$g^{\prime}(x)=\frac{f^{\prime}(x)}{f(x)}$,$\ln g(x)=\int \frac{g^{\prime}(x)}{g(x)} \mathrm{d} x$</p><h3 id="麦克劳林级数"><a href="#麦克劳林级数" class="headerlink" title="麦克劳林级数"></a>麦克劳林级数</h3><ol><li>基本介绍:<br>对于一个给定的函数 $f(x),$ 如果能找到一个幂级数 $\sum_{n=0}^{\infty} a_{n} x^{n},$ 使  <script type="math/tex; mode=display">f(x)=\sum_{n=0}^{\infty} a_{n} x^{n}=a_{0}+a_{1} x+a_{2} x^{2}+\ldots+a_{n} x^{n}+\ldots(-R<x<R) \ (1)</script>成立，则称$f(x)$可展开成$x$的幂级数。  <script type="math/tex; mode=display">\begin{array}{c}f^{\prime}(x)=a_{1}+2 a_{2} x+3 a_{3} x^{2}+\ldots+n a_{n} x^{n-1}+\ldots \\f^{\prime \prime}(x)=2 a_{2}+3 \times 2 a_{3} x+\ldots+n(n-1) a_{n} x^{n-2}+\ldots \\f^{(n)}(x)=n ! a_{n}+(n+1) ! a_{n+1} x+\frac{(n+2) !}{2} a_{n+2} x^{2}+\ldots\end{array}</script>把$x=0$代入式$(1)$及上述各式，得<script type="math/tex; mode=display">f(0)=a_{0}, f^{\prime}(0)=a_{1}, f^{\prime \prime}(0)=2 ! a_{2}, \ldots, f^{(n)}(0)=n ! a_{n}, \ldots</script>于是<script type="math/tex; mode=display">a_{0}=f(0), a_{1}=\frac{f^{\prime}(0)}{1 !}, a_{2}=\frac{f^{\prime \prime}(0)}{2 !}, \ldots, a_{n}=\frac{f^{(n)}(0)}{n !}, \ldots</script>把它们代回式$(1)$，得<script type="math/tex; mode=display">f(x)=f(0)+\frac{f^{\prime}(0)}{1 !} x+\frac{f^{\prime \prime}(0)}{2 !} x^{2}+\ldots+\frac{f^{(n)}(0)}{n !} x^{n}+\ldots(-R<x<R)\ (2)</script>通常称式$(2)$为$f(x)$的麦克劳林展开式或$f(x)$在$x=0$处的幂级数展开式。式$(2)$中等号右端的级数称为$f(x)$的麦克劳林级数或$f(x)$展开成$x$的幂级数。<br>可见,当$a_n=\frac{1}{n!}f^{(n)}(0)$求得系数的幂级数在它的收敛域内的和函数就是$f(x)$  </li><li><p>麦克劳林级数展开的条件及方法  </p><p>定理$1$:<br>设函数$f(x)$的麦克劳林级数的收敛半径$R&gt;0$，当$n→∞$时，如果函数$f(x)$在任一固定点$x$处的$n$阶导数$f^{(n)}(x)$有界，则函数$f(x)$在收敛区间$(-R，R)$内能展开成麦克劳林级数.即</p><script type="math/tex; mode=display">f(x)=\sum_{n=0}^{\infty} \frac{f^{(n)}(0)}{n !} x^{n}(-R<x<R)</script><p>把函数$f(x)$展开成幂级数，有直接展开法和间接展开法  </p><h4 id="直接展开法"><a href="#直接展开法" class="headerlink" title="直接展开法"></a>直接展开法</h4><p>利用麦克劳林级数公式将函数$f(x)$展开成$x$的幂级数的方法，称为直接展开法。步骤可归纳为：    </p><ol><li>求出 $f(x)$ 的各阶导数 $f^{\prime}(x), f^{\prime \prime}(x), \ldots, f^{(n)}(x), \ldots,$ 令 $x=0$ 得 $f(0), f^{\prime}(0), f^{\prime \prime}(0), \ldots, f^{(n)}(0), \ldots$  </li><li>写出$f(x)$的麦克劳林级数并求出收敛半径$R$<script type="math/tex; mode=display">f(0)+\frac{f^{\prime}(0)}{1 !} x+\frac{f^{\prime \prime}(0)}{2 !} x^{2}+\ldots+\frac{f^{(n)}(0)}{n !} x^{n}+\ldots</script></li></ol><h4 id="间接展开法"><a href="#间接展开法" class="headerlink" title="间接展开法"></a>间接展开法</h4><p>利用麦克劳林级数展开函数，需要求高阶导数，比较麻烦，如果能利用已知函数的展开式，根据幂级数在收敛域内的性质，将所给的函数展开成幂级数，这种方法称为间接展开法  </p></li></ol><h2 id="多项式的多点求值和插值"><a href="#多项式的多点求值和插值" class="headerlink" title="多项式的多点求值和插值"></a>多项式的多点求值和插值</h2><p>多项式的多点求值 $(Multi-point evaluation)$ 即给出一个多项式 $f(x)$ 和 $n$ 个点 $x_{1}, x_{2}, \ldots, x_{n}$ 求</p><script type="math/tex; mode=display">f\left(x_{1}\right), f\left(x_{2}\right), \ldots, f\left(x_{n}\right)</script><p>多项式的插值 $(Interpolation)$ 即给出 $n+1$ 个点</p><script type="math/tex; mode=display">\{\left(x_{0}, y_{0}\right),\left(x_{1}, y_{1}\right), \ldots,\left(x_{n}, y_{n}\right)\}</script><p>求一个 $n$ 次多项式 $f(x)$ 使得这 $n+1$ 个点都在 $f(x)$ 上。<br>这两种操作的实质就是将多项式在 系数表示 和 点值表示间转化。</p><h1 id="拉格朗日插值"><a href="#拉格朗日插值" class="headerlink" title="拉格朗日插值"></a>拉格朗日插值</h1><p><a href="https://www.luogu.com.cn/problem/P4781" target="_blank" rel="noopener">这里是题目传送门</a>  </p><h2 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h2><p>给出$n$个点$P(x_i,y_i)$,将过这$n$个点的最多$n-1$次多项式记为$f(x)$,求$f(k)$的值.  </p><h2 id="方法1-牛顿插值法"><a href="#方法1-牛顿插值法" class="headerlink" title="方法1:牛顿插值法"></a>方法1:牛顿插值法</h2><ol><li><p>差商的定义：<br>函数$f(x)$在两个互异点$x_i,x_j$处的一阶差商定义为：</p><script type="math/tex; mode=display">f\left[x_{i}, x_{j}\right]=\frac{f\left(x_{i}\right)-f\left(x_{j}\right)}{x_{i}-x_{j}}\left(i \neq j, x_{i} \neq x_{j}\right)</script><p>二阶差商:  </p><script type="math/tex; mode=display">f\left[x_{i}, x_{j}, x_{k}\right]=\frac{f\left[x_{i}, x_{j}\right]-f\left[x_{j}, x_{k}\right]}{x_{i}-x_{k}}(i \neq k)</script></li></ol><p>   $k+1$阶差商:  </p><script type="math/tex; mode=display">   \begin{aligned}   f\left[x_{0}, \ldots, x_{k+1}\right]=\frac{f\left[x_{0}, x_{1}, \ldots x_{k}\right]-f\left[x_{1}, \ldots, x_{k}, x_{k+1}\right]}{x_{0}-x_{k+1}}=\frac{f\left[x_{0}, \ldots, x_{k-1}, x_{k}\right]-f\left[x_{0}, \ldots, x_{k-1}, x_{k+1}\right]}{x_{k}-x_{k+1}}   \end{aligned}</script><ol><li><p>差商的性质  </p><p>(<a href="https://blog.csdn.net/littlely_ll/article/details/71107092" target="_blank" rel="noopener">参考连接</a>)  </p><ol><li>$k$阶差商可以表示为函数值$f(x_0),f(x_1),\dots,f(x_k)$的线性组合,即  <script type="math/tex; mode=display">f[x_0,x_1,\dots,x_k]=\sum_{j=0}^{k} \frac{f\left(x_{j}\right)}{\prod_{i=0,i\not ={j}}^{k}\left(x_{j}-x_{i}\right)}</script>差商具有对称性,即差商与节点的排列顺序无关.  </li><li><p>若函数$f(x)$在包含节点区间$[a,b]$上存在$k$ 阶导数,则$k$阶差商与导数的关系为  </p><script type="math/tex; mode=display">f[x_0,x_1,\dots,x_k]=\frac{f^{(k)}(\xi)}{k!},\xi \in [a,b]</script><p>即$k$次多项式的$k$阶差商为常数,低于$k$次多项式的差商为$0$(推了一会柿子之后发现对于多项式$A(x)=a_0+a_1x^1+\dots+a_kx^k$,他的$k$阶差商就是$a_k$)  </p></li></ol></li><li><p>牛顿插值多项式  </p><ol><li>牛顿插值多项式的推导  <script type="math/tex; mode=display">f[x,x_0]=\frac{f(x)-f(x_0)}{x-x_0}\Rightarrow f(x)=f\left(x_{0}\right)+f\left[x, x_{0}\right]\left(x-x_{0}\right) \ (a)</script><script type="math/tex; mode=display">f[x,x_0,x_1]=\frac{f[x,x_0]-f[x_0,x_1]}{x-x_1}\Rightarrow f[x,x_0]=f[x_0,x_1]+f[x,x_0,x_1](x-x_1) \ (b)</script><script type="math/tex; mode=display">f[x,x_0,x_1,x_2] = \frac{f[x,x_0,x_1]-f[x_0,x_1,x_2]}{x-x_2}\Rightarrow f[x,x_0,x_1]=f[x_0,x_1,x_2]+f[x,x_0,x_1,x_2](x-x_2) \ (c)</script><script type="math/tex; mode=display">\dots</script><script type="math/tex; mode=display">f[x,x_0,\dots,x_n]=\frac{f[x,x_0,\dots,x_{n-1}]-f[x_0,x_1,\dots,x_n]}{x-x_n}\Rightarrow f[x,x_0,\dots,x_{n-1}]=f[x_0,x_1,\dots,x_n]+f[x,x_0,x_1,\dots,x_n](x-x_n) \ (d)</script>然后我们由$a,b,c,d$柿子可以得到  <script type="math/tex; mode=display">f(x)=f\left(x_{0}\right)+f\left[x, x_{0}\right]\left(x-x_{0}\right)</script><script type="math/tex; mode=display">f[x,x_0]=f[x_0,x_1]+f[x,x_0,x_1](x-x_1)</script><script type="math/tex; mode=display">f[x,x_0,x_1]=f[x_0,x_1,x_2]+f[x,x_0,x_1,x_2](x-x_2)</script><script type="math/tex; mode=display">\dots</script><script type="math/tex; mode=display">f[x,x_0,\dots,x_{n-1}]=f[x_0,x_1,\dots,x_n]+f[x,x_0,x_1,\dots,x_n](x-x_n)</script>我们从上到下把柿子分别标为$(1),(2),\dots,(n)$柿,然后我们发现  <script type="math/tex; mode=display">(1)+(x-x_0) \times (2) +(x-x_0) \times (x-x_1) \times ( 3 ) + \dots + (x-x_0)\times \dots \times (x-x_{n-1}) \times (n + 1)</script><script type="math/tex; mode=display">\Rightarrow f(x)=f(x_0)+f[x_0,x_1](x-x_0)+f[x_0,x_1,x_2](x-x_0)(x-x_1)+\dots+f[x_0,\dots,x_n](x-x_0)\dots(x-x_{n-1})</script><script type="math/tex; mode=display">+f\left[x, x_{0}, \ldots, x_{n}\right]\left(x-x_{0}\right) \ldots\left(x-x_{n-1}\right)\left(x-x_{n}\right)</script>然后我们把这个大柿子的上边的部分称为牛顿插值公式$N_n(x)$,下边的部分称为插值余项$R_n(x)$(懒得写latex了直接扔图了)<br><img src="https://picbeddd.oss-cn-qingdao.aliyuncs.com/img/1e37ef766fec2a86f6d42d8cffd06ff4.png" alt="1e37ef766fec2a86f6d42d8cffd06ff4">   </li><li>求值<br>说了这么多,我们来考虑怎么使用这个玩意求多项式的插值.我们发现,对于给定的$n$个点,我们可以在$O(n^2)$的复杂度内递推出他们的差商.而对于求值来说,我们发现也可以在$O(n^2)$的时间复杂度内求出.即首先要递推出$(x-x_0)\times(x-x_1)\times \dots \times (x-x_n)$然后再用我们之前预处理的差商相乘再求和即可.  </li><li>代码  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> HA 998244353</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> count , num;</span><br><span class="line"><span class="keyword">int</span> dataX[<span class="number">2005</span>];</span><br><span class="line"><span class="keyword">int</span> lovivd[<span class="number">2005</span>][<span class="number">2005</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ksm</span> <span class="params">( <span class="keyword">int</span> x , <span class="keyword">int</span> y )</span> </span>&#123;</span><br><span class="line"> <span class="keyword">long</span> <span class="keyword">long</span> tmp = <span class="number">1</span>;</span><br><span class="line"> <span class="keyword">while</span> ( y ) &#123;</span><br><span class="line">  <span class="keyword">if</span> ( y &amp; <span class="number">1</span> ) </span><br><span class="line">   tmp = <span class="number">1l</span>l * tmp * x % HA;</span><br><span class="line">     x = <span class="number">1l</span>l * x * x % HA;</span><br><span class="line">     y &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> tmp % HA;</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">   <span class="keyword">double</span> x , y;</span><br><span class="line">   <span class="built_in">cin</span> &gt;&gt; count &gt;&gt; num;</span><br><span class="line">   <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; count ; i++ ) &#123;</span><br><span class="line">      <span class="built_in">cin</span> &gt;&gt; x &gt;&gt; y;</span><br><span class="line">      dataX[i] = x;</span><br><span class="line">      lovivd[i][<span class="number">0</span>] = y;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pre</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">   <span class="keyword">int</span> dis = <span class="number">1</span>;</span><br><span class="line">   <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; count ; i++ ) &#123;</span><br><span class="line">      <span class="keyword">for</span> ( <span class="keyword">int</span> j = i ; j &lt; count ; j++ ) &#123;</span><br><span class="line">         <span class="keyword">int</span> tmp = ( ( lovivd[j + <span class="number">1</span>][i] - lovivd[j][i]  )  * ksm ( dataX[j+<span class="number">1</span>] - dataX[j + <span class="number">1</span> - dis] , HA - <span class="number">2</span> ) )%HA;</span><br><span class="line">         lovivd[j + <span class="number">1</span>][i + <span class="number">1</span>] = tmp;</span><br><span class="line">      &#125;</span><br><span class="line">      dis += <span class="number">1</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">work</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   <span class="keyword">long</span> <span class="keyword">long</span> calcValue = <span class="number">0</span>,temp = <span class="number">1</span>;</span><br><span class="line">   <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; count ; i++ ) &#123;</span><br><span class="line">      temp = <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">for</span> ( <span class="keyword">int</span> j = <span class="number">0</span> ; j &lt; i ; j++ )</span><br><span class="line">         <span class="comment">//计算(X-X0)*(X-X1).....*(X-Xn-1)</span></span><br><span class="line">         temp = <span class="number">1l</span>l * temp * ( num - dataX[j] + HA ) % HA;</span><br><span class="line">      <span class="comment">//计算f(X0,X1,....,Xn)*(X-X0)*(X-X1).....*(X-Xn-1)  </span></span><br><span class="line">      temp = <span class="number">1l</span>l * temp % HA * lovivd[i][i] % HA;  </span><br><span class="line">      <span class="comment">//计算f(X0,X1,....,Xn)*(X-X0)*(X-X1).....*(X-Xn-1)的和</span></span><br><span class="line">      calcValue = ( calcValue + temp + HA ) % HA;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> calcValue;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">   init();</span><br><span class="line">   pre();</span><br><span class="line">   <span class="built_in">cout</span> &lt;&lt; work () &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ol><h2 id="方法2-待定系数法"><a href="#方法2-待定系数法" class="headerlink" title="方法2:待定系数法"></a>方法2:待定系数法</h2><h1 id="快速傅里叶变换-FFT"><a href="#快速傅里叶变换-FFT" class="headerlink" title="快速傅里叶变换(FFT)"></a>快速傅里叶变换(FFT)</h1><blockquote class="blockquote-center">因为知道了自己是多么的菜,所以才要更加努力去追求那个永远也不可能实现的梦想</blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;开始跳楼了&lt;/p&gt;
    
    </summary>
    
    
      <category term="Algorithm" scheme="http://krrrr.top/%E5%88%86%E7%B1%BB/Algorithm/"/>
    
    
      <category term="math" scheme="http://krrrr.top/%E6%A0%87%E7%AD%BE/math/"/>
    
  </entry>
  
  <entry>
    <title>博弈论训练</title>
    <link href="http://krrrr.top/2020/10/22/%E5%8D%9A%E5%BC%88%E8%AE%BA%E8%AE%AD%E7%BB%83/"/>
    <id>http://krrrr.top/2020/10/22/博弈论训练/</id>
    <published>2020-10-22T04:12:33.000Z</published>
    <updated>2020-11-02T08:12:56.992Z</updated>
    
    <content type="html"><![CDATA[<p>感觉更多的还是要靠思维….<br><a id="more"></a></p><blockquote class="blockquote-center">因为知道了自己是多么的菜,所以才要更加努力去追求那个永远也不可能实现的梦想</blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;感觉更多的还是要靠思维….&lt;br&gt;
    
    </summary>
    
    
      <category term="Algorithm" scheme="http://krrrr.top/%E5%88%86%E7%B1%BB/Algorithm/"/>
    
    
      <category term="博弈论" scheme="http://krrrr.top/%E6%A0%87%E7%AD%BE/%E5%8D%9A%E5%BC%88%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>数分训练</title>
    <link href="http://krrrr.top/2020/10/19/%E6%95%B0%E5%88%86%E8%AE%AD%E7%BB%83/"/>
    <id>http://krrrr.top/2020/10/19/数分训练/</id>
    <published>2020-10-19T13:15:44.000Z</published>
    <updated>2020-10-19T13:29:37.180Z</updated>
    
    <content type="html"><![CDATA[<p>啥都不会啊QAQ<br><a id="more"></a></p><h1 id="1-实数集与函数"><a href="#1-实数集与函数" class="headerlink" title="1.实数集与函数"></a>1.实数集与函数</h1><h2 id="1-实数"><a href="#1-实数" class="headerlink" title="1.实数"></a>1.实数</h2><h3 id="1-1-1"><a href="#1-1-1" class="headerlink" title="1.1.1"></a>1.1.1</h3><p>设$a,b,c \in R^+$,证明$|\sqrt{a^2+b^2} - \sqrt{a^2+c^2}| \leq |b - c|$</p><p> 证明:首先两边同时乘以$|\sqrt{a^2+b^2}+\sqrt{a^2+c^2}|$后有  </p><script type="math/tex; mode=display">|a^2+b^2-a^2-c^2| \leq |b - c| \times |\sqrt{a^2+b^2}+\sqrt{a^2+c^2}|</script><p>化简之后可以得到  </p><script type="math/tex; mode=display">|b + c| \leq |\sqrt{a^2+b^2}+\sqrt{a^2+c^2}|</script><p>又$|b + c| \leq |b| + |c|$ ,则只需证明$|b| + |c| \leq |\sqrt{a^2+b^2}+\sqrt{a^2+c^2}|$</p><p>又$\sqrt{x}$显然大于$0$,则$\sqrt{a^2+b^2}$显然大于$|b|$,同理,$\sqrt{a^2+c^2}$显然大于$|c|$  </p><p>得证.</p><p>$QED$  </p><p>下面我们来讨论这个柿子的几何意义 </p><p>我们将这个柿子做一个简简单单的变换  </p><script type="math/tex; mode=display">\sqrt{a^2+b^2} = \sqrt{(a-0)^2+(b-0)^2 }</script><p>即这个柿子可以看成点$(a,b)$到原点的距离,同理,后边的那个柿子可以看成点$(a,c)$到原点的距离.那么那个大柿子就可以看作两点到原点距离之差,而我们又发现这两点之间的距离就等于$|b-c|$.而这两个点与原点又可以构成三角形.所以几何意义显然</p><p>三角形两边之差小于第三边.</p><h3 id="1-1-2"><a href="#1-1-2" class="headerlink" title="1.1.2"></a>1.1.2</h3><p><del>不会了xd</del></p><blockquote class="blockquote-center">因为知道了自己是多么的菜,所以才要更加努力去追求那个永远也不可能实现的梦想</blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;啥都不会啊QAQ&lt;br&gt;
    
    </summary>
    
    
      <category term="数学" scheme="http://krrrr.top/%E5%88%86%E7%B1%BB/%E6%95%B0%E5%AD%A6/"/>
    
    
      <category term="数学" scheme="http://krrrr.top/%E6%A0%87%E7%AD%BE/%E6%95%B0%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>ABC178</title>
    <link href="http://krrrr.top/2020/10/09/ABC178/"/>
    <id>http://krrrr.top/2020/10/09/ABC178/</id>
    <published>2020-10-09T11:18:59.000Z</published>
    <updated>2020-10-09T11:32:34.804Z</updated>
    
    <content type="html"><![CDATA[<p>ABC只会E人从来都是笑着面对生活</p><a id="more"></a><p>D.Redistribution</p><blockquote class="blockquote-center">因为知道了自己是多么的菜,所以才要更加努力去追求那个永远也不可能实现的梦想</blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ABC只会E人从来都是笑着面对生活&lt;/p&gt;
    
    </summary>
    
    
      <category term="ACM" scheme="http://krrrr.top/%E5%88%86%E7%B1%BB/ACM/"/>
    
    
      <category term="题解" scheme="http://krrrr.top/%E6%A0%87%E7%AD%BE/%E9%A2%98%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>ABC179</title>
    <link href="http://krrrr.top/2020/10/08/ARC179/"/>
    <id>http://krrrr.top/2020/10/08/ARC179/</id>
    <published>2020-10-08T04:36:17.000Z</published>
    <updated>2020-10-09T10:53:14.138Z</updated>
    
    <content type="html"><![CDATA[<p>既然是ABC就只看DEF了….</p><a id="more"></a><p>D.- Leaping Tak</p><p>我们用推的方法可以发现我们对于每个位置$i$,可以枚举每个$i$能到的位置然后$dp$转移.<br>然后发现对于每次转移,等价与将$k$段连续区间的$dp$值加一个相同的数.然后我们最后要的就是$dp_n$.<br>对于这种区间修改单点求值的问题我们显然可以用树状数组来维护.<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> s = <span class="number">0</span> , w = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">char</span> ch = getchar ();</span><br><span class="line">    <span class="keyword">while</span> ( ch &gt; <span class="string">'9'</span> || ch &lt; <span class="string">'0'</span> ) &#123; <span class="keyword">if</span> ( ch == <span class="string">'-'</span> ) w = <span class="number">-1</span>; ch = getchar ();&#125;</span><br><span class="line">    <span class="keyword">while</span> ( ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span> ) &#123; s = s * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar ();&#125;</span><br><span class="line">    <span class="keyword">return</span> s * w;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> HA = <span class="number">998244353</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n , k;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> tree[N];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Seq</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> ll , rr;</span><br><span class="line">&#125; se[<span class="number">15</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">lowbit</span> <span class="params">( <span class="keyword">int</span> x )</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x &amp; -x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span> <span class="params">( <span class="keyword">int</span> pos , <span class="keyword">int</span> v )</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> ( pos &lt;= n ) &#123;</span><br><span class="line">        tree[pos] = ( tree[pos] + v + HA ) % HA;</span><br><span class="line">        pos += lowbit ( pos );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="title">query</span> <span class="params">( <span class="keyword">int</span> pos )</span> </span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> tmp = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> ( pos ) &#123;</span><br><span class="line">        tmp = ( tmp + tree[pos] + HA ) % HA;</span><br><span class="line">        pos -= lowbit ( pos );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> tmp % HA;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">( <span class="keyword">void</span> )</span> </span>&#123;</span><br><span class="line">    n = read () , k = read ();</span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= k ; i++ ) &#123;</span><br><span class="line">        se[i].ll = read ();</span><br><span class="line">        se[i].rr = read ();</span><br><span class="line">    &#125;</span><br><span class="line">    tree[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= n ; i++ ) &#123;</span><br><span class="line">        <span class="keyword">for</span> ( <span class="keyword">int</span> j = <span class="number">1</span> ; j &lt;= k ; j++ ) &#123;</span><br><span class="line">            <span class="keyword">int</span> l = i + se[j].ll , r = i + se[j].rr;</span><br><span class="line">            add ( l , query ( i ) );</span><br><span class="line">            add ( r + <span class="number">1</span> , -query ( i ) );</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// for ( int i = 1 ; i &lt;= n ; i++ ) </span></span><br><span class="line">    <span class="comment">//     printf ( "%d " , tree[i] );</span></span><br><span class="line">    <span class="built_in">printf</span> ( <span class="string">"%lld\n"</span> , query ( n ) % HA );</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>E.Sequence Sum<br>我们发现$n$的值很大,所以不能直接去算.但是我们发现$M$的值只有$1e5$的级别.所以我们由抽屉原理可知,我们至多只需要枚举$m+1$个数字,就一定可以找到一个和之前重复的数字,而假设我们现在枚举到的重复的位置为$j$,这个数字之前出现过的位置为$i$,那么剩余的数字一定都是位置$i$到位置$j$的数字的重复.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, a, b) for(int i = a; i &lt; (b); ++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> all(x) begin(x), end(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sz(x) (int)(x).size()</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vi;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> ll MX = <span class="number">1e6</span>;</span><br><span class="line"> </span><br><span class="line">ll n, x, m;</span><br><span class="line"><span class="keyword">bool</span> inCycle;</span><br><span class="line"><span class="keyword">int</span> endi, starti, cstart;</span><br><span class="line">ll sum, cycle[MX];</span><br><span class="line"><span class="built_in">set</span>&lt;ll&gt; found;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="number">0</span>)-&gt;sync_with_stdio(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; x &gt;&gt; m;</span><br><span class="line">cycle[<span class="number">0</span>] = x;</span><br><span class="line">found.insert(x);</span><br><span class="line">rep(i, <span class="number">1</span>, MX) &#123;</span><br><span class="line">ll nxt = cycle[i - <span class="number">1</span>] * cycle[i - <span class="number">1</span>] % m;</span><br><span class="line"><span class="keyword">if</span> (found.find(nxt) != found.end()) &#123;</span><br><span class="line">cstart = nxt;</span><br><span class="line">endi = i - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">cycle[i] = nxt;</span><br><span class="line">found.insert(nxt);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">rep(i, <span class="number">0</span>, endi + <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (cycle[i] == cstart) &#123;</span><br><span class="line">starti = i;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (n) &#123;</span><br><span class="line">sum += cycle[i];</span><br><span class="line">--n;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> cycleLen = endi - starti + <span class="number">1</span>;</span><br><span class="line">rep(i, <span class="number">0</span>, cycleLen) </span><br><span class="line">sum += max(<span class="number">0l</span>l, (ll)<span class="built_in">ceil</span>((n - i) / (<span class="keyword">long</span> <span class="keyword">double</span>)cycleLen) * cycle[i + starti]);</span><br><span class="line"> </span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>F. Simplified Reversi </p><p>发现$n$和$q$都是$2 \times 10^5$级别,所以直接模拟显然不太核里…</p><p><img src="https://picbeddd.oss-cn-qingdao.aliyuncs.com/img/1601267501205.jpeg" alt="1601267501205"></p><p>发现每一次操作都最多只会删掉一行最靠左上的部分.我们设现在的最左上方的长宽分别为$c$和$k$.<br>刚开始的时候$c=k=n-2$,我们进行任何一次操作之后黑色棋子的个数都会减掉$n-2$.假设我们进行了$1$操作在坐标为$(1,xx)$的位置,那么我们在(1,xx)以后的位置再进行一次一操作的话,黑色棋子的个数都一定会只减少$n-2$.<br>所以我们对于列的情况,对于刚开始的$n-2$列,我们把这$n-2$列的值都设为$n-2$,表示对这$n-2$列操作时,都会将黑色棋子的个数减少$$n-2$.然后在进行某一次$2$操作时,假设进行的$2$操作是第$yy$行,那么我们发现,从第$yy$行往下的所有白棋子都不会再被$1$操作所染白. 而从左到第一个$1$操作的所有列上再进行$1$操作都会只染白$[2,yy)$这个区间的棋子</p><p>那么解法就很显然了:我们对于行和列,分别去维护$1$和$2$操作能减少的黑色棋子个数即可.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">2e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n,x,y,q,op,k;</span><br><span class="line"><span class="keyword">int</span> r[N],c[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">( <span class="keyword">void</span> )</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;q;</span><br><span class="line">    x=y=n;</span><br><span class="line">    ll ans=(n<span class="number">-2L</span>L)*(n<span class="number">-2L</span>L);</span><br><span class="line">    <span class="keyword">while</span> ( q-- ) &#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;op&gt;&gt;k;</span><br><span class="line">        <span class="keyword">if</span>(op==<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (k &lt; y) &#123;</span><br><span class="line">                ans -= x - <span class="number">2</span>;</span><br><span class="line">                <span class="keyword">while</span> (y &gt; k)</span><br><span class="line">                    c[y--] = x - <span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> </span><br><span class="line">                ans -= c[k];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (k &lt; x) &#123;</span><br><span class="line">                ans -= y - <span class="number">2</span>;</span><br><span class="line">                <span class="keyword">while</span> (x &gt; k)</span><br><span class="line">                    r[x--] = y - <span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                ans -= r[k];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote class="blockquote-center">因为知道了自己是多么的菜,所以才要更加努力去追求那个永远也不可能实现的梦想</blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;既然是ABC就只看DEF了….&lt;/p&gt;
    
    </summary>
    
    
      <category term="ACM" scheme="http://krrrr.top/%E5%88%86%E7%B1%BB/ACM/"/>
    
    
      <category term="题解" scheme="http://krrrr.top/%E6%A0%87%E7%AD%BE/%E9%A2%98%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>209191110模拟赛题解</title>
    <link href="http://krrrr.top/2019/11/11/209191110%E6%A8%A1%E6%8B%9F%E8%B5%9B%E9%A2%98%E8%A7%A3/"/>
    <id>http://krrrr.top/2019/11/11/209191110模拟赛题解/</id>
    <published>2019-11-10T23:33:11.000Z</published>
    <updated>2019-11-11T03:07:03.159Z</updated>
    
    <content type="html"><![CDATA[<p>$FPX$牛逼!</p><a id="more"></a><h3 id="kyouko"><a href="#kyouko" class="headerlink" title="kyouko"></a>kyouko</h3><p>$70$分做法:我们发现我们可以枚举每个数字,然后统计这个数字的$i$次方.然后随便开个$set$去个重之类的就$70$了.<br>而对于$100$分的做法,我们考虑枚举$k$次方中有多少数字在$[1….n]$之内.首先发现这个东西是可以二分的.然后我们就能二分出来对答案有多少贡献.<br>但是发现很显然这个东西会算重复,我们考虑怎么去重,我们发现,如果一个次方数$k$,它有平方因子的话,那么它显然可以不被统计进去,而如果一个数有可以被分解成奇数个数的乘积,那么显然这奇数个数都会把他算进去.<br>而我们发现这个容斥系数就是莫比乌斯函数,所以直接容斥即可.<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> unix</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL <span class="meta-string">"%lld"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL <span class="meta-string">"%I64d"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">mu</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> res=<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> a=<span class="number">2</span>;a*a&lt;=x;a++)</span><br><span class="line"><span class="keyword">if</span> (x%a==<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (x%a==<span class="number">0</span>)&#123;</span><br><span class="line">x/=a;</span><br><span class="line">cnt++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (cnt&gt;<span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">res=-res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (x!=<span class="number">1</span>) res=-res;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">freopen(<span class="string">"kyouko.in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);</span><br><span class="line">freopen(<span class="string">"kyouko.out"</span>,<span class="string">"w"</span>,<span class="built_in">stdout</span>);</span><br><span class="line"><span class="built_in">scanf</span>(LL,&amp;n);</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> ans=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> a=<span class="number">2</span>;;a++)&#123;</span><br><span class="line"><span class="keyword">int</span> l=<span class="number">1</span>,r=<span class="number">1000000001</span>;</span><br><span class="line"><span class="keyword">while</span> (l+<span class="number">1</span>!=r)&#123;</span><br><span class="line"><span class="keyword">int</span> m=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">pow</span>((<span class="keyword">double</span>)m,a)&lt;=(<span class="keyword">double</span>)n) l=m;</span><br><span class="line"><span class="keyword">else</span> r=m;</span><br><span class="line">&#125;</span><br><span class="line">ans+=mu(a)*(l<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">if</span> (l==<span class="number">1</span>) <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(LL <span class="string">"\n"</span>,ans);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="nanami"><a href="#nanami" class="headerlink" title="nanami"></a>nanami</h3><p>发现可以二分这个最小值,然后考虑怎么$check$.我们发现对于我们当前二分的这个$x$,如果有$high_i$小于$x$的话,那么我们为了让这个达到我们二分的值,我们就必须使这个点被浇水浇到$x$那么高.但是因为如果这个点之前没有比$x$小的点的话,为了向后延申更多被浇水浇到的位置,显然从$x$这个位置开始浇水更优.<br>然后我们模拟这个浇水的过程,不难发现如果暴力修改的话那么时间复杂度最坏是$O(n^2)$的,显然不行.但是我们想一下我们要做什么处理,我们要把单点求出一个数,然后进行区间加.显然这是树状数组可以解决的问题.<br>所以我们可以用树状数组来优化这个暴力的过程,时间复杂度为$O(n \times log_2n \times log_2V)$<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span> <span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> s = <span class="number">0</span> , w = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">char</span> ch = getchar ();</span><br><span class="line"><span class="keyword">while</span> ( ch &gt; <span class="string">'9'</span> || ch &lt; <span class="string">'0'</span> ) &#123; <span class="keyword">if</span> ( ch == <span class="string">'-'</span> ) w = <span class="number">-1</span>; ch = getchar ();&#125;</span><br><span class="line"><span class="keyword">while</span> ( ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span> ) &#123; s = s * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar ();&#125;</span><br><span class="line"><span class="keyword">return</span> s * w;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n , m , l;</span><br><span class="line"><span class="keyword">int</span> high[N] , nep[N] , tmp[N];</span><br><span class="line"><span class="keyword">int</span> tree[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">lowbit</span> <span class="params">( <span class="keyword">int</span> x )</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> x &amp; -x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span> <span class="params">( <span class="keyword">int</span> x , <span class="keyword">int</span> pos )</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span> ( pos &lt;= n ) &#123;</span><br><span class="line">tree[pos] += x;</span><br><span class="line">pos += lowbit ( pos );</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">query</span> <span class="params">( <span class="keyword">int</span> pos )</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> ( pos ) &#123;</span><br><span class="line">res += tree[pos];</span><br><span class="line">pos -= lowbit ( pos );</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">check</span> <span class="params">( <span class="keyword">int</span> x )</span> </span>&#123;</span><br><span class="line"><span class="built_in">memset</span> ( nep , <span class="number">0</span> , <span class="keyword">sizeof</span> ( nep ) );</span><br><span class="line"><span class="built_in">memset</span> ( tree , <span class="number">0</span> , <span class="keyword">sizeof</span> ( tree ) );</span><br><span class="line"><span class="keyword">int</span> las = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= n ; i++ ) &#123;</span><br><span class="line">high[i] = tmp[i];</span><br><span class="line">add ( high[i] - las , i );</span><br><span class="line">las = high[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> use = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= n ; i++ ) &#123;</span><br><span class="line"><span class="keyword">int</span> hhh = query ( i );</span><br><span class="line"><span class="keyword">if</span> ( hhh &lt; x ) &#123; </span><br><span class="line">nep[i] = x - hhh;</span><br><span class="line">use += nep[i];</span><br><span class="line"><span class="keyword">if</span> ( use &gt; m ) </span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">add ( nep[i] , i );</span><br><span class="line">add ( -nep[i] , i + l );</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ( use &lt;= m ) </span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span> <span class="params">( <span class="keyword">void</span> )</span> </span>&#123;</span><br><span class="line">freopen ( <span class="string">"nanami.in"</span> , <span class="string">"r"</span> , <span class="built_in">stdin</span> );</span><br><span class="line">freopen ( <span class="string">"nanami.out"</span> , <span class="string">"w"</span> , <span class="built_in">stdout</span> );</span><br><span class="line">n = read () , m = read () , l = read ();</span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= n ; i++ ) &#123;</span><br><span class="line">high[i] = read ();</span><br><span class="line">tmp[i] = high[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> l = <span class="number">0</span> , r = <span class="number">1e9</span> + <span class="number">7</span> , ans;</span><br><span class="line"><span class="keyword">while</span> ( l &lt;= r ) &#123;</span><br><span class="line"><span class="keyword">int</span> mid = ( l + r ) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> ( check ( mid ) ) &#123;</span><br><span class="line">l = mid + <span class="number">1</span>;</span><br><span class="line">ans = mid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">r = mid - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span> ( <span class="string">"%lld\n"</span> , ans );</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="chisa"><a href="#chisa" class="headerlink" title="chisa"></a>chisa</h3><p><del>能直接暴力爆过去的题为什么要想正解</del>.</p><p>首先这道题的正解是从前缀做一遍背包,再从后缀做一遍背包,然后对于不能选物品$i$的情况,我们从$f_{1…..i-1,j}$中取一个$max$再从$g_{i+1….n,j}$中取一个$max$即为答案.<br>但是你看数据范围只有$1000$说明暴力也是可以做的嘛.<br>我们设$ans_{i,j}$表示我们在不用$i$这个物品时,最多用$j$的空间最多能拿多少价值的物品.显然$ans_{i,j}=max(ans_{i,j-1},ff_{i,j}$.其中$ff$是我们在不选择第$i$件物品时,<strong>填满</strong>$j$的空间最多的价值.<br>那么我们直接预处理是跑满$O(n^3)$的.有个小的技巧就是我们发现我们每次不选的物品移动时(假设是$ignore$),那么我们在枚举$i$时不用从$1$开始,直接从$ignore-1$开始即可.这样可以有一个$\frac{1}{2}$的常数.<br>输出优化有奇效.<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ios</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">char</span> <span class="title">gc</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> IN_LEN=<span class="number">1</span>&lt;&lt;<span class="number">18</span>|<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">char</span> buf[IN_LEN],*s,*t;</span><br><span class="line">        <span class="keyword">return</span> (s==t)&amp;&amp;(t=(s=buf)+fread(buf,<span class="number">1</span>,IN_LEN,<span class="built_in">stdin</span>)),s==t?<span class="number">-1</span>:*s++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp&gt; <span class="keyword">inline</span> ios &amp; <span class="keyword">operator</span> &gt;&gt; (_Tp&amp;x)&#123;</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">char</span> ch,sgn; ch = gc(), sgn = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(ch);ch=gc())&#123;<span class="keyword">if</span>(ch==<span class="number">-1</span>)<span class="keyword">return</span> *<span class="keyword">this</span>;sgn|=ch==<span class="string">'-'</span>;&#125;</span><br><span class="line">        <span class="keyword">for</span>(x=<span class="number">0</span>;<span class="built_in">isdigit</span>(ch);ch=gc())x=x*<span class="number">10</span>+(ch^<span class="string">'0'</span>);</span><br><span class="line">        sgn&amp;&amp;(x=-x); <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; io;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1005</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> ff[N][N];</span><br><span class="line"><span class="keyword">int</span> f[N][N] , ans[N][N];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n , m;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> v , w;</span><br><span class="line">&#125; nd[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">writeln</span> <span class="params">( <span class="keyword">int</span> x )</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> ( x / <span class="number">10</span> &gt; <span class="number">0</span> ) </span><br><span class="line">writeln ( x / <span class="number">10</span> );</span><br><span class="line"><span class="keyword">char</span> s = x % <span class="number">10</span> + <span class="string">'0'</span>;</span><br><span class="line"><span class="built_in">putchar</span> ( s );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">( <span class="keyword">void</span> )</span> </span>&#123;</span><br><span class="line">freopen ( <span class="string">"chisa.in"</span> , <span class="string">"r"</span> , <span class="built_in">stdin</span> );</span><br><span class="line">freopen ( <span class="string">"chisa.out"</span> , <span class="string">"w"</span> , <span class="built_in">stdout</span> );</span><br><span class="line">io &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= n ; i++ ) &#123;</span><br><span class="line">io &gt;&gt; nd[i].v &gt;&gt; nd[i].w;</span><br><span class="line"><span class="keyword">int</span> five;</span><br><span class="line">io &gt;&gt; five;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">int</span> ignore = <span class="number">1</span> ; ignore &lt;= n ; ignore++ ) &#123;</span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">int</span> i = max ( <span class="number">1</span> , ignore - <span class="number">1</span> ) ; i &lt;= n ; i++ ) &#123;</span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">int</span> j = <span class="number">0</span> ; j &lt;= <span class="number">1000</span> ; j++ ) &#123;</span><br><span class="line">f[i][j] = f[i - <span class="number">1</span>][j];</span><br><span class="line"><span class="keyword">if</span> ( j - nd[i].v &gt;= <span class="number">0</span> &amp;&amp; i != ignore ) </span><br><span class="line">f[i][j] = max ( f[i][j] , f[i - <span class="number">1</span>][j - nd[i].v] + nd[i].w );</span><br><span class="line">ff[ignore][j] = max ( ff[ignore][j] , f[i][j] );</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= n ; i++ ) </span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">int</span> j = <span class="number">1</span> ; j &lt;= <span class="number">1000</span> ; j++ ) </span><br><span class="line">ans[i][j] = max ( ans[i][j - <span class="number">1</span>] , ff[i][j] );</span><br><span class="line">io &gt;&gt; m;</span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= m ; i++ ) &#123;</span><br><span class="line"><span class="keyword">int</span> vp , MaxV;</span><br><span class="line">io &gt;&gt; vp &gt;&gt; MaxV;</span><br><span class="line">vp++;</span><br><span class="line">writeln ( ans[vp][MaxV] );</span><br><span class="line"><span class="built_in">puts</span> ( <span class="string">""</span> );</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote class="blockquote-center">因为知道了自己是多么的菜,所以才要更加努力去追求那个永远也不可能实现的梦想</blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;$FPX$牛逼!&lt;/p&gt;
    
    </summary>
    
    
      <category term="OI" scheme="http://krrrr.top/%E5%88%86%E7%B1%BB/OI/"/>
    
    
      <category term="模拟赛题解" scheme="http://krrrr.top/%E6%A0%87%E7%AD%BE/%E6%A8%A1%E6%8B%9F%E8%B5%9B%E9%A2%98%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>树形DP小结</title>
    <link href="http://krrrr.top/2019/11/10/%E6%A0%91%E5%BD%A2DP%E5%B0%8F%E7%BB%93/"/>
    <id>http://krrrr.top/2019/11/10/树形DP小结/</id>
    <published>2019-11-10T02:29:35.000Z</published>
    <updated>2019-11-11T02:45:01.190Z</updated>
    
    <content type="html"><![CDATA[<p>我真的菜死了啊/(ㄒoㄒ)/~~<br><a id="more"></a></p><h3 id="没有上司的舞会"><a href="#没有上司的舞会" class="headerlink" title="没有上司的舞会"></a>没有上司的舞会</h3><p><a href="https://www.luogu.org/problem/P1352" target="_blank" rel="noopener">传送门</a><br>首先一个显然的状态就是一个节点和他的父亲节点不能同时被选中,又因为我们进行树形$DP$的时候合并是以每个点为根的子树合并,所以只能从下向上合并.<br>所以我们设$f_{i,j}$表示以$i$为根的节点,其中$j$代表这个节点的子节点选了/没选时,最多的欢乐值是多少.<br>那么转移的时候,我们枚举每个非叶节点的子节点$k$,然后转移比较显然.<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MP make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> max(a,b) (a&gt;b)?a:b</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> F(i,a,b) for(int i=a;i&lt;=b;i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> D(i,a,b) for(int i=a;i&gt;=b;i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PB push_back</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span> <span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> s = <span class="number">0</span> , w = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">char</span> ch = getchar ();</span><br><span class="line"><span class="keyword">while</span> ( ch &gt; <span class="string">'9'</span> || ch &lt; <span class="string">'0'</span> ) &#123; <span class="keyword">if</span> ( ch == <span class="string">'-'</span> ) w = <span class="number">-1</span>; ch = getchar ();&#125;</span><br><span class="line"><span class="keyword">while</span> ( ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span> ) &#123; s = s * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar ();&#125;</span><br><span class="line"><span class="keyword">return</span> s * w;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">6005</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n , t , root;</span><br><span class="line"><span class="keyword">int</span> val[N] , degree[N] , head[N];</span><br><span class="line"><span class="keyword">int</span> f[N][<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> to;</span><br><span class="line"><span class="keyword">int</span> next;</span><br><span class="line">&#125;e[N &lt;&lt; <span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span> <span class="params">( <span class="keyword">int</span> x , <span class="keyword">int</span> y )</span> </span>&#123;</span><br><span class="line">e[++t].to = y;</span><br><span class="line">e[t].next = head[x];</span><br><span class="line">head[x] = t;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span> <span class="params">( <span class="keyword">int</span> x , <span class="keyword">int</span> fa )</span> </span>&#123;</span><br><span class="line">f[x][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">f[x][<span class="number">1</span>] = val[x];</span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">int</span> i = head[x] ; i ; i = e[i].next ) &#123;</span><br><span class="line"><span class="keyword">int</span> y = e[i].to;</span><br><span class="line"><span class="keyword">if</span> ( y == fa ) </span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">dfs ( y , x );</span><br><span class="line">  f[x][<span class="number">0</span>] += max ( f[y][<span class="number">0</span>] , f[y][<span class="number">1</span>] );</span><br><span class="line">  f[x][<span class="number">1</span>] += f[y][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">( <span class="keyword">void</span> )</span> </span>&#123;</span><br><span class="line">n = read ();</span><br><span class="line">F ( i , <span class="number">1</span> , n ) </span><br><span class="line">val[i] = read ();</span><br><span class="line"><span class="keyword">int</span> x = read () , y = read ();</span><br><span class="line"><span class="keyword">while</span> ( x &amp;&amp; y ) &#123;</span><br><span class="line">add ( y , x );</span><br><span class="line">degree[x]++;</span><br><span class="line">x = read () , y = read (); </span><br><span class="line">&#125;</span><br><span class="line">F ( i , <span class="number">1</span> , n ) </span><br><span class="line"><span class="keyword">if</span> ( !degree[i] ) &#123;</span><br><span class="line">root = i;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">dfs ( root , <span class="number">0</span> );</span><br><span class="line"><span class="built_in">printf</span> ( <span class="string">"%d\n"</span> , max ( f[root][<span class="number">0</span>] , f[root][<span class="number">1</span>] ) );</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="computer"><a href="#computer" class="headerlink" title="computer"></a>computer</h3><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=2196" target="_blank" rel="noopener">传送门</a><br>发现这个东西可以在求直径的时候顺便求出来,所以这道题等价于用$DP$求一遍树的直径…..<br>然后我们来<strong>重点剖析</strong>一下怎么用$DP$的方法去求树的直径.<br>我们设$f_{x,0}$表示在$x$这颗子树中,由$x$向下最长能延申的距离是多少.同时我们再设$f_{x,1}$表示在$x$这颗子树中,由$x$向下走次长的链的长度为多少.<br>但是发现我们还需要解决在$x$的子树中最长的链不经过$x$的情况,所以我们设$f_{x,2}$表示$x$通过它的父亲最长能向上延申多少距离.<br>不难发现,前两个$f$数组可以在一次从下向上的$dfs$中求出,而第三个$f$数组则单独需要一个从上向下的$dfs$求出.<br>那么对于某个$f_{x,2}$,转移方程有$f_{y,2}=max(f_{x,2},f_{y,0}+e_i.date==f_{x,0}?f_{x,1}:f_{x,0})+e_i.date$<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">10005</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n , t;</span><br><span class="line"><span class="keyword">int</span> head[N] , f[N][<span class="number">3</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> to;</span><br><span class="line"><span class="keyword">int</span> date;</span><br><span class="line"><span class="keyword">int</span> next;</span><br><span class="line">&#125;e[N &lt;&lt; <span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span> <span class="params">( <span class="keyword">int</span> x , <span class="keyword">int</span> y , <span class="keyword">int</span> z )</span> </span>&#123;</span><br><span class="line">e[++t].to = y;</span><br><span class="line">e[t].date = z;</span><br><span class="line">e[t].next = head[x];</span><br><span class="line">head[x] = t;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs1</span> <span class="params">( <span class="keyword">int</span> x , <span class="keyword">int</span> fa )</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">int</span> i = head[x] ; i ; i = e[i].next ) &#123;</span><br><span class="line"><span class="keyword">int</span> y = e[i].to;</span><br><span class="line"><span class="keyword">if</span> ( y == fa ) </span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">dfs1 ( y , x );</span><br><span class="line"><span class="keyword">int</span> temp = f[y][<span class="number">0</span>] + e[i].date;</span><br><span class="line"><span class="keyword">if</span> ( temp &gt;= f[x][<span class="number">0</span>] ) &#123;</span><br><span class="line">f[x][<span class="number">1</span>] = f[x][<span class="number">0</span>];</span><br><span class="line">f[x][<span class="number">0</span>] = temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> ( temp &gt; f[x][<span class="number">1</span>] ) </span><br><span class="line">f[x][<span class="number">1</span>] = temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs2</span> <span class="params">( <span class="keyword">int</span> x , <span class="keyword">int</span> fa )</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">int</span> i = head[x] ; i ; i = e[i].next ) &#123;</span><br><span class="line"><span class="keyword">int</span> y = e[i].to;</span><br><span class="line"><span class="keyword">if</span> ( f[x][<span class="number">0</span>] == f[y][<span class="number">0</span>] + e[i].date )</span><br><span class="line">f[y][<span class="number">2</span>] = max ( f[x][<span class="number">2</span>] , f[x][<span class="number">1</span>] ) + e[i].date;</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">f[y][<span class="number">2</span>] = max ( f[x][<span class="number">2</span>] , f[x][<span class="number">0</span>] ) + e[i].date;</span><br><span class="line">dfs2 ( y , x );</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">( <span class="keyword">void</span> )</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span> ( <span class="built_in">scanf</span> ( <span class="string">"%d"</span> , &amp;n ) != EOF ) &#123;</span><br><span class="line">t = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">memset</span> ( f , <span class="number">0</span> , <span class="keyword">sizeof</span> ( f ) );</span><br><span class="line"><span class="built_in">memset</span> ( head , <span class="number">0</span> , <span class="keyword">sizeof</span> ( head ) );</span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">2</span> ; i &lt;= n ; i++ ) &#123;</span><br><span class="line"><span class="keyword">int</span> x , y;</span><br><span class="line"><span class="built_in">scanf</span> ( <span class="string">"%d%d"</span> , &amp;x , &amp;y );</span><br><span class="line">add ( x , i , y );</span><br><span class="line">&#125;</span><br><span class="line">dfs1 ( <span class="number">1</span> , <span class="number">0</span> );</span><br><span class="line">dfs2 ( <span class="number">1</span> , <span class="number">0</span> );</span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= n ; i++ ) </span><br><span class="line"><span class="built_in">printf</span> ( <span class="string">"%d\n"</span> , max ( f[i][<span class="number">0</span>] , f[i][<span class="number">2</span>] ) );</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="最优连通子集"><a href="#最优连通子集" class="headerlink" title="最优连通子集"></a>最优连通子集</h3><p><a href="http://poj.org/problem?id=1192" target="_blank" rel="noopener">传送门</a><br><img src="\img\201911101.png" alt="lok"><br><del>20年前的Noi题目</del><br>题目大意大概为给定一个平面整点集，点与点间在$|x_1-x_2|+|y_1-y_2|=1$时相邻，且形成的图没有回路，每个点有一个可正可负的权值，求最大权和连通子图。<br>有了题目大意,发现就是给你一颗树.让你在这棵树中选择一个联通的点集,使得这个联通的点集的权值最大,求出这个最大值.<br>发现显然是个树形背包嘛,我们设$f_{x,j}$表示在以$x$为根的子树中选/不选$x$这个节点时最大的权值和.然后我们可以直接从下往上转移.我们转移的时候发现,如果$i$这个点被选了,那么对于它所有的子树,如果$f_{y,1}$的值大于$0$,那么答案加上这颗子树一定会更优.而在我们转移$f_{x,0}$时,因为$x$这个节点不能选,所以我们就只能去选择这个节点的某一颗子树作为这个$f$的值.<br>而最后的答案就是$max(f_{root,0},f_{root,1})$.<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1</span>&lt;&lt;<span class="number">28</span>;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x,y,c;</span><br><span class="line">&#125;p[<span class="number">1010</span>];</span><br><span class="line"> </span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; con[<span class="number">1010</span>];</span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">1010</span>][<span class="number">2</span>],mark[<span class="number">1010</span>];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">    mark[v]=<span class="number">1</span>;</span><br><span class="line">    dp[v][<span class="number">0</span>]=<span class="number">0</span>,dp[v][<span class="number">1</span>]=p[v].c;</span><br><span class="line">    <span class="keyword">int</span> j;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;con[v].size();i++)</span><br><span class="line">    <span class="keyword">if</span> (!mark[con[v][i]])&#123;</span><br><span class="line">        j=con[v][i];</span><br><span class="line">        dfs(j);</span><br><span class="line">        dp[v][<span class="number">0</span>]=max(dp[v][<span class="number">0</span>],max(dp[j][<span class="number">0</span>],dp[j][<span class="number">1</span>]));</span><br><span class="line">        <span class="keyword">if</span> (dp[j][<span class="number">1</span>]&gt;<span class="number">0</span>) dp[v][<span class="number">1</span>]+=dp[j][<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">( <span class="keyword">void</span> )</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;p[i].x,&amp;p[i].y,&amp;p[i].c);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;n;j++)</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">abs</span>(p[i].x-p[j].x)+<span class="built_in">abs</span>(p[i].y-p[j].y)==<span class="number">1</span>)&#123;</span><br><span class="line">          con[i].push_back(j);</span><br><span class="line">          con[j].push_back(i);</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,max(dp[<span class="number">0</span>][<span class="number">0</span>],dp[<span class="number">0</span>][<span class="number">1</span>]));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="The-more-The-Better"><a href="#The-more-The-Better" class="headerlink" title="The more, The Better"></a>The more, The Better</h3><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=1561" target="_blank" rel="noopener">传送门</a><br><img src="\img\201911102.png" alt="tm2"><br>简单背包即可….</p><h3 id="选课"><a href="#选课" class="headerlink" title="选课"></a>选课</h3><p><a href="https://www.luogu.org/problem/P2014" target="_blank" rel="noopener">传送门</a><br>首先一个思路就是我们设$f_{i,j,0 \vert 1}$来表示以$i$为根节点的子树中,选择了$j$个物品,其中$i$选/不选时最大的价值.<br>但是我们发现如果$i$不能选,那么$i$这颗子树一定就不能选,第三维没有什么必要,所以我们强制初始时$f_{i,1}=v_i$,然后转移的时候,用类似背包的思路.即枚举容量即可.  </p><script type="math/tex; mode=display">f_{x,j+k}=max(f_{x,j+k},f_{x,j}+f_{y,k})</script><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MP make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> max(a,b) ( a &gt; b ) ? a : b </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> F(i,a,b) for(int i=a;i&lt;=b;i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> D(i,a,b) for(int i=a;i&gt;=b;i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PB push_back</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span> <span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> s = <span class="number">0</span> , w = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">char</span> ch = getchar ();</span><br><span class="line"><span class="keyword">while</span> ( ch &gt; <span class="string">'9'</span> || ch &lt; <span class="string">'0'</span> ) &#123; <span class="keyword">if</span> ( ch == <span class="string">'-'</span> ) w = <span class="number">-1</span>; ch = getchar ();&#125;</span><br><span class="line"><span class="keyword">while</span> ( ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span> ) &#123; s = s * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar ();&#125;</span><br><span class="line"><span class="keyword">return</span> s * w;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">305</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n , m , t;</span><br><span class="line"><span class="keyword">int</span> head[N] , f[N][N] , siz[N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> to;</span><br><span class="line"><span class="keyword">int</span> next;</span><br><span class="line">&#125; e[N &lt;&lt; <span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span> <span class="params">( <span class="keyword">int</span> x , <span class="keyword">int</span> y )</span> </span>&#123;</span><br><span class="line">e[++t].to = y;</span><br><span class="line">e[t].next = head[x];</span><br><span class="line">head[x] = t;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span> <span class="params">( <span class="keyword">int</span> x , <span class="keyword">int</span> fa )</span> </span>&#123;</span><br><span class="line">siz[x] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">int</span> i = head[x] ; i ; i = e[i].next ) &#123;</span><br><span class="line"><span class="keyword">int</span> y = e[i].to;</span><br><span class="line"><span class="keyword">if</span> ( y == fa ) </span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">dfs ( y , x );</span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">int</span> j = siz[x] ; j ; j-- ) </span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">int</span> k = <span class="number">0</span> ; k &lt;= siz[y] ; k++ ) </span><br><span class="line">f[x][j + k] = max ( f[x][j + k] , f[x][j] + f[y][k] );</span><br><span class="line">siz[x] += siz[y];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">( <span class="keyword">void</span> )</span> </span>&#123;</span><br><span class="line">n = read () , m = read ();</span><br><span class="line">F ( i , <span class="number">1</span> , n ) &#123;</span><br><span class="line"><span class="keyword">int</span> fa = read ();</span><br><span class="line">add ( fa , i );</span><br><span class="line">add ( i , fa );</span><br><span class="line">f[i][<span class="number">1</span>] = read ();</span><br><span class="line">&#125;</span><br><span class="line">dfs ( <span class="number">0</span> , <span class="number">-1</span> );</span><br><span class="line"><span class="built_in">printf</span> ( <span class="string">"%d\n"</span> , f[<span class="number">0</span>][m + <span class="number">1</span>] );</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote class="blockquote-center">因为知道了自己是多么的菜,所以才要更加努力去追求那个永远也不可能实现的梦想</blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我真的菜死了啊/(ㄒoㄒ)/~~&lt;br&gt;
    
    </summary>
    
    
      <category term="OI" scheme="http://krrrr.top/%E5%88%86%E7%B1%BB/OI/"/>
    
    
      <category term="DP" scheme="http://krrrr.top/%E6%A0%87%E7%AD%BE/DP/"/>
    
      <category term="树形DP" scheme="http://krrrr.top/%E6%A0%87%E7%AD%BE/%E6%A0%91%E5%BD%A2DP/"/>
    
  </entry>
  
  <entry>
    <title>普及五联测附加赛</title>
    <link href="http://krrrr.top/2019/11/09/%E6%99%AE%E5%8F%8A%E4%BA%94%E8%81%94%E6%B5%8B%E9%99%84%E5%8A%A0%E8%B5%9B/"/>
    <id>http://krrrr.top/2019/11/09/普及五联测附加赛/</id>
    <published>2019-11-09T00:49:26.000Z</published>
    <updated>2019-11-09T01:30:18.712Z</updated>
    
    <content type="html"><![CDATA[<p>版权原因,题面不公开.<br><a id="more"></a></p><h3 id="摆花"><a href="#摆花" class="headerlink" title="摆花"></a>摆花</h3><p>首先一眼看到这道题你会怀疑这是不是普及组$t1$…<br>然后考虑每个区间,你发现对于某两个区间,他们的关系可能是包含/相交/不相交.而对于这三种情况分别验证之后会发现你每次的答案最优的情况下总是最短的区间长度$+1$.<br>然后考虑怎么证明这个东西,<del>你发现它和暴力过拍了就对了</del>.显然,你对于每个区间,我们设这个区间的长度为$i$的话,那么这个区间的$mex$值显然最大就是$i$.而又因为有许多区间.<br>如果我们选择了某个长度较大的区间来放$0…..i-1$的话,那么对于其他的长度小于它的不相交区间显然答案会更小一些.而对于区间包含的情况,可以发现,长度更大的区间的$mex$一定会大于等于长度小的区间的$mex$,而又因为我们要求最小的$mex$最大,所以就要使这个最小的区间的$mex$最大即可.<br>而对于剩下的两个区间相交的情况,发现和不相交的情况没有啥区别.</p><h3 id="打饭"><a href="#打饭" class="headerlink" title="打饭"></a>打饭</h3><p>首先考虑一个贪心,我们把区间按照$mod$ $k$的值分类,然后发现只有同一类的数才会互相有贡献,所以我们把数字从小到大的顺序扔到区间中统计答案.<br>这样会错因为那些数字相对较少的区间不一定会丢进哪些数.而并不是那些最大的数丢进去就更优.而又因为你往一个组里丢的数字,如果排序之后他们的$pos$连续的话,答案会更小,这点是可以贪心的.<br>所以我们考虑$DP$,我们发现,对于两种区间,我们都有一定的数量,而且每一种物品都有一种权值.<br>所以我们显然可以用类似背包的东西来转移,我们设$f_{i,j}$表示两种区间,第一种用了$i$种,第二种用了$j$种时的最小的花费,转移时枚举是把这连续的几个数放到第一个区间内还是第二个区间内即可.</p><blockquote class="blockquote-center">因为知道了自己是多么的菜,所以才要更加努力去追求那个永远也不可能实现的梦想</blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;版权原因,题面不公开.&lt;br&gt;
    
    </summary>
    
    
      <category term="OI" scheme="http://krrrr.top/%E5%88%86%E7%B1%BB/OI/"/>
    
    
      <category term="ZROI" scheme="http://krrrr.top/%E6%A0%87%E7%AD%BE/ZROI/"/>
    
  </entry>
  
  <entry>
    <title>20191107模拟赛题解</title>
    <link href="http://krrrr.top/2019/11/08/20191107%E6%A8%A1%E6%8B%9F%E8%B5%9B%E9%A2%98%E8%A7%A3/"/>
    <id>http://krrrr.top/2019/11/08/20191107模拟赛题解/</id>
    <published>2019-11-08T00:25:20.000Z</published>
    <updated>2019-11-09T00:49:47.912Z</updated>
    
    <content type="html"><![CDATA[<p>德州扑克真好玩.jpg<br><a id="more"></a></p><h3 id="德州扑克"><a href="#德州扑克" class="headerlink" title="德州扑克"></a>德州扑克</h3><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p><del>模拟有啥思路</del>其实可以考虑把所有的手牌的类型开一个桶存起来,然后再从大顺到单牌挨个判断牌型,同牌型比较大小的时候可以考虑把贡献大的乘以一个比较大的数,然后直接比较分数即可.</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span> <span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> s = <span class="number">0</span> , w = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">char</span> ch = getchar ();</span><br><span class="line"><span class="keyword">while</span> ( ch &gt; <span class="string">'9'</span> || ch &lt; <span class="string">'0'</span> ) &#123; <span class="keyword">if</span> ( ch == <span class="string">'-'</span> ) w = <span class="number">-1</span>; ch = getchar ();&#125;</span><br><span class="line"><span class="keyword">while</span> ( ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span> ) &#123; s = s * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar ();&#125;</span><br><span class="line"><span class="keyword">return</span> s * w;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Player</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> id;</span><br><span class="line"><span class="keyword">int</span> point;</span><br><span class="line"><span class="built_in">string</span> name;</span><br><span class="line"><span class="keyword">char</span> card[<span class="number">12</span>];</span><br><span class="line"><span class="keyword">int</span> num[<span class="number">6</span>];</span><br><span class="line"><span class="keyword">int</span> buck[<span class="number">14</span>];</span><br><span class="line">&#125; player[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">FindCard</span> <span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= n ; i++ ) </span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">int</span> j = <span class="number">1</span> ; j &lt;= <span class="number">5</span> ; j++ ) </span><br><span class="line"><span class="built_in">printf</span> ( <span class="string">"%d%c"</span> , player[i].num[j] , j == <span class="number">5</span> ? <span class="string">'\n'</span> : <span class="string">' '</span> );</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">DefHandCard</span> <span class="params">( <span class="keyword">int</span> now )</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> len = <span class="built_in">strlen</span> ( player[now].card + <span class="number">1</span> );</span><br><span class="line"><span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= len ; i++ ) &#123;</span><br><span class="line"><span class="keyword">if</span> ( player[now].card[i] == <span class="string">'0'</span> ) </span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span> ( player[now].card[i] == <span class="string">'1'</span> &amp;&amp; player[now].card[i + <span class="number">1</span>] == <span class="string">'0'</span> )</span><br><span class="line">player[now].num[++cnt] = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> ( player[now].card[i] == <span class="string">'A'</span> ) </span><br><span class="line">player[now].num[++cnt] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> ( player[now].card[i] &gt;= <span class="string">'2'</span> &amp;&amp; player[now].card[i] &lt;= <span class="string">'9'</span> ) </span><br><span class="line">player[now].num[++cnt] = player[now].card[i] - <span class="string">'0'</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> ( player[now].card[i] == <span class="string">'J'</span> ) </span><br><span class="line">player[now].num[++cnt] = <span class="number">11</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> ( player[now].card[i] == <span class="string">'Q'</span> ) </span><br><span class="line">player[now].num[++cnt] = <span class="number">12</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> ( player[now].card[i] == <span class="string">'K'</span> ) </span><br><span class="line">player[now].num[++cnt] = <span class="number">13</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">PreKind</span> <span class="params">( <span class="keyword">int</span> now )</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= <span class="number">5</span> ; i++ ) </span><br><span class="line">player[now].buck[player[now].num[i]]++;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NowPlayer player[now] </span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">FindStraight</span> <span class="params">( <span class="keyword">int</span> now )</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> flag = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= <span class="number">9</span> ; i++ ) </span><br><span class="line"><span class="keyword">if</span> ( NowPlayer.buck[i] &amp;&amp; NowPlayer.buck[i + <span class="number">1</span>] &amp;&amp; NowPlayer.buck[i + <span class="number">2</span>] &amp;&amp; NowPlayer.buck[i + <span class="number">3</span>] &amp;&amp; NowPlayer.buck[i + <span class="number">4</span>] ) &#123;</span><br><span class="line">flag = i + i + <span class="number">1</span> + i + <span class="number">2</span> + i + <span class="number">3</span> + i + <span class="number">4</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ( flag ) </span><br><span class="line"><span class="keyword">return</span> flag;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">FindFour</span> <span class="params">( <span class="keyword">int</span> now )</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> flag = <span class="number">0</span>;</span><br><span class="line">Player tmp = NowPlayer;</span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= <span class="number">13</span> ; i++ ) </span><br><span class="line"><span class="keyword">if</span> ( tmp.buck[i] == <span class="number">4</span> ) &#123;</span><br><span class="line">tmp.buck[i] = <span class="number">0</span>;</span><br><span class="line">flag = i;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ( !flag ) </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">flag *= <span class="number">10000</span>;</span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= <span class="number">13</span> ; i++ ) </span><br><span class="line"><span class="keyword">if</span> ( tmp.buck[i] ) &#123;</span><br><span class="line">flag += i;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> flag;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">FindHouse</span> <span class="params">( <span class="keyword">int</span> now )</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> flag = <span class="number">0</span>;</span><br><span class="line">Player tmp = NowPlayer;</span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= <span class="number">13</span> ; i++ ) </span><br><span class="line"><span class="keyword">if</span> ( tmp.buck[i] == <span class="number">3</span> ) &#123;</span><br><span class="line">tmp.buck[i] = <span class="number">0</span>;</span><br><span class="line">flag = i;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ( !flag ) </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> ff = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= <span class="number">13</span> ; i++ )</span><br><span class="line"><span class="keyword">if</span> ( tmp.buck[i] == <span class="number">2</span> ) &#123;</span><br><span class="line">tmp.buck[i] = <span class="number">0</span>;</span><br><span class="line">ff = i;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ( !ff ) </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> flag * <span class="number">10000</span> + ff;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">FindThree</span> <span class="params">( <span class="keyword">int</span> now )</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> flag = <span class="number">0</span>;</span><br><span class="line">Player tmp = NowPlayer;</span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= <span class="number">13</span> ; i++ ) </span><br><span class="line"><span class="keyword">if</span> ( tmp.buck[i] == <span class="number">3</span> ) &#123;</span><br><span class="line">tmp.buck[i] = <span class="number">0</span>;</span><br><span class="line">flag = i;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ( !flag ) </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">flag *= <span class="number">10000</span>;</span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= <span class="number">13</span> ; i++ ) </span><br><span class="line"><span class="keyword">if</span> ( tmp.buck[i] ) </span><br><span class="line">flag += i;</span><br><span class="line"><span class="keyword">return</span> flag;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">FindTwo</span> <span class="params">( <span class="keyword">int</span> now )</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> flag[<span class="number">3</span>] , num = <span class="number">0</span>;</span><br><span class="line">Player tmp = NowPlayer;</span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= <span class="number">13</span> ; i++ ) </span><br><span class="line"><span class="keyword">if</span> ( tmp.buck[i] == <span class="number">2</span> ) &#123;</span><br><span class="line">tmp.buck[i] = <span class="number">0</span>;</span><br><span class="line">flag[++num] = i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ( num != <span class="number">2</span> ) </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> ans = max ( flag[<span class="number">1</span>] , flag[<span class="number">2</span>] ) * <span class="number">50000</span> + min ( flag[<span class="number">1</span>] , flag[<span class="number">2</span>] ) * <span class="number">200</span>;</span><br><span class="line"><span class="keyword">int</span> tdp = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= <span class="number">13</span> ; i++ ) </span><br><span class="line"><span class="keyword">if</span> ( tmp.buck[i] ) &#123;</span><br><span class="line">tmp.buck[i] = <span class="number">0</span>;</span><br><span class="line">tdp = i;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans + tdp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">FindPair</span> <span class="params">( <span class="keyword">int</span> now )</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> flag = <span class="number">0</span>;</span><br><span class="line">Player tmp = NowPlayer;</span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= <span class="number">13</span> ; i++ ) </span><br><span class="line"><span class="keyword">if</span> ( tmp.buck[i] == <span class="number">2</span> ) &#123;</span><br><span class="line">flag = i;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ( !flag ) </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">flag *= <span class="number">10000</span>;</span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= <span class="number">13</span> ; i++ ) </span><br><span class="line"><span class="keyword">if</span> ( tmp.buck[i] ) &#123;</span><br><span class="line">tmp.buck[i] = <span class="number">0</span>;</span><br><span class="line">flag += i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> flag;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">FindOne</span> <span class="params">( <span class="keyword">int</span> now )</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> flag = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= <span class="number">13</span> ; i++ ) </span><br><span class="line"><span class="keyword">while</span> ( NowPlayer.buck[i] ) &#123;</span><br><span class="line">NowPlayer.buck[i]--;</span><br><span class="line">flag += i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> flag;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">cmp</span> <span class="params">( Player x , Player y )</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> ( x.id != y.id ) </span><br><span class="line"><span class="keyword">return</span> x.id &gt; y.id;</span><br><span class="line"><span class="keyword">if</span> ( x.point != y.point ) </span><br><span class="line"><span class="keyword">return</span> x.point &gt; y.point;</span><br><span class="line"><span class="keyword">return</span> x.name &lt; y.name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">( <span class="keyword">void</span> )</span> </span>&#123;</span><br><span class="line">freopen ( <span class="string">"dezhou.in"</span> , <span class="string">"r"</span> , <span class="built_in">stdin</span> );</span><br><span class="line">freopen ( <span class="string">"dezhou.out"</span> , <span class="string">"w"</span> , <span class="built_in">stdout</span> );</span><br><span class="line">n = read ();</span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= n ; i++ ) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; player[i].name;</span><br><span class="line"><span class="built_in">scanf</span> ( <span class="string">"%s"</span> , player[i].card + <span class="number">1</span> ); </span><br><span class="line">DefHandCard ( i );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= n ; i++ ) </span><br><span class="line">PreKind ( i );</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= n ; i++ ) &#123;</span><br><span class="line"><span class="keyword">if</span> ( player[i].buck[<span class="number">10</span>] &amp;&amp; player[i].buck[<span class="number">11</span>] &amp;&amp; player[i].buck[<span class="number">12</span>] &amp;&amp; player[i].buck[<span class="number">13</span>] &amp;&amp; player[i].buck[<span class="number">1</span>] ) </span><br><span class="line">player[i].id = <span class="number">8</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> ( FindStraight ( i ) ) </span><br><span class="line">player[i].point = FindStraight ( i ) , player[i].id = <span class="number">7</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> ( FindFour ( i ) )</span><br><span class="line">player[i].point = FindFour ( i ) , player[i].id = <span class="number">6</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> ( FindHouse ( i ) )</span><br><span class="line">player[i].point = FindHouse ( i ) , player[i].id = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> ( FindThree ( i ) )</span><br><span class="line">player[i].point = FindThree ( i ) , player[i].id = <span class="number">4</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> ( FindTwo ( i ) ) </span><br><span class="line">player[i].point = FindTwo ( i ) , player[i].id = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> ( FindPair ( i ) )</span><br><span class="line">player[i].point = FindPair ( i ) , player[i].id = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">player[i].point = FindOne ( i ) , player[i].id = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">sort ( player + <span class="number">1</span> , player + <span class="number">1</span> + n , cmp );</span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= n ; i++ ) </span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; player[i].name &lt;&lt; <span class="built_in">endl</span>;;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三元组"><a href="#三元组" class="headerlink" title="三元组"></a>三元组</h3><h4 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h4><p>首先考虑$O(n^2)$怎么做:我们枚举一下每个三元组的中间值,对于每个$i$,我们考虑所有的$j$小于$i$中$val_j$大于$val_i$的个数和$val_j$小于$val_i$的个数.然后对于所有的$j&gt;i$也考虑一下.<br>发现只要$val_k$大于$val_j$,$val_j$大于$val_i$那么$val_k$一定大于$val_i$.所以我们可以用$O(n^2)$的复杂度来统计出对于每个$i$中前边/后边的大于/小于它的个数.这样可以得到$50$分.<br>然后我们想一下怎么优化这个过程.我们注意到倒数第二档部分分,它的权值非常的小.所以我们考虑怎么在权值上进行操作.然后对于所有的情况,我们离散化即可.<br>我们发现,如果我们把权值看成一个序列,那么我们在某个$val_i$,查询大于它的数或者小于它的数,就相当于这个权值序列某段区间的和.然后每次扫过去时在这段区间中$val_i$加一.<br>这个操作需要我们动态的单点修改区间求和.显然可以树状数组(或者其他什么数据结构).<br>而因为我们这个树状数组是权值树状数组,所以还需要离散化一下即可通过该题.</p><h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span> <span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> s = <span class="number">0</span> , w = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">char</span> ch = getchar ();</span><br><span class="line"><span class="keyword">while</span> ( ch &gt; <span class="string">'9'</span> || ch &lt; <span class="string">'0'</span> ) &#123; <span class="keyword">if</span> ( ch == <span class="string">'-'</span> ) w = <span class="number">-1</span>; ch = getchar ();&#125;</span><br><span class="line"><span class="keyword">while</span> ( ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span> ) &#123; s = s * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar ();&#125;</span><br><span class="line"><span class="keyword">return</span> s * w;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> HA = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">200005</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> high[N] , tree[N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Lsh</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> val;</span><br><span class="line"><span class="keyword">int</span> pos;</span><br><span class="line">&#125; lsh[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">cmp</span> <span class="params">( Lsh x , Lsh y )</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> x.val &lt; y.val;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Pre</span> <span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">lsh[<span class="number">0</span>].val = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= n ; i++ ) &#123;</span><br><span class="line"><span class="keyword">if</span> ( lsh[i].val != lsh[i - <span class="number">1</span>].val ) </span><br><span class="line">cnt++;</span><br><span class="line">high[lsh[i].pos] = cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">lowbit</span> <span class="params">( <span class="keyword">int</span> x )</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> x &amp; -x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span> <span class="params">( <span class="keyword">int</span> x , <span class="keyword">int</span> pos )</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span> ( pos &lt;= n ) &#123;</span><br><span class="line">tree[pos] += x;</span><br><span class="line">pos += lowbit ( pos );</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">query</span> <span class="params">( <span class="keyword">int</span> pos )</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> ( pos ) &#123;</span><br><span class="line">res += tree[pos];</span><br><span class="line">pos -= lowbit ( pos );</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> fromin[N] , fromax[N] , behmin[N] , behmax[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span> <span class="params">( <span class="keyword">void</span> )</span> </span>&#123;</span><br><span class="line">freopen ( <span class="string">"triple.in"</span> , <span class="string">"r"</span> , <span class="built_in">stdin</span> );</span><br><span class="line">freopen ( <span class="string">"triple.out"</span> , <span class="string">"w"</span> , <span class="built_in">stdout</span> );</span><br><span class="line">n = read ();</span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= n ; i++ ) &#123;</span><br><span class="line">lsh[i].val = read ();</span><br><span class="line">lsh[i].pos = i;</span><br><span class="line">&#125;</span><br><span class="line">sort ( lsh + <span class="number">1</span> , lsh + <span class="number">1</span> + n , cmp );</span><br><span class="line">Pre ();</span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= n ; i++ ) &#123;</span><br><span class="line">fromin[i] = query ( high[i] - <span class="number">1</span> );</span><br><span class="line">fromax[i] = query ( n ) - query ( high[i] );</span><br><span class="line">add ( <span class="number">1</span> , high[i] );</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">memset</span> ( tree , <span class="number">0</span> , <span class="keyword">sizeof</span> ( tree ) );</span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">int</span> i = n ; i &gt;= <span class="number">1</span> ; i-- ) &#123;</span><br><span class="line">behmin[i] = query ( high[i] - <span class="number">1</span> );</span><br><span class="line">behmax[i] = query ( n ) - query ( high[i] );</span><br><span class="line">add ( <span class="number">1</span> , high[i] );</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= n ; i++ ) </span><br><span class="line">ans = ( ans + ( behmin[i] * fromax[i] ) % HA + ( behmax[i] * fromin[i] ) % HA ) % HA;</span><br><span class="line"><span class="built_in">printf</span> ( <span class="string">"%lld\n"</span> , ans );</span><br><span class="line"><span class="comment">//for ( int i = 1 ; i &lt;= n ; i++ ) </span></span><br><span class="line"><span class="comment">//printf ( "%d %d %d %d\n" , fromin[i] , fromax[i] , behmin[i] , behmax[i] );</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="多边形"><a href="#多边形" class="headerlink" title="多边形"></a>多边形</h3><h4 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h4><p>听说是在环上DP,真的不会x</p><blockquote class="blockquote-center">因为知道了自己是多么的菜,所以才要更加努力去追求那个永远也不可能实现的梦想</blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;德州扑克真好玩.jpg&lt;br&gt;
    
    </summary>
    
    
      <category term="OI" scheme="http://krrrr.top/%E5%88%86%E7%B1%BB/OI/"/>
    
    
      <category term="模拟赛题解" scheme="http://krrrr.top/%E6%A0%87%E7%AD%BE/%E6%A8%A1%E6%8B%9F%E8%B5%9B%E9%A2%98%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>20191106模拟赛</title>
    <link href="http://krrrr.top/2019/11/07/20191106%E6%A8%A1%E6%8B%9F%E8%B5%9B/"/>
    <id>http://krrrr.top/2019/11/07/20191106模拟赛/</id>
    <published>2019-11-07T01:13:28.000Z</published>
    <updated>2019-11-07T02:50:13.559Z</updated>
    
    <content type="html"><![CDATA[<p>给我也整一个这样的评测环境</p><p><img src="/img/bierenjiadepingcehuanjing.png" alt="huanj"></p><a id="more"></a><h3 id="A"><a href="#A" class="headerlink" title="A"></a>A</h3><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>考虑两个人的答案,发现如果这对于某个特定的问题,如果这两个人的答案相同的话,那么他们可以将分数同时$+1$或者无变化.而若两个人的答案不同的话,显然我们选择分数相对较少的人加分更优.<br>但是需要注意一个问题,我们需要先判断两个人答案相同的情况,因为若先判断答案不同的情况的话,发现可能会出现一个人已经到达了目标分数,而另一个人没到,这时候再判断答案一样的话显然两个人都不能再加分了.</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span> <span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> s = <span class="number">0</span> , w = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">char</span> ch = getchar ();</span><br><span class="line"><span class="keyword">while</span> ( ch &gt; <span class="string">'9'</span> || ch &lt; <span class="string">'0'</span> ) &#123; <span class="keyword">if</span> ( ch == <span class="string">'-'</span> ) w = <span class="number">-1</span>; ch = getchar ();&#125;</span><br><span class="line"><span class="keyword">while</span> ( ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span> ) &#123; s = s * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar ();&#125;</span><br><span class="line"><span class="keyword">return</span> s * w;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n , x , y;</span><br><span class="line"><span class="keyword">char</span> A[N] , B[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">( <span class="keyword">void</span> )</span> </span>&#123;</span><br><span class="line">freopen ( <span class="string">"A.in"</span> , <span class="string">"r"</span> , <span class="built_in">stdin</span> );</span><br><span class="line">freopen ( <span class="string">"A.out"</span> , <span class="string">"w"</span> , <span class="built_in">stdout</span> );</span><br><span class="line"><span class="keyword">int</span> T = read ();</span><br><span class="line"><span class="keyword">while</span> ( T-- ) &#123;</span><br><span class="line">n = read () , x = read () , y = read ();</span><br><span class="line"><span class="built_in">scanf</span> ( <span class="string">"%s%s"</span> , A + <span class="number">1</span> , B + <span class="number">1</span> );</span><br><span class="line"><span class="keyword">int</span> tmp = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= n ; i++ ) &#123;</span><br><span class="line"><span class="keyword">if</span> ( A[i] == B[i] ) </span><br><span class="line">tmp++;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">int</span> NowScoreA = <span class="number">0</span> , NowScoreB = <span class="number">0</span>;</span><br><span class="line">NowScoreA = min ( tmp , min ( x , y ) );</span><br><span class="line">NowScoreB = min ( tmp , min ( x , y ) );</span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= n ; i++ ) &#123;</span><br><span class="line"><span class="keyword">if</span> ( NowScoreB == y &amp;&amp; NowScoreA == x ) </span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">if</span> ( A[i] != B[i] ) &#123;</span><br><span class="line"><span class="keyword">if</span> ( NowScoreB &lt; NowScoreA ) &#123;</span><br><span class="line"><span class="keyword">if</span> ( NowScoreB &lt; y ) </span><br><span class="line">NowScoreB++;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> ( NowScoreA &lt; x ) </span><br><span class="line">NowScoreA++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> ( NowScoreA &lt;= NowScoreB ) &#123;</span><br><span class="line"><span class="keyword">if</span> ( NowScoreA &lt; x ) </span><br><span class="line">NowScoreA++;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> ( NowScoreB &lt; y ) </span><br><span class="line">NowScoreB++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//printf ( "%d %d %d %d\n" , x , y , NowScoreA , NowScoreB );</span></span><br><span class="line"><span class="keyword">if</span> ( NowScoreA == x &amp;&amp; NowScoreB == y ) </span><br><span class="line"><span class="built_in">puts</span> ( <span class="string">"Yes"</span> );</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line"><span class="built_in">puts</span> ( <span class="string">"No"</span> );</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="B"><a href="#B" class="headerlink" title="B"></a>B</h3><h4 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h4><p>首先,我们可以发现,大多数的数字一定为$1$.我们假设现在数列里只有$1,2$这两种数字的话,那么为了满足题目中要求的条件,那么非一的数字的个数一定是最多的.<br>我们设</p><script type="math/tex; mode=display">2^k<=2 \times k+n-k</script><p>那么可以算出$k$的取值范围最多为$11$,即最多会出现$11$个非零的数字.数字不多,所以我们可以考虑把这$11$个数字搜出来.<br>我们设集合$p$为所有非一的数字构成的集合,$i$为集合中的元素,$k$为$p$集合中元素的个数,$A=\sum_i a_i,B=\Pi_i a_i$.<br>那么因为有$B=A+n-k$,即$n=B-A+k$.所以我们可以去搜索$B-A+k$的这一部分.<br>但是发现…直接搜索的话..复杂度会上天?然后我们考虑怎么剪枝.</p><ul><li>可行性剪枝:一旦超过$3000$就剪掉</li><li>去重:例如$2,3,2,3,4,5$和$2,2,3,3,4,5$是相似的指数不同的排列所以我们搜的时候只搜后面的情况然后通过组合数直接算出来就行了</li><li>预处理:我们发现每次的搜索过程都是一样的只是$n$不同 我们现在搜一次将答案存到桶里每次询问直接输出就行了</li></ul><h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> LL p=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">3e3</span>+<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">LL n;</span><br><span class="line"></span><br><span class="line">LL f[<span class="number">20</span>][N];</span><br><span class="line"></span><br><span class="line">LL C[N][<span class="number">20</span>];</span><br><span class="line"></span><br><span class="line">LL h[<span class="number">20</span>],ni[<span class="number">20</span>];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(LL x,LL y,LL z,LL s,LL k,LL g)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(y&gt;<span class="number">10000</span>) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span>(z-s&gt;<span class="number">3000</span>) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span>(x&gt;<span class="number">13</span>) <span class="keyword">return</span>;</span><br><span class="line">f[x<span class="number">-1</span>][z-s]+=(h[x<span class="number">-1</span>]*g%p)*ni[k]%p,f[x<span class="number">-1</span>][z-s]%=p;</span><br><span class="line">dfs(x+<span class="number">1</span>,y,z*y,s+y,k+<span class="number">1</span>,g);</span><br><span class="line"><span class="keyword">for</span>(LL i=y+<span class="number">1</span>;i&lt;=<span class="number">20000</span>;i++) &#123;</span><br><span class="line"><span class="keyword">if</span>((z*i-s-i)&gt;<span class="number">3000</span>) <span class="keyword">break</span>;</span><br><span class="line">dfs(x+<span class="number">1</span>,i,z*i,s+i,<span class="number">1</span>,g*ni[k]%p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">ksm</span><span class="params">(LL x,LL y)</span> </span>&#123;</span><br><span class="line">LL Ans=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(;y;y&gt;&gt;=<span class="number">1</span>,x*=x,x%=p)</span><br><span class="line"><span class="keyword">if</span>(y&amp;<span class="number">1</span>) Ans*=x,Ans%=p;</span><br><span class="line"><span class="keyword">return</span> Ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">freopen(<span class="string">"B.in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);</span><br><span class="line">freopen(<span class="string">"B.out"</span>,<span class="string">"w"</span>,<span class="built_in">stdout</span>);</span><br><span class="line"><span class="keyword">int</span> t;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;t;</span><br><span class="line">h[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(LL i=<span class="number">1</span>;i&lt;=<span class="number">13</span>;i++) h[i]=h[i<span class="number">-1</span>]*i%p;</span><br><span class="line"><span class="keyword">for</span>(LL i=<span class="number">0</span>;i&lt;=<span class="number">13</span>;i++) ni[i]=ksm(h[i],p<span class="number">-2</span>);</span><br><span class="line">dfs(<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line">C[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">3000</span>;i++) &#123;</span><br><span class="line">C[i][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=min(i,<span class="number">12</span>);j++) C[i][j]=C[i<span class="number">-1</span>][j]+C[i<span class="number">-1</span>][j<span class="number">-1</span>]%p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">12</span>;i++)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=<span class="number">3000</span>;j++) f[i][j]%=p;</span><br><span class="line"><span class="keyword">while</span>(t--) &#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">LL Ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=min(<span class="number">12l</span>l,n);i++)</span><br><span class="line">Ans+=f[i][n-i]*C[n][i]%p;</span><br><span class="line">Ans%=p;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;Ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="C"><a href="#C" class="headerlink" title="C"></a>C</h3><h4 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h4><p>发现若对于每次询问都进行一次$floyd$的话,那么时间复杂度显然上天.而考虑$floyd$算法的实质就是<strong>在经过了前i个点的情况下的最短路</strong>,那么我们可以选择离线.<br>我们对于每个询问,也把询问按照权值排序.然后我们对于每次询问,使用能更新的节点去更新$G$数组即可.</p><h4 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span> <span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> s = <span class="number">0</span> , w = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">char</span> ch = getchar ();</span><br><span class="line"><span class="keyword">while</span> ( ch &gt; <span class="string">'9'</span> || ch &lt; <span class="string">'0'</span> ) &#123; <span class="keyword">if</span> ( ch == <span class="string">'-'</span> ) w = <span class="number">-1</span>; ch = getchar ();&#125;</span><br><span class="line"><span class="keyword">while</span> ( ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span> ) &#123; s = s * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar ();&#125;</span><br><span class="line"><span class="keyword">return</span> s * w;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">205</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">20005</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n , m;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> G[N][N];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Que</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> st , ed;</span><br><span class="line"><span class="keyword">int</span> w;</span><br><span class="line"><span class="keyword">int</span> id;</span><br><span class="line">&#125; query[M];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> pos;</span><br><span class="line"><span class="keyword">int</span> val;</span><br><span class="line">&#125; nd[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">cmp1</span> <span class="params">( Node x , Node y )</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> x.val &lt; y.val;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">cmp2</span> <span class="params">( Que x , Que y )</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> x.w &lt; y.w;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> ans[M];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">( <span class="keyword">void</span> )</span> </span>&#123;</span><br><span class="line">freopen ( <span class="string">"C.in"</span> , <span class="string">"r"</span> , <span class="built_in">stdin</span> );</span><br><span class="line">freopen ( <span class="string">"C.out"</span> , <span class="string">"w"</span> , <span class="built_in">stdout</span> );</span><br><span class="line"><span class="keyword">int</span> T = read ();</span><br><span class="line"><span class="keyword">while</span> ( T-- ) &#123;</span><br><span class="line"><span class="built_in">memset</span> ( ans , <span class="number">0</span> , <span class="keyword">sizeof</span> ( ans ) );</span><br><span class="line">n = read () , m = read ();</span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= n ; i++ ) &#123;</span><br><span class="line">nd[i].val = read ();</span><br><span class="line">nd[i].pos = i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= n ; i++ ) </span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">int</span> j = <span class="number">1</span> ; j &lt;= n ; j++ ) </span><br><span class="line">G[i][j] = read ();</span><br><span class="line">sort ( nd + <span class="number">1</span> , nd + <span class="number">1</span> + n , cmp1 );</span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= m ; i++ ) &#123;</span><br><span class="line">query[i].st = read () , query[i].ed = read ();</span><br><span class="line">query[i].w = read ();</span><br><span class="line">query[i].id = i;</span><br><span class="line">&#125;</span><br><span class="line">sort ( query + <span class="number">1</span> , query + <span class="number">1</span> + m , cmp2 );</span><br><span class="line"><span class="keyword">int</span> NumNode = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">int</span> now = <span class="number">1</span> ; now &lt;= m ; now++ ) &#123;</span><br><span class="line"><span class="keyword">while</span> ( NumNode &lt;= n &amp;&amp; nd[NumNode].val &lt;= query[now].w ) &#123;</span><br><span class="line"><span class="keyword">int</span> kk = nd[NumNode].pos ;</span><br><span class="line"><span class="comment">//printf ( "%d " , kk );</span></span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= n ; i++ ) </span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">int</span> j = <span class="number">1</span> ; j &lt;= n ; j++ )</span><br><span class="line">G[i][j] = min ( G[i][j] , G[i][kk] + G[kk][j] ); </span><br><span class="line">NumNode++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> l = query[now].st , r = query[now].ed;</span><br><span class="line"><span class="keyword">int</span> tmp = G[l][r];</span><br><span class="line">ans[query[now].id] = tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= m ; i++ ) </span><br><span class="line"><span class="built_in">printf</span> ( <span class="string">"%lld\n"</span> , ans[i] );</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote class="blockquote-center">因为知道了自己是多么的菜,所以才要更加努力去追求那个永远也不可能实现的梦想</blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;给我也整一个这样的评测环境&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/bierenjiadepingcehuanjing.png&quot; alt=&quot;huanj&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="OI" scheme="http://krrrr.top/%E5%88%86%E7%B1%BB/OI/"/>
    
    
      <category term="ZROI" scheme="http://krrrr.top/%E6%A0%87%E7%AD%BE/ZROI/"/>
    
  </entry>
  
  <entry>
    <title>20191105模拟赛题解</title>
    <link href="http://krrrr.top/2019/11/06/20191105%E6%A8%A1%E6%8B%9F%E8%B5%9B%E9%A2%98%E8%A7%A3/"/>
    <id>http://krrrr.top/2019/11/06/20191105模拟赛题解/</id>
    <published>2019-11-06T00:45:09.000Z</published>
    <updated>2019-11-07T01:19:10.469Z</updated>
    
    <content type="html"><![CDATA[<p>🐮🍻🐮 </p><a id="more"></a><h3 id="Work"><a href="#Work" class="headerlink" title="Work"></a>Work</h3><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>题目等价于找到一个数量最小的排列,使得对于这个排列里的任何一个$k$都有$\sum_{i=1}^{size}work_i - work_k &gt;= sleep_k$.然后我们移项之后有$\sum_{i=1}^{size}&gt;=work_k+sleep_k$.<br>所以我们可以令$x_i=sleep_i+work_i$,然后对于$x_i$从小到大排序.然后我们枚举每一个$x_i$,然后同时把所有遍历过的$work_i$从大到小排序,我们需要找到一个长度最小的区间使得$\sum work_j &gt;= sleep_i$.<br>首先想一下暴力怎么维护这个东西:我们每读进来某个$w_i$,我们把这个元素连同之前的元素按照$work_i$为关键字从小到大排序,并且我们每次都重新记录一下$work$数组的前缀和,使用二分的方法找到这个最小的区间长度.<br>然后我们考虑怎么优化这个过程,我们发现我们可以维护一个小根堆,然后判断时,每次都弹出一个最小值.然后判断现在的$sum$是否还大于$sleep$.而且如果现在的$sum$本来就小于$sleep$时,我们也没必要再往堆里扔东西,因为如果要扔东西的话答案一定不会更优.所以直接忽略即可.</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">5e5</span> + <span class="number">10</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Worker</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> work;</span><br><span class="line">    <span class="keyword">int</span> sleep;</span><br><span class="line">&#125; w[N];</span><br><span class="line"><span class="keyword">int</span> fro[N];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">cmp1</span> <span class="params">( Worker x , Worker y )</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x.sleep + x.work &lt; y.sleep + y.work;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">cmp2</span> <span class="params">( Worker x , Worker y )</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x.work &lt; y.work;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> s = <span class="number">0</span> , w = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">char</span> ch = getchar ();</span><br><span class="line">    <span class="keyword">while</span> ( ch &gt; <span class="string">'9'</span> || ch &lt; <span class="string">'0'</span> ) &#123; <span class="keyword">if</span> ( ch == <span class="string">'-'</span> ) w = <span class="number">-1</span>; ch = getchar ();&#125;</span><br><span class="line">    <span class="keyword">while</span> ( ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span> ) &#123; s = s * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar ();&#125;</span><br><span class="line">    <span class="keyword">return</span> s * w;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">priority_queue &lt; <span class="keyword">int</span> , <span class="built_in">vector</span> &lt; <span class="keyword">int</span> &gt; , greater &lt; <span class="keyword">int</span> &gt; &gt; qu;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span> <span class="params">( <span class="keyword">void</span> )</span> </span>&#123;</span><br><span class="line">    n = read (); </span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= n ; i++ ) </span><br><span class="line">        w[i].work = read () , w[i].sleep = read ();</span><br><span class="line">    sort ( w + <span class="number">1</span> , w + <span class="number">1</span> + n , cmp1 );</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">2147483647</span> , sum = <span class="number">0</span> , size = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= n ; i++ ) &#123;</span><br><span class="line">        <span class="keyword">if</span> ( w[i].sleep &lt;= sum ) &#123;       </span><br><span class="line">            <span class="keyword">while</span> ( sum - qu.top() &gt;= w[i].sleep ) &#123;</span><br><span class="line">                sum -= qu.top();</span><br><span class="line">                qu.pop();</span><br><span class="line">                size--;</span><br><span class="line">            &#125; </span><br><span class="line">            ans = min ( ans , size );</span><br><span class="line">        &#125;</span><br><span class="line">        qu.push ( w[i].work );</span><br><span class="line">        sum += w[i].work;</span><br><span class="line">        size++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( ans == <span class="number">2147483647</span> ) </span><br><span class="line">        <span class="built_in">puts</span> ( <span class="string">"-1"</span> );</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Seq"><a href="#Seq" class="headerlink" title="Seq"></a>Seq</h3><h4 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h4><p>我们首先考虑暴力怎么$DP$,我们可以设$f_{i,j,0/1}$表示现在对于串$A$我们考虑了前$i$位,对于串$B$我们考虑了前$j$位,其中现在比上一位大/小时,最长的公共波浪子序列的长度是多少.<br>那么我们可以$O(n^2)$枚举状态后再$O(n^2)$枚举转移,这样复杂度是$O(n^4)$的,可以过$40$分(其实可以过$60$).然后我们发现,我们可以把转移拆分成$(i,j)-&gt;(i,y)$,然后再由$(i,y)-&gt;(x,y)$.<br>然后我们可以对于每一位分别转移即可.</p><h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 5005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> M 8000005</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ls (t&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rs ((t&lt;&lt;1)|1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mid ((l+r)&gt;&gt;1)</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mk make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> i,j,m,n,p,k,A[N],B[N],ans,a[N],b[N];</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> f[N][N][<span class="number">2</span>],g[N][N][<span class="number">2</span>]; </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Work</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="built_in">memset</span>(f,<span class="number">0</span>,<span class="keyword">sizeof</span>(f));</span><br><span class="line">        <span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">            <span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=m;++j)&#123;</span><br><span class="line">                    f[i][j][<span class="number">0</span>]=max(f[i<span class="number">-1</span>][j][<span class="number">0</span>],f[i][j<span class="number">-1</span>][<span class="number">0</span>]);</span><br><span class="line">                    <span class="keyword">if</span>(a[i]==b[j]) f[i][j][<span class="number">0</span>]=max(f[i][j][<span class="number">0</span>],f[i<span class="number">-1</span>][j<span class="number">-1</span>][<span class="number">0</span>]+<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">return</span> f[n][m][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n); <span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=n;++i) <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;m); <span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=m;++i) <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;b[i]);</span><br><span class="line">        <span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">            <span class="keyword">for</span> (j=<span class="number">1</span>;j&lt;=m;++j) <span class="keyword">if</span> (a[i]==b[j]) f[i+<span class="number">1</span>][j][<span class="number">0</span>]=f[i+<span class="number">1</span>][j][<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">            <span class="keyword">for</span> (j=<span class="number">1</span>;j&lt;=m;++j)&#123;</span><br><span class="line">                    <span class="comment">//k==0</span></span><br><span class="line">                    <span class="keyword">if</span> (a[i]&gt;b[j]) </span><br><span class="line">g[i][j+<span class="number">1</span>][<span class="number">0</span>]=max(g[i][j+<span class="number">1</span>][<span class="number">0</span>],f[i][j][<span class="number">0</span>]);</span><br><span class="line">                    f[i+<span class="number">1</span>][j][<span class="number">0</span>]=max(f[i+<span class="number">1</span>][j][<span class="number">0</span>],f[i][j][<span class="number">0</span>]);</span><br><span class="line">                    <span class="keyword">if</span> (a[i]==b[j]&amp;&amp;g[i][j][<span class="number">0</span>]) </span><br><span class="line">                        f[i+<span class="number">1</span>][j][<span class="number">1</span>]=max(f[i+<span class="number">1</span>][j][<span class="number">1</span>],g[i][j][<span class="number">0</span>]+<span class="number">1</span>);</span><br><span class="line">                    g[i][j+<span class="number">1</span>][<span class="number">0</span>]=max(g[i][j+<span class="number">1</span>][<span class="number">0</span>],g[i][j][<span class="number">0</span>]);</span><br><span class="line">                    <span class="comment">//k==1</span></span><br><span class="line">                    <span class="keyword">if</span> (a[i]&lt;b[j])</span><br><span class="line">g[i][j+<span class="number">1</span>][<span class="number">1</span>]=max(g[i][j+<span class="number">1</span>][<span class="number">1</span>],f[i][j][<span class="number">1</span>]);</span><br><span class="line">                    f[i+<span class="number">1</span>][j][<span class="number">1</span>]=max(f[i+<span class="number">1</span>][j][<span class="number">1</span>],f[i][j][<span class="number">1</span>]);</span><br><span class="line">                    <span class="keyword">if</span> (a[i]==b[j]&amp;&amp;g[i][j][<span class="number">1</span>]) </span><br><span class="line">                        f[i+<span class="number">1</span>][j][<span class="number">0</span>]=max(f[i+<span class="number">1</span>][j][<span class="number">0</span>],g[i][j][<span class="number">1</span>]+<span class="number">1</span>);</span><br><span class="line">                    g[i][j+<span class="number">1</span>][<span class="number">1</span>]=max(g[i][j+<span class="number">1</span>][<span class="number">1</span>],g[i][j][<span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=n+<span class="number">1</span>;++i)</span><br><span class="line">            <span class="keyword">for</span> (j=<span class="number">1</span>;j&lt;=m+<span class="number">1</span>;++j) ans=max(ans,max(f[i][j][<span class="number">0</span>],f[i][j][<span class="number">1</span>]));</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,max(min(<span class="number">2</span>,Work()),ans));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Jump"><a href="#Jump" class="headerlink" title="Jump"></a>Jump</h3><p>只会$60$暴力,咕咕咕了x</p><blockquote class="blockquote-center">因为知道了自己是多么的菜,所以才要更加努力去追求那个永远也不可能实现的梦想</blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;🐮🍻🐮 &lt;/p&gt;
    
    </summary>
    
    
      <category term="OI" scheme="http://krrrr.top/%E5%88%86%E7%B1%BB/OI/"/>
    
    
      <category term="模拟赛题解" scheme="http://krrrr.top/%E6%A0%87%E7%AD%BE/%E6%A8%A1%E6%8B%9F%E8%B5%9B%E9%A2%98%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>20191104模拟赛题解</title>
    <link href="http://krrrr.top/2019/11/05/20191104%E6%A8%A1%E6%8B%9F%E8%B5%9B%E9%A2%98%E8%A7%A3/"/>
    <id>http://krrrr.top/2019/11/05/20191104模拟赛题解/</id>
    <published>2019-11-05T01:38:33.000Z</published>
    <updated>2019-11-05T02:23:44.721Z</updated>
    
    <content type="html"><![CDATA[<p>为什么老是考原题啊😥<br><a id="more"></a></p><h3 id="快乐传递政治正确版"><a href="#快乐传递政治正确版" class="headerlink" title="快乐传递政治正确版"></a>快乐传递政治正确版</h3><p>找到一个规律,发现对于每一个人$i$,它能使所有和它的编号mod $gcd$相同的数字变的快乐.<br>所以我们可以按照$gcd$分组,先求出$n,m,k$三个人的$gcd$,然后对于每一个快乐的人,标记一下它所在的分组即$i$  $mod$  $gcd$.最后我们只需要判断一下是不是所有的分组都被标记了即可.<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> n , m , k , b , g , t;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> base;</span><br><span class="line"><span class="keyword">bool</span> used[M];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">( <span class="keyword">void</span> )</span> </span>&#123;</span><br><span class="line">freopen ( <span class="string">"happy2.in"</span> , <span class="string">"r"</span>, <span class="built_in">stdin</span> );</span><br><span class="line">freopen ( <span class="string">"happy2.out"</span> ,<span class="string">"w"</span>,<span class="built_in">stdout</span>);</span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line"><span class="built_in">scanf</span> ( <span class="string">"%d"</span> , &amp;T );</span><br><span class="line"><span class="keyword">while</span> ( T-- ) &#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">memset</span> ( used , <span class="number">0</span> , <span class="keyword">sizeof</span> ( used ) );</span><br><span class="line"><span class="built_in">scanf</span> ( <span class="string">"%d%d%d"</span> , &amp;n , &amp;m, &amp;k);</span><br><span class="line">base = __gcd ( n * <span class="number">1l</span>l , __gcd ( m * <span class="number">1l</span>l , k * <span class="number">1l</span>l ) );</span><br><span class="line"><span class="keyword">if</span> ( base &gt;= <span class="number">10</span> * N ) &#123;</span><br><span class="line"><span class="built_in">puts</span> ( <span class="string">"No"</span> );</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">scanf</span> ( <span class="string">"%d"</span> , &amp;b );</span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= b ; i++ ) &#123;</span><br><span class="line"><span class="keyword">int</span> x;</span><br><span class="line"><span class="built_in">scanf</span> ( <span class="string">"%d"</span> , &amp;x );</span><br><span class="line">used[x % base] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">scanf</span> ( <span class="string">"%d"</span> , &amp;g );</span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= g ; i++ ) &#123;</span><br><span class="line"><span class="keyword">int</span> x;</span><br><span class="line"><span class="built_in">scanf</span> ( <span class="string">"%d"</span> , &amp;x );</span><br><span class="line">used[x % base] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">scanf</span> ( <span class="string">"%d"</span> , &amp;t );</span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= t ; i++ ) &#123;</span><br><span class="line"><span class="keyword">int</span> x;</span><br><span class="line"><span class="built_in">scanf</span> ( <span class="string">"%d"</span> , &amp;x );</span><br><span class="line">used[x % base] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">bool</span> flag = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; base ; i++ ) &#123;</span><br><span class="line"><span class="keyword">if</span> ( !used[i] ) &#123;</span><br><span class="line">flag = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ( flag ) </span><br><span class="line"><span class="built_in">puts</span> ( <span class="string">"Yes"</span> );</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line"><span class="built_in">puts</span> ( <span class="string">"No"</span> );</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="嫌疑人"><a href="#嫌疑人" class="headerlink" title="嫌疑人"></a>嫌疑人</h3><p>我们先考虑一个显然错误的贪心:我们对于每个人被统计了多少次直接开桶统计,然后把统计的个数从大到小排序之后可以二分找到每一个需要被计入答案的数量.<br><del>貌似一眼发现不了什么错误但是这个真的错了</del>.<br>我们发现对于一个人$i$,如果它要搞$j,k$的话,那么假设有一个投票,要投票的人是$j,k$,那么$i$这个人就会对这个计数方案贡献$2$的同意数.而这显然与一个人只能对一个方案有$1$的贡献不相符.<br>所以我们考虑把多算的这一部分从原答案中减去,我们发现对于一个人,它只能对某一组特定的方案有$2$的赞同数,所以我们可以使用$map$套一个$pair$来对多统计的组数的贡献,然后我们遍历所有我们标记了的组合,如果本来它的赞同数$&gt;=p$并且它的赞同数$-$多统计的赞同数小于$p$的话,我们就需要让答案减少$1$.<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">3e5</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n , p;</span><br><span class="line"><span class="keyword">int</span> cnt[N] , rc[N];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> xdd;</span><br><span class="line"><span class="built_in">map</span> &lt; pair &lt; <span class="keyword">int</span> , <span class="keyword">int</span> &gt; , <span class="keyword">int</span> &gt; mp;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span> <span class="params">( <span class="keyword">void</span> )</span> </span>&#123;</span><br><span class="line">freopen ( <span class="string">"suspect.in"</span> , <span class="string">"r"</span>, <span class="built_in">stdin</span> );</span><br><span class="line">freopen ( <span class="string">"suspect.out"</span> ,<span class="string">"w"</span>,<span class="built_in">stdout</span>);</span><br><span class="line"><span class="built_in">scanf</span> ( <span class="string">"%lld%lld"</span> , &amp;n , &amp;p );</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ( p == <span class="number">0</span> ) &#123;</span><br><span class="line"><span class="built_in">printf</span> ( <span class="string">"%lld\n"</span> , <span class="number">1l</span>l * n * ( n - <span class="number">1</span> ) / <span class="number">2</span> );</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= n ; i++ ) &#123;</span><br><span class="line"><span class="keyword">int</span> x , y;</span><br><span class="line"><span class="built_in">scanf</span> ( <span class="string">"%lld%lld"</span> , &amp;x , &amp;y );</span><br><span class="line">cnt[x]++;</span><br><span class="line">cnt[y]++;</span><br><span class="line"><span class="keyword">if</span> ( x &gt; y ) </span><br><span class="line">swap ( x , y ); </span><br><span class="line">rc[x]++;</span><br><span class="line">rc[y]++;</span><br><span class="line">mp[make_pair ( x , y )]++;</span><br><span class="line">&#125;</span><br><span class="line">sort ( cnt + <span class="number">1</span> , cnt + <span class="number">1</span> + n );</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= n ; i++ ) &#123;</span><br><span class="line"><span class="keyword">int</span> l = i + <span class="number">1</span> , r = n , ans = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">while</span> ( l &lt;= r ) &#123;</span><br><span class="line"><span class="keyword">int</span> mid = ( l + r ) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> ( cnt[mid] + cnt[i] &gt;= p ) &#123;</span><br><span class="line">ans = mid;</span><br><span class="line">r = mid - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">l = mid + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ( ans != <span class="number">-1</span> ) </span><br><span class="line">xdd = xdd + n - ans + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> ( <span class="built_in">map</span> &lt; pair &lt; <span class="keyword">int</span> , <span class="keyword">int</span> &gt; , <span class="keyword">int</span> &gt; :: iterator it = mp.begin () ; it != mp.end () ; it++ ) </span><br><span class="line"><span class="keyword">if</span> ( rc[it -&gt; first.first] + rc[it -&gt; first.second] &gt;= p &amp;&amp; rc[it -&gt; first.first] + rc[it -&gt; first.second] - it -&gt; second &lt; p ) </span><br><span class="line">xdd--;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span> ( <span class="string">"%lld\n"</span> , xdd );</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="Xor"><a href="#Xor" class="headerlink" title="Xor"></a>Xor</h3><p>发现在某个区间中出现过偶数次数字的异或和=区间中出现过的数字的异或和异或区间中出现了奇数次数字的异或和.<br>而某个区间中出现了奇数次数字的异或和显然等于这个区间的异或和(因为出现了偶数次的数字异或起来的值为$0$).而异或值是有可减性的,所以我们对于这一部分只需要一个前缀异或和就可以统计了.<br>那么我们剩下的问题就只有如何求在一个区间内出现过的数字的异或和.而这个东西显然不怎么可求.所以我们考虑离线的做法.<br>我们对于所有的询问,将询问按照右端点从小到大排序,然后我们对于每个数字,维护一个这个数字上一次出现的位置(可以离散化或者直接开桶统计).<br>然后我们在右移右指针的过程中,对于每个数,我们就像普通的树状数组一样异或所有的数字,这相当于维护了一个普通的异或和.但是我们如果现在要异或的这个数字之前出现过,那么我们把这个数字从上一次出现的位置再异或一次这个数(这样可以把多次出现的值异或掉).<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span> <span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> s = <span class="number">0</span> , w = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">char</span> ch = getchar ();</span><br><span class="line"><span class="keyword">while</span> ( ch &gt; <span class="string">'9'</span> || ch &lt; <span class="string">'0'</span> ) &#123; <span class="keyword">if</span> ( ch == <span class="string">'-'</span> ) w = <span class="number">-1</span>; ch = getchar ();&#125;</span><br><span class="line"><span class="keyword">while</span> ( ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span> ) &#123; s = s * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar ();&#125;</span><br><span class="line"><span class="keyword">return</span> s * w; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">3e5</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n , m;</span><br><span class="line"><span class="keyword">int</span> val[N] , tree[N] , fro[N];</span><br><span class="line"><span class="built_in">map</span> &lt; <span class="keyword">int</span> , <span class="keyword">int</span> &gt; flag;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Que</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> l , r;</span><br><span class="line"><span class="keyword">int</span> id;</span><br><span class="line">&#125; query[N];</span><br><span class="line"><span class="keyword">int</span> ans[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">cmp</span> <span class="params">( Que x , Que y )</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> x.r &lt; y.r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">lowbit</span> <span class="params">( <span class="keyword">int</span> x )</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> x &amp; -x;</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span> <span class="params">( <span class="keyword">int</span> pos , <span class="keyword">int</span> x )</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span> ( pos &lt;= n ) &#123;</span><br><span class="line">tree[pos] ^= x;</span><br><span class="line">pos += lowbit ( pos );</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">check</span> <span class="params">( <span class="keyword">int</span> pos )</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> ( pos ) &#123;</span><br><span class="line">res ^= tree[pos];</span><br><span class="line">pos -= lowbit ( pos );</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">( <span class="keyword">void</span> )</span> </span>&#123;</span><br><span class="line">n = read ();</span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= n ; i++ ) &#123; </span><br><span class="line">val[i] = read ();</span><br><span class="line">fro[i] = fro[i - <span class="number">1</span>] ^ val[i];</span><br><span class="line">&#125;</span><br><span class="line">m = read ();</span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= m ; i++ ) &#123;</span><br><span class="line">query[i].l = read () , query[i].r = read ();</span><br><span class="line">query[i].id = i;</span><br><span class="line">&#125;</span><br><span class="line">sort ( query + <span class="number">1</span> , query + <span class="number">1</span> + m , cmp );</span><br><span class="line"><span class="keyword">int</span> now = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= m ; i++ ) &#123;</span><br><span class="line"><span class="keyword">while</span> ( now &lt; query[i].r ) &#123;</span><br><span class="line">now++;</span><br><span class="line"><span class="keyword">if</span> ( !flag[val[now]] ) </span><br><span class="line">flag[val[now]] = now;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">add ( flag[val[now]] , val[now] );</span><br><span class="line">flag[val[now]] = now;</span><br><span class="line">&#125;</span><br><span class="line">add ( now , val[now] );</span><br><span class="line">&#125;</span><br><span class="line">ans[query[i].id] = check ( query[i].r ) ^ check ( query[i].l - <span class="number">1</span> ) ^ fro[query[i].r] ^ fro[query[i].l - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= m ; i++ ) </span><br><span class="line"><span class="built_in">printf</span> ( <span class="string">"%d\n"</span> , ans[i] );</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote class="blockquote-center">因为知道了自己是多么的菜,所以才要更加努力去追求那个永远也不可能实现的梦想</blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;为什么老是考原题啊😥&lt;br&gt;
    
    </summary>
    
    
      <category term="OI" scheme="http://krrrr.top/%E5%88%86%E7%B1%BB/OI/"/>
    
    
      <category term="模拟赛题解" scheme="http://krrrr.top/%E6%A0%87%E7%AD%BE/%E6%A8%A1%E6%8B%9F%E8%B5%9B%E9%A2%98%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>提高失联测D9</title>
    <link href="http://krrrr.top/2019/11/04/%E6%8F%90%E9%AB%98%E5%A4%B1%E8%81%94%E6%B5%8BD9/"/>
    <id>http://krrrr.top/2019/11/04/提高失联测D9/</id>
    <published>2019-11-04T00:39:07.000Z</published>
    <updated>2019-11-04T07:44:53.642Z</updated>
    
    <content type="html"><![CDATA[<p>版权原因,题面不公开<br><a id="more"></a></p><h3 id="蔡老板"><a href="#蔡老板" class="headerlink" title="蔡老板"></a>蔡老板</h3><p>这道题题解里的二分的$check$到底是怎么想出来的啊….<br>我们考虑到对于某个数$i$,在它的二进制表示下,对于某个确定的$2^i$的物品,你取还是不取是不影响$2^j(j&lt;i)$的物品拿还是不拿的.<br>然后发现显然钱数这个东西是满足单调性的<del>所以显然可以爬山</del>所以我们可以二分钱数然后$check$.<br>但是发现这个东西貌似不怎么好$check$.我们想一下我们之前说的性质,可以发现对于每一位,如果在二进制表示下是$1$,那么如果不拿就一定亏了(确信).<br>但是拿的话只拿这个价格的东西显然不会更优.我们想一下,对于这一位之前的某一维,我们选之后(或者根本没选)剩下的,如果直接扔掉显然会浪费掉.<br>然后我们又会发现,因为每个东西的价格都是用二的幂次方表示的,而两个价格为$2^i$的物品可以合并为一个$2^{i+1}$的物品.而这个操作显然需要我们按照钱数从小到大进行.<br>那么我们的贪心思路就比较明显了,我们对于每一个二分出来的钱数$mid$,我们从低到高考虑这个钱数的每一位,如果是$1$的话,那么我们就选择当前维护的最大的一个值.然后把其他的从大到小两两合并成一个新的.<br>而对于二进制考虑下是$0$的情况,我们直接合并即可.</p><h3 id="唯一睿酱"><a href="#唯一睿酱" class="headerlink" title="唯一睿酱"></a>唯一睿酱</h3><p>我们设$f_{l,r}$表示$l,r$这段区间一共有多少种方案,而且$l-1,r+1$是边界或者大于其中的所有数字.那么转移的话,我们可以考虑在$l,r$中枚举一个$k$,使得$l+r_k=k$或者$k+r_k=r$,然后转移就好了.<br>但是这样转移的话发现时间复杂度是$O(n^3)$的,我们还得考虑怎么优化:我们发现,对于某个确定的$k$,它只能转移到$l=k-r_k$或者$r=k+r_k$的区间.所以我们不再枚举$k$,而是对于每一个$k$,我们都选择枚举它能转移到哪里.<br>时间复杂度为$O(n^2)$.</p><h3 id="波波🐮"><a href="#波波🐮" class="headerlink" title="波波🐮"></a>波波🐮</h3><p><del>蔡老板牛逼!</del></p><blockquote class="blockquote-center">因为知道了自己是多么的菜,所以才要更加努力去追求那个永远也不可能实现的梦想</blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;版权原因,题面不公开&lt;br&gt;
    
    </summary>
    
    
      <category term="OI" scheme="http://krrrr.top/%E5%88%86%E7%B1%BB/OI/"/>
    
    
      <category term="ZROI" scheme="http://krrrr.top/%E6%A0%87%E7%AD%BE/ZROI/"/>
    
  </entry>
  
  <entry>
    <title>普转提撒花</title>
    <link href="http://krrrr.top/2019/11/03/%E6%99%AE%E8%BD%AC%E6%8F%90%E6%92%92%E8%8A%B1/"/>
    <id>http://krrrr.top/2019/11/03/普转提撒花/</id>
    <published>2019-11-03T08:11:27.000Z</published>
    <updated>2019-11-05T01:07:37.104Z</updated>
    
    <content type="html"><![CDATA[<p>版权原因,题面不公开(但是我还是要说一句周队🐮🍺!)<br><a id="more"></a></p><p>完结撒花qwq….</p><h3 id="嘴强王者"><a href="#嘴强王者" class="headerlink" title="嘴强王者"></a>嘴强王者</h3><p>首先可以设一个$k=\frac{n}{m}$表示每一组的人数.<br>然后我们把所有队伍按照队长的能力值从小到大排序(即根据队长的排名从大到小排序).然后我们考虑能力值排名最大的队长怎么取.<br>发现显然只能去取排名比$a_i$靠后的,方案为 $\dbinom{n-a_i}{k-1}$<br>然后我们再去考虑能力值排名第二大的队伍,发现不仅只能去取排名比$a_i$靠后的,而且也不能去取已经被排名第一大的队伍取过的人,那么方案为$\dbinom{n-a_i-k}{k-1}$<br>同样的,以此类推,最后的答案就是$\prod\limits_{i=1}^n\dbinom{n-a_i-k \times (i - 1) }{k-1}$</p><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p>发现题目中有一个突破点就是只有$1$和$2$两种数字.<br>然后我们发现如下一个结论:我们找到某一个$1$,然后设它的位置为$i$,那么$[1,sum_n-sum_{i-1}]$范围内的数字都一定可以被取到.所以我们可以从左到右再从右到左分别找到第一个$1$,然后把可以到达的数标记起来.<br>然后我们再找到之前没有被$1$之后的数字标记过的$2$的数量$num$,那么所有能到达的数的并集就是</p><script type="math/tex; mode=display">[1,max(sum_n-sum_{i-1})(a_i=1)]∪max(sum_n-sum_{i-1})(a_i=1)+2 \times k (k<=num)</script><p>又因为权值很小,所以我们可以预处理之后直接$O(1)$统计答案.</p><h3 id="曼哈顿抉择"><a href="#曼哈顿抉择" class="headerlink" title="曼哈顿抉择"></a>曼哈顿抉择</h3><p>我们发现对于每次操作,我们可以把这张图分为三个部分:一部分距离第一个点更近,一部分距离第二个点更近,还有一部分离两个点距离相等.<br>那么所有的情况大概可以归为以下两种情况:  </p><ul><li><p>对角线通过这两个点:<br><img src="/img/201911031.png" alt="sat1"></p></li><li><p>对角线不通过这两个点:<br><img src="/img/201911032.png" alt="sat2">  </p></li></ul><p>对于这两种情况,我们在计算的时候可以做如下划分(类似下图):划分成两个大三角形,然后角落里有四个小三角形(也有可能是梯形,但是莫得区别),然后我们求出这些部分中的点的个数就能通过一些找规律的加加减减算出答案.<br><img src="/img/201911033.png" alt="divi1"></p><p>首先考虑对大三角形中点的数量的计算,发现其实就是划一条$x-y=c$($c$为常数)的直线,然后统计$x-y&gt;c$和$x-y&lt;c$的点的数量即可.显然可以对每个点根据$x-y$进行排序然后二分即可.<br>然后我们来考虑下对于小三角形(或者梯形)中点的计算方法,我们发现我们可以写出两个类似于$y=k \times x + b$的约束,然后就是一个经典的二维偏序的问题,可以一维排序+二维树状数组解决.但是需要注意要把询问离线出来.<br>时间复杂度为$O((n+m) \times logn )$</p><h3 id="开关灯"><a href="#开关灯" class="headerlink" title="开关灯"></a>开关灯</h3><p>首先发现如果对于某条路径翻转了两次之后还不如不反转(确信).<br>那么就会有一个结论:对于某种翻转路径的方案,一定存在某种确定的翻转方案,使得翻转的路径不相交.根据这个结论,我们可以只翻转需要翻转的边,而对于现在状态和需要状态相同的边可以忽略不记.<br>那么我们的任务就变成了用最少的不相交的路径去覆盖所有需要翻转的边.然后对于某个点,我们发现如果从它出发(不包括到父亲节点)的边中有偶数条需要被翻转,那么显然这两条边可以通过一条路径连接,如果有奇数条边需要被翻转的话,那么就是要标记一下这个点(因为一条路径中最少需要两个端点),然后在它的父亲枚举到它的时候把这个点向它父亲连接的边当成需要翻转的边(因为无所谓亮暗的边翻转还是不反转都无所谓).这样递归的进行下去,直到到达深度最小的节点.这时候需要特判每次$dfs$时的根节点是否只连接了需要继续向上连边的路径,如果有的话,需要把这条路径向下拆分(因为可以证明最少有$3$个不同深度的节点才会出现需要向上继续连边的节点)成两条,这时候就要多用一条路径</p><blockquote class="blockquote-center">因为知道了自己是多么的菜,所以才要更加努力去追求那个永远也不可能实现的梦想</blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;版权原因,题面不公开(但是我还是要说一句周队🐮🍺!)&lt;br&gt;
    
    </summary>
    
    
      <category term="OI" scheme="http://krrrr.top/%E5%88%86%E7%B1%BB/OI/"/>
    
    
      <category term="ZROI" scheme="http://krrrr.top/%E6%A0%87%E7%AD%BE/ZROI/"/>
    
  </entry>
  
  <entry>
    <title>[SDOI2019]Elaxia的路线</title>
    <link href="http://krrrr.top/2019/11/01/SDOI2019-Elaxia%E7%9A%84%E8%B7%AF%E7%BA%BF/"/>
    <id>http://krrrr.top/2019/11/01/SDOI2019-Elaxia的路线/</id>
    <published>2019-11-01T08:35:41.000Z</published>
    <updated>2019-11-01T08:42:00.798Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.luogu.org/problem/P2149" target="_blank" rel="noopener">传送门</a><br><a id="more"></a></p><p>首先我们可以知道如果把所有最短路上的边挑出来，再按照最短路中$dis$数组的递推关系给它加上方向的话这就是一个有向无环图。<br>而如果把所有两个最短路的公共边挑出来的话，这个有向无环图中的最长链就是答案。<br>并且判断一条边在最短路上的方式就是$dis[s→u]+w(u,v)+dis[u→t]=dis[s→t]dis[s→u]+w(u,v)+dis[u→t]=dis[s→t]$。<br>并且因为这是无向图，所以求任意一个点到终点的距离只需要以终点为起点再跑一遍最短路就可以了。<br>需要注意的问题就是公共路径从不同的方向经过也是可以的，所以需要把一对起点和终点倒过来再做一遍。</p><blockquote class="blockquote-center">因为知道了自己是多么的菜,所以才要更加努力去追求那个永远也不可能实现的梦想</blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://www.luogu.org/problem/P2149&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;传送门&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="OI" scheme="http://krrrr.top/%E5%88%86%E7%B1%BB/OI/"/>
    
    
      <category term="图论" scheme="http://krrrr.top/%E6%A0%87%E7%AD%BE/%E5%9B%BE%E8%AE%BA/"/>
    
      <category term="最短路" scheme="http://krrrr.top/%E6%A0%87%E7%AD%BE/%E6%9C%80%E7%9F%AD%E8%B7%AF/"/>
    
  </entry>
  
  <entry>
    <title>校内ACM赛题解选讲</title>
    <link href="http://krrrr.top/2019/10/30/%E6%A0%A1%E5%86%85ACM%E8%B5%9B%E9%A2%98%E8%A7%A3/"/>
    <id>http://krrrr.top/2019/10/30/校内ACM赛题解/</id>
    <published>2019-10-30T08:30:09.000Z</published>
    <updated>2019-11-05T01:08:18.608Z</updated>
    
    <content type="html"><![CDATA[<p>校内题目就不公开题面啦x<br><a id="more"></a></p><h3 id="数学"><a href="#数学" class="headerlink" title="数学"></a>数学</h3><p>首先我们用二项式定理展开一下式子.</p><script type="math/tex; mode=display">E((x-E(x))^k)=\sum_{i=0}^k[\dbinom{k}{i} \times (-1)^{k-i} \times E(x^i) \times E^{k-i}(x)]</script><p>有因为$x$是一个常数,则$E(x)=x$,那么显然$E^{k-i}(x)={(\dfrac{1}{2})}^{k-i}$,那么问题就只剩下了$E(x^i)$怎么求了.<br>而对于$E(x^i)$,我们可以设函数$f(x)=x^i$,然后考虑它的图像.因为$x^i$的期望对应的就是图像中的$y$,所以有$1 \times E(x^i) = S$.<br>所以我们要计算的就只剩下函数$f(x)=x^i$在$[0,1]$上的图像的面积了.然后这个东西….可以用积分去求得:  </p><script type="math/tex; mode=display">\int_{0}^{1}x^i\,dx = \dfrac{1^{i+1}}{i+1} - \dfrac{0^{i+1}}{i+1} = \frac{1}{i+1}</script><p>计算出$E(x^i)$后,将表达式带回原式后得到 </p><script type="math/tex; mode=display">ans=\sum_{i=0}^k[\dbinom{k}{i} \times (-1)^{k-i} \times \frac{1}{i+1} \times {(\dfrac{1}{2})}^{k-i}]</script><h3 id="英语"><a href="#英语" class="headerlink" title="英语"></a>英语</h3><p>发现直接做的话貌似没什么思路….<br>显然这道题可以先把询问离线出来,然后有一个显然<strong>错误</strong>的贪心就是每次选一个叶子节点的值(指从根节点到某个叶子的前缀和)最大的.<br>这样做显然错误,因为每个点对答案的贡献只能被统计一次,所以我们要考虑怎么调整这个贪心的思路.通过观察发现,对于某一个点$i$,它的值只能被计算到它所有的儿子中边权权重求大的那个儿子,而对于它其他的儿子,它的贡献为$0$.<br>所以我们的思路类似重链剖分中的寻找重儿子,我们对于每个非叶节点$p$,都在它的子树中找到一个权重最大的子树,然后把它的边权加入到它的重儿子中即可.<br><del>听说这东西叫做长链剖分</del></p><h3 id="政治"><a href="#政治" class="headerlink" title="政治"></a>政治</h3><p>看完题之后首先想到的就是对于每个犯罪团伙两两考虑包含关系然后再统计答案,但是这样的话时间复杂度上界是$O(2^{40})$,无法通过本题.<br>然后我们发现村庄的数量只有$20$个,而且显然如果有两个团伙,他们的控制的村庄的状态一样,那么这两个团伙的收入和支出也一定是一样的.那么我们可以考虑根据每个团伙的控制村庄的二进制开桶,然后根据$S_i$统计每个团伙的答案.<br>不难发现,对于某三个团伙(我们设他们控制的村庄的二进制表示分别为$i,j,k$),那么如果有$i \subsetneqq j , j \subsetneqq k$,那么一定有$i \subsetneqq k$.而如果一个集合$i$是$j$的子集的话,那么必要条件即在二进制表示下$i$中$1$的个数小于等于二进制表示下$j$中$1$的个数.<br>那么我们如果考虑按照二进制表示下$1$的个数来划分集合的$rank$的话,那么显然某一个状态$i$一定会被所有的二进制下$1$的个数小于它的子集转移到,但是这样直接枚举的话是$3^n$的.所以我们考虑到可以用$FMT$优化.<br>因为$FMT$为高维前缀和,我们每一次对于某一个状态$j$,显然$inn_j=inn_j+=inn_{j  xor  ( 1 &lt;&lt; i )} ((1&lt;&lt;i) and  j==1)$.<br>而对于支出的情况.可以发现,对于某个状态$i$,它的支出次数即为包含它的集合的个数,而包含它的集合的个数显然也可以用$FMT$去求解(但是注意转移的时候是由它转移到它的子集)即在进行$FMT$时要用异或之后的状态去更新之前的状态.</p><h3 id="音乐"><a href="#音乐" class="headerlink" title="音乐"></a>音乐</h3><p>首先发现直接使用区间的最大值去减去区间的最小值去更新答案的话显然是不对的,考虑怎么去调整.<br>发现如果我们使用线段树的话,那么对于某个非叶节点,那么它的答案可能是它左子树的答案,也有可能是它右子树的答案.但是对于合并的话貌似直接不能两边的答案取一个$max$.<br>我们发现,对于这个节点左子树中的每一个值,那么右子树中的任何一个比左子树中某一个值大的节点都可以去更新这一个节点.所以,我们直接去用右子树中的任何一个节点,去更新左子树中的任何一个节点是没有问题的.<br>那么我们就可以分别使用左子树中的最小值和右子树中的最大值去维护这个两颗子树合并时的答案.而对于左子树的答案或者右子树的答案可能会大于左右两颗子树合并时的答案的情况,我们可以对于左子树的答案,右子树的答案和右子树的最大值-左子树的最小值去取一个$max$即为这个节点的$ans$值.<br>所以我们需要维护一颗线段树,分别维护区间最大/最小值以及我们要求的答案即可<del>简单线段树练习题</del>.</p><h3 id="体育"><a href="#体育" class="headerlink" title="体育"></a>体育</h3><p>我们发现无解的情况只存在于起点会重复的情况,但是题目中明确给出了起点和终点的坐标不会重复,所以没有无解的情况.<del>而且ACM你只判无解也没分</del><br>然后我们发现,如果我们把起点和终点都按照坐标从小到大排序之后,我们用最小的起点去对应最小的终点的话,发现这个起点是最小的,那么坐标比它大的点到这些点的终点的路径中一定有一段路程不会被包含,对于终点来说同理(如下图)<br><img src="/img/201910301.png" alt="显然的结论">  </p><p>所以我们可以直接排完序之后找答案即可.</p><h3 id="美术"><a href="#美术" class="headerlink" title="美术"></a>美术</h3><p>显然,我们可以设$f_{i,j,01}$表示现在以及考虑了$i$个格子,其中有$j$个格子的颜色和这个格子的上一个的颜色不一样,并且这个格子的颜色和它的上一个的颜色一不一样.<br>那么如果这个格子的颜色和之前的一样的话,就只能继承前$i-1$个格子的答案,而如果这个格子和这个格子的前一个格子的颜色不一样的话,那么这个格子就有$m-1$种涂色方案.<br>根据上边所说的,状态转移方程就很明显了: </p><script type="math/tex; mode=display">\begin{cases}f_{i,j,0}=f_{i-1,j,0}+f_{i-1,j,1}\\f_{i,j,1}=(f_{i-1,j-1,0}+f_{i-1,j-1,1}) \times (m-1)\end{cases}</script><p><del>听说还有组合数学的做法,但是我不会</del></p><h3 id="生物"><a href="#生物" class="headerlink" title="生物"></a>生物</h3><p>首先发现这道题的数据范围非常的迷惑,因为$n$只有$26$而且$a,b,c$只有$9$,所以只要$v$大于$26 \times 9$,我们就不妨钦定$v=26 \times 9$.<br>这样之后发现混乱度可以直接用一维表示出来,所以我们考虑一下$DP$.直觉$DP$的话可以设$f_{i,j}$表示已经考虑了前$i$种相对性状,此时的混乱度是$j$的时候的方案数.但是这样的话我们会发现一个问题,就是我们可能会把同一种基因型在父本的贡献和在母本的贡献算重,而且也不好去重.<br>所以我们考虑加一维状态:我们设$f_{i,j,k}$表示已经考虑了前$i$种相对性状,其中父本贡献的混乱度为$j$,母本贡献的混乱度为$k$时的方案数,在转移的时候直接考虑父本的性状已经母本的性状即可.</p><h3 id="信息"><a href="#信息" class="headerlink" title="信息"></a>信息</h3><p>看上去不好写实际上还挺简单的模拟<del>我不管这道题我一定要放代码(其实是为了凑字数)</del> </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii std::pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pll std::pair<span class="meta-string">&lt;ll,ll&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MP std::make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> oo 2147483647</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PI 3.141592653590</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rint register int</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> F(i,a,b) for(rint i=a;i&lt;=b;i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> D(i,a,b) for(rint i=a;i&gt;=b;i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> G(i,num,b,c) for(rint num=head[b];num;num=c[num].next)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">int</span> _read () &#123;<span class="keyword">int</span> s = <span class="number">0</span> , w = <span class="number">1</span>;<span class="keyword">char</span> ch = getchar ();<span class="keyword">while</span> ( ch &gt; <span class="string">'9'</span> || ch &lt; <span class="string">'0'</span> ) &#123; <span class="keyword">if</span> ( ch == <span class="string">'-'</span> ) w = <span class="number">-1</span>; ch = getchar ();&#125;<span class="keyword">while</span> ( ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span> ) &#123; s = s * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar ();&#125;<span class="keyword">return</span> s * w;&#125;</span><br><span class="line"><span class="keyword">template</span> &lt; <span class="class"><span class="keyword">class</span> <span class="title">T</span> &gt; <span class="title">inline</span> <span class="title">void</span> <span class="title">read</span> ( <span class="title">T</span> &amp;<span class="title">x</span> ) &#123;</span>T s = <span class="number">0</span> , w = <span class="number">1</span>;<span class="keyword">char</span> ch = getchar ();<span class="keyword">while</span> ( ch &gt; <span class="string">'9'</span> || ch &lt; <span class="string">'0'</span> ) &#123; <span class="keyword">if</span> ( ch == <span class="string">'-'</span> ) w = <span class="number">-1</span>; ch = getchar ();&#125;<span class="keyword">while</span> ( ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span> ) &#123; s = s * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar ();&#125;x = s * w;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="keyword">template</span> &lt; <span class="class"><span class="keyword">class</span> <span class="title">T</span> , <span class="title">typename</span> ...<span class="title">Argc</span> &gt; <span class="title">inline</span> <span class="title">void</span> <span class="title">read</span> ( <span class="title">T</span> &amp;<span class="title">x</span> , <span class="title">Argc</span> &amp;...<span class="title">Args</span> ) &#123;</span>read ( x );read ( Args... );<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="keyword">template</span> &lt; <span class="class"><span class="keyword">class</span> <span class="title">T</span> &gt; <span class="title">inline</span> <span class="title">T</span> <span class="title">max</span> ( <span class="title">T</span> <span class="title">x</span> , <span class="title">T</span> <span class="title">y</span> ) &#123;</span><span class="keyword">return</span> x &gt; y ? x : y;&#125;</span><br><span class="line"><span class="keyword">template</span> &lt; <span class="class"><span class="keyword">class</span> <span class="title">T</span> &gt; <span class="title">inline</span> <span class="title">T</span> <span class="title">min</span> ( <span class="title">T</span> <span class="title">x</span> , <span class="title">T</span> <span class="title">y</span> ) &#123;</span><span class="keyword">return</span> x &lt; y ? x : y;&#125;</span><br><span class="line"><span class="keyword">template</span> &lt; <span class="class"><span class="keyword">class</span> <span class="title">T</span> &gt; <span class="title">inline</span> <span class="title">void</span> <span class="title">abs</span> ( <span class="title">T</span> <span class="title">x</span> ) &#123;</span><span class="keyword">return</span> x &gt; <span class="number">0</span> ? x : -x;&#125;</span><br><span class="line"><span class="keyword">template</span> &lt; <span class="keyword">typename</span> T &gt; <span class="function"><span class="keyword">void</span> <span class="title">write</span> <span class="params">( T x )</span> </span>&#123;<span class="keyword">if</span> ( x &lt; <span class="number">0</span> ) x = -x , <span class="built_in">putchar</span> ( <span class="string">'-'</span> );<span class="keyword">if</span> ( x &gt; <span class="number">9</span> ) write ( x / <span class="number">10</span> );<span class="built_in">putchar</span> ( x % <span class="number">10</span> + <span class="number">48</span> );<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="keyword">template</span> &lt; <span class="keyword">typename</span> T &gt; <span class="function"><span class="keyword">void</span> <span class="title">writeln</span> <span class="params">( T x )</span> </span>&#123;write ( x ); <span class="built_in">printf</span> (<span class="string">"\n"</span>); &#125;</span><br><span class="line"><span class="keyword">template</span> &lt; <span class="class"><span class="keyword">class</span> <span class="title">T</span> &gt; <span class="title">inline</span> <span class="title">T</span> <span class="title">gcd</span> ( <span class="title">T</span> <span class="title">x</span> , <span class="title">T</span> <span class="title">y</span> ) &#123;</span><span class="keyword">if</span> ( x &lt; y ) swap ( x , y );<span class="keyword">if</span> ( !y ) <span class="keyword">return</span> x;<span class="keyword">return</span> gcd ( y , x % y );&#125;</span><br><span class="line"><span class="keyword">template</span> &lt; <span class="class"><span class="keyword">class</span> <span class="title">T</span> &gt; <span class="title">inline</span> <span class="title">T</span> <span class="title">ksm</span> ( <span class="title">T</span> <span class="title">x</span> , <span class="title">T</span> <span class="title">y</span> , <span class="title">T</span> <span class="title">Mod</span> ) &#123;</span>T tmp = <span class="number">1</span>;<span class="keyword">while</span> ( y ) &#123;<span class="keyword">if</span> ( y % <span class="number">2</span> == <span class="number">1</span> ) tmp = ( tmp * x % Mod );x = ( x * x ) % Mod;y &gt;&gt;= <span class="number">1</span>;&#125;<span class="keyword">return</span> tmp;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**********************************************************************************************************************************************************************************************************************************************************************/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1005</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n , m , sx , sy;</span><br><span class="line"><span class="keyword">int</span> indeque[N][N];</span><br><span class="line"><span class="keyword">char</span> mp[N][N] , operation[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">init</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">read ( n , m );</span><br><span class="line">F ( i , <span class="number">1</span> , n ) </span><br><span class="line"><span class="built_in">scanf</span> ( <span class="string">"%s"</span> , mp[i] + <span class="number">1</span> );</span><br><span class="line">F ( i , <span class="number">1</span> , n ) </span><br><span class="line">F ( j , <span class="number">1</span> , m ) </span><br><span class="line"><span class="keyword">if</span> ( mp[i][j] == <span class="string">'@'</span> ) &#123;</span><br><span class="line">mp[i][j] = <span class="string">'.'</span>;</span><br><span class="line">sx = i , sy = j;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">scanf</span> ( <span class="string">"%s"</span> , operation + <span class="number">1</span> );</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">FindDir</span> <span class="params">( <span class="keyword">int</span> &amp;dx , <span class="keyword">int</span> &amp;dy , <span class="keyword">char</span> op )</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> ( op == <span class="string">'W'</span> ) </span><br><span class="line">dx = <span class="number">-1</span> , dy = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> ( op == <span class="string">'A'</span> ) </span><br><span class="line">dx = <span class="number">0</span> , dy = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> ( op == <span class="string">'S'</span> ) </span><br><span class="line">dx = <span class="number">1</span> , dy = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> ( op == <span class="string">'D'</span> ) </span><br><span class="line">dx = <span class="number">0</span> , dy = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> x , y;</span><br><span class="line">&#125;qu[ ( N * N )*<span class="number">6</span>];</span><br><span class="line"><span class="keyword">int</span> hea = N * N , tail = ( N * N ) - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Debug</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">F ( i , <span class="number">1</span> , n ) &#123;</span><br><span class="line">F ( j , <span class="number">1</span> , m )</span><br><span class="line"><span class="keyword">if</span> ( indeque[i][j] )&#123;</span><br><span class="line"><span class="keyword">if</span>(indeque[i][j] == hea ) </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c"</span>,<span class="string">'@'</span>);</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c"</span>,<span class="string">'X'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line"><span class="built_in">printf</span> ( <span class="string">"%c"</span>,mp[i][j] ); </span><br><span class="line"><span class="built_in">puts</span> ( <span class="string">""</span> );</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">puts</span> ( <span class="string">""</span> );</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">work</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">qu[++tail] = ( Node ) &#123; sx , sy &#125;;</span><br><span class="line">indeque[sx][sy] = tail;</span><br><span class="line"><span class="keyword">int</span> len = <span class="built_in">strlen</span> ( operation + <span class="number">1</span> );</span><br><span class="line">F ( T , <span class="number">1</span> , len ) &#123;</span><br><span class="line"><span class="keyword">char</span> op = operation[T];</span><br><span class="line"><span class="keyword">int</span> dx , dy;</span><br><span class="line">FindDir ( dx , dy , op );</span><br><span class="line"><span class="keyword">int</span> nx = qu[hea].x , ny = qu[hea].y;</span><br><span class="line"><span class="keyword">int</span> tx = qu[tail].x , ty = qu[tail].y;</span><br><span class="line"><span class="keyword">if</span> ( mp[nx + dx][ny + dy] == <span class="string">'.'</span> &amp;&amp; !indeque[nx + dx][ny + dy] ) &#123;</span><br><span class="line">qu[--hea] = ( Node ) &#123; nx + dx , ny + dy &#125;;</span><br><span class="line">indeque[nx + dx][ny + dy] = hea;</span><br><span class="line">indeque[tx][ty] = <span class="number">0</span>;</span><br><span class="line">tail--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> ( mp[nx + dx][ny + dy] == <span class="string">'o'</span> ) &#123;</span><br><span class="line">qu[--hea] = ( Node ) &#123; nx + dx , ny + dy &#125;;</span><br><span class="line">indeque[nx + dx][ny + dy] = hea;</span><br><span class="line">mp[nx + dx][ny + dy] = <span class="string">'.'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> ( indeque[nx + dx][ny + dy] ) &#123;</span><br><span class="line"><span class="keyword">int</span> start = indeque[nx + dx][ny + dy];</span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">int</span> i = start ; i &lt;= tail ; i++ ) &#123;</span><br><span class="line"><span class="keyword">int</span> xx = qu[i].x , yy = qu[i].y;</span><br><span class="line">indeque[xx][yy] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> ( tail &gt;= start ) </span><br><span class="line">tail--;</span><br><span class="line">qu[--hea] = ( Node ) &#123; nx + dx , ny + dy &#125;;</span><br><span class="line">indeque[nx + dx][ny + dy] = hea;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> ( nx + dx &gt; m || ny + dy &gt; n || nx + dx &lt;= <span class="number">0</span> || ny + dy &lt;= <span class="number">0</span> || mp[nx + dx][ny + dy] == <span class="string">'#'</span> ) &#123;</span><br><span class="line"><span class="built_in">puts</span> ( <span class="string">"-1"</span> );</span><br><span class="line"><span class="built_in">exit</span> ( <span class="number">0</span> );</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Debug ();</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">print</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">F ( i , <span class="number">1</span> , n ) </span><br><span class="line">F ( j , <span class="number">1</span> , m ) </span><br><span class="line"><span class="keyword">if</span> ( mp[i][j] == <span class="string">'#'</span> || mp[i][j] == <span class="string">'o'</span> ) </span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">mp[i][j] = <span class="string">'.'</span>;</span><br><span class="line"><span class="keyword">int</span> xx = qu[hea].x , yy = qu[hea].y;</span><br><span class="line">mp[xx][yy] = <span class="string">'@'</span>;</span><br><span class="line">hea++;</span><br><span class="line"><span class="keyword">while</span> ( hea &lt;= tail ) &#123;</span><br><span class="line">xx = qu[hea].x , yy = qu[hea].y;</span><br><span class="line">mp[xx][yy] = <span class="string">'X'</span>;</span><br><span class="line">hea++;</span><br><span class="line">&#125;</span><br><span class="line">F ( i , <span class="number">1</span> , n ) &#123;</span><br><span class="line">F ( j , <span class="number">1</span> , m ) </span><br><span class="line"><span class="built_in">printf</span> ( <span class="string">"%c"</span> , mp[i][j] );</span><br><span class="line"><span class="built_in">puts</span> ( <span class="string">""</span> );</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">( <span class="keyword">void</span> )</span> </span>&#123;</span><br><span class="line">init ();</span><br><span class="line">work ();</span><br><span class="line">print ();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote class="blockquote-center">因为知道了自己是多么的菜,所以才要更加努力去追求那个永远也不可能实现的梦想</blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;校内题目就不公开题面啦x&lt;br&gt;
    
    </summary>
    
    
      <category term="OI" scheme="http://krrrr.top/%E5%88%86%E7%B1%BB/OI/"/>
    
    
      <category term="模拟赛题解" scheme="http://krrrr.top/%E6%A0%87%E7%AD%BE/%E6%A8%A1%E6%8B%9F%E8%B5%9B%E9%A2%98%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>[POJ2284]That Nice Euler Circuit</title>
    <link href="http://krrrr.top/2019/10/28/POJ2284-ThatNiceEulerCircuit/"/>
    <id>http://krrrr.top/2019/10/28/POJ2284-ThatNiceEulerCircuit/</id>
    <published>2019-10-28T12:38:15.000Z</published>
    <updated>2019-10-28T12:44:38.050Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://poj.org/problem?id=2284" target="_blank" rel="noopener">传送门</a><br><a id="more"></a></p><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>首先我们想到的就是直接开二维数组模拟然后$bfs$统计答案.但是这样的话时间复杂度是不行的,所以我们需要考虑其他方法.<br>我们考虑到<strong>欧拉公式</strong>,即$E=V+F-2$.在这里$E$为边数,$V$为点数,$F$为面的个数.<br>本来这个欧拉公式是求三维的情况的,但是发现二维的情况也适用,<del>所以我把它称为木大公式</del>.<br>可以直接开$map$统计点和边的个数,然后试用欧拉公式进行计算即可. (注意特判刚开始$0$的情况)</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">5e5</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> NodeNum , EdgeNum;</span><br><span class="line"><span class="keyword">char</span> s[N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">kuai</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> x , y;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span> &lt; ( kuai x , kuai y ) &#123;</span><br><span class="line"><span class="keyword">if</span> ( x.x == y.x ) </span><br><span class="line"><span class="keyword">return</span> x.y &lt; y.y;</span><br><span class="line"><span class="keyword">return</span> x.x &lt; y.x;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">map</span> &lt; kuai , <span class="keyword">bool</span> &gt; Node;</span><br><span class="line"><span class="built_in">map</span> &lt; pair &lt; kuai , kuai &gt; , <span class="keyword">bool</span> &gt; Edge; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">( <span class="keyword">void</span> )</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">scanf</span> ( <span class="string">"%s"</span> , s + <span class="number">1</span> );</span><br><span class="line"><span class="keyword">int</span> n = <span class="built_in">strlen</span> ( s + <span class="number">1</span> );</span><br><span class="line"><span class="keyword">int</span> xx = <span class="number">0</span> , yy = <span class="number">0</span>;</span><br><span class="line">Node[ kuai &#123; <span class="number">0</span> , <span class="number">0</span> &#125; ] = <span class="number">1</span>;</span><br><span class="line">NodeNum = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= n ; i++ ) &#123;</span><br><span class="line"><span class="keyword">int</span> lx = xx , ly = yy;</span><br><span class="line"><span class="keyword">if</span> ( s[i] == <span class="string">'L'</span> ) </span><br><span class="line">xx--;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> ( s[i] == <span class="string">'R'</span> ) </span><br><span class="line">xx++;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> ( s[i] == <span class="string">'U'</span> ) </span><br><span class="line">yy++;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> ( s[i] == <span class="string">'D'</span> ) </span><br><span class="line">yy--;</span><br><span class="line"><span class="keyword">if</span> ( !Node[ kuai &#123; xx , yy &#125; ] ) &#123;</span><br><span class="line">Node[ kuai &#123; xx , yy &#125; ] = <span class="number">1</span>;</span><br><span class="line">NodeNum++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ( !Edge[ make_pair ( kuai &#123; lx , ly &#125; , kuai &#123; xx , yy &#125; ) ] &amp;&amp; !Edge[ make_pair ( kuai &#123; xx , yy &#125; , kuai &#123; lx , ly &#125; ) ] ) &#123;</span><br><span class="line">Edge[ make_pair ( kuai &#123; xx , yy &#125; , kuai &#123; lx , ly &#125; ) ] = <span class="number">1</span>;</span><br><span class="line">Edge[ make_pair ( kuai &#123; lx , ly &#125; , kuai &#123; xx , yy &#125; ) ] = <span class="number">1</span>;</span><br><span class="line">EdgeNum++;</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//printf ( "step:%d , from(%d,%d) -&gt; to(%d,%d)\n" , i , lx , ly , xx , yy );</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//printf ( "%d %d\n" , EdgeNum , NodeNum );</span></span><br><span class="line"><span class="built_in">printf</span> ( <span class="string">"%d\n"</span> , EdgeNum - NodeNum + <span class="number">2</span> ); </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote class="blockquote-center">因为知道了自己是多么的菜,所以才要更加努力去追求那个永远也不可能实现的梦想</blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://poj.org/problem?id=2284&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;传送门&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="OI" scheme="http://krrrr.top/%E5%88%86%E7%B1%BB/OI/"/>
    
    
      <category term="计算几何" scheme="http://krrrr.top/%E6%A0%87%E7%AD%BE/%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95/"/>
    
      <category term="数学" scheme="http://krrrr.top/%E6%A0%87%E7%AD%BE/%E6%95%B0%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>[AtCoder Beginner Contest 144]题解</title>
    <link href="http://krrrr.top/2019/10/28/AtcoderABC144%E9%A2%98%E8%A7%A3/"/>
    <id>http://krrrr.top/2019/10/28/AtcoderABC144题解/</id>
    <published>2019-10-28T01:32:17.000Z</published>
    <updated>2019-10-28T07:25:15.455Z</updated>
    
    <content type="html"><![CDATA[<p>我菜爆了😢<br><a id="more"></a></p><h3 id="9x9"><a href="#9x9" class="headerlink" title="9x9"></a>9x9</h3><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>签到题,直接判断一下两个数的大小即可.</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">( <span class="keyword">void</span> )</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> a , b;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b;</span><br><span class="line"><span class="keyword">if</span> ( a &gt;= <span class="number">1</span> &amp;&amp; a &lt;= <span class="number">9</span> &amp;&amp; b &gt;= <span class="number">1</span> &amp;&amp; b &lt;= <span class="number">9</span> ) </span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; a * b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"-1"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="81"><a href="#81" class="headerlink" title="81"></a>81</h3><h4 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h4><p>从$2$枚举到$9$然后判断一下另一半是否小于$10$即可,注意$1$的情况.</p><h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">( <span class="keyword">void</span> )</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> a , b;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; a;</span><br><span class="line"><span class="keyword">if</span> ( a == <span class="number">1</span> ) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Yes"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">2</span> ; i &lt;= <span class="number">9</span> ; i++ ) </span><br><span class="line"><span class="keyword">if</span> ( a % i == <span class="number">0</span> ) &#123;</span><br><span class="line"><span class="keyword">if</span> ( a / i &lt;= <span class="number">9</span> &amp;&amp; a / i &gt;= <span class="number">1</span> ) &#123; </span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Yes"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"No"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Walk-on-Multiplication-Table"><a href="#Walk-on-Multiplication-Table" class="headerlink" title="Walk on Multiplication Table"></a>Walk on Multiplication Table</h3><h4 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h4><p>我们可以在$\sqrt{n}$的时间内枚举出每个数的因数,然后对于每个因子判断一下是否可以更新答案即可.</p><h4 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">( <span class="keyword">void</span> )</span> </span>&#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> a;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; a;</span><br><span class="line"><span class="keyword">if</span> ( a == <span class="number">1</span> ) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"0"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> ans = <span class="number">1e16</span>;</span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= <span class="built_in">sqrt</span> ( a ) ; i++ ) &#123;</span><br><span class="line"><span class="keyword">if</span> ( a % i == <span class="number">0</span> ) </span><br><span class="line">ans = min ( ans , ( i - <span class="number">1</span> ) + ( a / i ) - <span class="number">1</span> );  </span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Water-Bottle"><a href="#Water-Bottle" class="headerlink" title="Water Bottle"></a>Water Bottle</h3><h4 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h4><p>根据生活常识,我们发现如果把杯子倾斜,水能洒出来的话,从这个杯子的剖面去看,一共会有两种情况:剖面是个梯形与剖面是个三角形.<br>而又因为当<strong>只有本来杯子内水的体积占用了原来杯子的体积的一半以上时</strong>剖面才会是个梯形,所以我们可以分两种情况分别讨论.<br>我们将剖面画出来,然后发现这个图形的面积$S \times a$即为水的体积$x$,所以我们就可以算出来可变边的长度,再根据反三角函数计算出本来的解是多少.</p><p>弧度转角度: 角度=弧度$ \times 180 / Π$</p><h4 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">double</span> a,b,x;</span><br><span class="line"><span class="keyword">double</span> Rad_to_deg  = <span class="number">45.0</span> / <span class="built_in">atan</span>(<span class="number">1.0</span>);</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">( <span class="keyword">void</span> )</span> </span>&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b&gt;&gt;x;</span><br><span class="line"><span class="keyword">if</span> ( x &gt;= ( a * a * b ) / <span class="number">2</span> ) &#123;</span><br><span class="line"><span class="keyword">double</span> C = <span class="number">2.0</span> * b - ( <span class="number">2.0</span> * x / ( a * a ) );</span><br><span class="line"><span class="keyword">double</span> hu = <span class="built_in">atan</span> ( a / C );</span><br><span class="line">hu = hu * Rad_to_deg * <span class="number">1.0</span>;</span><br><span class="line"><span class="built_in">printf</span> ( <span class="string">"%.10lf\n"</span> , <span class="number">90.0000000</span> - hu );</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">double</span> A = ( <span class="number">2.0</span> * x ) / ( a * b );</span><br><span class="line"><span class="keyword">double</span> hu = <span class="built_in">atan</span> ( A / b );</span><br><span class="line">hu = hu * Rad_to_deg * <span class="number">1.0</span>;</span><br><span class="line"><span class="built_in">printf</span> ( <span class="string">"%.10lf\n"</span> , <span class="number">90.0000000</span> - hu );</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Gluttony"><a href="#Gluttony" class="headerlink" title="Gluttony"></a>Gluttony</h3><h4 id="思路-4"><a href="#思路-4" class="headerlink" title="思路"></a>思路</h4><p>根据我们的直觉,我们把$A$数组从小到大排序,然后把$F$数组从大到小排序,这样的话答案一定是最优的<del>请自行证明</del>.<br>然后我们考虑怎么统计答案,显然,题目中要求最大值最小,所以我们可以二分这个最大值$mid$,然后对于每一组$A_i$与$F_i$,我们设$cnt_i$为使这组$A_i \times B_i &lt;= mid$时需要的锻炼次数.<br>然后我们就可以列出$F_i \times ( A_i - cnt_i ) &lt;= mid $ , 即$cnt_i = max ( 0 , A_i - mid / F_i )$.</p><h4 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span> <span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> s = <span class="number">0</span> , w = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">char</span> ch = getchar ();</span><br><span class="line"><span class="keyword">while</span> ( ch &gt; <span class="string">'9'</span> || ch &lt; <span class="string">'0'</span> ) &#123; <span class="keyword">if</span> ( ch == <span class="string">'-'</span> ) w = <span class="number">-1</span>; ch = getchar ();&#125;</span><br><span class="line"><span class="keyword">while</span> ( ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span> ) &#123; s = s * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar ();&#125;</span><br><span class="line"><span class="keyword">return</span> s * w;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> n , k;</span><br><span class="line"><span class="keyword">int</span> A[N] , F[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">cmp</span> <span class="params">( <span class="keyword">int</span> x , <span class="keyword">int</span> y )</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> x &gt; y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">check</span> <span class="params">( <span class="keyword">int</span> mid )</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= n ; i++ ) </span><br><span class="line">cnt += max ( <span class="number">0l</span>l , A[i] - mid / F[i] );</span><br><span class="line"><span class="keyword">if</span> ( cnt &lt;= k ) </span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span> <span class="params">( <span class="keyword">void</span> )</span> </span>&#123;</span><br><span class="line">n = read () , k = read ();</span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= n ; i++ ) </span><br><span class="line">A[i] = read ();</span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= n ; i++ ) </span><br><span class="line">F[i] = read ();</span><br><span class="line">sort ( A + <span class="number">1</span> , A + <span class="number">1</span> + n );</span><br><span class="line">sort ( F + <span class="number">1</span> , F + <span class="number">1</span> + n , cmp );</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> l = <span class="number">0</span> , r = <span class="number">1e16</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> ( l &lt;= r ) &#123;</span><br><span class="line"><span class="keyword">int</span> mid = ( l + r ) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> ( check ( mid ) ) </span><br><span class="line">r = mid - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">l = mid + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span> ( <span class="string">"%lld\n"</span> , l );</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote class="blockquote-center">因为知道了自己是多么的菜,所以才要更加努力去追求那个永远也不可能实现的梦想</blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我菜爆了😢&lt;br&gt;
    
    </summary>
    
    
      <category term="OI" scheme="http://krrrr.top/%E5%88%86%E7%B1%BB/OI/"/>
    
    
      <category term="Atcoder题解" scheme="http://krrrr.top/%E6%A0%87%E7%AD%BE/Atcoder%E9%A2%98%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>普转提D6</title>
    <link href="http://krrrr.top/2019/10/28/%E6%99%AE%E8%BD%AC%E6%8F%90D6/"/>
    <id>http://krrrr.top/2019/10/28/普转提D6/</id>
    <published>2019-10-28T01:31:42.000Z</published>
    <updated>2019-10-28T08:01:32.191Z</updated>
    
    <content type="html"><![CDATA[<p>版权原因,题面不公开<br><a id="more"></a></p><h3 id="石头"><a href="#石头" class="headerlink" title="石头"></a>石头</h3><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>我们设$f_i$表示前$i$个序列中能排出多少序列.那么显然有$f_i=\sum  f_j([\sum_{k=1}^{j+1}a_k]是素数)$</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ha 987654321</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span> ;</span><br><span class="line"><span class="keyword">int</span> n , f[N] , s[N] , vis[N] , num , prime[N] ;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pre</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span> ; i &lt; N ; i ++) &#123;</span><br><span class="line"><span class="keyword">if</span>(!vis[i]) prime[++num] = i ;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span> ; j &lt;N &amp;&amp; i*prime[j] &lt;N ; j ++) &#123;</span><br><span class="line">vis[i*prime[j]] = <span class="number">1</span> ;</span><br><span class="line"><span class="keyword">if</span>(i % prime[j] == <span class="number">0</span>) <span class="keyword">break</span> ;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">vis[<span class="number">1</span>] = <span class="number">1</span> ;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">int</span> a[<span class="number">2000</span>] ;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span> <span class="params">()</span> </span>&#123; </span><br><span class="line">pre() ;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;n) ;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= n ; i ++) &#123;</span><br><span class="line"><span class="keyword">int</span> x ;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;x) ;</span><br><span class="line">a[i] = x ;</span><br><span class="line">s[i] = s[i<span class="number">-1</span>] + a[i] ;</span><br><span class="line">&#125;</span><br><span class="line">f[<span class="number">0</span>] = <span class="number">1</span> ;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= n ; i ++ ) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span> ; j &lt; i ; j ++) &#123;</span><br><span class="line"><span class="keyword">if</span>(!vis[s[i]-s[j]]) f[i] = (f[i] + f[j])%ha ;</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="built_in">cout</span> &lt;&lt; f[n]%ha &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="载重"><a href="#载重" class="headerlink" title="载重"></a>载重</h3><h4 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h4><p>先预处理出一个最大生成树,然后$check$两点之间的最大瓶颈路与给定的值的大小关系即可.</p><h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span> <span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> s = <span class="number">0</span> , w = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">char</span> ch = getchar ();</span><br><span class="line"><span class="keyword">while</span> ( ch &gt; <span class="string">'9'</span> || ch &lt; <span class="string">'0'</span> ) &#123; <span class="keyword">if</span> ( ch == <span class="string">'-'</span> ) w = <span class="number">-1</span>; ch = getchar ();&#125;</span><br><span class="line"><span class="keyword">while</span> ( ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span> ) &#123; s = s * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar ();&#125;</span><br><span class="line"><span class="keyword">return</span> s * w;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">3e5</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n , m , q , t;</span><br><span class="line"><span class="keyword">int</span> head[N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> from;</span><br><span class="line"><span class="keyword">int</span> to;</span><br><span class="line"><span class="keyword">int</span> date;</span><br><span class="line"><span class="keyword">int</span> next;</span><br><span class="line">&#125;e[M &lt;&lt; <span class="number">1</span>] , G[M &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> father[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">cmp</span> <span class="params">( Edge x , Edge y )</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> x.date &gt; y.date;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span> <span class="params">( <span class="keyword">int</span> cur )</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> ( father[cur] != cur ) </span><br><span class="line">father[cur] = find ( father[cur] );</span><br><span class="line"><span class="keyword">return</span> father[cur];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Union</span> <span class="params">( <span class="keyword">int</span> x , <span class="keyword">int</span> y )</span> </span>&#123;</span><br><span class="line">x = find ( x ) , y = find ( y );</span><br><span class="line">father[x] = y;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">Judge</span> <span class="params">( <span class="keyword">int</span> x , <span class="keyword">int</span> y )</span> </span>&#123;</span><br><span class="line">x = find ( x ) , y = find ( y );</span><br><span class="line"><span class="keyword">if</span> ( x == y ) </span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span> <span class="params">( <span class="keyword">int</span> x , <span class="keyword">int</span> y , <span class="keyword">int</span> z )</span> </span>&#123;</span><br><span class="line">G[++t].to = y;</span><br><span class="line">G[t].from = x;</span><br><span class="line">G[t].date = z;</span><br><span class="line">G[t].next = head[x];</span><br><span class="line">head[x] = t;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> p[N][<span class="number">22</span>] , mins[N][<span class="number">22</span>];</span><br><span class="line"><span class="keyword">int</span> deep[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Creat</span> <span class="params">( <span class="keyword">int</span> root , <span class="keyword">int</span> fa )</span> </span>&#123;</span><br><span class="line">p[root][<span class="number">0</span>] = fa;</span><br><span class="line">deep[root] = deep[fa] + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">int</span> i = head[root] ; i ; i = G[i].next ) &#123;</span><br><span class="line"><span class="keyword">int</span> j = G[i].to;</span><br><span class="line"><span class="keyword">if</span> ( j == fa ) </span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">mins[j][<span class="number">0</span>] = G[i].date;</span><br><span class="line">Creat ( j , root );</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">LCA</span> <span class="params">( <span class="keyword">int</span> x , <span class="keyword">int</span> y )</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> minn = <span class="number">2147483647</span>;</span><br><span class="line"><span class="keyword">if</span> ( deep[x] &gt; deep[y] ) </span><br><span class="line"><span class="built_in">std</span> :: swap ( x , y );</span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">21</span> ; i &gt;= <span class="number">0</span> ; i-- ) </span><br><span class="line"><span class="keyword">if</span> ( deep[x] &lt;= deep[y] - ( <span class="number">1</span> &lt;&lt; i ) ) &#123;</span><br><span class="line">minn = <span class="built_in">std</span> :: min ( minn , mins[y][i] );</span><br><span class="line">y = p[y][i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ( x == y ) </span><br><span class="line"><span class="keyword">return</span> minn;</span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">21</span> ; i &gt;= <span class="number">0</span> ; i-- ) &#123;</span><br><span class="line"><span class="keyword">if</span> ( p[x][i] == p[y][i] )  </span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">minn = <span class="built_in">std</span> :: min ( minn , <span class="built_in">std</span> :: min ( mins[x][i] , mins[y][i] ) );</span><br><span class="line">x = p[x][i];</span><br><span class="line">y = p[y][i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">std</span> :: min ( minn , <span class="built_in">std</span> :: min ( mins[x][<span class="number">0</span>] , mins[y][<span class="number">0</span>] ) );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">( <span class="keyword">void</span> )</span> </span>&#123;</span><br><span class="line">n = read () , m = read () , q = read ();</span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= m ; i++ ) &#123;</span><br><span class="line"><span class="keyword">int</span> x = read () , y = read () , z = read ();</span><br><span class="line">e[i].from = x;</span><br><span class="line">e[i].to = y;</span><br><span class="line">e[i].date = z;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">register</span> <span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= n ; i++ ) </span><br><span class="line">father[i] = i;</span><br><span class="line"><span class="built_in">memset</span> ( mins , <span class="number">0x3f3f3f3f</span> , <span class="keyword">sizeof</span> ( mins ) );</span><br><span class="line"><span class="built_in">std</span> :: sort ( e + <span class="number">1</span> , e + <span class="number">1</span> + m , cmp );</span><br><span class="line"><span class="keyword">int</span> NowEdge = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= m &amp;&amp; NowEdge != n - <span class="number">1</span> ; i++ ) &#123;</span><br><span class="line"><span class="keyword">int</span> l = e[i].from , r = e[i].to;</span><br><span class="line"><span class="keyword">if</span> ( !Judge ( l , r ) ) &#123;</span><br><span class="line">Union ( l , r );</span><br><span class="line">NowEdge++;</span><br><span class="line">add ( l , r , e[i].date );</span><br><span class="line">add ( r , l , e[i].date );</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ( NowEdge == n - <span class="number">1</span> ) </span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= n ; i++ ) </span><br><span class="line"><span class="keyword">if</span> ( deep[i] == <span class="number">0</span> ) &#123;</span><br><span class="line"> deep[i] = <span class="number">1</span>;</span><br><span class="line"> p[i][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line"> Creat ( i , <span class="number">0</span> );</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">int</span> j = <span class="number">1</span> ; j &lt;= <span class="number">21</span> ; j++ ) </span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= n ; i++ ) &#123;</span><br><span class="line">p[i][j] = p[p[i][j - <span class="number">1</span>]][j - <span class="number">1</span>];</span><br><span class="line">mins[i][j] = <span class="built_in">std</span> :: min ( mins[i][j - <span class="number">1</span>] , mins[p[i][j - <span class="number">1</span>]][j - <span class="number">1</span>] );</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> ( ; q-- ; ) &#123;</span><br><span class="line"><span class="keyword">int</span> l = read () , r = read () , vv = read ();</span><br><span class="line"><span class="keyword">if</span> ( !Judge ( l , r ) )</span><br><span class="line"><span class="built_in">puts</span> ( <span class="string">"No"</span> );</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">int</span> res = LCA ( l , r );</span><br><span class="line"><span class="keyword">if</span> ( res &gt;= vv ) </span><br><span class="line"><span class="built_in">puts</span> ( <span class="string">"Yes"</span> );</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line"><span class="built_in">puts</span> ( <span class="string">"No"</span> );</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="分数"><a href="#分数" class="headerlink" title="分数"></a>分数</h3><h4 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h4><p>我们模拟一下现实中的过程,发现我们需要找出分母所有的质因子并且把他们乘起来就是答案,但是需要写高精度.</p><h4 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span> <span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> s = <span class="number">0</span> , w = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">char</span> ch = getchar ();</span><br><span class="line"><span class="keyword">while</span> ( ch &gt; <span class="string">'9'</span> || ch &lt; <span class="string">'0'</span> ) &#123; <span class="keyword">if</span> ( ch == <span class="string">'-'</span> ) w = <span class="number">-1</span>; ch = getchar ();&#125;</span><br><span class="line"><span class="keyword">while</span> ( ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span> ) &#123; s = s * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar ();&#125;</span><br><span class="line"><span class="keyword">return</span> s * w;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MO = <span class="number">15</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Big</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> len, data[<span class="number">10005</span>];</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">memset</span> ( <span class="keyword">this</span> , <span class="number">0</span> , <span class="keyword">sizeof</span> ( *<span class="keyword">this</span> ) );</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">int</span> &amp; <span class="keyword">operator</span> [] ( <span class="keyword">int</span> k ) &#123; </span><br><span class="line"><span class="keyword">return</span> data[k];</span><br><span class="line">&#125;</span><br><span class="line">    Big &amp; <span class="keyword">operator</span> = ( <span class="keyword">int</span> k ) &#123;</span><br><span class="line">        clear();</span><br><span class="line">        len = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> ( k ) &#123;</span><br><span class="line">            ++len;</span><br><span class="line">data[len] = k &amp; MO;</span><br><span class="line">k &gt;&gt;= <span class="number">4</span>;</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">if</span> ( len == <span class="number">0</span> )</span><br><span class="line">++len;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Big <span class="keyword">operator</span> * ( Big &amp; A ) &#123;</span><br><span class="line">        Big temp;</span><br><span class="line">temp.clear();</span><br><span class="line">temp.len = len + A.len - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= len ; i++ )</span><br><span class="line">            <span class="keyword">for</span> ( <span class="keyword">int</span> j = <span class="number">1</span> ; j &lt;= A.len ; j++ ) &#123;</span><br><span class="line">                temp[i + j - <span class="number">1</span>] += A[j] * data[i];</span><br><span class="line">                temp[i + j] += ( temp[i + j - <span class="number">1</span>] &gt;&gt; <span class="number">4</span> );</span><br><span class="line">                temp[i + j - <span class="number">1</span>] &amp;= MO;</span><br><span class="line">                &#125;</span><br><span class="line">        <span class="keyword">while</span>(temp[temp.len + <span class="number">1</span>])</span><br><span class="line">++temp.len;</span><br><span class="line">        <span class="keyword">return</span> temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = len; i &gt;= <span class="number">1</span>; i--)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%X"</span>, data[i]);</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">'\n'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; temp , ans;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1000005</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> pnum , p[N];</span><br><span class="line"><span class="keyword">bool</span> f[N];</span><br><span class="line"><span class="built_in">map</span> &lt; <span class="keyword">int</span> , <span class="keyword">bool</span> &gt; M;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span> <span class="params">( <span class="keyword">int</span> num )</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= pnum ; i++ ) &#123;</span><br><span class="line">        <span class="keyword">if</span> ( num % p[i] == <span class="number">0</span> )</span><br><span class="line">            <span class="keyword">if</span> ( M[p[i]] == <span class="number">0</span> ) &#123;</span><br><span class="line">                M[p[i]] = <span class="literal">true</span>;</span><br><span class="line">                temp = p[i];</span><br><span class="line">                ans = ans * temp;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">while</span> ( num % p[i] == <span class="number">0</span> )</span><br><span class="line">num /= p[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( num != <span class="number">1</span> )</span><br><span class="line">        <span class="keyword">if</span> ( M[num] == <span class="number">0</span> ) &#123;</span><br><span class="line">            M[num] = <span class="literal">true</span>;</span><br><span class="line">            temp = num;</span><br><span class="line">            ans = ans * temp;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;    </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">( <span class="keyword">void</span> )</span> </span>&#123;</span><br><span class="line">ans = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    T = read ();</span><br><span class="line">    <span class="built_in">memset</span> ( f , <span class="literal">true</span> , <span class="keyword">sizeof</span> ( f ) );</span><br><span class="line">f[<span class="number">0</span>] = f[<span class="number">1</span>] = <span class="literal">false</span>;</span><br><span class="line">    p[pnum = <span class="number">1</span>] = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">int</span> now = <span class="number">2</span> ; now &lt; N ; ) &#123;</span><br><span class="line">        <span class="keyword">for</span> ( <span class="keyword">int</span> j = <span class="number">2</span> * now ; j &lt;= N ; j += now )</span><br><span class="line">f[j] = <span class="literal">false</span>;</span><br><span class="line">        now++;</span><br><span class="line"><span class="keyword">while</span> ( now &lt; N &amp;&amp; !f[now] )</span><br><span class="line">now++;</span><br><span class="line">        <span class="keyword">if</span> ( f[now] )</span><br><span class="line">p[++pnum] = now;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> ( T-- ) &#123;</span><br><span class="line">    <span class="keyword">int</span> x = read () , y = read ();</span><br><span class="line">        <span class="keyword">int</span> d = __gcd ( x , y );</span><br><span class="line">x /= d;</span><br><span class="line">y /= d;</span><br><span class="line">        work ( y );</span><br><span class="line">    &#125;</span><br><span class="line">    ans.print();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="鏼尔德"><a href="#鏼尔德" class="headerlink" title="鏼尔德"></a>鏼尔德</h3><h4 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h4><p>解：设$d_{i,j}$表示走到结点$i$，被收了$j$次路费，最少花了多少钱。<br>状态转移方程：考虑上一个结点，不妨设为$k$。$d_{i,j} = min[max(d_{k,j-1} + i到k的路费, d_{k,j})]$<br>边界：$d_{1,j} = 0$最终解：$d_{n,k}$.</p><h4 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 3010</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 1000000000000000000</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span> &#123;</span></span><br><span class="line">LL to, cost, next;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">queue</span>&lt;LL&gt; q;</span><br><span class="line">edge e[N &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="keyword">bool</span> exist[N];</span><br><span class="line">LL d[N][N], head[N], n, m, K, nedge;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">max</span><span class="params">(LL x, LL y)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> x &gt; y ? x : y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">link</span><span class="params">(LL u, LL v, LL w)</span> </span>&#123;</span><br><span class="line">e[++nedge].to = v;</span><br><span class="line">e[nedge].cost = w;</span><br><span class="line">e[nedge].next = head[u];</span><br><span class="line">head[u] = nedge;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld %lld %lld"</span>, &amp;n, &amp;m, &amp;K);</span><br><span class="line"><span class="keyword">for</span>(LL i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">LL u, v, w;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld %lld %lld"</span>, &amp;u, &amp;v, &amp;w);</span><br><span class="line">link(u, v, w); link(v, u, w);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(LL i = <span class="number">2</span>; i &lt;= n; i++)</span><br><span class="line">fill(&amp;d[i][<span class="number">0</span>], &amp;d[i][N], INF);</span><br><span class="line">q.push(<span class="number">1</span>);</span><br><span class="line">exist[<span class="number">1</span>] = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">while</span>(!q.empty()) &#123;</span><br><span class="line">LL u = q.front();</span><br><span class="line">q.pop();</span><br><span class="line">exist[u] = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">for</span>(LL i = head[u]; i; i = e[i].next) &#123;</span><br><span class="line">LL v = e[i].to, w = e[i].cost;</span><br><span class="line"><span class="keyword">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">for</span>(LL j = <span class="number">0</span>; j &lt;= K; j++) &#123;</span><br><span class="line">LL t = d[u][j];</span><br><span class="line"><span class="keyword">if</span>(j) t = max(t, d[u][j - <span class="number">1</span>] + w);</span><br><span class="line"><span class="keyword">if</span>(d[v][j] &gt; t) &#123;d[v][j] = t; flag = <span class="literal">true</span>;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(flag &amp;&amp; !exist[v]) &#123;</span><br><span class="line">exist[v] = <span class="literal">true</span>;</span><br><span class="line">q.push(v);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld"</span>, d[n][K]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote class="blockquote-center">因为知道了自己是多么的菜,所以才要更加努力去追求那个永远也不可能实现的梦想</blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;版权原因,题面不公开&lt;br&gt;
    
    </summary>
    
    
      <category term="OI" scheme="http://krrrr.top/%E5%88%86%E7%B1%BB/OI/"/>
    
    
      <category term="ZROI" scheme="http://krrrr.top/%E6%A0%87%E7%AD%BE/ZROI/"/>
    
  </entry>
  
  <entry>
    <title>普及五联测D4</title>
    <link href="http://krrrr.top/2019/10/26/%E6%99%AE%E5%8F%8A%E4%BA%94%E8%81%94%E6%B5%8BD4/"/>
    <id>http://krrrr.top/2019/10/26/普及五联测D4/</id>
    <published>2019-10-26T00:49:08.000Z</published>
    <updated>2019-11-05T01:05:46.975Z</updated>
    
    <content type="html"><![CDATA[<p>版权原因,题面不公开.<br><a id="more"></a></p><h3 id="刷题王者"><a href="#刷题王者" class="headerlink" title="刷题王者"></a>刷题王者</h3><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>直接开$map$统计即可.</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">bool</span> mp[<span class="number">10005</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">( <span class="keyword">void</span> )</span> </span>&#123;</span><br><span class="line"><span class="built_in">scanf</span> ( <span class="string">"%d"</span> , &amp;n );</span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= n ; i++ ) &#123;</span><br><span class="line"><span class="keyword">int</span> num;</span><br><span class="line"><span class="built_in">scanf</span> ( <span class="string">"%d"</span> , &amp;num );</span><br><span class="line"><span class="keyword">while</span> ( num-- ) &#123;</span><br><span class="line"><span class="keyword">int</span> x;</span><br><span class="line"><span class="built_in">scanf</span> ( <span class="string">"%d"</span> , &amp;x );</span><br><span class="line">mp[x] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">1000</span> ; i &lt;= <span class="number">9999</span> ; i++ ) </span><br><span class="line"> <span class="keyword">if</span> ( mp[i] ) </span><br><span class="line"> ans++;</span><br><span class="line"><span class="built_in">printf</span> ( <span class="string">"%d\n"</span> , ans );</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="回到原点"><a href="#回到原点" class="headerlink" title="回到原点"></a>回到原点</h3><h4 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h4><p>考虑我们按照原来的字符串进行移动之后的位置$(x,y)$.发现对原来字符串进行操作的话,如果我们把某个向上的和向下的操作变成向左或向右的,那么每次可以从$(x,y)$向左上/下,右上/下移动.<br>所以我们每次可以对于$x$和$y$的绝对值$+1$或者$-1$.所以答案就是$min(abs(x),abs(y)) + max ( abs ( x ) - min ( abs ( x ) , abs ( y ) ) , abs ( y ) - min ( abs ( x ) , abs ( y ) ) ) / 2$.</p><h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1005</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> len , x , y;</span><br><span class="line"><span class="keyword">char</span> s[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">( <span class="keyword">void</span> )</span> </span>&#123;</span><br><span class="line"><span class="built_in">scanf</span> ( <span class="string">"%s"</span> , s + <span class="number">1</span> );</span><br><span class="line">len = <span class="built_in">strlen</span> ( s + <span class="number">1</span> );</span><br><span class="line"><span class="keyword">if</span> ( len &amp; <span class="number">1</span> ) &#123;</span><br><span class="line"><span class="built_in">puts</span> ( <span class="string">"-1"</span> );</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= len ; i++ ) &#123;</span><br><span class="line"><span class="keyword">if</span> ( s[i] == <span class="string">'U'</span> ) </span><br><span class="line">y++;</span><br><span class="line"><span class="keyword">if</span> ( s[i] == <span class="string">'D'</span> ) </span><br><span class="line">y--;</span><br><span class="line"><span class="keyword">if</span> ( s[i] == <span class="string">'L'</span> ) </span><br><span class="line">x--;</span><br><span class="line"><span class="keyword">if</span> ( s[i] == <span class="string">'R'</span> ) </span><br><span class="line">x++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">ans += min ( <span class="built_in">abs</span> ( x ) , <span class="built_in">abs</span> ( y ) );</span><br><span class="line"><span class="keyword">if</span> ( x &gt;= <span class="number">0</span> ) </span><br><span class="line">x -= ans;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> ( x &lt; <span class="number">0</span> ) </span><br><span class="line">x += ans;</span><br><span class="line"><span class="keyword">if</span> ( y &gt;= <span class="number">0</span> ) </span><br><span class="line">y -= ans;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> ( y &lt; <span class="number">0</span> ) </span><br><span class="line">y += ans;</span><br><span class="line"><span class="keyword">if</span> ( x != <span class="number">0</span> ) </span><br><span class="line">ans += <span class="built_in">abs</span> ( x / <span class="number">2</span> );</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> ( y != <span class="number">0</span> ) </span><br><span class="line">ans += <span class="built_in">abs</span> ( y / <span class="number">2</span> );</span><br><span class="line"><span class="built_in">printf</span> ( <span class="string">"%d\n"</span> , ans );</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="快乐矩阵"><a href="#快乐矩阵" class="headerlink" title="快乐矩阵"></a>快乐矩阵</h3><h4 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h4><p>发现原来某些点的贡献可以压缩到一个点,所以我们对每一行求一个前缀差,然后再对这最后一列的前缀差求一个前缀差,判断一下是否为$0$即可.</p><h4 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> mp[<span class="number">505</span>][<span class="number">505</span>];</span><br><span class="line"><span class="keyword">int</span> n , m;</span><br><span class="line"><span class="keyword">int</span> num[<span class="number">505</span>];</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span> <span class="params">( <span class="keyword">void</span> )</span> </span>&#123;</span><br><span class="line"><span class="comment">//freopen ( "C.in" , "r" , stdin );</span></span><br><span class="line">ios :: sync_with_stdio ( <span class="literal">false</span> );</span><br><span class="line"><span class="built_in">cin</span>.tie ( <span class="number">0</span> ) , <span class="built_in">cout</span>.tie ( <span class="number">0</span> );</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= n ; i++ ) </span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">int</span> j = <span class="number">1</span> ; j &lt;= m ; j++ ) </span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; mp[i][j];</span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= n ; i++ ) &#123;</span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">int</span> j = <span class="number">1</span> ; j &lt; m ; j++ )</span><br><span class="line">mp[i][j + <span class="number">1</span>] -= mp[i][j];</span><br><span class="line">num[i] = mp[i][m];</span><br><span class="line"><span class="comment">//cout &lt;&lt; num[i] &lt;&lt; endl;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> now = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">1</span> ; i &lt; n ; i++ ) </span><br><span class="line">num[i + <span class="number">1</span>] -= num[i];</span><br><span class="line">now = num[n];</span><br><span class="line"><span class="keyword">if</span> ( <span class="built_in">abs</span> ( now )  == <span class="number">0</span> ) </span><br><span class="line"><span class="built_in">puts</span> ( <span class="string">"Yes"</span> );</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line"><span class="built_in">puts</span> ( <span class="string">"No"</span> );</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="梦中的位运算"><a href="#梦中的位运算" class="headerlink" title="梦中的位运算"></a>梦中的位运算</h3><h4 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h4><p>发现进行操作一定比不操作更优秀,所以我们要求的就是操作到不能再操作了的时候这个序列的平方和.<br>又因为这个操作的本质就是把$1$都放到某一个数字上,所以我们直接统计一下二进制下某一位出现了多少次然后贪心统计即可.</p><h4 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span> <span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> s = <span class="number">0</span> , w = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">char</span> ch = getchar ();</span><br><span class="line"><span class="keyword">while</span> ( ch &gt; <span class="string">'9'</span> || ch &lt; <span class="string">'0'</span> ) &#123; <span class="keyword">if</span> ( ch == <span class="string">'-'</span> ) w = <span class="number">-1</span>; ch = getchar ();&#125;</span><br><span class="line"><span class="keyword">while</span> ( ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span> ) &#123; s = s * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar ();&#125;</span><br><span class="line"><span class="keyword">return</span> s * w; </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">print</span> <span class="params">( __int128 x )</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> ( !x )</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">print ( x / <span class="number">10</span> );</span><br><span class="line"><span class="built_in">putchar</span> ( x % <span class="number">10</span> + <span class="string">'0'</span> );</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> num[<span class="number">35</span>];</span><br><span class="line">__int128 ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">( <span class="keyword">void</span> )</span> </span>&#123;</span><br><span class="line">n = read ();</span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= n ; i++ ) &#123;</span><br><span class="line"><span class="keyword">int</span> x = read ();</span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">int</span> j = <span class="number">0</span> ; j &lt;= <span class="number">30</span> ; j++ ) </span><br><span class="line"><span class="keyword">if</span> ( x &amp; ( <span class="number">1</span> &lt;&lt; j ) ) </span><br><span class="line">num[j]++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= n ; i++ ) &#123;</span><br><span class="line">__int128 re = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">int</span> j = <span class="number">0</span> ; j &lt;= <span class="number">30</span> ; j++ )</span><br><span class="line"><span class="keyword">if</span> ( num[j] &gt;= i )</span><br><span class="line">re |= (<span class="number">1l</span>l &lt;&lt; j);</span><br><span class="line">ans += re * re;</span><br><span class="line">&#125;</span><br><span class="line">print ( ans );</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote class="blockquote-center">因为知道了自己是多么的菜,所以才要更加努力去追求那个永远也不可能实现的梦想</blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;版权原因,题面不公开.&lt;br&gt;
    
    </summary>
    
    
      <category term="OI" scheme="http://krrrr.top/%E5%88%86%E7%B1%BB/OI/"/>
    
    
      <category term="ZROI" scheme="http://krrrr.top/%E6%A0%87%E7%AD%BE/ZROI/"/>
    
  </entry>
  
</feed>
