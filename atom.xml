<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>KRrrrrrrrr_Blog</title>
  
  <subtitle>以梦为马，不负年华</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://krrrr.xyz/"/>
  <updated>2019-10-18T13:13:15.067Z</updated>
  <id>http://krrrr.xyz/</id>
  
  <author>
    <name>KRrrrrrrrr</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>取石子(概率期望)</title>
    <link href="http://krrrr.xyz/2019/10/16/%E6%A6%82%E7%8E%87%E6%9C%9F%E6%9C%9B%E5%85%A5%E9%97%A8%E5%8F%96%E7%9F%B3%E5%AD%90/"/>
    <id>http://krrrr.xyz/2019/10/16/概率期望入门取石子/</id>
    <published>2019-10-16T06:13:35.000Z</published>
    <updated>2019-10-18T13:13:15.067Z</updated>
    
    <content type="html"><![CDATA[<p>我看我是完全不懂哦<br><a id="more"></a></p><p>题面:<br><img src="https://krrrr.xyz/PicBed/201910162.png" alt="title"><br>其中$1&lt;=n&lt;=10^5$,$1&lt;=a_i&lt;=10^9$</p><p>首先我们推广一下,概率具有可加性(也叫线性性).<br>用公式解释就是$E(XY)=E(X)+E(Y)$.<br>然后具体推广到这道题的话,我们设$E(t)$表示答案,那么$E(t)=[\sum_{i=2}^{n}P_i]+1$.其中$P_i$表示$i$这堆在$1$号堆之前被拿的期望.<br>然后假设我们每次在$1$号堆和$x$号堆之间选择一堆的话,那么选择$x$号堆还是选择$1$号堆之间的<strong>相对概率</strong>是不受其他堆石子影响的.<br>即$P_i=\frac{a_i}{a_i+a_1}$.<br>那么答案很显然就是$ans=[\sum_{i=2}^{n}\frac{a_i}{a_1+a_i}]+ 1$<br>时间复杂度为$O(n)$<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">double</span> a[N];</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="number">0</span>),<span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line"><span class="keyword">double</span> ans=<span class="number">1.0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)</span><br><span class="line">ans=ans+(a[i]/(a[<span class="number">1</span>]+a[i]));</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>因为知道了自己是多么的菜,所以才要更加努力去追求那个永远也不可能实现的梦想</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我看我是完全不懂哦&lt;br&gt;
    
    </summary>
    
    
      <category term="OI" scheme="http://krrrr.xyz/%E5%88%86%E7%B1%BB/OI/"/>
    
    
      <category term="概率期望" scheme="http://krrrr.xyz/%E6%A0%87%E7%AD%BE/%E6%A6%82%E7%8E%87%E6%9C%9F%E6%9C%9B/"/>
    
  </entry>
  
  <entry>
    <title>Karen And SpuerMarket题解</title>
    <link href="http://krrrr.xyz/2019/10/16/SuperMarket/"/>
    <id>http://krrrr.xyz/2019/10/16/SuperMarket/</id>
    <published>2019-10-16T01:54:48.000Z</published>
    <updated>2019-10-18T13:13:15.014Z</updated>
    
    <content type="html"><![CDATA[<p>九条可怜是个可爱的女孩子<br><a id="more"></a><br><img src="https://krrrr.xyz/PicBed/201910161.png" alt="bj"><br>首先发现,题目中的对于使用优惠劵的条件的约束,如果建一张图出来,那么很容易就可以发现满足这是一棵树.<br>所以我们考虑使用树形$DP$来解决问题.<br>我们设$f_{i,j,0/1}$来表示在以$i$为根节点的子树中,选择$j$个使用优惠卷,当前的这个选/不选择优惠卷时能得到的最小<strong>花费</strong>.<br>然后转移的时候枚举一下子树,因为体积都为$1$,所以可以根据经典的树上背包的优化把这道题优化到$O(n^2)$.<br>考虑一下怎么转移,显然,当我们当前到达的$i$这个节点使用优惠券的话,那么它可以从它的子树中使用或者不用优惠卷的状态转移过来,如果当前的这个节点不适用优惠券的话,那么它就只能从它子树的不使用优惠券的状态转移过来.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sz(x) ((int) (x).size())</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> forn(i,n) for (int i = 0; i &lt; int(n); ++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> all(x) (x).begin(), (x).end()</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> i64;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">double</span> ld;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="keyword">int</span>(<span class="number">1e9</span>) + <span class="keyword">int</span>(<span class="number">1e5</span>);</span><br><span class="line"><span class="keyword">const</span> ll infl = ll(<span class="number">2e18</span>) + ll(<span class="number">1e10</span>);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">5005</span>;</span><br><span class="line"><span class="keyword">int</span> B;</span><br><span class="line"><span class="keyword">int</span> c[maxn];</span><br><span class="line"><span class="keyword">int</span> d[maxn];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; g[maxn];</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> kc[maxn][maxn];</span><br><span class="line"><span class="keyword">int</span> kd[maxn][maxn];</span><br><span class="line"><span class="keyword">int</span> cnt[maxn];</span><br><span class="line"><span class="keyword">int</span> buf[<span class="number">2</span>][maxn];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> *a, <span class="keyword">int</span> *b, <span class="keyword">int</span> *to, <span class="keyword">int</span> c1, <span class="keyword">int</span> c2)</span> </span>&#123;</span><br><span class="line">    forn (i, c1 + c2 + <span class="number">1</span>)</span><br><span class="line">        to[i] = inf;</span><br><span class="line">    forn (i, c1 + <span class="number">1</span>)</span><br><span class="line">        forn (j, c2 + <span class="number">1</span>)</span><br><span class="line">            to[i + j] = min(to[i + j], a[i] + b[j]);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> v: g[u])</span><br><span class="line">        dfs(v);</span><br><span class="line">    <span class="keyword">int</span> q = <span class="number">0</span>;</span><br><span class="line">    forn (i, n + <span class="number">1</span>)</span><br><span class="line">        buf[q][i] = inf;</span><br><span class="line"> </span><br><span class="line">    cnt[u] = <span class="number">1</span>;</span><br><span class="line">    buf[q][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    buf[q][<span class="number">1</span>] = c[u];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> v: g[u]) &#123;</span><br><span class="line">        merge(buf[q], kc[v], buf[q ^ <span class="number">1</span>], cnt[u], cnt[v]);</span><br><span class="line">        q ^= <span class="number">1</span>;</span><br><span class="line">        cnt[u] += cnt[v];</span><br><span class="line">    &#125;</span><br><span class="line">    forn (i, n + <span class="number">1</span>)</span><br><span class="line">        kc[u][i] = buf[q][i];</span><br><span class="line"> </span><br><span class="line">    q = <span class="number">0</span>;</span><br><span class="line">    forn (i, n + <span class="number">1</span>)</span><br><span class="line">        buf[q][i] = inf;</span><br><span class="line">    cnt[u] = <span class="number">1</span>;</span><br><span class="line"> </span><br><span class="line">    buf[q][<span class="number">1</span>] = c[u] - d[u];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> v: g[u]) &#123;</span><br><span class="line">        merge(buf[q], kd[v], buf[q ^ <span class="number">1</span>], cnt[u], cnt[v]);</span><br><span class="line">        q ^= <span class="number">1</span>;</span><br><span class="line">        cnt[u] += cnt[v];</span><br><span class="line">    &#125;</span><br><span class="line">    forn (i, n + <span class="number">1</span>)</span><br><span class="line">        kd[u][i] = min(buf[q][i], kc[u][i]);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="number">0</span>),<span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; B;</span><br><span class="line">    forn (i, n) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; c[i] &gt;&gt; d[i];</span><br><span class="line">        <span class="keyword">if</span> (i) &#123;</span><br><span class="line">            <span class="keyword">int</span> x;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; x;</span><br><span class="line">            --x;</span><br><span class="line">            g[x].push_back(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">int</span> p = n;</span><br><span class="line">    <span class="keyword">while</span> (kd[<span class="number">0</span>][p] &gt; B)</span><br><span class="line">        --p;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; p &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>因为知道了自己是多么的菜,所以才要更加努力去追求那个永远也不可能实现的梦想</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;九条可怜是个可爱的女孩子&lt;br&gt;
    
    </summary>
    
    
      <category term="OI" scheme="http://krrrr.xyz/%E5%88%86%E7%B1%BB/OI/"/>
    
    
      <category term="DP" scheme="http://krrrr.xyz/%E6%A0%87%E7%AD%BE/DP/"/>
    
      <category term="树形DP" scheme="http://krrrr.xyz/%E6%A0%87%E7%AD%BE/%E6%A0%91%E5%BD%A2DP/"/>
    
      <category term="背包" scheme="http://krrrr.xyz/%E6%A0%87%E7%AD%BE/%E8%83%8C%E5%8C%85/"/>
    
  </entry>
  
  <entry>
    <title>CodeForces Round #592</title>
    <link href="http://krrrr.xyz/2019/10/15/Round-592/"/>
    <id>http://krrrr.xyz/2019/10/15/Round-592/</id>
    <published>2019-10-15T10:22:48.000Z</published>
    <updated>2019-10-18T13:13:14.986Z</updated>
    
    <content type="html"><![CDATA[<p>我好菜啊<br><a id="more"></a></p><h3 id="Pens-and-Pencils"><a href="#Pens-and-Pencils" class="headerlink" title="Pens and Pencils"></a>Pens and Pencils</h3><p>发现直接除一下,算出来分别需要多少铅笔和钢笔,最后看一下加起来是不是大于$k$即可.<br>注意一个细节,假如我们有$8$个工作需求,然后一支铅笔可以解决$3$个的话,那么我们需要$3$支铅笔.<br>所以我们不能直接算$a/x$,而是要算$(a+(x-1))/x$.<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;T;</span><br><span class="line"><span class="keyword">while</span>(T--)&#123;</span><br><span class="line"><span class="keyword">int</span> a,b,c,d,k;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b&gt;&gt;c&gt;&gt;d&gt;&gt;k;</span><br><span class="line"><span class="keyword">int</span> ll=(a+(c<span class="number">-1</span>))/c;</span><br><span class="line"><span class="keyword">int</span> rr=(b+(d<span class="number">-1</span>))/d;</span><br><span class="line"><span class="keyword">if</span>(ll+rr&gt;k)</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"-1"</span>);</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;ll&lt;&lt; <span class="string">" "</span>&lt;&lt;rr&lt;&lt;<span class="built_in">endl</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="Rooms-and-Staircases"><a href="#Rooms-and-Staircases" class="headerlink" title="Rooms and Staircases"></a>Rooms and Staircases</h3><p>首先考虑一下走楼梯对答案有什么好处.<br>如果不走楼梯的话,那么答案一定就是$n$.<br>我们设一个楼梯在房间$i$的位置,那么我们从$1$走到$i$时,如果选择从$i$这个点走下去的话.那么如果我们向右走,显然和直接不走楼梯没区别.<br>而且根据题目中的限定,我们向初始走的位置的反方向走的时候就一定不能再回来了,所以我们的决策就是在每个楼梯的地方,判断一下是继续走的答案更优秀,还是走回去的答案更优秀,取最大值即可.<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">string</span> s;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="number">0</span>),<span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; T;</span><br><span class="line"><span class="keyword">while</span> (T--)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n&gt;&gt;s;</span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line"><span class="keyword">if</span>(s[i]==<span class="string">'1'</span>)</span><br><span class="line">ans=max(ans,<span class="number">2</span>*(i+<span class="number">1</span>));</span><br><span class="line"><span class="keyword">int</span> now=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=n<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line"><span class="keyword">if</span>(s[i]==<span class="string">'1'</span>)</span><br><span class="line">ans=max(ans,<span class="number">2</span>*(now));</span><br><span class="line">now++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(ans==<span class="number">-1</span>)</span><br><span class="line">ans=n;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="The-Football-Season"><a href="#The-Football-Season" class="headerlink" title="The Football Season"></a>The Football Season</h3><p>现在不会x. </p><h3 id="Paint-the-Tree"><a href="#Paint-the-Tree" class="headerlink" title="Paint the Tree"></a>Paint the Tree</h3><p>首先考虑判断一下无解的情况,由于每相邻的三个点都不能同色,而我们只能把这些点染成三种颜色.<br>那么考虑某个节点$i$,如果和$i$直接相邻的点多于$2$个,那么无论如何都会有两个节点同色的.<br><img src="https://krrrr.xyz/PicBed/201910151.jpg" alt="pic1"><br>发现在上图(样例二)中,因为与节点$3$直接相邻的点为$3$个.所以这个情况是无解的.<br>所以发现有解的情况只有是链的情况.<br>而在一条链的情况下,如果我们确定了前两个节点的颜色的话,那么这条链的颜色也是一定可以被确定下来的.<br>又因为前两个点的颜色只有$3 \times 2=6$种情况,所以我们可以直接暴力统计答案即可.<br>时间复杂度为$O(6 \times n)$.<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n, tot, rt, len, ansx, ansy;</span><br><span class="line">ll f[N][<span class="number">5</span>][<span class="number">5</span>], ans;</span><br><span class="line"><span class="keyword">int</span> fr[N][<span class="number">5</span>][<span class="number">5</span>];</span><br><span class="line"><span class="keyword">int</span> c[<span class="number">5</span>][N];</span><br><span class="line"><span class="keyword">int</span> head[N], deg[N], sen[N], res[N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span> </span><br><span class="line"><span class="keyword">int</span> u;</span><br><span class="line"><span class="keyword">int</span> v;</span><br><span class="line"><span class="keyword">int</span> next;</span><br><span class="line">&#125; e[N &lt;&lt; <span class="number">1</span>];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">    e[++tot] = (Edge) &#123;u, v, head[u]&#125;;</span><br><span class="line">head[u] = tot;</span><br><span class="line">    e[++tot] = (Edge) &#123;v, u, head[v]&#125;;</span><br><span class="line">head[v] = tot;</span><br><span class="line">    <span class="keyword">return</span>; </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs1</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> fa)</span> </span>&#123;</span><br><span class="line">    sen[++len] = u;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i = head[u]; i; i = e[i].next) &#123;</span><br><span class="line">        <span class="keyword">int</span> v = e[i].v;</span><br><span class="line">        <span class="keyword">if</span>(v == fa) <span class="keyword">continue</span>;</span><br><span class="line">        dfs1(v, u);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>; </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="number">0</span>),<span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n;i++)</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=<span class="number">4</span>;j++)</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;=<span class="number">4</span>;k++)</span><br><span class="line">    f[i][j][k]=<span class="number">1e16</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">3</span>; i++) </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;c[i][j];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> u, v;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;u&gt;&gt;v;</span><br><span class="line">        deg[u]++;</span><br><span class="line">deg[v]++;</span><br><span class="line">        addedge(u, v);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) </span><br><span class="line"><span class="keyword">if</span>(deg[i] &gt;= <span class="number">3</span>) &#123; </span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"-1"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line"><span class="keyword">if</span>(deg[i] == <span class="number">1</span>) &#123;</span><br><span class="line">rt = i;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">    dfs1(rt, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">3</span>; i++) </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">3</span>; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i == j) <span class="keyword">continue</span>;</span><br><span class="line">            f[<span class="number">2</span>][i][j] = min(f[<span class="number">2</span>][i][j], (ll)c[i][sen[<span class="number">1</span>]] + c[j][sen[<span class="number">2</span>]]);</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">3</span>; i &lt;= n; i++) </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">3</span>; j++) </span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= <span class="number">3</span>; k++) </span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> t = <span class="number">1</span>; t &lt;= <span class="number">3</span>; t++) &#123;</span><br><span class="line">                    <span class="keyword">if</span>(j == k || j == t || k == t) <span class="keyword">continue</span>;</span><br><span class="line">                    <span class="keyword">if</span>(f[i][k][t] &gt; f[i - <span class="number">1</span>][j][k] + c[t][sen[i]]) &#123;</span><br><span class="line">                        f[i][k][t] = f[i - <span class="number">1</span>][j][k] + c[t][sen[i]];</span><br><span class="line">                        fr[i][k][t] = j;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;   </span><br><span class="line">    ans = f[<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">3</span>; i++)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">3</span>; j++) </span><br><span class="line">        <span class="keyword">if</span>(f[n][i][j] &lt; ans) &#123;</span><br><span class="line">            ans = f[n][i][j];</span><br><span class="line">            ansx = i; ansy = j;</span><br><span class="line">        &#125;</span><br><span class="line">    res[sen[n - <span class="number">1</span>]] = ansx; res[sen[n]] = ansy;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = n; i &gt;= <span class="number">3</span>; i--) &#123;</span><br><span class="line">        <span class="keyword">int</span> go = fr[i][ansx][ansy];</span><br><span class="line">        ansy = ansx;</span><br><span class="line">ansx = go;</span><br><span class="line">        res[sen[i - <span class="number">2</span>]] = go;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;res[i]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="Minimizing-Difference"><a href="#Minimizing-Difference" class="headerlink" title="Minimizing Difference"></a>Minimizing Difference</h3><p><del>这不是一眼题吗为什么要放到E上,放到C上不行吗</del><br>发现我们每次操作的话肯定是对最大值或者最小值进行操作.所以我们先把原来的数组排序.<br>然后我们每次枚举一下我们要把第几大的和第几小的进行操作,而这个操作显然可以双指针优化.<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1e18</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> n, k,ans;</span><br><span class="line"><span class="keyword">int</span> a[N], sum[N], cnt[N];</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="number">0</span>),<span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; k;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++ i)&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">cnt[i] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">sort(a + <span class="number">1</span>, a + n + <span class="number">1</span>);</span><br><span class="line">ans = a[n] - a[<span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++ i)&#123;</span><br><span class="line"><span class="keyword">int</span> l = <span class="number">1</span> + i;</span><br><span class="line"><span class="keyword">int</span> r = n - i;</span><br><span class="line"><span class="keyword">if</span> (l &gt;= r) <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">if</span> (l + <span class="number">1</span> != r)&#123;</span><br><span class="line"><span class="keyword">int</span> can = k / (i+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span> (can == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">int</span> lim = a[l+<span class="number">1</span>]-a[l] + a[r]-a[r<span class="number">-1</span>];</span><br><span class="line">ans -= min(lim, can);</span><br><span class="line">k -= min(lim, can) * (i+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span> (lim &gt; can) <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (l + <span class="number">1</span> == r)&#123;</span><br><span class="line"><span class="keyword">int</span> can = k / (i+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span> (can == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">int</span> lim = a[r]-a[l];</span><br><span class="line">ans -= min(lim, can);</span><br><span class="line">k -= min(lim, can) * (i+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>因为知道了自己是多么的菜,所以才要更加努力去追求那个永远也不可能实现的梦想</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我好菜啊&lt;br&gt;
    
    </summary>
    
    
      <category term="OI" scheme="http://krrrr.xyz/%E5%88%86%E7%B1%BB/OI/"/>
    
    
      <category term="CodeForces题解" scheme="http://krrrr.xyz/%E6%A0%87%E7%AD%BE/CodeForces%E9%A2%98%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>ZROI普转提D4</title>
    <link href="http://krrrr.xyz/2019/10/13/ZROI%E6%99%AE%E8%BD%AC%E6%8F%90D4/"/>
    <id>http://krrrr.xyz/2019/10/13/ZROI普转提D4/</id>
    <published>2019-10-13T07:50:56.000Z</published>
    <updated>2019-10-18T13:14:29.124Z</updated>
    
    <content type="html"><![CDATA[<p>版权原因,题面不公开<br><a id="more"></a></p><h3 id="控制人偶"><a href="#控制人偶" class="headerlink" title="控制人偶"></a>控制人偶</h3><p>发现我们只要算出来在一个循环中,坐标的变化值$(\Delta x , \Delta y)$.<br>然后将变化值去乘循环时间的个数,最后多出来的暴力即可.</p><h3 id="复杂度计算"><a href="#复杂度计算" class="headerlink" title="复杂度计算"></a>复杂度计算</h3><p>来我们开始一步一步的推公式(<br>题目中要我们求的时间复杂度,写成多项式的形式就是:  </p><script type="math/tex; mode=display">\sum_{i=1}^n\sum_{j=1}^m\sum_{k=i}^n\sum_{l=j}^m\sum_{x=i}^k\sum_{y=j}^l 1</script><p>首先我们可以发现,最后的$x$和$y$的两维,因为是直接加起来的,所以可以直接变成$(l-j+1) \times (k-i+1)$,那么原来式就变成了  </p><script type="math/tex; mode=display">\sum_{i=1}^n\sum_{j=1}^m\sum_{k=i}^n\sum_{l=j}^m(l-j+1) \times (k-i+1)</script><p>然后我们发现,同样的$(l-j+1)$和$(k-i+1)$分别都是被统计了$(m-j+1)$次和$(n-i+1)$次,所以由乘法分配律可知</p><script type="math/tex; mode=display">\sum_{k=i}^n\sum_{l=j}^m(l-j+1) \times (k-i+1) = \sum_{k=i}^n[\sum_{l=1}^{m-j+1} \times (k-i+1)]</script><p>发现$(k-i+1)$的系数可以直接等差数列求和,然后再将$\sum_{k=i}^n$拆开和等差数列求和公式之后就会得到  </p><script type="math/tex; mode=display">\sum_{i=1}^n\sum_{j=1}^m\sum_{k=i}^n\sum_{l=j}^m(l-j+1) \times (k-i+1) = \sum_{i=1}^n\sum_{j=1}^m\frac{(n-i+1) \times (n-i+2)}{2} \times \frac{(m-j+1) \times (m-j+2)}{2}</script><p>将分母提取出来之后,可以得到原式等价于</p><script type="math/tex; mode=display">\frac{\sum_{i=1}^n\sum_{j=1}^m  (n-i+1) \times (n-i+2) \times (m-j+1) \times (m-j+2)}{4}</script><p>然后继续固定$i$,我们发现系数满足$A_i=i^2+i$,那么根据$\sum_{i=1}^n i^2=\frac{n \times (n+1) \times (2 \times n + 1)}{6}$有原式等价于<br>$[\frac{m \times ( m + 1 ) \times ( 2 \times m + 1) }{6} \times \frac{m \times (m+1)}{2}] \times [\frac{n \times (n+1) \times (2 \times n + 1 )}{6}+\frac{n \times ( n + 1 )}{2}] / 4$<br>预处理逆元之后可以直接$O(1)$求出</p><h3 id="复印任务"><a href="#复印任务" class="headerlink" title="复印任务"></a>复印任务</h3><p>我们注意到$1&lt;=t_i&lt;=10^3$.所以我们可以在很少的时间内怼同类时间的复印机进行预处理.<br>由于我们知道每个复印机的启动时间,所以我们可以维护三个值.我们用$c_i$表示周期为$i$的复印机个数,$f_{t,p}$表示周期为$t$的复印机,且它的工作的起始时间对$t$取膜以后是$p$的个数(同时我们用$g$)表示$f$的后缀和.<br>同时我们记录$s_t$表示所有周期为$t$的时间的复印机进入打印状态所欲要的$t$的时间周期有多少个.<br>通过处理这三个数组,我们可以很快的计算同类周期的复读机在一段时间内的打印个数.</p><p>所以我们可以选择二分一个时间$T$,假设我们现在枚举的复印机的时间周期为$t$,那么我们发现能产生的复印件个数为$c_t \times (T/t) - s_j - f_{j,Tmodt+1} $<br>然后我们把每个时间的加起来就是答案.</p><h3 id="A-B-Problem"><a href="#A-B-Problem" class="headerlink" title="A+B Problem"></a>A+B Problem</h3><p>二维树状数组裸题….<br>直接安利我学习的博客了qwq..</p><p><a href="https://www.cnblogs.com/rabbithu/p/bit.html" target="_blank" rel="noopener">写的挺好的一篇博客</a></p><blockquote><p>因为知道了自己是多么的菜,所以才要更加努力去追求那个永远也不可能实现的梦想</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;版权原因,题面不公开&lt;br&gt;
    
    </summary>
    
    
      <category term="OI" scheme="http://krrrr.xyz/%E5%88%86%E7%B1%BB/OI/"/>
    
    
      <category term="ZROI" scheme="http://krrrr.xyz/%E6%A0%87%E7%AD%BE/ZROI/"/>
    
  </entry>
  
  <entry>
    <title>ZROI普及五联测D3</title>
    <link href="http://krrrr.xyz/2019/10/12/ZROI%E6%99%AE%E5%8F%8A%E4%BA%94%E8%81%94%E6%B5%8BD3/"/>
    <id>http://krrrr.xyz/2019/10/12/ZROI普及五联测D3/</id>
    <published>2019-10-12T02:43:10.000Z</published>
    <updated>2019-10-18T13:14:34.212Z</updated>
    
    <content type="html"><![CDATA[<p>版权原因,题面不公开.<br><a id="more"></a></p><h3 id="旋风回旋曲"><a href="#旋风回旋曲" class="headerlink" title="旋风回旋曲"></a>旋风回旋曲</h3><p>由于可能的情况非常的小,所以我们只需要判断一下的几种情况:</p><ol><li>从$x$直接走到$y$.</li><li>从$x$走到$a$,再从$b$走到$y$.  </li><li>从$x$走到$b$,再从$a$走到$y$.<br>由于只有三种情况,直接$3$个$if$判断一下即可.</li></ol><h3 id="假面饭店"><a href="#假面饭店" class="headerlink" title="假面饭店"></a>假面饭店</h3><p>首先第一反应就是枚举每个数字取还是不取,所以我们需要$2^{size}$枚举每个数,但是显然还得枚举每个数的顺序,复杂度明显过不了.<br>所以我们考虑枚举$i$来得到$i^2$.这样的话,发现我们最多是只需要枚举到$\sqrt{10 \times n}$即可.<br>枚举的时候注意一下剪枝,不然就会$T$掉.</p><h3 id="疯狂外星人"><a href="#疯狂外星人" class="headerlink" title="疯狂外星人"></a>疯狂外星人</h3><p>发现我们可以枚举一下不能放入的物品是哪个.那么显然如果第$i$个物品不能放入的话,重量比$i$小的物品一定要都被放进去.<br>然后再来考虑一下重量比$i$大的物品.<br>发现我们可以用计数类的$01$背包来解决.<br>最后需要注意一点,如果全都能放进去的话,也需要算一种方案,所以我们要枚举到第$n+1$个物品.</p><h3 id="流浪地球"><a href="#流浪地球" class="headerlink" title="流浪地球"></a>流浪地球</h3><p>发现维护连通块的消失的话,显然不怎么可做.<br>所以我们尝试离线,我们把询问按照从大到小排序,然后每次从一个询问过渡到另外一个询问的时候,会出现若干个新的”大陆”.<br>然后我们的任务就变成了这些新的大陆能不能和其他的连通块连起来.<br>对于这一个操作,显然我们可以维护一个并查集,每次判断+合并几个连通块即可.</p><blockquote><p>因为知道了自己是多么的菜,所以才要更加努力去追求那个永远也不可能实现的梦想</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;版权原因,题面不公开.&lt;br&gt;
    
    </summary>
    
    
      <category term="OI" scheme="http://krrrr.xyz/%E5%88%86%E7%B1%BB/OI/"/>
    
    
      <category term="ZROI" scheme="http://krrrr.xyz/%E6%A0%87%E7%AD%BE/ZROI/"/>
    
  </entry>
  
  <entry>
    <title>Educational Codeforces Round74题解</title>
    <link href="http://krrrr.xyz/2019/10/10/Round74/"/>
    <id>http://krrrr.xyz/2019/10/10/Round74/</id>
    <published>2019-10-10T08:32:07.000Z</published>
    <updated>2019-10-18T13:13:14.998Z</updated>
    
    <content type="html"><![CDATA[<p>又安排了队友一手…..<br><a id="more"></a></p><h3 id="Prime-Subtraction"><a href="#Prime-Subtraction" class="headerlink" title="Prime Subtraction"></a>Prime Subtraction</h3><p>可以发现,如果只是用质数的话,那么除了$1$之外的数都是可以由质数凑出来的.<br>所以只需要判断一波是不是相差为$1$即可.<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> a,b;</span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;T;</span><br><span class="line"><span class="keyword">while</span>(T--)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b;</span><br><span class="line"><span class="keyword">if</span>(a-b==<span class="number">1</span>)</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"NO"</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"YES"</span>); </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="Kill-‘Em-All"><a href="#Kill-‘Em-All" class="headerlink" title="Kill ‘Em All"></a>Kill ‘Em All</h3><p>发现如果我们打了一个按照坐标排序之后中间的数,那么对于右边的数字来说一定是劣的.<br>所以我们发现,如果我们排序之后,从右往左开始打的话,那么对于答案的贡献一定不会更劣.<br>所以直接排序之后从右往左打然后判断即可.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> s=<span class="number">0</span>,w=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">char</span> ch=getchar();</span><br><span class="line"><span class="keyword">while</span>(ch&gt;<span class="string">'9'</span>||ch&lt;<span class="string">'0'</span>)&#123;<span class="keyword">if</span>(ch==<span class="string">'-'</span>)w=<span class="number">-1</span>;ch=getchar();&#125;</span><br><span class="line"><span class="keyword">while</span>(ch&gt;=<span class="string">'0'</span>&amp;&amp;ch&lt;=<span class="string">'9'</span>)&#123;s=s*<span class="number">10</span>+ch-<span class="string">'0'</span>;ch=getchar();&#125;</span><br><span class="line"><span class="keyword">return</span> s*w;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> n,r;</span><br><span class="line"><span class="keyword">int</span> pos[N];</span><br><span class="line"><span class="keyword">bool</span> dis[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> x&gt;y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> T=read();</span><br><span class="line"><span class="keyword">while</span>(T--)&#123;</span><br><span class="line"><span class="built_in">memset</span>(dis,<span class="number">0</span>,<span class="keyword">sizeof</span>(dis)); </span><br><span class="line">n=read(),r=read();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">pos[i]=read();</span><br><span class="line">sort(pos+<span class="number">1</span>,pos+<span class="number">1</span>+n,cmp);</span><br><span class="line"><span class="keyword">int</span> tag=<span class="number">0</span>,ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(dis[pos[i]])</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span>(pos[i]-tag*r&lt;=<span class="number">0</span>)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">dis[pos[i]]=<span class="number">1</span>;</span><br><span class="line">ans++;</span><br><span class="line">tag++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Standard-Free2play"><a href="#Standard-Free2play" class="headerlink" title="Standard Free2play"></a>Standard Free2play</h3><p>我们来模拟一下一个人从高处到低处”掉下来”的过程.<br>我们假设本来在外面的是$1$,不在外面的是$0$.考虑一个序列$11100$,如果我们站在最左边的那个$1$上,如果我们想要往右(即往下跳)的话,我们使用最左边的这个按钮,那么序列就会变成$00100$,而我们现在位于中间的那个$1$上.<br>发现如果我们当前的位置到下一个$1$的位置,如果是连续的$1$的区间的话,那么我们一定只能跳奇数个段.如果两者的高度差大于$2$(即跳一下会摔死的话),那么就要么改变现在的状态,要么使用一个膜法石.<br>显然,如果我们要跳到的这个位置到我们现在的这个位置中间间隔了偶数个紧贴着的即$111$这样的话,我们就需要使用膜法石,否则我们就不需要用膜法石.<br>但是注意一下发现开头和结尾的位置是不一样的所以对位于顶端和末尾的情况特殊讨论一下即可.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fore(i, l, r) for(int i = int(l); i &lt; int(r); i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sz(a) int((a).size())</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> x first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> y second</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="keyword">int</span>(<span class="number">1e9</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> h, n;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; p;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!(<span class="built_in">cin</span> &gt;&gt; h &gt;&gt; n))</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">p.resize(n);</span><br><span class="line">fore(i, <span class="number">0</span>, n)</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; p[i];</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> lf = <span class="number">0</span>;</span><br><span class="line">fore(i, <span class="number">1</span>, n) &#123;</span><br><span class="line"><span class="keyword">if</span> (i &gt; <span class="number">0</span> &amp;&amp; p[i - <span class="number">1</span>] &gt; p[i] + <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (lf &gt; <span class="number">0</span>)</span><br><span class="line">ans += (i - lf) &amp; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">ans += <span class="number">1</span> - ((i - lf) &amp; <span class="number">1</span>);</span><br><span class="line">lf = i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (p[n - <span class="number">1</span>] &gt; <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (lf != <span class="number">0</span>)</span><br><span class="line">ans += (n - lf) &amp; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">ans += <span class="number">1</span> - ((n - lf) &amp; <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="number">0</span>), <span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> tc; <span class="built_in">cin</span> &gt;&gt; tc;</span><br><span class="line"><span class="keyword">while</span>(tc--) &#123;</span><br><span class="line">read();</span><br><span class="line">solve();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="AB-string"><a href="#AB-string" class="headerlink" title="AB-string"></a>AB-string</h3><p>发现直接求的话貌似不怎么好求,所以我们考虑下求出所有的不好的串然后从总答案中减去.<br>考虑怎求出所有不好的字串.<br>首先发现只有$A$和$B$这两种字符,那么有一个很显然的结论:如果$s_i!=s_{i+1}$或者$s_i!=s_{i-1}$,那么$s_i$和$s_{i+1}$所在的字串一定是不好的.<br>所以我们直接正反判断两边即可.<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">3e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> n;<span class="keyword">long</span> <span class="keyword">long</span> ans;</span><br><span class="line"><span class="keyword">char</span> str[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Solve</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> now=<span class="number">1</span>,d=x;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line">    <span class="comment">//cout&lt;&lt;str[i]&lt;&lt;" "&lt;&lt;str[i-1]&lt;&lt;endl;3</span></span><br><span class="line">        <span class="keyword">if</span>(str[i] == str[i<span class="number">-1</span>])</span><br><span class="line">now++;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">ans -= now-d;</span><br><span class="line">now = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>,str+<span class="number">1</span>);</span><br><span class="line">    ans = <span class="number">1l</span>l*n*(n<span class="number">-1</span>)/<span class="number">2</span>;</span><br><span class="line">    Solve(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">std</span>::reverse(str+<span class="number">1</span>,str+n+<span class="number">1</span>);</span><br><span class="line">    Solve(<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>因为知道了自己是多么的菜,所以才要更加努力去追求那个永远也不可能实现的梦想</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;又安排了队友一手…..&lt;br&gt;
    
    </summary>
    
    
      <category term="OI" scheme="http://krrrr.xyz/%E5%88%86%E7%B1%BB/OI/"/>
    
    
      <category term="Codeforces题解" scheme="http://krrrr.xyz/%E6%A0%87%E7%AD%BE/Codeforces%E9%A2%98%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>Kruscal重构树学习笔记</title>
    <link href="http://krrrr.xyz/2019/10/09/Kruskal%E9%87%8D%E6%9E%84%E6%A0%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://krrrr.xyz/2019/10/09/Kruskal重构树学习笔记/</id>
    <published>2019-10-09T10:57:27.000Z</published>
    <updated>2019-10-18T13:13:14.977Z</updated>
    
    <content type="html"><![CDATA[<p>学不会啊….<br><a id="more"></a></p><p><img src="/images/study/kru.png" alt="重构树"><br><del>以上就是性质,讲完了</del></p><p>你们不要打我QAQ…</p><h3 id="一道例题-货车运输"><a href="#一道例题-货车运输" class="headerlink" title="一道例题(货车运输)"></a>一道例题(货车运输)</h3><p>我们看一下第五条性质,哎妈呀这道题不是裸题吗.<br>我们跑一遍$Kruscal$重构树,然后询问的时候每两个点的答案,就是这两个在重构树上$LCA$的点权.<br>然后就没了.</p><h3 id="另一道例题-有没有大佬知道是哪个OJ上的题话告诉我谢谢"><a href="#另一道例题-有没有大佬知道是哪个OJ上的题话告诉我谢谢" class="headerlink" title="另一道例题(有没有大佬知道是哪个OJ上的题话告诉我谢谢)"></a>另一道例题(有没有大佬知道是哪个OJ上的题话告诉我谢谢)</h3><p><img src="/images/study/krul2.png" alt="例题2"></p><p>第一反应是考虑每条边在作为权值最小的边的时候的贡献,但是发现这样也并不好统计最终贡献.<br>所以根据这篇博客的标题,我们来考虑$Kruscal$重构树的做法.<br>我们发现$Kruscal$重构树满足大根堆的性质,那么我们考虑某一个边权节点,他有贡献的路径很显然是它连接的叶子节点的路径一直到某个不在它子树内而且父亲节点大于它的节点.<br>但是发现这样也并不好统计最终贡献.<br>发现,如果重构树满足小根堆的性质的话,那么我们发现两点间路径边权的最小值就是他们的$LCA$,这样就方便统计答案了.<br>所以我们考虑把所有的边权同乘$-1$,这样之后再建重构树.然后就可以统计答案了.</p><h3 id="还有一道例题-有没有大佬知道是哪个OJ上的题话告诉我谢谢"><a href="#还有一道例题-有没有大佬知道是哪个OJ上的题话告诉我谢谢" class="headerlink" title="还有一道例题(有没有大佬知道是哪个OJ上的题话告诉我谢谢)"></a>还有一道例题(有没有大佬知道是哪个OJ上的题话告诉我谢谢)</h3><p><img src="/images/study/krul3.png" alt="例题3"><br>也是$Kruscal$重构树的套路题…<br>对于边权最大值的限制， 完全可以等价地转化到它们在最小瓶颈生成树上路径边权最大值的限制。<br>考虑$Kruskal$重构树上一个点在只允许走边权$&lt;=k$的边的情况下能够到的点的集合,发现它们是一棵子树,且根为$s$的某个祖先.具体来说,是$s$到根路径上深度最小的点权$&lt;=k$的祖先<br>我们可以倍增地找到这个祖先,接下来问题就转化为了经典问题:求一个子树当中的权值第k大.使用主席树可以轻松解决.</p><h3 id="最后一道例题-归程"><a href="#最后一道例题-归程" class="headerlink" title="最后一道例题(归程)"></a>最后一道例题(归程)</h3><p>题面就不放了….<br>因为每天开始的时候车的位置都会被重置一次,所以我们对于每次询问都可以在起点进行一次$bfs$,然后答案就是这些点中到$1$号点距离最小的点.<br>但是这样…显然过不了…发现每次进行询问的时候都去$bfs$一遍显然太慢了,而且这道题为强制在线,也不能按照这些询问的海拔排序.<br>那么我们怎么办呢?<br>根据标题,我们可以选择$Kruscal$重构树来解决掉这道题.<br>首先我们发现,$Kruscal$重构树满足大根堆的性质,那么满足海拔大于水位线的边组成的点一定是某一颗子树.<br>然后我们可以进行一次堆优化的$Dijkstra$进行预处理,然后把$1$号点到每个点的最短路的长度记为重构树上新的点的点权.<br>然后对于每次查询,我们的任务就变成了查询某颗子树中的叶子的权值最小值,而且是静态的.显然可以$log$的复杂度随便搞一搞.</p><blockquote><p>因为知道了自己是多么的菜,所以才要更加努力去追求那个永远也不可能实现的梦想</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;学不会啊….&lt;br&gt;
    
    </summary>
    
    
      <category term="OI" scheme="http://krrrr.xyz/%E5%88%86%E7%B1%BB/OI/"/>
    
    
      <category term="学习笔记" scheme="http://krrrr.xyz/%E6%A0%87%E7%AD%BE/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="图论" scheme="http://krrrr.xyz/%E6%A0%87%E7%AD%BE/%E5%9B%BE%E8%AE%BA/"/>
    
      <category term="最小生成树" scheme="http://krrrr.xyz/%E6%A0%87%E7%AD%BE/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/"/>
    
      <category term="Kruscal重构树" scheme="http://krrrr.xyz/%E6%A0%87%E7%AD%BE/Kruscal%E9%87%8D%E6%9E%84%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>CF416E</title>
    <link href="http://krrrr.xyz/2019/10/09/CF416E/"/>
    <id>http://krrrr.xyz/2019/10/09/CF416E/</id>
    <published>2019-10-09T03:33:02.000Z</published>
    <updated>2019-10-18T13:13:14.939Z</updated>
    
    <content type="html"><![CDATA[<p>$ZROI$杂题选讲….<br><a id="more"></a></p><p>看到这道题之后,我们第一反应肯定是一遍$Floyd$.<br>然后考虑一下怎么判断某条边是不是被最短路覆盖.<br>朴素的想法是我们每次枚举边,然后以这条边两条边的端点$u,v$再枚举这两个端点的所有最短路.<br>即判断 </p><script type="math/tex; mode=display">dis(s,u)+w+dis(v,t)==dis(s,t)</script><p>或者</p><script type="math/tex; mode=display">dis(s,v)+w+dis(u,t)==dis(s,t)</script><p>但是这样统计答案的话,由于边的条数为$n^2$的,所以这种算法的总复杂度为$O(n^4)$的.显然过不了<br>所以我们考虑一下怎么优化.<br>我们考虑上一个算法的时间复杂度的瓶颈,显然在我们枚举了$s,t$之后,因为还需要枚举每一条边,所以枚举边显然会超时.<br>所以我们考虑一下枚举完$s,t$之后不再枚举每一条边,而是去枚举每一个中转点$p$.<br>然后如果我们发现  </p><script type="math/tex; mode=display">dis(s,p)+dis(p,t)==dis(s,t)</script><p>那么显然在$dis(s,p)$上以$p$结尾的边都是可以被加入的.<br>所以我们现在的问题就只剩下了怎么求在$dis(s,p)$上的点了.<br>发现我们就算暴力枚举每条边然后验证也并不会超时.<br>所以直接这样做就可以了</p><blockquote><p>因为知道了自己是多么的菜,所以才要更加努力去追求那个永远也不可能实现的梦想</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;$ZROI$杂题选讲….&lt;br&gt;
    
    </summary>
    
    
      <category term="OI" scheme="http://krrrr.xyz/%E5%88%86%E7%B1%BB/OI/"/>
    
    
      <category term="图论" scheme="http://krrrr.xyz/%E6%A0%87%E7%AD%BE/%E5%9B%BE%E8%AE%BA/"/>
    
      <category term="最短路" scheme="http://krrrr.xyz/%E6%A0%87%E7%AD%BE/%E6%9C%80%E7%9F%AD%E8%B7%AF/"/>
    
  </entry>
  
  <entry>
    <title> [GXOI/GZOI2019]旅行者</title>
    <link href="http://krrrr.xyz/2019/10/08/SNOI2017-%E7%A4%BC%E7%89%A9/"/>
    <id>http://krrrr.xyz/2019/10/08/SNOI2017-礼物/</id>
    <published>2019-10-08T11:52:49.000Z</published>
    <updated>2019-10-18T13:13:15.009Z</updated>
    
    <content type="html"><![CDATA[<p>$ZROI$杂题选讲…..<br><a id="more"></a><br>多点最短路?<del>floyd直接莽啊</del><br>我知道你很勇,但是这道题$10^5$真的没法直接莽啊…</p><p>考虑那$K$组特殊的点,我们发现如果我们把它们分成两组,然后由一组向另一种跑最短路,很明显可以得到答案.<br>但是很显然不能只是分组分一次.我们考虑优化分组的过程.<br>发现在考虑二进制之后,每两个互不相同的值一定最少会有一个不同的地方.所以我们如果对于每个点的编号,按照$1&lt;&lt;i$进行分类的话.一定可以保证在某一次分类的过程中,有任意两个点被分到了不同的集合内部.<br>所以我们对这$K$组关键点进行二进制分组,然后建一个超级源点和一个超级汇点分别连接入集合和出集合.然后查询这个超级源和超级汇之间的最短路即可.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">    LL x = <span class="number">0</span>,f = <span class="number">1</span>; <span class="keyword">char</span> c = getchar();</span><br><span class="line">    <span class="keyword">while</span> (c != EOF &amp;&amp; !<span class="built_in">isdigit</span>(c)) &#123;<span class="keyword">if</span> (c == <span class="string">'-'</span>) f = <span class="number">-1</span>;c = getchar();&#125;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">isdigit</span>(c)) &#123;x = x * <span class="number">10</span> + c - <span class="string">'0'</span>;c = getchar();&#125;</span><br><span class="line">    <span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(LL x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>),x = -x;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">9</span>) write(x/<span class="number">10</span>); <span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="string">'0'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">writeln</span><span class="params">(LL x)</span></span>&#123; write(x),<span class="built_in">putchar</span>(<span class="string">'\n'</span>); &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">100005</span>,M = <span class="number">500005</span>;</span><br><span class="line"><span class="keyword">int</span> Fr[M&lt;&lt;<span class="number">2</span>],To[M&lt;&lt;<span class="number">2</span>],Ne[M&lt;&lt;<span class="number">2</span>],Dis[M&lt;&lt;<span class="number">2</span>],He1[N],He2[N],_k;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> *He,<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> z)</span></span>&#123;</span><br><span class="line">    ++_k,Fr[_k] = x,To[_k] = y,Dis[_k] = z,Ne[_k] = He[x],He[x] = _k;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> T,n,m,k,p[N];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> LL INF = <span class="number">1l</span>l&lt;&lt;<span class="number">60</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> f1[N],f2[N];</span><br><span class="line">LL dis1[N],dis2[N];</span><br><span class="line">LL ans;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x; LL d;</span><br><span class="line">    Node (<span class="keyword">int</span> xx = <span class="number">0</span>,LL dd = <span class="number">0</span>)&#123; x = xx,d = dd; &#125;</span><br><span class="line">    <span class="keyword">inline</span> <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (Node x) <span class="keyword">const</span>&#123; <span class="keyword">return</span> d &gt; x.d; &#125;</span><br><span class="line">&#125;t;</span><br><span class="line">priority_queue&lt;Node&gt;Heap;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dij_1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">while</span> (!Heap.empty())</span><br><span class="line">Heap.pop();</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">    dis1[i] = INF;</span><br><span class="line">    f1[i] = <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= k; ++i) &#123;</span><br><span class="line">dis1[p[i]] = <span class="number">0</span>;</span><br><span class="line">f1[p[i]] = p[i];</span><br><span class="line">Heap.push(Node(p[i],<span class="number">0</span>));</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">int</span> p,x;</span><br><span class="line">    <span class="keyword">while</span> (!Heap.empty())&#123;</span><br><span class="line">        t = Heap.top(); Heap.pop();</span><br><span class="line">        <span class="keyword">if</span> (t.d == dis1[t.x])</span><br><span class="line">        <span class="keyword">for</span> (p = He1[t.x]; p ; p = Ne[p]) <span class="keyword">if</span> (dis1[To[p]] &gt; dis1[t.x] + Dis[p])&#123;</span><br><span class="line">            dis1[To[p]] = dis1[t.x] + Dis[p];</span><br><span class="line">            f1[To[p]] = f1[t.x];</span><br><span class="line">            Heap.push(Node(To[p],dis1[To[p]]));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dij_2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">dis2[i] = INF;</span><br><span class="line">f2[i] = <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= k; ++i) &#123;</span><br><span class="line">dis2[p[i]] = <span class="number">0</span>;</span><br><span class="line">f2[p[i]] = p[i];</span><br><span class="line">Heap.push(Node(p[i],<span class="number">0</span>));</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">int</span> p,x;</span><br><span class="line">    <span class="keyword">while</span> (!Heap.empty())&#123;</span><br><span class="line">        t = Heap.top(); Heap.pop();</span><br><span class="line">        <span class="keyword">if</span> (t.d == dis2[t.x])</span><br><span class="line">        <span class="keyword">for</span> (p = He2[t.x]; p ; p = Ne[p])</span><br><span class="line"><span class="keyword">if</span> (dis2[To[p]] &gt; dis2[t.x] + Dis[p])&#123;</span><br><span class="line">            dis2[To[p]] = dis2[t.x] + Dis[p];</span><br><span class="line">            f2[To[p]] = f2[t.x];</span><br><span class="line">            Heap.push(Node(To[p],dis2[To[p]]));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,u,v,w;</span><br><span class="line">    T = read();</span><br><span class="line">    <span class="keyword">while</span> (T--)&#123;</span><br><span class="line">        _k = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">memset</span>(He1,<span class="number">0</span>,<span class="keyword">sizeof</span>(He1));</span><br><span class="line">        <span class="built_in">memset</span>(He2,<span class="number">0</span>,<span class="keyword">sizeof</span>(He2));</span><br><span class="line">        n = read(),m = read(),k = read();</span><br><span class="line">        <span class="keyword">while</span> (m--)&#123; </span><br><span class="line">u = read();</span><br><span class="line">v = read();</span><br><span class="line">w = read();</span><br><span class="line"><span class="keyword">if</span> (u^v) &#123;</span><br><span class="line">add(He1,u,v,w);</span><br><span class="line">add(He2,v,u,w);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= k; ++i)</span><br><span class="line">p[i] = read();</span><br><span class="line">        Dij_1();</span><br><span class="line">        Dij_2();</span><br><span class="line">        ans = INF;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line"><span class="keyword">if</span> (f1[i] ^ f2[i])</span><br><span class="line">ans = min(ans,dis1[i] + dis2[i]);</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= _k; i += <span class="number">2</span>)</span><br><span class="line"><span class="keyword">if</span> (f1[Fr[i]]^f2[To[i]])</span><br><span class="line">            ans = min(ans,dis1[Fr[i]] + dis2[To[i]] + Dis[i]);</span><br><span class="line">        writeln(ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>因为知道了自己是多么的菜,所以才要更加努力去追求那个永远也不可能实现的梦想</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;$ZROI$杂题选讲…..&lt;br&gt;
    
    </summary>
    
    
      <category term="OI" scheme="http://krrrr.xyz/%E5%88%86%E7%B1%BB/OI/"/>
    
    
      <category term="图论" scheme="http://krrrr.xyz/%E6%A0%87%E7%AD%BE/%E5%9B%BE%E8%AE%BA/"/>
    
      <category term="最短路" scheme="http://krrrr.xyz/%E6%A0%87%E7%AD%BE/%E6%9C%80%E7%9F%AD%E8%B7%AF/"/>
    
      <category term="二进制" scheme="http://krrrr.xyz/%E6%A0%87%E7%AD%BE/%E4%BA%8C%E8%BF%9B%E5%88%B6/"/>
    
  </entry>
  
  <entry>
    <title>CF938D题解</title>
    <link href="http://krrrr.xyz/2019/10/08/CF938D%E9%A2%98%E8%A7%A3/"/>
    <id>http://krrrr.xyz/2019/10/08/CF938D题解/</id>
    <published>2019-10-08T07:55:30.000Z</published>
    <updated>2019-10-18T13:13:14.952Z</updated>
    
    <content type="html"><![CDATA[<p>$ZROI$杂题选讲…..<br><a id="more"></a><br>刚开始的时候看见题目中要求的这个式子貌似不知道从何开始想….<br>首先发现$2 \times d(i,j)$这个东西可以直接在存边的时候把边权变成两倍即可.<br>但是剩下的那个加$a_j$貌似很难处理,每次暴力枚举么?显然不行.<br>我们考虑一下,对于这个数据范围来说,显然只能跑一遍最短路,所以我们考虑怎么在一遍最短路的过程中求出每个点的答案.<br>但是这样做的话,显然要把所有的$a_i$联系起来,怎么办呢?<br>建虚点√<br>我们新建一个虚点,然后由这个虚点向每个点$i$连一条边权为$a_i$的边.<br>然后我们考虑一下原来的那个式子,发现这样的话原来的式子就变成了求$min(2\times d(i,j)+d(new,j))$.<br>再考虑一下最短路的松弛操作,是不是发现了啥.<br>我们直接从新建的虚点开始跑一遍最短路,然后对于每个点,$dis_i$就是答案了.<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MP std::make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> oo 2147483647</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PI 3.141592653590</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rint register int</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> F(i,num,b) for(rint i=num;i&lt;=b;i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> D(i,num,b) for(rint i=num;i&gt;=b;i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> G(i,num,b,c) for(rint num=head[b];num;num=c[num].next)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">int</span> _read () &#123;<span class="keyword">int</span> s = <span class="number">0</span> , date = <span class="number">1</span>;<span class="keyword">char</span> ch = getchar ();<span class="keyword">while</span> ( ch &gt; <span class="string">'9'</span> || ch &lt; <span class="string">'0'</span> ) &#123; <span class="keyword">if</span> ( ch == <span class="string">'-'</span> ) date = <span class="number">-1</span>; ch = getchar ();&#125;<span class="keyword">while</span> ( ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span> ) &#123; s = s * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar ();&#125;<span class="keyword">return</span> s * date;&#125;</span><br><span class="line"><span class="keyword">template</span> &lt; <span class="class"><span class="keyword">class</span> <span class="title">T</span> &gt; <span class="title">inline</span> <span class="title">void</span> <span class="title">read</span> ( <span class="title">T</span> &amp;<span class="title">x</span> ) &#123;</span>T s = <span class="number">0</span> , date = <span class="number">1</span>;<span class="keyword">char</span> ch = getchar ();<span class="keyword">while</span> ( ch &gt; <span class="string">'9'</span> || ch &lt; <span class="string">'0'</span> ) &#123; <span class="keyword">if</span> ( ch == <span class="string">'-'</span> ) date = <span class="number">-1</span>; ch = getchar ();&#125;<span class="keyword">while</span> ( ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span> ) &#123; s = s * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar ();&#125;x = s * date;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="keyword">template</span> &lt; <span class="class"><span class="keyword">class</span> <span class="title">T</span> , <span class="title">typename</span> ...<span class="title">Argc</span> &gt; <span class="title">inline</span> <span class="title">void</span> <span class="title">read</span> ( <span class="title">T</span> &amp;<span class="title">x</span> , <span class="title">Argc</span> &amp;...<span class="title">Args</span> ) &#123;</span>read ( x );read ( Args... );<span class="keyword">return</span>;&#125; </span><br><span class="line"><span class="keyword">template</span> &lt; <span class="class"><span class="keyword">class</span> <span class="title">T</span> &gt; <span class="title">inline</span> <span class="title">T</span> <span class="title">max</span> ( <span class="title">T</span> <span class="title">x</span> , <span class="title">T</span> <span class="title">y</span> ) &#123;</span><span class="keyword">return</span> x &gt; y ? x : y;&#125;</span><br><span class="line"><span class="keyword">template</span> &lt; <span class="class"><span class="keyword">class</span> <span class="title">T</span> &gt; <span class="title">inline</span> <span class="title">T</span> <span class="title">min</span> ( <span class="title">T</span> <span class="title">x</span> , <span class="title">T</span> <span class="title">y</span> ) &#123;</span><span class="keyword">return</span> x &lt; y ? x : y;&#125;</span><br><span class="line"><span class="keyword">template</span> &lt; <span class="class"><span class="keyword">class</span> <span class="title">T</span> &gt; <span class="title">inline</span> <span class="title">void</span> <span class="title">abs</span> ( <span class="title">T</span> <span class="title">x</span> ) &#123;</span><span class="keyword">return</span> x &gt; <span class="number">0</span> ? x : -x;&#125;</span><br><span class="line"><span class="keyword">template</span> &lt; <span class="keyword">typename</span> T &gt; <span class="function"><span class="keyword">void</span> <span class="title">write</span> <span class="params">( T x )</span> </span>&#123;<span class="keyword">if</span> ( x &lt; <span class="number">0</span> ) x = -x , <span class="built_in">putchar</span> ( <span class="string">'-'</span> );<span class="keyword">if</span> ( x &gt; <span class="number">9</span> ) write ( x / <span class="number">10</span> );<span class="built_in">putchar</span> ( x % <span class="number">10</span> + <span class="number">48</span> );<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="keyword">template</span> &lt; <span class="keyword">typename</span> T &gt; <span class="function"><span class="keyword">void</span> <span class="title">writeln</span> <span class="params">( T x )</span> </span>&#123;write ( x ); <span class="built_in">printf</span> (<span class="string">"\n"</span>); &#125;</span><br><span class="line"><span class="keyword">template</span> &lt; <span class="class"><span class="keyword">class</span> <span class="title">T</span> &gt; <span class="title">inline</span> <span class="title">T</span> <span class="title">gcd</span> ( <span class="title">T</span> <span class="title">x</span> , <span class="title">T</span> <span class="title">y</span> ) &#123;</span><span class="keyword">if</span> ( x &lt; y ) swap ( x , y );<span class="keyword">if</span> ( !y ) <span class="keyword">return</span> x;<span class="keyword">return</span> gcd ( y , x % y );&#125;</span><br><span class="line"><span class="keyword">template</span> &lt; <span class="class"><span class="keyword">class</span> <span class="title">T</span> &gt; <span class="title">inline</span> <span class="title">T</span> <span class="title">ksm</span> ( <span class="title">T</span> <span class="title">x</span> , <span class="title">T</span> <span class="title">y</span> , <span class="title">T</span> <span class="title">Mod</span> ) &#123;</span>T tmp = <span class="number">1</span>;<span class="keyword">while</span> ( y ) &#123;<span class="keyword">if</span> ( y % <span class="number">2</span> == <span class="number">1</span> ) tmp = ( tmp * x % Mod );x = ( x * x ) % Mod;y &gt;&gt;= <span class="number">1</span>;&#125;<span class="keyword">return</span> tmp;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**********************************************************************************************************************************************************************************************************************************************************************/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n , m , t;</span><br><span class="line"><span class="keyword">int</span> head[N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> to;</span><br><span class="line"><span class="keyword">int</span> date;</span><br><span class="line"><span class="keyword">int</span> next;</span><br><span class="line">&#125;e[N];</span><br><span class="line"><span class="keyword">int</span> dis[N];</span><br><span class="line"><span class="keyword">bool</span> vis[N];</span><br><span class="line"><span class="built_in">std</span> :: priority_queue &lt; <span class="built_in">std</span> :: pair &lt; <span class="keyword">int</span> , <span class="keyword">int</span> &gt; , <span class="built_in">std</span> :: <span class="built_in">vector</span> &lt; <span class="built_in">std</span> :: pair &lt; <span class="keyword">int</span> , <span class="keyword">int</span> &gt; &gt; , <span class="built_in">std</span> :: greater &lt; <span class="built_in">std</span> :: pair &lt; <span class="keyword">int</span> , <span class="keyword">int</span> &gt; &gt; &gt;qu;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span> <span class="params">( <span class="keyword">int</span> x , <span class="keyword">int</span> y , <span class="keyword">int</span> z )</span> </span>&#123;</span><br><span class="line">e[++t].to = y;</span><br><span class="line">e[t].date = z;</span><br><span class="line">e[t].next = head[x];</span><br><span class="line">head[x] = t;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span> <span class="params">( <span class="keyword">void</span> )</span> </span>&#123;</span><br><span class="line">read ( n , m );</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line"><span class="keyword">int</span> x,y,z;</span><br><span class="line">read(x,y,z);</span><br><span class="line">add(x,y,<span class="number">2</span>*z);</span><br><span class="line">add(y,x,<span class="number">2</span>*z);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">int</span> x=_read();</span><br><span class="line">add(n+<span class="number">1</span>,i,x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">memset</span>(dis,<span class="number">0x3f</span>,<span class="keyword">sizeof</span>(dis));</span><br><span class="line">dis[n+<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">qu.push(MP(<span class="number">0</span>,n+<span class="number">1</span>));</span><br><span class="line"><span class="keyword">while</span> ( !qu.empty () ) &#123;</span><br><span class="line"><span class="keyword">int</span> j = qu.top().se;</span><br><span class="line">qu.pop ();</span><br><span class="line"><span class="keyword">if</span> ( vis[j] ) </span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">vis[j] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">int</span> i = head[j] ; i ; i = e[i].next ) &#123;</span><br><span class="line"><span class="keyword">int</span> k = e[i].to;</span><br><span class="line"><span class="keyword">if</span> ( dis[k] &gt; dis[j] + e[i].date ) &#123;</span><br><span class="line">dis[k] = dis[j] + e[i].date;</span><br><span class="line"><span class="keyword">if</span> ( !vis[k] ) </span><br><span class="line">qu.push ( MP ( dis[k] , k ) );</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">F ( i , <span class="number">1</span> , n ) </span><br><span class="line"><span class="built_in">printf</span> ( <span class="string">"%lld%c"</span> , dis[i] , i == n ? <span class="string">'\n'</span> : <span class="string">' '</span> );</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>因为知道了自己是多么的菜,所以才要更加努力去追求那个永远也不可能实现的梦想</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;$ZROI$杂题选讲…..&lt;br&gt;
    
    </summary>
    
    
      <category term="OI" scheme="http://krrrr.xyz/%E5%88%86%E7%B1%BB/OI/"/>
    
    
      <category term="图论" scheme="http://krrrr.xyz/%E6%A0%87%E7%AD%BE/%E5%9B%BE%E8%AE%BA/"/>
    
      <category term="最短路" scheme="http://krrrr.xyz/%E6%A0%87%E7%AD%BE/%E6%9C%80%E7%9F%AD%E8%B7%AF/"/>
    
  </entry>
  
  <entry>
    <title>HDU4479题解</title>
    <link href="http://krrrr.xyz/2019/10/08/HDU4479%E9%A2%98%E8%A7%A3/"/>
    <id>http://krrrr.xyz/2019/10/08/HDU4479题解/</id>
    <published>2019-10-08T03:45:20.000Z</published>
    <updated>2019-10-18T13:13:14.969Z</updated>
    
    <content type="html"><![CDATA[<p>$ZROI$杂题总结…<br><a id="more"></a></p><p>发现我们需要保证边权递增,但是似乎并没有什么方法.<br>所以我们考虑将边权排个序,然后将边权从小到大开始考虑.<br>这样之后,当我们先默认边权都互不相同时,我们每次以一条边去更新它两端的节点.<br>如果能更新的话,显然在经过的节点上,一定是先经过边权较小的路径,再经过边权较大的路径.<br>这样之后可以保证我们求的就一定是题目中要求的答案.<br>然后发现其实边权并不是互不相同的,所以可以将边权一样的边分成一组,每次操作的过程中去用这组中的一坨边去更新.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> s=<span class="number">0</span>,w=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;<span class="string">'9'</span>||ch&lt;<span class="string">'0'</span>)&#123;<span class="keyword">if</span>(ch==<span class="string">'-'</span>)w=<span class="number">-1</span>;ch=getchar();&#125;</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">'0'</span>&amp;&amp;ch&lt;=<span class="string">'9'</span>)&#123;s=s*<span class="number">10</span>+ch-<span class="string">'0'</span>;ch=getchar();&#125;</span><br><span class="line">    <span class="keyword">return</span> s*w;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e4</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M=<span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> LL oo=<span class="number">0x3f</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,t;</span><br><span class="line">LL dis[N];</span><br><span class="line"><span class="keyword">bool</span> updated[N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> from;</span><br><span class="line">    <span class="keyword">int</span> to;</span><br><span class="line">    LL date;</span><br><span class="line">&#125;lis[M];</span><br><span class="line"><span class="keyword">int</span> v[N];</span><br><span class="line">LL vdis[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(Edge x,Edge y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x.date&lt;y.date;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=l;i&lt;=r;i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> ll=lis[i].from,rr=lis[i].to;</span><br><span class="line">        <span class="keyword">if</span>(updated[ll]&amp;&amp;dis[rr]&gt;lis[i].date+dis[ll])&#123;</span><br><span class="line">            v[++cnt]=rr;</span><br><span class="line">            vdis[cnt]=lis[i].date+dis[ll];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(updated[rr]&amp;&amp;dis[ll]&gt;lis[i].date+dis[rr])&#123;</span><br><span class="line">            v[++cnt]=ll;</span><br><span class="line">            vdis[cnt]=lis[i].date+dis[rr];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cnt;i++)&#123;</span><br><span class="line">        dis[v[i]]=min(dis[v[i]],vdis[i]);</span><br><span class="line">        updated[v[i]]=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T=read();</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        t=<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">memset</span>(updated,<span class="number">0</span>,<span class="keyword">sizeof</span>(updated));</span><br><span class="line">        n=read(),m=read();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)dis[i]=oo;</span><br><span class="line">        dis[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">        updated[<span class="number">1</span>]=<span class="number">1</span>; </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> x=read(),y=read();</span><br><span class="line">            LL z=read();</span><br><span class="line">            lis[++t].from=x;</span><br><span class="line">            lis[t].to=y;</span><br><span class="line">            lis[t].date=z;</span><br><span class="line">        &#125;</span><br><span class="line">        sort(lis+<span class="number">1</span>,lis+<span class="number">1</span>+t,cmp);</span><br><span class="line">        lis[t+<span class="number">1</span>].date=oo;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=t;i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> l=lis[i].from,r=lis[i].to;</span><br><span class="line">            <span class="keyword">int</span> j;</span><br><span class="line">            <span class="keyword">for</span>(j=i+<span class="number">1</span>;j&lt;=t+<span class="number">1</span>;j++)</span><br><span class="line">                <span class="keyword">if</span>(lis[j].date!=lis[i].date)</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            work(i,j<span class="number">-1</span>);</span><br><span class="line">            i = j<span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(dis[n]&gt;=oo)</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">"No answer"</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,dis[n]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>因为知道了自己是多么的菜,所以才要更加努力去追求那个永远也不可能实现的梦想</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;$ZROI$杂题总结…&lt;br&gt;
    
    </summary>
    
    
      <category term="OI" scheme="http://krrrr.xyz/%E5%88%86%E7%B1%BB/OI/"/>
    
    
      <category term="图论" scheme="http://krrrr.xyz/%E6%A0%87%E7%AD%BE/%E5%9B%BE%E8%AE%BA/"/>
    
      <category term="最短路" scheme="http://krrrr.xyz/%E6%A0%87%E7%AD%BE/%E6%9C%80%E7%9F%AD%E8%B7%AF/"/>
    
  </entry>
  
  <entry>
    <title>ZROI国庆七天乐D5</title>
    <link href="http://krrrr.xyz/2019/10/07/ZROI%E5%9B%BD%E5%BA%86%E4%B8%83%E5%A4%A9%E4%B9%90D5/"/>
    <id>http://krrrr.xyz/2019/10/07/ZROI国庆七天乐D5/</id>
    <published>2019-10-07T03:14:47.000Z</published>
    <updated>2019-10-18T13:14:40.164Z</updated>
    
    <content type="html"><![CDATA[<p>版权原因,题面不公开<br><a id="more"></a><br><del>要是CSP的D1这么考我估计我今年又凉了</del></p><h3 id="添"><a href="#添" class="headerlink" title="添"></a>添</h3><p>经过观察之后发现,在没有任意三线共点的情况下,答案只可能是$1,2,3$当中的一个.<br>然后发现答案吧为$1$的情况只有在所有直线都相互平行或者$n$小于$2$的情况下会成立.<br>然后考虑答案为$2$的情况,发现只有两组平行线集合,而且总线段的个数大于$2$的情况时,会发现答案为$2$.<br>剩下的情况就是答案为$3$的情况.</p><h3 id="罐装"><a href="#罐装" class="headerlink" title="罐装"></a>罐装</h3><p>首先按照国王游戏的套路来推一波贪心的式子.<br>然后发现得到了$p_i \times t_j &gt; p_j \times t_i$<br>移项之后就有$\frac{p_i}{t_i}&gt;\frac{p_j}{t_j}$.<br>然后我们按照这个东西排序,每次修改的时候都暴力做一遍,总复杂度为$O(m\times nlogn)$,就可以拿到$70$分的好成绩.<br>然后我们又发现,每次修改时只会修改一个点,这样的话每次修改的时候都重新做一遍,感觉非常的浪费.<br>我们考虑一下,我们修改一个点的时候,对其他点的贡献的影响.<br>我们发现如果我们修改的那个位置,在排完序之后在原来序列中的位置为$pos$的话,我们如果把这个点先去掉的话,那么从$pos+1$到$n$的位置的数的贡献都会增加$t_{pos} \times \sum_{i=pos+1}^np_i$<br>然后我们考虑一下修改的过程,等价于我们把一个位置删去,然后再在这个区间中插入我们要修改的数值,这个过程中要进行两次区间$sum$.</p><p>所以用权值线段树或者平衡树等数据结构维护即可.</p><h3 id="三千米"><a href="#三千米" class="headerlink" title="三千米"></a>三千米</h3><p>这道题是不可能补的,这辈子都不可能补的</p><p>总结:难度差不多$noip$的$d1$难度吧(甚至还要低)….但是我这个得分就….算了我太菜了/kk</p><blockquote><p>因为知道了自己是多么的菜,所以才要更加努力去追求那个永远也不可能实现的梦想</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;版权原因,题面不公开&lt;br&gt;
    
    </summary>
    
    
      <category term="OI" scheme="http://krrrr.xyz/%E5%88%86%E7%B1%BB/OI/"/>
    
    
      <category term="ZROI" scheme="http://krrrr.xyz/%E6%A0%87%E7%AD%BE/ZROI/"/>
    
  </entry>
  
  <entry>
    <title>国庆七天乐D1</title>
    <link href="http://krrrr.xyz/2019/10/01/%E5%9B%BD%E5%BA%86%E4%B8%83%E5%A4%A9%E4%B9%90D1/"/>
    <id>http://krrrr.xyz/2019/10/01/国庆七天乐D1/</id>
    <published>2019-10-01T07:05:17.000Z</published>
    <updated>2019-10-18T13:14:09.795Z</updated>
    
    <content type="html"><![CDATA[<p>版权原因,题面不公开w<br><a id="more"></a></p><h3 id="幸福"><a href="#幸福" class="headerlink" title="幸福"></a>幸福</h3><p>题目中要我们去求$\sum_{i=0}^n F_i$<br>我们发现直接去由$f$数组去递推$F$数组的话时间复杂度是$O(n^2)$的,显然过不了,所以我们要推一波式子.<br>由题意可知</p><script type="math/tex; mode=display">F_i=\sum_{i=0}^n f_i\times f_{n-i}</script><p>我们发现$f_i=f_{i-1}+f_{i-2}$,那么我们把$f_0$和$f_1$单独拿出来之后,上边的式子就可以拆成 </p><script type="math/tex; mode=display">F_i=\sum_{i=2}^n [(f_{i-1}+f_{i-2}) \times f_{n-i}]+f_0 \times f_n + f_1 \times f_{n-1}</script><p>再根据万能的加法结合律,我们把上式中的几个$\sum$拆分魔改之后得到</p><script type="math/tex; mode=display">F_i=\sum_{i=0}^{n-1} f_i \times f_{n-i-1} + \sum_{i=0}^{n-2} f_i \times f_{n-i-2} + f_0 \times f_n - f_1 \times f_n + f_0 \times f_n</script><p>然后发现前边那两个$\sum$的式子分别是$F_{i-1}和F_{i-2}$,又因为$f_0=f_1=1$,带入这个式子之后我们可以得到: </p><script type="math/tex; mode=display">F_i=F_{i-1}+F_{i-2}+f_i</script><p>然后就可以愉快的矩乘求出来了.<br>但是因为我比较菜,只会用矩阵快速幂求第$i$项,但是题目中要求你求$\sum_{i=0}^nF_i$,我们怎么办呢?<br>然后我们来考虑一下怎么用矩阵快速幂的过程中直接求出前缀和.</p><p>我们想一下矩阵乘法的过程,因为我们的目标矩阵是由原来的矩阵和我们构造的矩阵相乘得到的,如果我们中间构造一个$01$矩阵的话,矩阵乘法就可以看成是矩阵中的元素不断的相加,所以原理上在矩阵快速幂的过程中是可以直接求出我们要求的数列的前缀和的.<br>我们以求斐波那契数列的前缀和为例子,因为我们知道,一个$n \times m$的矩阵与一个$m \times k$的矩阵相乘之后,我们得到的矩阵是一个$n \times k$的矩阵.<br>所以我们考虑在我们原来构造的矩阵中加上一位,这样的话矩阵就变成了{$f_i,f_{i+1},\sum_{j=1}^{i+1}f_j$}.相应的,在我们构造的矩阵中,我们可以通过使$f_i与f_{i+1}$都被加入我们新加的一维来达到更新前缀和的目的.<br>综上,我们可以在求$F_i$的矩阵中加一维表示前缀和,然后直接矩阵快速幂即可.<br>时间复杂度为$O(logn)$,可以通过本题</p><h3 id="树链剖分"><a href="#树链剖分" class="headerlink" title="树链剖分"></a>树链剖分</h3><p>先考虑暴力怎么写.<br>我们发现如果根节点被确定了的话,我们提前用树上差分统计出每个点被经过了多少次之后,可以直接贪心的去找答案.<br>所以这样的话我们必须要枚举根节点.这样的话复杂度也是显然过不了.<br>我们先钦定一个节点作为根节点,然后我们考虑每个节点作为根节点的情况.<br>显然发现某个点的在原树上的儿子节点是不受影响的,所以我们可以预先进行一次$dfs$来确定<br>我们发现,如果某个节点$i$与我们当前的这个即将要成为根的节点不相邻的话,那么这个点$i$是很显然不会受到影响的(该怎么走还得怎么走)<br>我们考虑从上往下的顺序进行$DFS$，然后每次求出当前节点作为根时的最小代价。显然，与当前节点不相邻的边不受这个节点的影响，因此我们可以直接求出.<br>又因为孩子方向的在第一次$DFS$中预处理了，而父亲方向的在刚刚$DFS$的过程中求出。然后求出与当前节点相邻的边中，最大的以及次大的，根据$DFS$的孩子选择是去掉最大的还是次大的即可。</p><h3 id="小E和小F-strikes-again"><a href="#小E和小F-strikes-again" class="headerlink" title="小E和小F strikes again"></a>小E和小F strikes again</h3><p>这道题是不可能补的,这辈子都不可能补的</p><blockquote><p>因为知道了自己是多么的菜,所以才要更加努力去追求那个永远也不可能实现的梦想</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;版权原因,题面不公开w&lt;br&gt;
    
    </summary>
    
    
      <category term="OI" scheme="http://krrrr.xyz/%E5%88%86%E7%B1%BB/OI/"/>
    
    
      <category term="ZROI" scheme="http://krrrr.xyz/%E6%A0%87%E7%AD%BE/ZROI/"/>
    
  </entry>
  
  <entry>
    <title>Codeforces Round #588 (Div. 2)题解</title>
    <link href="http://krrrr.xyz/2019/09/27/CF588%E9%A2%98%E8%A7%A3/"/>
    <id>http://krrrr.xyz/2019/09/27/CF588题解/</id>
    <published>2019-09-27T13:02:25.000Z</published>
    <updated>2019-10-18T13:13:14.947Z</updated>
    
    <content type="html"><![CDATA[<p>lyt我对不起你啊/ll<br><a id="more"></a></p><h3 id="Dawid-and-Bags-of-Candies"><a href="#Dawid-and-Bags-of-Candies" class="headerlink" title="Dawid and Bags of Candies"></a>Dawid and Bags of Candies</h3><p>其实我们按照大小排序了之后,我们发现可能的答案只有第$1,4$组成或者第$4$个单独组成,判断一下即可.<br>注意精度,不然直接除$2$的时候可能会被卡. </p><h3 id="Ania-and-Minimizing"><a href="#Ania-and-Minimizing" class="headerlink" title="Ania and Minimizing"></a>Ania and Minimizing</h3><p>发现如果把高位变小了之后,那么答案一定会变得更优.<br>所以我们直接从高位向低位贪心即可.注意判断$k$为$0$的情况.</p><h3 id="Anadi-and-Domino"><a href="#Anadi-and-Domino" class="headerlink" title="Anadi and Domino"></a>Anadi and Domino</h3><p>$emmmmm….$<br>看题面就非常高大上<del>然后我们认真读了读题发现真的很高大上</del>.<br>看一眼数据范围,$n&lt;=7$,所以我们考虑一下枚举与每个点相连的边的颜色.<br>然后我们直接暴力$check$即可.<del>对不起数据范围小真的可以为所欲为</del><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">int</span> G[<span class="number">10</span>][<span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> col[<span class="number">8</span>],ans;</span><br><span class="line"><span class="keyword">bool</span> used[<span class="number">7</span>],uc[<span class="number">7</span>][<span class="number">7</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Prep</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(uc,<span class="literal">false</span>,<span class="keyword">sizeof</span>(uc));</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">check</span><span class="params">()</span></span>&#123;</span><br><span class="line">Prep();</span><br><span class="line"><span class="keyword">int</span> tmp=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(col[i]==<span class="number">0</span>)</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(!G[i][j]||!col[j])</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span>(!uc[col[i]][col[j]])&#123;</span><br><span class="line">uc[col[i]][col[j]]=<span class="number">1</span>;</span><br><span class="line">uc[col[j]][col[i]]=<span class="number">1</span>;</span><br><span class="line">tmp++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">ans=max(ans,tmp);</span><br><span class="line"><span class="comment">//if(tmp==21)&#123;</span></span><br><span class="line"><span class="comment">//for(int i=1;i&lt;=n;i++)</span></span><br><span class="line"><span class="comment">//cout&lt;&lt;col[i]&lt;&lt;" ";</span></span><br><span class="line"><span class="comment">//exit(0); </span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x==n+<span class="number">1</span>)&#123;</span><br><span class="line">check();</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">6</span>;i++)&#123; </span><br><span class="line">col[x]=i;</span><br><span class="line">dfs(x+<span class="number">1</span>); </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">( <span class="keyword">void</span> )</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line"><span class="keyword">int</span> x,y;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;x&gt;&gt;y;</span><br><span class="line">G[x][y]=<span class="number">1</span>;</span><br><span class="line">G[y][x]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">memset</span>(col,<span class="number">-1</span>,<span class="keyword">sizeof</span>(col));</span><br><span class="line">dfs(<span class="number">1</span>);</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Main Code</span></span><br></pre></td></tr></table></figure></p><h3 id="Marcin-and-Training-Camp"><a href="#Marcin-and-Training-Camp" class="headerlink" title="Marcin and Training Camp"></a>Marcin and Training Camp</h3><p>我们考虑到,如果一个人$i$和另一个人$j$能看顺眼的话,只有$j$是$i$的子集才可以.<br>然后如果在某个分组里,$j$已经是某个$i$人的子集了,那么$j$一定是可以被选出的.<br>所以我们的任务就变成了找到所有的$a_k$只出现过一次或者不是其他出现过两次或多次的$a_i$的子集合的$k$.<br>然后从$sum$中将这些不合法的状态删去即可.</p><blockquote><p>因为知道了自己是多么的菜,所以才要更加努力去追求那个永远也不可能实现的梦想</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;lyt我对不起你啊/ll&lt;br&gt;
    
    </summary>
    
    
      <category term="OI" scheme="http://krrrr.xyz/%E5%88%86%E7%B1%BB/OI/"/>
    
    
      <category term="CodeForces题解" scheme="http://krrrr.xyz/%E6%A0%87%E7%AD%BE/CodeForces%E9%A2%98%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>数论学习笔记</title>
    <link href="http://krrrr.xyz/2019/09/25/%E6%95%B0%E8%AE%BA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://krrrr.xyz/2019/09/25/数论学习笔记/</id>
    <published>2019-09-25T06:00:42.000Z</published>
    <updated>2019-10-18T13:13:15.048Z</updated>
    
    <content type="html"><![CDATA[<p>数论果然博大精深,<del>但是我啥都没听懂</del><br><a id="more"></a></p><blockquote><p>因为知道了自己是多么的菜,所以才要更加努力去追求那个永远也不可能实现的梦想</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;数论果然博大精深,&lt;del&gt;但是我啥都没听懂&lt;/del&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="OI" scheme="http://krrrr.xyz/%E5%88%86%E7%B1%BB/OI/"/>
    
    
      <category term="学习笔记" scheme="http://krrrr.xyz/%E6%A0%87%E7%AD%BE/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="数论" scheme="http://krrrr.xyz/%E6%A0%87%E7%AD%BE/%E6%95%B0%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>SCP-114514</title>
    <link href="http://krrrr.xyz/2019/09/23/SCP1/"/>
    <id>http://krrrr.xyz/2019/09/23/SCP1/</id>
    <published>2019-09-23T03:26:04.000Z</published>
    <updated>2019-10-18T13:13:15.002Z</updated>
    
    <content type="html"><![CDATA[<p>qwq</p><a id="more"></a><p>SCP-114514 研究社</p><p>等级: Keter</p><p>特殊收容措施: 目前SCP-114514无法被收容,目前基金会的目的是使SCP-114514保持不再发生变化. </p><p>项目描述: 已知SCP-114514曾经的名称有<del>信息学,OI,国际象棋,围棋,五子棋,羽毛球,篮球,OSU,植物大战僵尸,外卖</del>K歌研究社.已知项目会在随机的时间进行名称上的变化.<br>目前已经证实,在每次项目的名称发生改变时,项目内的人员(称之为$SCP-114514-1919810$)的兴趣爱好会随着研究社的名称发生变化.  </p><p>经过研究发现,SCP-114514内的人员爱好需要的物件似乎并不需要从外界获取,会有一个被称为$SCP-114514-1$的被称为$Z$主任的人形实体供给,而供给的物品似乎是从内部自然产生的.</p><p>在每次项目的名称发生改变时,会强制将项目周边距离不超过$10m$的人员强制转化为$SCP-114514-1919810$,已知这一影响不可逆.<br>而且在普通人员被强制转化后,会在[数据删除]的时间之内丧失对文化课学习的兴趣. </p><p>常人暴露在SCP-114514面前是致命的,所以对于SCP-114514的任何接触需要3名及以上四级权限者的允许,且实验者在实验后将被强制隔离$3$天,如果在隔离时间之内实验者表现了明显的兴趣爱好变化,那么实验者将会被处决.  </p><p>对于SCP-114514的进一步研究报告为致命媒介模因,需要得到O5议会的批准之后访问.</p><blockquote><p>您好,监督者,已取消对机动特遣队的派遣指令.  </p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;qwq&lt;/p&gt;
    
    </summary>
    
    
      <category term="吹水" scheme="http://krrrr.xyz/%E5%88%86%E7%B1%BB/%E5%90%B9%E6%B0%B4/"/>
    
    
      <category term="SCP乱搞" scheme="http://krrrr.xyz/%E6%A0%87%E7%AD%BE/SCP%E4%B9%B1%E6%90%9E/"/>
    
  </entry>
  
  <entry>
    <title>Codeforces Round #587题解</title>
    <link href="http://krrrr.xyz/2019/09/22/CodeforcesRound-587%E9%A2%98%E8%A7%A3/"/>
    <id>http://krrrr.xyz/2019/09/22/CodeforcesRound-587题解/</id>
    <published>2019-09-22T07:46:20.000Z</published>
    <updated>2019-10-18T13:13:14.966Z</updated>
    
    <content type="html"><![CDATA[<p>LYT我对不起你啊/ll<br><a id="more"></a></p><h2 id="Prefixes"><a href="#Prefixes" class="headerlink" title="Prefixes"></a>Prefixes</h2><p>经过观察私信找规律之后发现,对于每个偶数的前缀$i$,如果$i&gt;2$且$i$这个前缀满足条件,那么$i/2$也一定会满足条件.<br>所以我们要满足的就是对于每个最小的间隔为$2$的区间,使他们当中有一个$a$和一个$b$</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pll std::pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MP std::make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> oo 2147483647</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PI 3.141592653590</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rint register int</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> F(i,num,b) for(rint i=num;i&lt;=b;i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> D(i,num,b) for(rint i=num;i&gt;=b;i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> G(i,num,b,c) for(rint num=head[b];num;num=c[num].next)</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">int</span> _read () &#123;<span class="keyword">int</span> s = <span class="number">0</span> , w = <span class="number">1</span>;<span class="keyword">char</span> ch = getchar ();<span class="keyword">while</span> ( ch &gt; <span class="string">'9'</span> || ch &lt; <span class="string">'0'</span> ) &#123; <span class="keyword">if</span> ( ch == <span class="string">'-'</span> ) w = <span class="number">-1</span>; ch = getchar ();&#125;<span class="keyword">while</span> ( ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span> ) &#123; s = s * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar ();&#125;<span class="keyword">return</span> s * w;&#125;</span><br><span class="line"><span class="keyword">template</span> &lt; <span class="class"><span class="keyword">class</span> <span class="title">T</span> &gt; <span class="title">inline</span> <span class="title">void</span> <span class="title">read</span> ( <span class="title">T</span> &amp;<span class="title">x</span> ) &#123;</span>T s = <span class="number">0</span> , w = <span class="number">1</span>;<span class="keyword">char</span> ch = getchar ();<span class="keyword">while</span> ( ch &gt; <span class="string">'9'</span> || ch &lt; <span class="string">'0'</span> ) &#123; <span class="keyword">if</span> ( ch == <span class="string">'-'</span> ) w = <span class="number">-1</span>; ch = getchar ();&#125;<span class="keyword">while</span> ( ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span> ) &#123; s = s * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar ();&#125;x = s * w;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="keyword">template</span> &lt; <span class="class"><span class="keyword">class</span> <span class="title">T</span> , <span class="title">typename</span> ...<span class="title">Argc</span> &gt; <span class="title">inline</span> <span class="title">void</span> <span class="title">read</span> ( <span class="title">T</span> &amp;<span class="title">x</span> , <span class="title">Argc</span> &amp;...<span class="title">Args</span> ) &#123;</span>read ( x );read ( Args... );<span class="keyword">return</span>;&#125; </span><br><span class="line"><span class="keyword">template</span> &lt; <span class="class"><span class="keyword">class</span> <span class="title">T</span> &gt; <span class="title">inline</span> <span class="title">T</span> <span class="title">max</span> ( <span class="title">T</span> <span class="title">x</span> , <span class="title">T</span> <span class="title">y</span> ) &#123;</span><span class="keyword">return</span> x &gt; y ? x : y;&#125;</span><br><span class="line"><span class="keyword">template</span> &lt; <span class="class"><span class="keyword">class</span> <span class="title">T</span> &gt; <span class="title">inline</span> <span class="title">T</span> <span class="title">min</span> ( <span class="title">T</span> <span class="title">x</span> , <span class="title">T</span> <span class="title">y</span> ) &#123;</span><span class="keyword">return</span> x &lt; y ? x : y;&#125;</span><br><span class="line"><span class="keyword">template</span> &lt; <span class="class"><span class="keyword">class</span> <span class="title">T</span> &gt; <span class="title">inline</span> <span class="title">void</span> <span class="title">abs</span> ( <span class="title">T</span> <span class="title">x</span> ) &#123;</span><span class="keyword">return</span> x &gt; <span class="number">0</span> ? x : -x;&#125;</span><br><span class="line"><span class="keyword">template</span> &lt; <span class="keyword">typename</span> T &gt; <span class="function"><span class="keyword">void</span> <span class="title">write</span> <span class="params">( T x )</span> </span>&#123;<span class="keyword">if</span> ( x &lt; <span class="number">0</span> ) x = -x , <span class="built_in">putchar</span> ( <span class="string">'-'</span> );<span class="keyword">if</span> ( x &gt; <span class="number">9</span> ) write ( x / <span class="number">10</span> );<span class="built_in">putchar</span> ( x % <span class="number">10</span> + <span class="number">48</span> );<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="keyword">template</span> &lt; <span class="keyword">typename</span> T &gt; <span class="function"><span class="keyword">void</span> <span class="title">writeln</span> <span class="params">( T x )</span> </span>&#123;write ( x ); <span class="built_in">printf</span> (<span class="string">"\n"</span>); &#125;</span><br><span class="line"><span class="keyword">template</span> &lt; <span class="class"><span class="keyword">class</span> <span class="title">T</span> &gt; <span class="title">inline</span> <span class="title">T</span> <span class="title">gcd</span> ( <span class="title">T</span> <span class="title">x</span> , <span class="title">T</span> <span class="title">y</span> ) &#123;</span><span class="keyword">if</span> ( x &lt; y ) swap ( x , y );<span class="keyword">if</span> ( !y ) <span class="keyword">return</span> x;<span class="keyword">return</span> gcd ( y , x % y );&#125;</span><br><span class="line"><span class="keyword">template</span> &lt; <span class="class"><span class="keyword">class</span> <span class="title">T</span> &gt; <span class="title">inline</span> <span class="title">T</span> <span class="title">ksm</span> ( <span class="title">T</span> <span class="title">x</span> , <span class="title">T</span> <span class="title">y</span> , <span class="title">T</span> <span class="title">Mod</span> ) &#123;</span>T tmp = <span class="number">1</span>;<span class="keyword">while</span> ( y ) &#123;<span class="keyword">if</span> ( y % <span class="number">2</span> == <span class="number">1</span> ) tmp = ( tmp * x % Mod );x = ( x * x ) % Mod;y &gt;&gt;= <span class="number">1</span>;&#125;<span class="keyword">return</span> tmp;&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**********************************************************************************************************************************************************************************************************************************************************************/</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> n , ans;</span><br><span class="line"><span class="keyword">char</span> ss[N];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span>  </span>&#123;</span><br><span class="line">read ( n );</span><br><span class="line"><span class="built_in">scanf</span> ( <span class="string">"%s"</span> , ss + <span class="number">1</span> );</span><br><span class="line"><span class="keyword">int</span> s1 = <span class="number">0</span> , s2 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= n ; i++ ) &#123;</span><br><span class="line"><span class="keyword">if</span> ( ss[i] == <span class="string">'a'</span> ) </span><br><span class="line">s1++;</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">s2++;</span><br><span class="line"><span class="keyword">if</span> ( i % <span class="number">2</span> == <span class="number">0</span> ) &#123;</span><br><span class="line"><span class="keyword">if</span> ( s1 == s2 ) </span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">ans++;</span><br><span class="line"><span class="keyword">if</span> ( s1 &gt; s2 ) </span><br><span class="line">ss[i] = <span class="string">'b'</span>;</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">ss[i] = <span class="string">'a'</span>;</span><br><span class="line">s1 = <span class="number">0</span>;</span><br><span class="line">s2 = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">writeln ( ans );</span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= n ; i++ ) </span><br><span class="line"><span class="built_in">printf</span> ( <span class="string">"%c"</span> , ss[i] );</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Shooting"><a href="#Shooting" class="headerlink" title="Shooting"></a>Shooting</h2><p>通过观察样例可知,从大到小排序即可qwq…</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pll std::pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MP std::make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> oo 2147483647</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PI 3.141592653590</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rint register int</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> F(i,num,b) for(rint i=num;i&lt;=b;i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> D(i,num,b) for(rint i=num;i&gt;=b;i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> G(i,num,b,c) for(rint num=head[b];num;num=c[num].next)</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">int</span> _read () &#123;<span class="keyword">int</span> s = <span class="number">0</span> , w = <span class="number">1</span>;<span class="keyword">char</span> ch = getchar ();<span class="keyword">while</span> ( ch &gt; <span class="string">'9'</span> || ch &lt; <span class="string">'0'</span> ) &#123; <span class="keyword">if</span> ( ch == <span class="string">'-'</span> ) w = <span class="number">-1</span>; ch = getchar ();&#125;<span class="keyword">while</span> ( ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span> ) &#123; s = s * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar ();&#125;<span class="keyword">return</span> s * w;&#125;</span><br><span class="line"><span class="keyword">template</span> &lt; <span class="class"><span class="keyword">class</span> <span class="title">T</span> &gt; <span class="title">inline</span> <span class="title">void</span> <span class="title">read</span> ( <span class="title">T</span> &amp;<span class="title">x</span> ) &#123;</span>T s = <span class="number">0</span> , w = <span class="number">1</span>;<span class="keyword">char</span> ch = getchar ();<span class="keyword">while</span> ( ch &gt; <span class="string">'9'</span> || ch &lt; <span class="string">'0'</span> ) &#123; <span class="keyword">if</span> ( ch == <span class="string">'-'</span> ) w = <span class="number">-1</span>; ch = getchar ();&#125;<span class="keyword">while</span> ( ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span> ) &#123; s = s * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar ();&#125;x = s * w;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="keyword">template</span> &lt; <span class="class"><span class="keyword">class</span> <span class="title">T</span> , <span class="title">typename</span> ...<span class="title">Argc</span> &gt; <span class="title">inline</span> <span class="title">void</span> <span class="title">read</span> ( <span class="title">T</span> &amp;<span class="title">x</span> , <span class="title">Argc</span> &amp;...<span class="title">Args</span> ) &#123;</span>read ( x );read ( Args... );<span class="keyword">return</span>;&#125; </span><br><span class="line"><span class="keyword">template</span> &lt; <span class="class"><span class="keyword">class</span> <span class="title">T</span> &gt; <span class="title">inline</span> <span class="title">T</span> <span class="title">max</span> ( <span class="title">T</span> <span class="title">x</span> , <span class="title">T</span> <span class="title">y</span> ) &#123;</span><span class="keyword">return</span> x &gt; y ? x : y;&#125;</span><br><span class="line"><span class="keyword">template</span> &lt; <span class="class"><span class="keyword">class</span> <span class="title">T</span> &gt; <span class="title">inline</span> <span class="title">T</span> <span class="title">min</span> ( <span class="title">T</span> <span class="title">x</span> , <span class="title">T</span> <span class="title">y</span> ) &#123;</span><span class="keyword">return</span> x &lt; y ? x : y;&#125;</span><br><span class="line"><span class="keyword">template</span> &lt; <span class="class"><span class="keyword">class</span> <span class="title">T</span> &gt; <span class="title">inline</span> <span class="title">void</span> <span class="title">abs</span> ( <span class="title">T</span> <span class="title">x</span> ) &#123;</span><span class="keyword">return</span> x &gt; <span class="number">0</span> ? x : -x;&#125;</span><br><span class="line"><span class="keyword">template</span> &lt; <span class="keyword">typename</span> T &gt; <span class="function"><span class="keyword">void</span> <span class="title">write</span> <span class="params">( T x )</span> </span>&#123;<span class="keyword">if</span> ( x &lt; <span class="number">0</span> ) x = -x , <span class="built_in">putchar</span> ( <span class="string">'-'</span> );<span class="keyword">if</span> ( x &gt; <span class="number">9</span> ) write ( x / <span class="number">10</span> );<span class="built_in">putchar</span> ( x % <span class="number">10</span> + <span class="number">48</span> );<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="keyword">template</span> &lt; <span class="keyword">typename</span> T &gt; <span class="function"><span class="keyword">void</span> <span class="title">writeln</span> <span class="params">( T x )</span> </span>&#123;write ( x ); <span class="built_in">printf</span> (<span class="string">"\n"</span>); &#125;</span><br><span class="line"><span class="keyword">template</span> &lt; <span class="class"><span class="keyword">class</span> <span class="title">T</span> &gt; <span class="title">inline</span> <span class="title">T</span> <span class="title">gcd</span> ( <span class="title">T</span> <span class="title">x</span> , <span class="title">T</span> <span class="title">y</span> ) &#123;</span><span class="keyword">if</span> ( x &lt; y ) swap ( x , y );<span class="keyword">if</span> ( !y ) <span class="keyword">return</span> x;<span class="keyword">return</span> gcd ( y , x % y );&#125;</span><br><span class="line"><span class="keyword">template</span> &lt; <span class="class"><span class="keyword">class</span> <span class="title">T</span> &gt; <span class="title">inline</span> <span class="title">T</span> <span class="title">ksm</span> ( <span class="title">T</span> <span class="title">x</span> , <span class="title">T</span> <span class="title">y</span> , <span class="title">T</span> <span class="title">Mod</span> ) &#123;</span>T tmp = <span class="number">1</span>;<span class="keyword">while</span> ( y ) &#123;<span class="keyword">if</span> ( y % <span class="number">2</span> == <span class="number">1</span> ) tmp = ( tmp * x % Mod );x = ( x * x ) % Mod;y &gt;&gt;= <span class="number">1</span>;&#125;<span class="keyword">return</span> tmp;&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**********************************************************************************************************************************************************************************************************************************************************************/</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1005</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> val;</span><br><span class="line"><span class="keyword">int</span> pos;</span><br><span class="line">&#125;ls[N];</span><br><span class="line"> </span><br><span class="line">ll ans;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">cmp</span> <span class="params">( Node x , Node y )</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> x.val &gt; y.val;</span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span>  </span>&#123;</span><br><span class="line">read ( n );</span><br><span class="line">F ( i , <span class="number">1</span> , n ) &#123;</span><br><span class="line">ls[i].val = _read ();</span><br><span class="line">ls[i].pos = i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">std</span> :: sort ( ls + <span class="number">1</span> , ls + <span class="number">1</span> + n , cmp );</span><br><span class="line">F ( i , <span class="number">1</span> , n ) </span><br><span class="line">ans += ls[i].val * ( i - <span class="number">1</span> ) + <span class="number">1</span>; </span><br><span class="line">writeln ( ans );</span><br><span class="line">F ( i , <span class="number">1</span> , n ) </span><br><span class="line"><span class="built_in">printf</span> ( <span class="string">"%d "</span> , ls[i].pos ); </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="White-Sheet"><a href="#White-Sheet" class="headerlink" title="White Sheet"></a>White Sheet</h2><p>发现如果这个白色矩形的四条边都被覆盖了的话,那么中间一定也被覆盖了.<br>然后暴力枚举判断即可.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pll std::pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MP std::make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> oo 2147483647</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PI 3.141592653590</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rint register int</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> F(i,num,b) for(rint i=num;i&lt;=b;i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> D(i,num,b) for(rint i=num;i&gt;=b;i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> G(i,num,b,c) for(rint num=head[b];num;num=c[num].next)</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">int</span> _read () &#123;<span class="keyword">int</span> s = <span class="number">0</span> , w = <span class="number">1</span>;<span class="keyword">char</span> ch = getchar ();<span class="keyword">while</span> ( ch &gt; <span class="string">'9'</span> || ch &lt; <span class="string">'0'</span> ) &#123; <span class="keyword">if</span> ( ch == <span class="string">'-'</span> ) w = <span class="number">-1</span>; ch = getchar ();&#125;<span class="keyword">while</span> ( ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span> ) &#123; s = s * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar ();&#125;<span class="keyword">return</span> s * w;&#125;</span><br><span class="line"><span class="keyword">template</span> &lt; <span class="class"><span class="keyword">class</span> <span class="title">T</span> &gt; <span class="title">inline</span> <span class="title">void</span> <span class="title">read</span> ( <span class="title">T</span> &amp;<span class="title">x</span> ) &#123;</span>T s = <span class="number">0</span> , w = <span class="number">1</span>;<span class="keyword">char</span> ch = getchar ();<span class="keyword">while</span> ( ch &gt; <span class="string">'9'</span> || ch &lt; <span class="string">'0'</span> ) &#123; <span class="keyword">if</span> ( ch == <span class="string">'-'</span> ) w = <span class="number">-1</span>; ch = getchar ();&#125;<span class="keyword">while</span> ( ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span> ) &#123; s = s * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar ();&#125;x = s * w;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="keyword">template</span> &lt; <span class="class"><span class="keyword">class</span> <span class="title">T</span> , <span class="title">typename</span> ...<span class="title">Argc</span> &gt; <span class="title">inline</span> <span class="title">void</span> <span class="title">read</span> ( <span class="title">T</span> &amp;<span class="title">x</span> , <span class="title">Argc</span> &amp;...<span class="title">Args</span> ) &#123;</span>read ( x );read ( Args... );<span class="keyword">return</span>;&#125; </span><br><span class="line"><span class="keyword">template</span> &lt; <span class="class"><span class="keyword">class</span> <span class="title">T</span> &gt; <span class="title">inline</span> <span class="title">T</span> <span class="title">max</span> ( <span class="title">T</span> <span class="title">x</span> , <span class="title">T</span> <span class="title">y</span> ) &#123;</span><span class="keyword">return</span> x &gt; y ? x : y;&#125;</span><br><span class="line"><span class="keyword">template</span> &lt; <span class="class"><span class="keyword">class</span> <span class="title">T</span> &gt; <span class="title">inline</span> <span class="title">T</span> <span class="title">min</span> ( <span class="title">T</span> <span class="title">x</span> , <span class="title">T</span> <span class="title">y</span> ) &#123;</span><span class="keyword">return</span> x &lt; y ? x : y;&#125;</span><br><span class="line"><span class="keyword">template</span> &lt; <span class="class"><span class="keyword">class</span> <span class="title">T</span> &gt; <span class="title">inline</span> <span class="title">void</span> <span class="title">abs</span> ( <span class="title">T</span> <span class="title">x</span> ) &#123;</span><span class="keyword">return</span> x &gt; <span class="number">0</span> ? x : -x;&#125;</span><br><span class="line"><span class="keyword">template</span> &lt; <span class="keyword">typename</span> T &gt; <span class="function"><span class="keyword">void</span> <span class="title">write</span> <span class="params">( T x )</span> </span>&#123;<span class="keyword">if</span> ( x &lt; <span class="number">0</span> ) x = -x , <span class="built_in">putchar</span> ( <span class="string">'-'</span> );<span class="keyword">if</span> ( x &gt; <span class="number">9</span> ) write ( x / <span class="number">10</span> );<span class="built_in">putchar</span> ( x % <span class="number">10</span> + <span class="number">48</span> );<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="keyword">template</span> &lt; <span class="keyword">typename</span> T &gt; <span class="function"><span class="keyword">void</span> <span class="title">writeln</span> <span class="params">( T x )</span> </span>&#123;write ( x ); <span class="built_in">printf</span> (<span class="string">"\n"</span>); &#125;</span><br><span class="line"><span class="keyword">template</span> &lt; <span class="class"><span class="keyword">class</span> <span class="title">T</span> &gt; <span class="title">inline</span> <span class="title">T</span> <span class="title">gcd</span> ( <span class="title">T</span> <span class="title">x</span> , <span class="title">T</span> <span class="title">y</span> ) &#123;</span><span class="keyword">if</span> ( x &lt; y ) swap ( x , y );<span class="keyword">if</span> ( !y ) <span class="keyword">return</span> x;<span class="keyword">return</span> gcd ( y , x % y );&#125;</span><br><span class="line"><span class="keyword">template</span> &lt; <span class="class"><span class="keyword">class</span> <span class="title">T</span> &gt; <span class="title">inline</span> <span class="title">T</span> <span class="title">ksm</span> ( <span class="title">T</span> <span class="title">x</span> , <span class="title">T</span> <span class="title">y</span> , <span class="title">T</span> <span class="title">Mod</span> ) &#123;</span>T tmp = <span class="number">1</span>;<span class="keyword">while</span> ( y ) &#123;<span class="keyword">if</span> ( y % <span class="number">2</span> == <span class="number">1</span> ) tmp = ( tmp * x % Mod );x = ( x * x ) % Mod;y &gt;&gt;= <span class="number">1</span>;&#125;<span class="keyword">return</span> tmp;&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**********************************************************************************************************************************************************************************************************************************************************************/</span></span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> x;</span><br><span class="line"><span class="keyword">int</span> y;</span><br><span class="line">&#125;p[<span class="number">7</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">( <span class="keyword">void</span> )</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">6</span>;i++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;p[i].x,&amp;p[i].y);</span><br><span class="line"><span class="keyword">if</span>(p[<span class="number">3</span>].x&lt;=p[<span class="number">1</span>].x&amp;&amp;p[<span class="number">3</span>].y&lt;=p[<span class="number">1</span>].y&amp;&amp;p[<span class="number">4</span>].x&gt;=p[<span class="number">2</span>].x&amp;&amp;p[<span class="number">4</span>].y&gt;=p[<span class="number">2</span>].y)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"NO\n"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(p[<span class="number">5</span>].x&lt;=p[<span class="number">1</span>].x&amp;&amp;p[<span class="number">5</span>].y&lt;=p[<span class="number">1</span>].y&amp;&amp;p[<span class="number">6</span>].x&gt;=p[<span class="number">2</span>].x&amp;&amp;p[<span class="number">6</span>].y&gt;=p[<span class="number">2</span>].y)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"NO\n"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(p[<span class="number">3</span>].x&lt;=p[<span class="number">1</span>].x&amp;&amp;p[<span class="number">4</span>].x&gt;=p[<span class="number">2</span>].x&amp;&amp;p[<span class="number">5</span>].x&lt;=p[<span class="number">1</span>].x&amp;&amp;p[<span class="number">6</span>].x&gt;=p[<span class="number">2</span>].x)&#123;</span><br><span class="line"><span class="keyword">if</span>(p[<span class="number">3</span>].y&lt;=p[<span class="number">1</span>].y&amp;&amp;p[<span class="number">4</span>].y&gt;=p[<span class="number">5</span>].y&amp;&amp;p[<span class="number">6</span>].y&gt;=p[<span class="number">2</span>].y)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"NO\n"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(p[<span class="number">5</span>].y&lt;=p[<span class="number">1</span>].y&amp;&amp;p[<span class="number">6</span>].y&gt;=p[<span class="number">3</span>].y&amp;&amp;p[<span class="number">4</span>].y&gt;=p[<span class="number">2</span>].y)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"NO\n"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(p[<span class="number">3</span>].y&lt;=p[<span class="number">1</span>].y&amp;&amp;p[<span class="number">4</span>].y&gt;=p[<span class="number">2</span>].y&amp;&amp;p[<span class="number">5</span>].y&lt;=p[<span class="number">1</span>].y&amp;&amp;p[<span class="number">6</span>].y&gt;=p[<span class="number">2</span>].y)&#123;</span><br><span class="line"><span class="keyword">if</span>(p[<span class="number">3</span>].x&lt;=p[<span class="number">1</span>].x&amp;&amp;p[<span class="number">4</span>].x&gt;=p[<span class="number">5</span>].x&amp;&amp;p[<span class="number">6</span>].x&gt;=p[<span class="number">2</span>].x)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"NO\n"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(p[<span class="number">5</span>].x&lt;=p[<span class="number">1</span>].x&amp;&amp;p[<span class="number">6</span>].x&gt;=p[<span class="number">3</span>].x&amp;&amp;p[<span class="number">4</span>].x&gt;=p[<span class="number">2</span>].x)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"NO\n"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"YES\n"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Swords"><a href="#Swords" class="headerlink" title="Swords"></a>Swords</h2><p>发现求个$gcd$就好了  </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pll std::pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MP std::make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> oo 2147483647</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PI 3.141592653590</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rint register int</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> F(i,num,b) for(rint i=num;i&lt;=b;i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> D(i,num,b) for(rint i=num;i&gt;=b;i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> G(i,num,b,c) for(rint num=head[b];num;num=c[num].next)</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">int</span> _read () &#123;<span class="keyword">int</span> s = <span class="number">0</span> , w = <span class="number">1</span>;<span class="keyword">char</span> ch = getchar ();<span class="keyword">while</span> ( ch &gt; <span class="string">'9'</span> || ch &lt; <span class="string">'0'</span> ) &#123; <span class="keyword">if</span> ( ch == <span class="string">'-'</span> ) w = <span class="number">-1</span>; ch = getchar ();&#125;<span class="keyword">while</span> ( ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span> ) &#123; s = s * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar ();&#125;<span class="keyword">return</span> s * w;&#125;</span><br><span class="line"><span class="keyword">template</span> &lt; <span class="class"><span class="keyword">class</span> <span class="title">T</span> &gt; <span class="title">inline</span> <span class="title">void</span> <span class="title">read</span> ( <span class="title">T</span> &amp;<span class="title">x</span> ) &#123;</span>T s = <span class="number">0</span> , w = <span class="number">1</span>;<span class="keyword">char</span> ch = getchar ();<span class="keyword">while</span> ( ch &gt; <span class="string">'9'</span> || ch &lt; <span class="string">'0'</span> ) &#123; <span class="keyword">if</span> ( ch == <span class="string">'-'</span> ) w = <span class="number">-1</span>; ch = getchar ();&#125;<span class="keyword">while</span> ( ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span> ) &#123; s = s * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar ();&#125;x = s * w;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="keyword">template</span> &lt; <span class="class"><span class="keyword">class</span> <span class="title">T</span> , <span class="title">typename</span> ...<span class="title">Argc</span> &gt; <span class="title">inline</span> <span class="title">void</span> <span class="title">read</span> ( <span class="title">T</span> &amp;<span class="title">x</span> , <span class="title">Argc</span> &amp;...<span class="title">Args</span> ) &#123;</span>read ( x );read ( Args... );<span class="keyword">return</span>;&#125; </span><br><span class="line"><span class="keyword">template</span> &lt; <span class="class"><span class="keyword">class</span> <span class="title">T</span> &gt; <span class="title">inline</span> <span class="title">T</span> <span class="title">max</span> ( <span class="title">T</span> <span class="title">x</span> , <span class="title">T</span> <span class="title">y</span> ) &#123;</span><span class="keyword">return</span> x &gt; y ? x : y;&#125;</span><br><span class="line"><span class="keyword">template</span> &lt; <span class="class"><span class="keyword">class</span> <span class="title">T</span> &gt; <span class="title">inline</span> <span class="title">T</span> <span class="title">min</span> ( <span class="title">T</span> <span class="title">x</span> , <span class="title">T</span> <span class="title">y</span> ) &#123;</span><span class="keyword">return</span> x &lt; y ? x : y;&#125;</span><br><span class="line"><span class="keyword">template</span> &lt; <span class="class"><span class="keyword">class</span> <span class="title">T</span> &gt; <span class="title">inline</span> <span class="title">void</span> <span class="title">abs</span> ( <span class="title">T</span> <span class="title">x</span> ) &#123;</span><span class="keyword">return</span> x &gt; <span class="number">0</span> ? x : -x;&#125;</span><br><span class="line"><span class="keyword">template</span> &lt; <span class="keyword">typename</span> T &gt; <span class="function"><span class="keyword">void</span> <span class="title">write</span> <span class="params">( T x )</span> </span>&#123;<span class="keyword">if</span> ( x &lt; <span class="number">0</span> ) x = -x , <span class="built_in">putchar</span> ( <span class="string">'-'</span> );<span class="keyword">if</span> ( x &gt; <span class="number">9</span> ) write ( x / <span class="number">10</span> );<span class="built_in">putchar</span> ( x % <span class="number">10</span> + <span class="number">48</span> );<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="keyword">template</span> &lt; <span class="keyword">typename</span> T &gt; <span class="function"><span class="keyword">void</span> <span class="title">writeln</span> <span class="params">( T x )</span> </span>&#123;write ( x ); <span class="built_in">printf</span> (<span class="string">"\n"</span>); &#125;</span><br><span class="line"><span class="keyword">template</span> &lt; <span class="class"><span class="keyword">class</span> <span class="title">T</span> &gt; <span class="title">inline</span> <span class="title">T</span> <span class="title">gcd</span> ( <span class="title">T</span> <span class="title">x</span> , <span class="title">T</span> <span class="title">y</span> ) &#123;</span><span class="keyword">if</span> ( x &lt; y ) swap ( x , y );<span class="keyword">if</span> ( !y ) <span class="keyword">return</span> x;<span class="keyword">return</span> gcd ( y , x % y );&#125;</span><br><span class="line"><span class="keyword">template</span> &lt; <span class="class"><span class="keyword">class</span> <span class="title">T</span> &gt; <span class="title">inline</span> <span class="title">T</span> <span class="title">ksm</span> ( <span class="title">T</span> <span class="title">x</span> , <span class="title">T</span> <span class="title">y</span> , <span class="title">T</span> <span class="title">Mod</span> ) &#123;</span>T tmp = <span class="number">1</span>;<span class="keyword">while</span> ( y ) &#123;<span class="keyword">if</span> ( y % <span class="number">2</span> == <span class="number">1</span> ) tmp = ( tmp * x % Mod );x = ( x * x ) % Mod;y &gt;&gt;= <span class="number">1</span>;&#125;<span class="keyword">return</span> tmp;&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**********************************************************************************************************************************************************************************************************************************************************************/</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> n , maxs;</span><br><span class="line"><span class="keyword">int</span> num[N];</span><br><span class="line">ll ans , sum;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span>  </span>&#123;</span><br><span class="line">read ( n );</span><br><span class="line">F ( i , <span class="number">1</span> , n ) &#123;</span><br><span class="line">num[i] = _read (); </span><br><span class="line">maxs = max ( maxs , num[i] );</span><br><span class="line">&#125;</span><br><span class="line">F ( i , <span class="number">1</span> , n ) &#123;</span><br><span class="line"><span class="keyword">int</span> res = ( maxs - num[i] );</span><br><span class="line">ans = <span class="built_in">std</span> :: __gcd ( ans , res * <span class="number">1l</span>l );</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ( ans == <span class="number">0</span> ) &#123;</span><br><span class="line"><span class="built_in">puts</span> ( <span class="string">"0 0"</span> );</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">F ( i , <span class="number">1</span> , n ) </span><br><span class="line">sum += ( maxs - num[i] ) / ans;</span><br><span class="line"><span class="built_in">printf</span> ( <span class="string">"%I64d %I64d\n"</span> , sum , ans );</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Numerical-Sequence-easy-version"><a href="#Numerical-Sequence-easy-version" class="headerlink" title="Numerical Sequence (easy version)"></a>Numerical Sequence (easy version)</h2><p>发现$k$只有$10^9$的范围,所以就暴力跳就可以了.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 40010</span></span><br><span class="line"> </span><br><span class="line">LL sum[N],T;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">judge</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> count = (<span class="keyword">int</span>)<span class="built_in">log10</span>((<span class="keyword">double</span>)x) + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fun</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="built_in">pow</span>(<span class="number">10</span>,x);</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sumn = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(sum, <span class="number">0</span>,<span class="keyword">sizeof</span>(sum));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span> ; i &lt; <span class="number">40005</span> ; ++i) &#123;</span><br><span class="line">        sumn += judge(i);</span><br><span class="line">        sum[i] = sum[i - <span class="number">1</span>] +sumn;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">answer</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> j,ans,summ,i = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(sum[i] &lt; x) i++;</span><br><span class="line">    ans = x - sum[i <span class="number">-1</span>];</span><br><span class="line">    summ = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(j = <span class="number">1</span> ; j &lt;= i ; ++j)  &#123;</span><br><span class="line">        summ += judge(j);</span><br><span class="line">        <span class="keyword">if</span>(summ &gt;= ans) <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(summ == ans) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, j %<span class="number">10</span>);</span><br><span class="line">    <span class="keyword">if</span>(summ &gt; ans) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, (j / fun(summ -ans)) % <span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;T);</span><br><span class="line">    solve();</span><br><span class="line">    <span class="keyword">while</span>(T--) &#123; </span><br><span class="line">        <span class="keyword">int</span> pos;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;pos);</span><br><span class="line">        answer(pos);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//system("pause");</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>因为知道了自己是多么的菜,所以才要更加努力去追求那个永远也不可能实现的梦想</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;LYT我对不起你啊/ll&lt;br&gt;
    
    </summary>
    
    
      <category term="OI" scheme="http://krrrr.xyz/%E5%88%86%E7%B1%BB/OI/"/>
    
    
      <category term="Codeforces题解" scheme="http://krrrr.xyz/%E6%A0%87%E7%AD%BE/Codeforces%E9%A2%98%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>普转提七连测D3</title>
    <link href="http://krrrr.xyz/2019/09/22/P%E8%BD%ACTD3/"/>
    <id>http://krrrr.xyz/2019/09/22/P转TD3/</id>
    <published>2019-09-22T07:41:51.000Z</published>
    <updated>2019-10-18T13:14:57.460Z</updated>
    
    <content type="html"><![CDATA[<p>版权原因,题面不公开<br><a id="more"></a></p><h3 id="序列"><a href="#序列" class="headerlink" title="序列"></a>序列</h3><p>我们考虑化简式子:  </p><script type="math/tex; mode=display">(x^2+y)^2\equiv(x^2-y)^2+1\pmod{p}</script><p>两边的平方式展开之后再合并同类项之后可有 </p><script type="math/tex; mode=display">4x^2y\equiv1\pmod{p}</script><p>我们发现,如果我们把$4x^2$看作一个整体,那么$y$就是$4x^2$在膜$p$意义下的逆元.所以我们现在的任务变成了找对于每个$num_i$,$4num_i$的逆元有多少个<br>又因为题面中说了数字互不相等,所以我们完全可以使用$unordered$_$map$统计.<br>注意去重即可,时间复杂度$O(nlogINTMAX)$</p><h3 id="汽水"><a href="#汽水" class="headerlink" title="汽水"></a>汽水</h3><p>乍一看并莫得啥思路.<br>然后我们想一下,如果我们把每个糖浆的浓度都减少$n$的话,那么我们的任务就变成了怎么凑出$0$浓度的任务.<br>然后我们建立一个图论模型:我们设$dis_i$表示凑到$i+n$这个浓度时最少用的糖浆是多少,显然可以使用$bfs$求最短路.  </p><h3 id="树"><a href="#树" class="headerlink" title="树"></a>树</h3><p>我们发现,最优解一定是原来的某些连通块相互连接形成的,然后就没了qwq</p><h3 id="DAG"><a href="#DAG" class="headerlink" title="DAG"></a>DAG</h3><p>首先推广一个结论:如果最长路是$x$,那么一定存在一个$x+1$的染色方案.<br>我们对于每一条边$(i-&gt;j)$,我们规定只能从颜色小的点走向颜色大的点.<br>然后考虑这样的话我们就划分成了一个分层图.<br>然后又因为我们要让最短路最长,说白了就是要让层数最少.<br>而我们又发现同层的点之间没有边,等价于一个独立集.<br>所以我们的任务就转化成了把这张图划分成最少的独立集个数,使得他们的并集为这一张图.<br>又因为我们发现数据范围很小,只有$17$,所以我们可以考虑状压$DP$来解决这个问题.<br>我们设$f_i$表示我们目前选择的点的总集为$i$的时候的最小的独立集个数.<br>我们预处理出从$0$到$(1&lt;&lt;n)-1$中的每个状态是否为独立集,然后我们在每次枚举状态$i$的时候,显然$i$这个状态只能从它的某个为独立集的子集转移过来.<br>转移很显然,$f_i=min(f_j+1)$$(j$为$i$的子集且$j$这个集合为独立集).</p><blockquote><p>因为知道了自己是多么的菜,所以才要更加努力去追求那个永远也不可能实现的梦想</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;版权原因,题面不公开&lt;br&gt;
    
    </summary>
    
    
      <category term="OI" scheme="http://krrrr.xyz/%E5%88%86%E7%B1%BB/OI/"/>
    
    
      <category term="ZROI" scheme="http://krrrr.xyz/%E6%A0%87%E7%AD%BE/ZROI/"/>
    
  </entry>
  
  <entry>
    <title>提高失联测D4</title>
    <link href="http://krrrr.xyz/2019/09/22/%E6%8F%90%E9%AB%98%E5%A4%B1%E8%81%94%E6%B5%8BD4/"/>
    <id>http://krrrr.xyz/2019/09/22/提高失联测D4/</id>
    <published>2019-09-22T07:40:32.000Z</published>
    <updated>2019-10-18T13:15:25.251Z</updated>
    
    <content type="html"><![CDATA[<p><del>罗小黑真尼玛好看</del></p><a id="more"></a><h3 id="罗"><a href="#罗" class="headerlink" title="罗"></a>罗</h3><p>其实暴力有$60$分,只需要判断一下上下是否相等即可.<br>对于其他的情况,我们发现如果我们只有一个<code>*</code>的话,就可以匹配所有的字符串,所以<code>*</code>的个数最多只有一个.<br>然后我们再考虑一下万能字符串(能匹配所有长度有下界的字符串的字符串)长什么样子.<br>显然是<code>*???????????????</code><br>然后我们考虑一下,我们对于某两个字符串<code>xxxx*xxxxx*xxx</code>和<code>xxxx*xxxxxx</code>.我们发现答案中的那个<code>*</code>一定会匹配原来两个串中所有的<code>*</code>.<br>那么我们最终构造出来的那个串的长度一定就是原来两个字符串中所有非<code>*</code>的最小值加一.   </p><p>然后我们考虑了之前的条件之后,发现我们可以枚举我们的这个<code>*</code>之前的长度$L_1$.对于<code>*</code>之后的长度我们可以算出来.<br>然后对于原来的两个字符串之前的$L_1$位,我们可以像白给的$60$分那样做匹配来这样的话我们最后把所有答案拿出来,比较一下字典序和$?$的个数,就能在$O(n)$的复杂度内解决这道题.<br>但是这样的复杂度对于这道题来说显然不够优秀,所以我们考虑怎么优化这个算法.<br>我们发现两个答案不一样的地方一定是<code>*</code>,所以我们可以分别从左向右和从右向左递推出以$i$为<code>*</code>的位置时,左边$?$的个数和右边$?$的个数.<br>这样的话我们就可以用$O(n)$的时间复杂度构造出所有断点$i$的左边和右边的符号是不是问号以及问号的个数,而通过这些东西就可以构造出答案.<br>然后我们在所有的答案中,贪心的先找出一个$?$的个数最小的串,然后再在这些串里找出$L_1$最小的串(因为$L_1$小的话说明第一个出现的<code>*</code>位置靠前,字典序小).<br>然后根据这个构造最后的串就好了.</p><h3 id="小"><a href="#小" class="headerlink" title="小"></a>小</h3><p>首先有一个结论:一个不超过$T$的数有$loglogT$个质因子.<br>这样的话,如果我们每次枚举区间,然后$check$答案的话,就得到了一个$O(n^3loglogT)$的方法.<br>发现这个方法还是太$naive$,我们来尝试优化一下,我们发现,如果我们枚举区间,然后在区间右移的时候维护现在出/进区间的元素的话,我们可以把枚举+$check$的复杂度从$O(n^2)$降低到$O(n)$<br>这样的话就是$O(n^2loglogT)$了,可以通过$60$分.  </p><p>考虑每个质因子在每个区间中的贡献,假设我们现在枚举的质因子是$p$,那么对于位置$i$上的数字$num_i$如果存在质因子$p$,那么我们记$pre_{i,p}=1$,否则的话记录$pre_{i,p}=-1$.这样枚举区间的时候,我们可以直接从这个区间的区间和是否大于等于$0$来判断.<br>这样之后复杂度还是$O(n^2loglogT)$,还需要进一步优化.  </p><p>我们还是先枚举每个质因子,然后我们令$p_1,p_2,……,p_k$为这个质因子第$1,2,3….k$次出现的位置.<br>在我们把$p$数组排序之后,我们发现,如果我们能找到一个$p_j-p_i+1&lt;=2\times(j-i+1){j&gt;i}$,那么我们就找到了一组$2\times(j-i+1)$的解.<br>我们把这个式子移项之后有$p_j-2\times j&lt;=p_i-2\times i+1$.显然,我们可以按照$p_i-2\times i$来排序.最后我们枚举$j$之后,<br>由于我们的排序方式,我们可以发现$p_j-2\times j&lt;=p_i-2\times i$一定是会被满足的,所以我们只需要找一个$max(j-i+1)$即可.<br>然后我们发现这个东西显然是可以二分或者双指针直接找的,总复杂度为$O(nloglogTlogn)$.</p><h3 id="黑"><a href="#黑" class="headerlink" title="黑"></a>黑</h3><p>暂时先黑一会~</p><blockquote><p>因为知道了自己是多么的菜,所以才要更加努力去追求那个永远也不可能实现的梦想</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;del&gt;罗小黑真尼玛好看&lt;/del&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="OI" scheme="http://krrrr.xyz/%E5%88%86%E7%B1%BB/OI/"/>
    
    
      <category term="ZROI" scheme="http://krrrr.xyz/%E6%A0%87%E7%AD%BE/ZROI/"/>
    
  </entry>
  
  <entry>
    <title>普及五连测D2</title>
    <link href="http://krrrr.xyz/2019/09/21/PJ%E4%BA%94%E8%BF%9E%E6%B5%8BD2/"/>
    <id>http://krrrr.xyz/2019/09/21/PJ五连测D2/</id>
    <published>2019-09-21T02:52:48.000Z</published>
    <updated>2019-10-18T13:15:03.332Z</updated>
    
    <content type="html"><![CDATA[<p>版权原因,题面不公开<br><a id="more"></a></p><h2 id="安排座位"><a href="#安排座位" class="headerlink" title="安排座位"></a>安排座位</h2><p>首先我们可以算出对于每一排,我们可以排出来多少座位,以及一共需要多少排才能把座位排完.<br>然后我们考虑插入走廊的事情<br>要使得尽量多的位置在走廊边上, 于是在 n 列中插入走廊的策略是显然的, 我们只要以两列为<br>单位, 在其中插入即可．<br>有一些边界情况需要考虑清楚．</p><h2 id="加法问题"><a href="#加法问题" class="headerlink" title="加法问题"></a>加法问题</h2><p>我们考虑如果满足式子$a \times 10^x+b \times 10^y$=$c \times 10^z$,那么一定有$a,b,c$这三个数在乘方之后的位数最少是$len_c&gt;=len_{a,b}$<br>首先我们将$c$的末位数补齐,然后我们发现,$c$一定是由$a,b$相加进位之后得到的.  </p><p>我们固定$a,b$为$len_c$位和$len_{c-1}$位,然后我们枚举$0$的个数之后判断.  </p><p>这样的话貌似要写高精度,其实不用,我们知道$hash$就是以一个$base$进制来表示数的方式,如果我们的$hash$中的$base$设为$10$,那么一个原本的$10$进制数在$hash$之后,可以直接用哈希值加减来判断.</p><h2 id="有趣的数"><a href="#有趣的数" class="headerlink" title="有趣的数"></a>有趣的数</h2><p>经过我们快乐的打表之后发现,对于$k$进制下的末尾有奇数个$0$的数,有$m=a \times k^p(p\equiv1\pmod{2},!a\equiv0\pmod{k})$.<br>有了这个结论,我们就可以快速的统计出在$[1,n]$的区间中,符合条件的数字的个数.<br>又因为两个数的相对大小关系不会因为进制而改变,所以我们可以二分区间上界来找到我们要找的第$n$个数.</p><h2 id="与非门树"><a href="#与非门树" class="headerlink" title="与非门树"></a>与非门树</h2><p>我们发现,对于某一个节点,无论是否发生故障,那么它的状态一定只有$0$和$1$两种.<br>所以我们可以设$f_{i,0/1,0/1}$,表示现在是第$i$个点,理论状态为$0/1$,实际状态为$0/1$时的方案数.  </p><p>乍一看貌似不怎么可转移,我们想,对于理论状态为$0$,实际状态也为$0$的状态一定是只能从子树为全$0$和全$1$的状态转移而来.<br>然后对于理论状态和实际状态相异或为$1$的状态,但是我们可以通过输入为$0$或者$1$的状态减去输入全$0$的状态快速得到．<br>然后对于$f_{i,1,1}$的这种状态,我们可以用所有的总状态减去其他的所有状态达到. </p><p>总结:比较<strong>基础</strong>的树形$DP$+<strong>简单</strong>容斥即可.(气稽败坏.png)</p><blockquote><p>因为知道了自己是多么的菜,所以才要更加努力去追求那个永远也不可能实现的梦想</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;版权原因,题面不公开&lt;br&gt;
    
    </summary>
    
    
      <category term="OI" scheme="http://krrrr.xyz/%E5%88%86%E7%B1%BB/OI/"/>
    
    
      <category term="ZROI" scheme="http://krrrr.xyz/%E6%A0%87%E7%AD%BE/ZROI/"/>
    
  </entry>
  
</feed>
