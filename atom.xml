<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>KR&#39;s Blog</title>
  
  <subtitle>以梦为马，不负年华</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://krrrr.xyz/"/>
  <updated>2019-11-03T08:13:42.766Z</updated>
  <id>http://krrrr.xyz/</id>
  
  <author>
    <name>KRrrrrrrrr</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>普转提撒花</title>
    <link href="http://krrrr.xyz/2019/11/03/%E6%99%AE%E8%BD%AC%E6%8F%90%E6%92%92%E8%8A%B1/"/>
    <id>http://krrrr.xyz/2019/11/03/普转提撒花/</id>
    <published>2019-11-03T08:11:27.000Z</published>
    <updated>2019-11-03T08:13:42.766Z</updated>
    
    <content type="html"><![CDATA[<p>版权原因,题面不公开<br><a id="more"></a></p><h3 id="嘴强王者"><a href="#嘴强王者" class="headerlink" title="嘴强王者"></a>嘴强王者</h3><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><h3 id="曼哈顿抉择"><a href="#曼哈顿抉择" class="headerlink" title="曼哈顿抉择"></a>曼哈顿抉择</h3><h3 id="开关灯"><a href="#开关灯" class="headerlink" title="开关灯"></a>开关灯</h3><blockquote class="blockquote-center">因为知道了自己是多么的菜,所以才要更加努力去追求那个永远也不可能实现的梦想</blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;版权原因,题面不公开&lt;br&gt;
    
    </summary>
    
    
      <category term="OI" scheme="http://krrrr.xyz/%E5%88%86%E7%B1%BB/OI/"/>
    
    
      <category term="ZROI" scheme="http://krrrr.xyz/%E6%A0%87%E7%AD%BE/ZROI/"/>
    
  </entry>
  
  <entry>
    <title>[SDOI2019]Elaxia的路线</title>
    <link href="http://krrrr.xyz/2019/11/01/SDOI2019-Elaxia%E7%9A%84%E8%B7%AF%E7%BA%BF/"/>
    <id>http://krrrr.xyz/2019/11/01/SDOI2019-Elaxia的路线/</id>
    <published>2019-11-01T08:35:41.000Z</published>
    <updated>2019-11-01T08:42:00.798Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.luogu.org/problem/P2149" target="_blank" rel="noopener">传送门</a><br><a id="more"></a></p><p>首先我们可以知道如果把所有最短路上的边挑出来，再按照最短路中$dis$数组的递推关系给它加上方向的话这就是一个有向无环图。<br>而如果把所有两个最短路的公共边挑出来的话，这个有向无环图中的最长链就是答案。<br>并且判断一条边在最短路上的方式就是$dis[s→u]+w(u,v)+dis[u→t]=dis[s→t]dis[s→u]+w(u,v)+dis[u→t]=dis[s→t]$。<br>并且因为这是无向图，所以求任意一个点到终点的距离只需要以终点为起点再跑一遍最短路就可以了。<br>需要注意的问题就是公共路径从不同的方向经过也是可以的，所以需要把一对起点和终点倒过来再做一遍。</p><blockquote class="blockquote-center">因为知道了自己是多么的菜,所以才要更加努力去追求那个永远也不可能实现的梦想</blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://www.luogu.org/problem/P2149&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;传送门&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="OI" scheme="http://krrrr.xyz/%E5%88%86%E7%B1%BB/OI/"/>
    
    
      <category term="图论" scheme="http://krrrr.xyz/%E6%A0%87%E7%AD%BE/%E5%9B%BE%E8%AE%BA/"/>
    
      <category term="最短路" scheme="http://krrrr.xyz/%E6%A0%87%E7%AD%BE/%E6%9C%80%E7%9F%AD%E8%B7%AF/"/>
    
  </entry>
  
  <entry>
    <title>校内ACM赛题解选讲</title>
    <link href="http://krrrr.xyz/2019/10/30/%E6%A0%A1%E5%86%85ACM%E8%B5%9B%E9%A2%98%E8%A7%A3/"/>
    <id>http://krrrr.xyz/2019/10/30/校内ACM赛题解/</id>
    <published>2019-10-30T08:30:09.000Z</published>
    <updated>2019-10-31T12:57:57.344Z</updated>
    
    <content type="html"><![CDATA[<p>校内题目就不公开题面啦x<br><a id="more"></a></p><h3 id="数学"><a href="#数学" class="headerlink" title="数学"></a>数学</h3><p>首先我们用二项式定理展开一下式子.</p><script type="math/tex; mode=display">E((x-E(x))^k)=\sum_{i=0}^k[\dbinom{k}{i} \times (-1)^{k-i} \times E(x^i) \times E^{k-i}(x)]</script><p>有因为$x$是一个常数,则$E(x)=x$,那么显然$E^{k-i}(x)={(\dfrac{1}{2})}^{k-i}$,那么问题就只剩下了$E(x^i)$怎么求了.<br>而对于$E(x^i)$,我们可以设函数$f(x)=x^i$,然后考虑它的图像.因为$x^i$的期望对应的就是图像中的$y$,所以有$1 \times E(x^i) = S$.<br>所以我们要计算的就只剩下函数$f(x)=x^i$在$[0,1]$上的图像的面积了.然后这个东西….可以用积分去求得:  </p><script type="math/tex; mode=display">\int_{0}^{1}x^i\,dx = \dfrac{1^{i+1}}{i+1} - \dfrac{0^{i+1}}{i+1} = \frac{1}{i+1}</script><p>计算出$E(x^i)$后,将表达式带回原式后得到 </p><script type="math/tex; mode=display">ans=\sum_{i=0}^k[\dbinom{k}{i} \times (-1)^{k-i} \times \frac{1}{i+1} \times {(\dfrac{1}{2})}^{k-i}]</script><h3 id="英语"><a href="#英语" class="headerlink" title="英语"></a>英语</h3><p>发现直接做的话貌似没什么思路….<br>显然这道题可以先把询问离线出来,然后有一个显然<strong>错误</strong>的贪心就是每次选一个叶子节点的值(指从根节点到某个叶子的前缀和)最大的.<br>这样做显然错误,因为每个点对答案的贡献只能被统计一次,所以我们要考虑怎么调整这个贪心的思路.通过观察发现,对于某一个点$i$,它的值只能被计算到它所有的儿子中边权权重求大的那个儿子,而对于它其他的儿子,它的贡献为$0$.<br>所以我们的思路类似重链剖分中的寻找重儿子,我们对于每个非叶节点$p$,都在它的子树中找到一个权重最大的子树,然后把它的边权加入到它的重儿子中即可.<br><del>听说这东西叫做长链剖分</del></p><h3 id="政治"><a href="#政治" class="headerlink" title="政治"></a>政治</h3><p>看完题之后首先想到的就是对于每个犯罪团伙两两考虑包含关系然后再统计答案,但是这样的话时间复杂度上界是$O(2^{40})$,无法通过本题.<br>然后我们发现村庄的数量只有$20$个,而且显然如果有两个团伙,他们的控制的村庄的状态一样,那么这两个团伙的收入和支出也一定是一样的.那么我们可以考虑根据每个团伙的控制村庄的二进制开桶,然后根据$S_i$统计每个团伙的答案.<br>不难发现,对于某三个团伙(我们设他们控制的村庄的二进制表示分别为$i,j,k$),那么如果有$i \subsetneqq j , j \subsetneqq k$,那么一定有$i \subsetneqq k$.而如果一个集合$i$是$j$的子集的话,那么必要条件即在二进制表示下$i$中$1$的个数小于等于二进制表示下$j$中$1$的个数.<br>那么我们如果考虑按照二进制表示下$1$的个数来划分集合的$rank$的话,那么显然某一个状态$i$一定会被所有的二进制下$1$的个数小于它的子集转移到,但是这样直接枚举的话是$3^n$的.所以我们考虑到可以用$FMT$优化.<br>因为$FMT$为高维前缀和,我们每一次对于某一个状态$j$,显然$inn_j=inn_j+=inn_{j  xor  ( 1 &lt;&lt; i )} ((1&lt;&lt;i) and  j==1)$.<br>而对于支出的情况.可以发现,对于某个状态$i$,它的支出次数即为包含它的集合的个数,而包含它的集合的个数显然也可以用$FMT$去求解(但是注意转移的时候是由它转移到它的子集)即在进行$FMT$时要用异或之后的状态去更新之前的状态.</p><h3 id="音乐"><a href="#音乐" class="headerlink" title="音乐"></a>音乐</h3><p>首先发现直接使用区间的最大值去减去区间的最小值去更新答案的话显然是不对的,考虑怎么去调整.<br>发现如果我们使用线段树的话,那么对于某个非叶节点,那么它的答案可能是它左子树的答案,也有可能是它右子树的答案.但是对于合并的话貌似直接不能两边的答案取一个$max$.<br>我们发现,对于这个节点左子树中的每一个值,那么右子树中的任何一个比左子树中某一个值大的节点都可以去更新这一个节点.所以,我们直接去用右子树中的任何一个节点,去更新左子树中的任何一个节点是没有问题的.<br>那么我们就可以分别使用左子树中的最小值和右子树中的最大值去维护这个两颗子树合并时的答案.而对于左子树的答案或者右子树的答案可能会大于左右两颗子树合并时的答案的情况,我们可以对于左子树的答案,右子树的答案和右子树的最大值-左子树的最小值去取一个$max$即为这个节点的$ans$值.<br>所以我们需要维护一颗线段树,分别维护区间最大/最小值以及我们要求的答案即可<del>简单线段树练习题</del>.</p><h3 id="体育"><a href="#体育" class="headerlink" title="体育"></a>体育</h3><p>我们发现无解的情况只存在于起点会重复的情况,但是题目中明确给出了起点和终点的坐标不会重复,所以没有无解的情况.<del>而且ACM你只判无解也没分</del><br>然后我们发现,如果我们把起点和终点都按照坐标从小到大排序之后,我们用最小的起点去对应最小的终点的话,发现这个起点是最小的,那么坐标比它大的点到这些点的终点的路径中一定有一段路程不会被包含,对于终点来说同理(如下图)<br><img src="https://raw.githubusercontent.com/wqyzstql/PicBed/master/201910301.png" alt="显然的结论"><br>所以我们可以直接排完序之后找答案即可.</p><h3 id="美术"><a href="#美术" class="headerlink" title="美术"></a>美术</h3><p>显然,我们可以设$f_{i,j,01}$表示现在以及考虑了$i$个格子,其中有$j$个格子的颜色和这个格子的上一个的颜色不一样,并且这个格子的颜色和它的上一个的颜色一不一样.<br>那么如果这个格子的颜色和之前的一样的话,就只能继承前$i-1$个格子的答案,而如果这个格子和这个格子的前一个格子的颜色不一样的话,那么这个格子就有$m-1$种涂色方案.<br>根据上边所说的,状态转移方程就很明显了: </p><script type="math/tex; mode=display">\begin{cases}f_{i,j,0}=f_{i-1,j,0}+f_{i-1,j,1}\\f_{i,j,1}=(f_{i-1,j-1,0}+f_{i-1,j-1,1}) \times (m-1)\end{cases}</script><p><del>听说还有组合数学的做法,但是我不会</del></p><h3 id="生物"><a href="#生物" class="headerlink" title="生物"></a>生物</h3><p>首先发现这道题的数据范围非常的迷惑,因为$n$只有$26$而且$a,b,c$只有$9$,所以只要$v$大于$26 \times 9$,我们就不妨钦定$v=26 \times 9$.<br>这样之后发现混乱度可以直接用一维表示出来,所以我们考虑一下$DP$.直觉$DP$的话可以设$f_{i,j}$表示已经考虑了前$i$种相对性状,此时的混乱度是$j$的时候的方案数.但是这样的话我们会发现一个问题,就是我们可能会把同一种基因型在父本的贡献和在母本的贡献算重,而且也不好去重.<br>所以我们考虑加一维状态:我们设$f_{i,j,k}$表示已经考虑了前$i$种相对性状,其中父本贡献的混乱度为$j$,母本贡献的混乱度为$k$时的方案数,在转移的时候直接考虑父本的性状已经母本的性状即可.</p><h3 id="信息"><a href="#信息" class="headerlink" title="信息"></a>信息</h3><p>看上去不好写实际上还挺简单的模拟<del>我不管这道题我一定要放代码(其实是为了凑字数)</del><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii std::pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pll std::pair<span class="meta-string">&lt;ll,ll&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MP std::make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> oo 2147483647</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PI 3.141592653590</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rint register int</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> F(i,a,b) for(rint i=a;i&lt;=b;i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> D(i,a,b) for(rint i=a;i&gt;=b;i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> G(i,num,b,c) for(rint num=head[b];num;num=c[num].next)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">int</span> _read () &#123;<span class="keyword">int</span> s = <span class="number">0</span> , w = <span class="number">1</span>;<span class="keyword">char</span> ch = getchar ();<span class="keyword">while</span> ( ch &gt; <span class="string">'9'</span> || ch &lt; <span class="string">'0'</span> ) &#123; <span class="keyword">if</span> ( ch == <span class="string">'-'</span> ) w = <span class="number">-1</span>; ch = getchar ();&#125;<span class="keyword">while</span> ( ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span> ) &#123; s = s * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar ();&#125;<span class="keyword">return</span> s * w;&#125;</span><br><span class="line"><span class="keyword">template</span> &lt; <span class="class"><span class="keyword">class</span> <span class="title">T</span> &gt; <span class="title">inline</span> <span class="title">void</span> <span class="title">read</span> ( <span class="title">T</span> &amp;<span class="title">x</span> ) &#123;</span>T s = <span class="number">0</span> , w = <span class="number">1</span>;<span class="keyword">char</span> ch = getchar ();<span class="keyword">while</span> ( ch &gt; <span class="string">'9'</span> || ch &lt; <span class="string">'0'</span> ) &#123; <span class="keyword">if</span> ( ch == <span class="string">'-'</span> ) w = <span class="number">-1</span>; ch = getchar ();&#125;<span class="keyword">while</span> ( ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span> ) &#123; s = s * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar ();&#125;x = s * w;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="keyword">template</span> &lt; <span class="class"><span class="keyword">class</span> <span class="title">T</span> , <span class="title">typename</span> ...<span class="title">Argc</span> &gt; <span class="title">inline</span> <span class="title">void</span> <span class="title">read</span> ( <span class="title">T</span> &amp;<span class="title">x</span> , <span class="title">Argc</span> &amp;...<span class="title">Args</span> ) &#123;</span>read ( x );read ( Args... );<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="keyword">template</span> &lt; <span class="class"><span class="keyword">class</span> <span class="title">T</span> &gt; <span class="title">inline</span> <span class="title">T</span> <span class="title">max</span> ( <span class="title">T</span> <span class="title">x</span> , <span class="title">T</span> <span class="title">y</span> ) &#123;</span><span class="keyword">return</span> x &gt; y ? x : y;&#125;</span><br><span class="line"><span class="keyword">template</span> &lt; <span class="class"><span class="keyword">class</span> <span class="title">T</span> &gt; <span class="title">inline</span> <span class="title">T</span> <span class="title">min</span> ( <span class="title">T</span> <span class="title">x</span> , <span class="title">T</span> <span class="title">y</span> ) &#123;</span><span class="keyword">return</span> x &lt; y ? x : y;&#125;</span><br><span class="line"><span class="keyword">template</span> &lt; <span class="class"><span class="keyword">class</span> <span class="title">T</span> &gt; <span class="title">inline</span> <span class="title">void</span> <span class="title">abs</span> ( <span class="title">T</span> <span class="title">x</span> ) &#123;</span><span class="keyword">return</span> x &gt; <span class="number">0</span> ? x : -x;&#125;</span><br><span class="line"><span class="keyword">template</span> &lt; <span class="keyword">typename</span> T &gt; <span class="function"><span class="keyword">void</span> <span class="title">write</span> <span class="params">( T x )</span> </span>&#123;<span class="keyword">if</span> ( x &lt; <span class="number">0</span> ) x = -x , <span class="built_in">putchar</span> ( <span class="string">'-'</span> );<span class="keyword">if</span> ( x &gt; <span class="number">9</span> ) write ( x / <span class="number">10</span> );<span class="built_in">putchar</span> ( x % <span class="number">10</span> + <span class="number">48</span> );<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="keyword">template</span> &lt; <span class="keyword">typename</span> T &gt; <span class="function"><span class="keyword">void</span> <span class="title">writeln</span> <span class="params">( T x )</span> </span>&#123;write ( x ); <span class="built_in">printf</span> (<span class="string">"\n"</span>); &#125;</span><br><span class="line"><span class="keyword">template</span> &lt; <span class="class"><span class="keyword">class</span> <span class="title">T</span> &gt; <span class="title">inline</span> <span class="title">T</span> <span class="title">gcd</span> ( <span class="title">T</span> <span class="title">x</span> , <span class="title">T</span> <span class="title">y</span> ) &#123;</span><span class="keyword">if</span> ( x &lt; y ) swap ( x , y );<span class="keyword">if</span> ( !y ) <span class="keyword">return</span> x;<span class="keyword">return</span> gcd ( y , x % y );&#125;</span><br><span class="line"><span class="keyword">template</span> &lt; <span class="class"><span class="keyword">class</span> <span class="title">T</span> &gt; <span class="title">inline</span> <span class="title">T</span> <span class="title">ksm</span> ( <span class="title">T</span> <span class="title">x</span> , <span class="title">T</span> <span class="title">y</span> , <span class="title">T</span> <span class="title">Mod</span> ) &#123;</span>T tmp = <span class="number">1</span>;<span class="keyword">while</span> ( y ) &#123;<span class="keyword">if</span> ( y % <span class="number">2</span> == <span class="number">1</span> ) tmp = ( tmp * x % Mod );x = ( x * x ) % Mod;y &gt;&gt;= <span class="number">1</span>;&#125;<span class="keyword">return</span> tmp;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**********************************************************************************************************************************************************************************************************************************************************************/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1005</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n , m , sx , sy;</span><br><span class="line"><span class="keyword">int</span> indeque[N][N];</span><br><span class="line"><span class="keyword">char</span> mp[N][N] , operation[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">init</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">read ( n , m );</span><br><span class="line">F ( i , <span class="number">1</span> , n ) </span><br><span class="line"><span class="built_in">scanf</span> ( <span class="string">"%s"</span> , mp[i] + <span class="number">1</span> );</span><br><span class="line">F ( i , <span class="number">1</span> , n ) </span><br><span class="line">F ( j , <span class="number">1</span> , m ) </span><br><span class="line"><span class="keyword">if</span> ( mp[i][j] == <span class="string">'@'</span> ) &#123;</span><br><span class="line">mp[i][j] = <span class="string">'.'</span>;</span><br><span class="line">sx = i , sy = j;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">scanf</span> ( <span class="string">"%s"</span> , operation + <span class="number">1</span> );</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">FindDir</span> <span class="params">( <span class="keyword">int</span> &amp;dx , <span class="keyword">int</span> &amp;dy , <span class="keyword">char</span> op )</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> ( op == <span class="string">'W'</span> ) </span><br><span class="line">dx = <span class="number">-1</span> , dy = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> ( op == <span class="string">'A'</span> ) </span><br><span class="line">dx = <span class="number">0</span> , dy = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> ( op == <span class="string">'S'</span> ) </span><br><span class="line">dx = <span class="number">1</span> , dy = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> ( op == <span class="string">'D'</span> ) </span><br><span class="line">dx = <span class="number">0</span> , dy = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> x , y;</span><br><span class="line">&#125;qu[ ( N * N )*<span class="number">6</span>];</span><br><span class="line"><span class="keyword">int</span> hea = N * N , tail = ( N * N ) - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Debug</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">F ( i , <span class="number">1</span> , n ) &#123;</span><br><span class="line">F ( j , <span class="number">1</span> , m )</span><br><span class="line"><span class="keyword">if</span> ( indeque[i][j] )&#123;</span><br><span class="line"><span class="keyword">if</span>(indeque[i][j] == hea ) </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c"</span>,<span class="string">'@'</span>);</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c"</span>,<span class="string">'X'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line"><span class="built_in">printf</span> ( <span class="string">"%c"</span>,mp[i][j] ); </span><br><span class="line"><span class="built_in">puts</span> ( <span class="string">""</span> );</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">puts</span> ( <span class="string">""</span> );</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">work</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">qu[++tail] = ( Node ) &#123; sx , sy &#125;;</span><br><span class="line">indeque[sx][sy] = tail;</span><br><span class="line"><span class="keyword">int</span> len = <span class="built_in">strlen</span> ( operation + <span class="number">1</span> );</span><br><span class="line">F ( T , <span class="number">1</span> , len ) &#123;</span><br><span class="line"><span class="keyword">char</span> op = operation[T];</span><br><span class="line"><span class="keyword">int</span> dx , dy;</span><br><span class="line">FindDir ( dx , dy , op );</span><br><span class="line"><span class="keyword">int</span> nx = qu[hea].x , ny = qu[hea].y;</span><br><span class="line"><span class="keyword">int</span> tx = qu[tail].x , ty = qu[tail].y;</span><br><span class="line"><span class="keyword">if</span> ( mp[nx + dx][ny + dy] == <span class="string">'.'</span> &amp;&amp; !indeque[nx + dx][ny + dy] ) &#123;</span><br><span class="line">qu[--hea] = ( Node ) &#123; nx + dx , ny + dy &#125;;</span><br><span class="line">indeque[nx + dx][ny + dy] = hea;</span><br><span class="line">indeque[tx][ty] = <span class="number">0</span>;</span><br><span class="line">tail--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> ( mp[nx + dx][ny + dy] == <span class="string">'o'</span> ) &#123;</span><br><span class="line">qu[--hea] = ( Node ) &#123; nx + dx , ny + dy &#125;;</span><br><span class="line">indeque[nx + dx][ny + dy] = hea;</span><br><span class="line">mp[nx + dx][ny + dy] = <span class="string">'.'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> ( indeque[nx + dx][ny + dy] ) &#123;</span><br><span class="line"><span class="keyword">int</span> start = indeque[nx + dx][ny + dy];</span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">int</span> i = start ; i &lt;= tail ; i++ ) &#123;</span><br><span class="line"><span class="keyword">int</span> xx = qu[i].x , yy = qu[i].y;</span><br><span class="line">indeque[xx][yy] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> ( tail &gt;= start ) </span><br><span class="line">tail--;</span><br><span class="line">qu[--hea] = ( Node ) &#123; nx + dx , ny + dy &#125;;</span><br><span class="line">indeque[nx + dx][ny + dy] = hea;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> ( nx + dx &gt; m || ny + dy &gt; n || nx + dx &lt;= <span class="number">0</span> || ny + dy &lt;= <span class="number">0</span> || mp[nx + dx][ny + dy] == <span class="string">'#'</span> ) &#123;</span><br><span class="line"><span class="built_in">puts</span> ( <span class="string">"-1"</span> );</span><br><span class="line"><span class="built_in">exit</span> ( <span class="number">0</span> );</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Debug ();</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">print</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">F ( i , <span class="number">1</span> , n ) </span><br><span class="line">F ( j , <span class="number">1</span> , m ) </span><br><span class="line"><span class="keyword">if</span> ( mp[i][j] == <span class="string">'#'</span> || mp[i][j] == <span class="string">'o'</span> ) </span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">mp[i][j] = <span class="string">'.'</span>;</span><br><span class="line"><span class="keyword">int</span> xx = qu[hea].x , yy = qu[hea].y;</span><br><span class="line">mp[xx][yy] = <span class="string">'@'</span>;</span><br><span class="line">hea++;</span><br><span class="line"><span class="keyword">while</span> ( hea &lt;= tail ) &#123;</span><br><span class="line">xx = qu[hea].x , yy = qu[hea].y;</span><br><span class="line">mp[xx][yy] = <span class="string">'X'</span>;</span><br><span class="line">hea++;</span><br><span class="line">&#125;</span><br><span class="line">F ( i , <span class="number">1</span> , n ) &#123;</span><br><span class="line">F ( j , <span class="number">1</span> , m ) </span><br><span class="line"><span class="built_in">printf</span> ( <span class="string">"%c"</span> , mp[i][j] );</span><br><span class="line"><span class="built_in">puts</span> ( <span class="string">""</span> );</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">( <span class="keyword">void</span> )</span> </span>&#123;</span><br><span class="line">init ();</span><br><span class="line">work ();</span><br><span class="line">print ();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote class="blockquote-center">因为知道了自己是多么的菜,所以才要更加努力去追求那个永远也不可能实现的梦想</blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;校内题目就不公开题面啦x&lt;br&gt;
    
    </summary>
    
    
      <category term="OI" scheme="http://krrrr.xyz/%E5%88%86%E7%B1%BB/OI/"/>
    
    
      <category term="模拟赛题解" scheme="http://krrrr.xyz/%E6%A0%87%E7%AD%BE/%E6%A8%A1%E6%8B%9F%E8%B5%9B%E9%A2%98%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>[POJ2284]That Nice Euler Circuit</title>
    <link href="http://krrrr.xyz/2019/10/28/POJ2284-ThatNiceEulerCircuit/"/>
    <id>http://krrrr.xyz/2019/10/28/POJ2284-ThatNiceEulerCircuit/</id>
    <published>2019-10-28T12:38:15.000Z</published>
    <updated>2019-10-28T12:44:38.050Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://poj.org/problem?id=2284" target="_blank" rel="noopener">传送门</a><br><a id="more"></a></p><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>首先我们想到的就是直接开二维数组模拟然后$bfs$统计答案.但是这样的话时间复杂度是不行的,所以我们需要考虑其他方法.<br>我们考虑到<strong>欧拉公式</strong>,即$E=V+F-2$.在这里$E$为边数,$V$为点数,$F$为面的个数.<br>本来这个欧拉公式是求三维的情况的,但是发现二维的情况也适用,<del>所以我把它称为木大公式</del>.<br>可以直接开$map$统计点和边的个数,然后试用欧拉公式进行计算即可. (注意特判刚开始$0$的情况)</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">5e5</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> NodeNum , EdgeNum;</span><br><span class="line"><span class="keyword">char</span> s[N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">kuai</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> x , y;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span> &lt; ( kuai x , kuai y ) &#123;</span><br><span class="line"><span class="keyword">if</span> ( x.x == y.x ) </span><br><span class="line"><span class="keyword">return</span> x.y &lt; y.y;</span><br><span class="line"><span class="keyword">return</span> x.x &lt; y.x;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">map</span> &lt; kuai , <span class="keyword">bool</span> &gt; Node;</span><br><span class="line"><span class="built_in">map</span> &lt; pair &lt; kuai , kuai &gt; , <span class="keyword">bool</span> &gt; Edge; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">( <span class="keyword">void</span> )</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">scanf</span> ( <span class="string">"%s"</span> , s + <span class="number">1</span> );</span><br><span class="line"><span class="keyword">int</span> n = <span class="built_in">strlen</span> ( s + <span class="number">1</span> );</span><br><span class="line"><span class="keyword">int</span> xx = <span class="number">0</span> , yy = <span class="number">0</span>;</span><br><span class="line">Node[ kuai &#123; <span class="number">0</span> , <span class="number">0</span> &#125; ] = <span class="number">1</span>;</span><br><span class="line">NodeNum = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= n ; i++ ) &#123;</span><br><span class="line"><span class="keyword">int</span> lx = xx , ly = yy;</span><br><span class="line"><span class="keyword">if</span> ( s[i] == <span class="string">'L'</span> ) </span><br><span class="line">xx--;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> ( s[i] == <span class="string">'R'</span> ) </span><br><span class="line">xx++;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> ( s[i] == <span class="string">'U'</span> ) </span><br><span class="line">yy++;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> ( s[i] == <span class="string">'D'</span> ) </span><br><span class="line">yy--;</span><br><span class="line"><span class="keyword">if</span> ( !Node[ kuai &#123; xx , yy &#125; ] ) &#123;</span><br><span class="line">Node[ kuai &#123; xx , yy &#125; ] = <span class="number">1</span>;</span><br><span class="line">NodeNum++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ( !Edge[ make_pair ( kuai &#123; lx , ly &#125; , kuai &#123; xx , yy &#125; ) ] &amp;&amp; !Edge[ make_pair ( kuai &#123; xx , yy &#125; , kuai &#123; lx , ly &#125; ) ] ) &#123;</span><br><span class="line">Edge[ make_pair ( kuai &#123; xx , yy &#125; , kuai &#123; lx , ly &#125; ) ] = <span class="number">1</span>;</span><br><span class="line">Edge[ make_pair ( kuai &#123; lx , ly &#125; , kuai &#123; xx , yy &#125; ) ] = <span class="number">1</span>;</span><br><span class="line">EdgeNum++;</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//printf ( "step:%d , from(%d,%d) -&gt; to(%d,%d)\n" , i , lx , ly , xx , yy );</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//printf ( "%d %d\n" , EdgeNum , NodeNum );</span></span><br><span class="line"><span class="built_in">printf</span> ( <span class="string">"%d\n"</span> , EdgeNum - NodeNum + <span class="number">2</span> ); </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote class="blockquote-center">因为知道了自己是多么的菜,所以才要更加努力去追求那个永远也不可能实现的梦想</blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://poj.org/problem?id=2284&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;传送门&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="OI" scheme="http://krrrr.xyz/%E5%88%86%E7%B1%BB/OI/"/>
    
    
      <category term="计算几何" scheme="http://krrrr.xyz/%E6%A0%87%E7%AD%BE/%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95/"/>
    
      <category term="数学" scheme="http://krrrr.xyz/%E6%A0%87%E7%AD%BE/%E6%95%B0%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>[AtCoder Beginner Contest 144]题解</title>
    <link href="http://krrrr.xyz/2019/10/28/AtcoderABC144%E9%A2%98%E8%A7%A3/"/>
    <id>http://krrrr.xyz/2019/10/28/AtcoderABC144题解/</id>
    <published>2019-10-28T01:32:17.000Z</published>
    <updated>2019-10-28T07:25:15.455Z</updated>
    
    <content type="html"><![CDATA[<p>我菜爆了😢<br><a id="more"></a></p><h3 id="9x9"><a href="#9x9" class="headerlink" title="9x9"></a>9x9</h3><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>签到题,直接判断一下两个数的大小即可.</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">( <span class="keyword">void</span> )</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> a , b;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b;</span><br><span class="line"><span class="keyword">if</span> ( a &gt;= <span class="number">1</span> &amp;&amp; a &lt;= <span class="number">9</span> &amp;&amp; b &gt;= <span class="number">1</span> &amp;&amp; b &lt;= <span class="number">9</span> ) </span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; a * b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"-1"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="81"><a href="#81" class="headerlink" title="81"></a>81</h3><h4 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h4><p>从$2$枚举到$9$然后判断一下另一半是否小于$10$即可,注意$1$的情况.</p><h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">( <span class="keyword">void</span> )</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> a , b;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; a;</span><br><span class="line"><span class="keyword">if</span> ( a == <span class="number">1</span> ) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Yes"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">2</span> ; i &lt;= <span class="number">9</span> ; i++ ) </span><br><span class="line"><span class="keyword">if</span> ( a % i == <span class="number">0</span> ) &#123;</span><br><span class="line"><span class="keyword">if</span> ( a / i &lt;= <span class="number">9</span> &amp;&amp; a / i &gt;= <span class="number">1</span> ) &#123; </span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Yes"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"No"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Walk-on-Multiplication-Table"><a href="#Walk-on-Multiplication-Table" class="headerlink" title="Walk on Multiplication Table"></a>Walk on Multiplication Table</h3><h4 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h4><p>我们可以在$\sqrt{n}$的时间内枚举出每个数的因数,然后对于每个因子判断一下是否可以更新答案即可.</p><h4 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">( <span class="keyword">void</span> )</span> </span>&#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> a;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; a;</span><br><span class="line"><span class="keyword">if</span> ( a == <span class="number">1</span> ) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"0"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> ans = <span class="number">1e16</span>;</span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= <span class="built_in">sqrt</span> ( a ) ; i++ ) &#123;</span><br><span class="line"><span class="keyword">if</span> ( a % i == <span class="number">0</span> ) </span><br><span class="line">ans = min ( ans , ( i - <span class="number">1</span> ) + ( a / i ) - <span class="number">1</span> );  </span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Water-Bottle"><a href="#Water-Bottle" class="headerlink" title="Water Bottle"></a>Water Bottle</h3><h4 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h4><p>根据生活常识,我们发现如果把杯子倾斜,水能洒出来的话,从这个杯子的剖面去看,一共会有两种情况:剖面是个梯形与剖面是个三角形.<br>而又因为当<strong>只有本来杯子内水的体积占用了原来杯子的体积的一半以上时</strong>剖面才会是个梯形,所以我们可以分两种情况分别讨论.<br>我们将剖面画出来,然后发现这个图形的面积$S \times a$即为水的体积$x$,所以我们就可以算出来可变边的长度,再根据反三角函数计算出本来的解是多少.</p><p>弧度转角度: 角度=弧度$ \times 180 / Π$</p><h4 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">double</span> a,b,x;</span><br><span class="line"><span class="keyword">double</span> Rad_to_deg  = <span class="number">45.0</span> / <span class="built_in">atan</span>(<span class="number">1.0</span>);</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">( <span class="keyword">void</span> )</span> </span>&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b&gt;&gt;x;</span><br><span class="line"><span class="keyword">if</span> ( x &gt;= ( a * a * b ) / <span class="number">2</span> ) &#123;</span><br><span class="line"><span class="keyword">double</span> C = <span class="number">2.0</span> * b - ( <span class="number">2.0</span> * x / ( a * a ) );</span><br><span class="line"><span class="keyword">double</span> hu = <span class="built_in">atan</span> ( a / C );</span><br><span class="line">hu = hu * Rad_to_deg * <span class="number">1.0</span>;</span><br><span class="line"><span class="built_in">printf</span> ( <span class="string">"%.10lf\n"</span> , <span class="number">90.0000000</span> - hu );</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">double</span> A = ( <span class="number">2.0</span> * x ) / ( a * b );</span><br><span class="line"><span class="keyword">double</span> hu = <span class="built_in">atan</span> ( A / b );</span><br><span class="line">hu = hu * Rad_to_deg * <span class="number">1.0</span>;</span><br><span class="line"><span class="built_in">printf</span> ( <span class="string">"%.10lf\n"</span> , <span class="number">90.0000000</span> - hu );</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Gluttony"><a href="#Gluttony" class="headerlink" title="Gluttony"></a>Gluttony</h3><h4 id="思路-4"><a href="#思路-4" class="headerlink" title="思路"></a>思路</h4><p>根据我们的直觉,我们把$A$数组从小到大排序,然后把$F$数组从大到小排序,这样的话答案一定是最优的<del>请自行证明</del>.<br>然后我们考虑怎么统计答案,显然,题目中要求最大值最小,所以我们可以二分这个最大值$mid$,然后对于每一组$A_i$与$F_i$,我们设$cnt_i$为使这组$A_i \times B_i &lt;= mid$时需要的锻炼次数.<br>然后我们就可以列出$F_i \times ( A_i - cnt_i ) &lt;= mid $ , 即$cnt_i = max ( 0 , A_i - mid / F_i )$.</p><h4 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span> <span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> s = <span class="number">0</span> , w = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">char</span> ch = getchar ();</span><br><span class="line"><span class="keyword">while</span> ( ch &gt; <span class="string">'9'</span> || ch &lt; <span class="string">'0'</span> ) &#123; <span class="keyword">if</span> ( ch == <span class="string">'-'</span> ) w = <span class="number">-1</span>; ch = getchar ();&#125;</span><br><span class="line"><span class="keyword">while</span> ( ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span> ) &#123; s = s * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar ();&#125;</span><br><span class="line"><span class="keyword">return</span> s * w;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> n , k;</span><br><span class="line"><span class="keyword">int</span> A[N] , F[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">cmp</span> <span class="params">( <span class="keyword">int</span> x , <span class="keyword">int</span> y )</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> x &gt; y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">check</span> <span class="params">( <span class="keyword">int</span> mid )</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= n ; i++ ) </span><br><span class="line">cnt += max ( <span class="number">0l</span>l , A[i] - mid / F[i] );</span><br><span class="line"><span class="keyword">if</span> ( cnt &lt;= k ) </span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span> <span class="params">( <span class="keyword">void</span> )</span> </span>&#123;</span><br><span class="line">n = read () , k = read ();</span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= n ; i++ ) </span><br><span class="line">A[i] = read ();</span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= n ; i++ ) </span><br><span class="line">F[i] = read ();</span><br><span class="line">sort ( A + <span class="number">1</span> , A + <span class="number">1</span> + n );</span><br><span class="line">sort ( F + <span class="number">1</span> , F + <span class="number">1</span> + n , cmp );</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> l = <span class="number">0</span> , r = <span class="number">1e16</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> ( l &lt;= r ) &#123;</span><br><span class="line"><span class="keyword">int</span> mid = ( l + r ) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> ( check ( mid ) ) </span><br><span class="line">r = mid - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">l = mid + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span> ( <span class="string">"%lld\n"</span> , l );</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote class="blockquote-center">因为知道了自己是多么的菜,所以才要更加努力去追求那个永远也不可能实现的梦想</blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我菜爆了😢&lt;br&gt;
    
    </summary>
    
    
      <category term="OI" scheme="http://krrrr.xyz/%E5%88%86%E7%B1%BB/OI/"/>
    
    
      <category term="Atcoder题解" scheme="http://krrrr.xyz/%E6%A0%87%E7%AD%BE/Atcoder%E9%A2%98%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>普转提D6</title>
    <link href="http://krrrr.xyz/2019/10/28/%E6%99%AE%E8%BD%AC%E6%8F%90D6/"/>
    <id>http://krrrr.xyz/2019/10/28/普转提D6/</id>
    <published>2019-10-28T01:31:42.000Z</published>
    <updated>2019-10-28T08:01:32.191Z</updated>
    
    <content type="html"><![CDATA[<p>版权原因,题面不公开<br><a id="more"></a></p><h3 id="石头"><a href="#石头" class="headerlink" title="石头"></a>石头</h3><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>我们设$f_i$表示前$i$个序列中能排出多少序列.那么显然有$f_i=\sum  f_j([\sum_{k=1}^{j+1}a_k]是素数)$</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ha 987654321</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span> ;</span><br><span class="line"><span class="keyword">int</span> n , f[N] , s[N] , vis[N] , num , prime[N] ;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pre</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span> ; i &lt; N ; i ++) &#123;</span><br><span class="line"><span class="keyword">if</span>(!vis[i]) prime[++num] = i ;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span> ; j &lt;N &amp;&amp; i*prime[j] &lt;N ; j ++) &#123;</span><br><span class="line">vis[i*prime[j]] = <span class="number">1</span> ;</span><br><span class="line"><span class="keyword">if</span>(i % prime[j] == <span class="number">0</span>) <span class="keyword">break</span> ;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">vis[<span class="number">1</span>] = <span class="number">1</span> ;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">int</span> a[<span class="number">2000</span>] ;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span> <span class="params">()</span> </span>&#123; </span><br><span class="line">pre() ;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;n) ;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= n ; i ++) &#123;</span><br><span class="line"><span class="keyword">int</span> x ;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;x) ;</span><br><span class="line">a[i] = x ;</span><br><span class="line">s[i] = s[i<span class="number">-1</span>] + a[i] ;</span><br><span class="line">&#125;</span><br><span class="line">f[<span class="number">0</span>] = <span class="number">1</span> ;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= n ; i ++ ) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span> ; j &lt; i ; j ++) &#123;</span><br><span class="line"><span class="keyword">if</span>(!vis[s[i]-s[j]]) f[i] = (f[i] + f[j])%ha ;</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="built_in">cout</span> &lt;&lt; f[n]%ha &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="载重"><a href="#载重" class="headerlink" title="载重"></a>载重</h3><h4 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h4><p>先预处理出一个最大生成树,然后$check$两点之间的最大瓶颈路与给定的值的大小关系即可.</p><h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span> <span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> s = <span class="number">0</span> , w = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">char</span> ch = getchar ();</span><br><span class="line"><span class="keyword">while</span> ( ch &gt; <span class="string">'9'</span> || ch &lt; <span class="string">'0'</span> ) &#123; <span class="keyword">if</span> ( ch == <span class="string">'-'</span> ) w = <span class="number">-1</span>; ch = getchar ();&#125;</span><br><span class="line"><span class="keyword">while</span> ( ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span> ) &#123; s = s * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar ();&#125;</span><br><span class="line"><span class="keyword">return</span> s * w;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">3e5</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n , m , q , t;</span><br><span class="line"><span class="keyword">int</span> head[N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> from;</span><br><span class="line"><span class="keyword">int</span> to;</span><br><span class="line"><span class="keyword">int</span> date;</span><br><span class="line"><span class="keyword">int</span> next;</span><br><span class="line">&#125;e[M &lt;&lt; <span class="number">1</span>] , G[M &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> father[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">cmp</span> <span class="params">( Edge x , Edge y )</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> x.date &gt; y.date;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span> <span class="params">( <span class="keyword">int</span> cur )</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> ( father[cur] != cur ) </span><br><span class="line">father[cur] = find ( father[cur] );</span><br><span class="line"><span class="keyword">return</span> father[cur];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Union</span> <span class="params">( <span class="keyword">int</span> x , <span class="keyword">int</span> y )</span> </span>&#123;</span><br><span class="line">x = find ( x ) , y = find ( y );</span><br><span class="line">father[x] = y;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">Judge</span> <span class="params">( <span class="keyword">int</span> x , <span class="keyword">int</span> y )</span> </span>&#123;</span><br><span class="line">x = find ( x ) , y = find ( y );</span><br><span class="line"><span class="keyword">if</span> ( x == y ) </span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span> <span class="params">( <span class="keyword">int</span> x , <span class="keyword">int</span> y , <span class="keyword">int</span> z )</span> </span>&#123;</span><br><span class="line">G[++t].to = y;</span><br><span class="line">G[t].from = x;</span><br><span class="line">G[t].date = z;</span><br><span class="line">G[t].next = head[x];</span><br><span class="line">head[x] = t;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> p[N][<span class="number">22</span>] , mins[N][<span class="number">22</span>];</span><br><span class="line"><span class="keyword">int</span> deep[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Creat</span> <span class="params">( <span class="keyword">int</span> root , <span class="keyword">int</span> fa )</span> </span>&#123;</span><br><span class="line">p[root][<span class="number">0</span>] = fa;</span><br><span class="line">deep[root] = deep[fa] + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">int</span> i = head[root] ; i ; i = G[i].next ) &#123;</span><br><span class="line"><span class="keyword">int</span> j = G[i].to;</span><br><span class="line"><span class="keyword">if</span> ( j == fa ) </span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">mins[j][<span class="number">0</span>] = G[i].date;</span><br><span class="line">Creat ( j , root );</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">LCA</span> <span class="params">( <span class="keyword">int</span> x , <span class="keyword">int</span> y )</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> minn = <span class="number">2147483647</span>;</span><br><span class="line"><span class="keyword">if</span> ( deep[x] &gt; deep[y] ) </span><br><span class="line"><span class="built_in">std</span> :: swap ( x , y );</span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">21</span> ; i &gt;= <span class="number">0</span> ; i-- ) </span><br><span class="line"><span class="keyword">if</span> ( deep[x] &lt;= deep[y] - ( <span class="number">1</span> &lt;&lt; i ) ) &#123;</span><br><span class="line">minn = <span class="built_in">std</span> :: min ( minn , mins[y][i] );</span><br><span class="line">y = p[y][i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ( x == y ) </span><br><span class="line"><span class="keyword">return</span> minn;</span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">21</span> ; i &gt;= <span class="number">0</span> ; i-- ) &#123;</span><br><span class="line"><span class="keyword">if</span> ( p[x][i] == p[y][i] )  </span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">minn = <span class="built_in">std</span> :: min ( minn , <span class="built_in">std</span> :: min ( mins[x][i] , mins[y][i] ) );</span><br><span class="line">x = p[x][i];</span><br><span class="line">y = p[y][i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">std</span> :: min ( minn , <span class="built_in">std</span> :: min ( mins[x][<span class="number">0</span>] , mins[y][<span class="number">0</span>] ) );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">( <span class="keyword">void</span> )</span> </span>&#123;</span><br><span class="line">n = read () , m = read () , q = read ();</span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= m ; i++ ) &#123;</span><br><span class="line"><span class="keyword">int</span> x = read () , y = read () , z = read ();</span><br><span class="line">e[i].from = x;</span><br><span class="line">e[i].to = y;</span><br><span class="line">e[i].date = z;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">register</span> <span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= n ; i++ ) </span><br><span class="line">father[i] = i;</span><br><span class="line"><span class="built_in">memset</span> ( mins , <span class="number">0x3f3f3f3f</span> , <span class="keyword">sizeof</span> ( mins ) );</span><br><span class="line"><span class="built_in">std</span> :: sort ( e + <span class="number">1</span> , e + <span class="number">1</span> + m , cmp );</span><br><span class="line"><span class="keyword">int</span> NowEdge = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= m &amp;&amp; NowEdge != n - <span class="number">1</span> ; i++ ) &#123;</span><br><span class="line"><span class="keyword">int</span> l = e[i].from , r = e[i].to;</span><br><span class="line"><span class="keyword">if</span> ( !Judge ( l , r ) ) &#123;</span><br><span class="line">Union ( l , r );</span><br><span class="line">NowEdge++;</span><br><span class="line">add ( l , r , e[i].date );</span><br><span class="line">add ( r , l , e[i].date );</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ( NowEdge == n - <span class="number">1</span> ) </span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= n ; i++ ) </span><br><span class="line"><span class="keyword">if</span> ( deep[i] == <span class="number">0</span> ) &#123;</span><br><span class="line"> deep[i] = <span class="number">1</span>;</span><br><span class="line"> p[i][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line"> Creat ( i , <span class="number">0</span> );</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">int</span> j = <span class="number">1</span> ; j &lt;= <span class="number">21</span> ; j++ ) </span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= n ; i++ ) &#123;</span><br><span class="line">p[i][j] = p[p[i][j - <span class="number">1</span>]][j - <span class="number">1</span>];</span><br><span class="line">mins[i][j] = <span class="built_in">std</span> :: min ( mins[i][j - <span class="number">1</span>] , mins[p[i][j - <span class="number">1</span>]][j - <span class="number">1</span>] );</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> ( ; q-- ; ) &#123;</span><br><span class="line"><span class="keyword">int</span> l = read () , r = read () , vv = read ();</span><br><span class="line"><span class="keyword">if</span> ( !Judge ( l , r ) )</span><br><span class="line"><span class="built_in">puts</span> ( <span class="string">"No"</span> );</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">int</span> res = LCA ( l , r );</span><br><span class="line"><span class="keyword">if</span> ( res &gt;= vv ) </span><br><span class="line"><span class="built_in">puts</span> ( <span class="string">"Yes"</span> );</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line"><span class="built_in">puts</span> ( <span class="string">"No"</span> );</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="分数"><a href="#分数" class="headerlink" title="分数"></a>分数</h3><h4 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h4><p>我们模拟一下现实中的过程,发现我们需要找出分母所有的质因子并且把他们乘起来就是答案,但是需要写高精度.</p><h4 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span> <span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> s = <span class="number">0</span> , w = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">char</span> ch = getchar ();</span><br><span class="line"><span class="keyword">while</span> ( ch &gt; <span class="string">'9'</span> || ch &lt; <span class="string">'0'</span> ) &#123; <span class="keyword">if</span> ( ch == <span class="string">'-'</span> ) w = <span class="number">-1</span>; ch = getchar ();&#125;</span><br><span class="line"><span class="keyword">while</span> ( ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span> ) &#123; s = s * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar ();&#125;</span><br><span class="line"><span class="keyword">return</span> s * w;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MO = <span class="number">15</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Big</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> len, data[<span class="number">10005</span>];</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">memset</span> ( <span class="keyword">this</span> , <span class="number">0</span> , <span class="keyword">sizeof</span> ( *<span class="keyword">this</span> ) );</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">int</span> &amp; <span class="keyword">operator</span> [] ( <span class="keyword">int</span> k ) &#123; </span><br><span class="line"><span class="keyword">return</span> data[k];</span><br><span class="line">&#125;</span><br><span class="line">    Big &amp; <span class="keyword">operator</span> = ( <span class="keyword">int</span> k ) &#123;</span><br><span class="line">        clear();</span><br><span class="line">        len = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> ( k ) &#123;</span><br><span class="line">            ++len;</span><br><span class="line">data[len] = k &amp; MO;</span><br><span class="line">k &gt;&gt;= <span class="number">4</span>;</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">if</span> ( len == <span class="number">0</span> )</span><br><span class="line">++len;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Big <span class="keyword">operator</span> * ( Big &amp; A ) &#123;</span><br><span class="line">        Big temp;</span><br><span class="line">temp.clear();</span><br><span class="line">temp.len = len + A.len - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= len ; i++ )</span><br><span class="line">            <span class="keyword">for</span> ( <span class="keyword">int</span> j = <span class="number">1</span> ; j &lt;= A.len ; j++ ) &#123;</span><br><span class="line">                temp[i + j - <span class="number">1</span>] += A[j] * data[i];</span><br><span class="line">                temp[i + j] += ( temp[i + j - <span class="number">1</span>] &gt;&gt; <span class="number">4</span> );</span><br><span class="line">                temp[i + j - <span class="number">1</span>] &amp;= MO;</span><br><span class="line">                &#125;</span><br><span class="line">        <span class="keyword">while</span>(temp[temp.len + <span class="number">1</span>])</span><br><span class="line">++temp.len;</span><br><span class="line">        <span class="keyword">return</span> temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = len; i &gt;= <span class="number">1</span>; i--)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%X"</span>, data[i]);</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">'\n'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; temp , ans;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1000005</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> pnum , p[N];</span><br><span class="line"><span class="keyword">bool</span> f[N];</span><br><span class="line"><span class="built_in">map</span> &lt; <span class="keyword">int</span> , <span class="keyword">bool</span> &gt; M;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span> <span class="params">( <span class="keyword">int</span> num )</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= pnum ; i++ ) &#123;</span><br><span class="line">        <span class="keyword">if</span> ( num % p[i] == <span class="number">0</span> )</span><br><span class="line">            <span class="keyword">if</span> ( M[p[i]] == <span class="number">0</span> ) &#123;</span><br><span class="line">                M[p[i]] = <span class="literal">true</span>;</span><br><span class="line">                temp = p[i];</span><br><span class="line">                ans = ans * temp;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">while</span> ( num % p[i] == <span class="number">0</span> )</span><br><span class="line">num /= p[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( num != <span class="number">1</span> )</span><br><span class="line">        <span class="keyword">if</span> ( M[num] == <span class="number">0</span> ) &#123;</span><br><span class="line">            M[num] = <span class="literal">true</span>;</span><br><span class="line">            temp = num;</span><br><span class="line">            ans = ans * temp;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;    </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">( <span class="keyword">void</span> )</span> </span>&#123;</span><br><span class="line">ans = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    T = read ();</span><br><span class="line">    <span class="built_in">memset</span> ( f , <span class="literal">true</span> , <span class="keyword">sizeof</span> ( f ) );</span><br><span class="line">f[<span class="number">0</span>] = f[<span class="number">1</span>] = <span class="literal">false</span>;</span><br><span class="line">    p[pnum = <span class="number">1</span>] = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">int</span> now = <span class="number">2</span> ; now &lt; N ; ) &#123;</span><br><span class="line">        <span class="keyword">for</span> ( <span class="keyword">int</span> j = <span class="number">2</span> * now ; j &lt;= N ; j += now )</span><br><span class="line">f[j] = <span class="literal">false</span>;</span><br><span class="line">        now++;</span><br><span class="line"><span class="keyword">while</span> ( now &lt; N &amp;&amp; !f[now] )</span><br><span class="line">now++;</span><br><span class="line">        <span class="keyword">if</span> ( f[now] )</span><br><span class="line">p[++pnum] = now;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> ( T-- ) &#123;</span><br><span class="line">    <span class="keyword">int</span> x = read () , y = read ();</span><br><span class="line">        <span class="keyword">int</span> d = __gcd ( x , y );</span><br><span class="line">x /= d;</span><br><span class="line">y /= d;</span><br><span class="line">        work ( y );</span><br><span class="line">    &#125;</span><br><span class="line">    ans.print();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="鏼尔德"><a href="#鏼尔德" class="headerlink" title="鏼尔德"></a>鏼尔德</h3><h4 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h4><p>解：设$d_{i,j}$表示走到结点$i$，被收了$j$次路费，最少花了多少钱。<br>状态转移方程：考虑上一个结点，不妨设为$k$。$d_{i,j} = min[max(d_{k,j-1} + i到k的路费, d_{k,j})]$<br>边界：$d_{1,j} = 0$最终解：$d_{n,k}$.</p><h4 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 3010</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 1000000000000000000</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span> &#123;</span></span><br><span class="line">LL to, cost, next;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">queue</span>&lt;LL&gt; q;</span><br><span class="line">edge e[N &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="keyword">bool</span> exist[N];</span><br><span class="line">LL d[N][N], head[N], n, m, K, nedge;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">max</span><span class="params">(LL x, LL y)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> x &gt; y ? x : y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">link</span><span class="params">(LL u, LL v, LL w)</span> </span>&#123;</span><br><span class="line">e[++nedge].to = v;</span><br><span class="line">e[nedge].cost = w;</span><br><span class="line">e[nedge].next = head[u];</span><br><span class="line">head[u] = nedge;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld %lld %lld"</span>, &amp;n, &amp;m, &amp;K);</span><br><span class="line"><span class="keyword">for</span>(LL i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">LL u, v, w;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld %lld %lld"</span>, &amp;u, &amp;v, &amp;w);</span><br><span class="line">link(u, v, w); link(v, u, w);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(LL i = <span class="number">2</span>; i &lt;= n; i++)</span><br><span class="line">fill(&amp;d[i][<span class="number">0</span>], &amp;d[i][N], INF);</span><br><span class="line">q.push(<span class="number">1</span>);</span><br><span class="line">exist[<span class="number">1</span>] = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">while</span>(!q.empty()) &#123;</span><br><span class="line">LL u = q.front();</span><br><span class="line">q.pop();</span><br><span class="line">exist[u] = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">for</span>(LL i = head[u]; i; i = e[i].next) &#123;</span><br><span class="line">LL v = e[i].to, w = e[i].cost;</span><br><span class="line"><span class="keyword">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">for</span>(LL j = <span class="number">0</span>; j &lt;= K; j++) &#123;</span><br><span class="line">LL t = d[u][j];</span><br><span class="line"><span class="keyword">if</span>(j) t = max(t, d[u][j - <span class="number">1</span>] + w);</span><br><span class="line"><span class="keyword">if</span>(d[v][j] &gt; t) &#123;d[v][j] = t; flag = <span class="literal">true</span>;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(flag &amp;&amp; !exist[v]) &#123;</span><br><span class="line">exist[v] = <span class="literal">true</span>;</span><br><span class="line">q.push(v);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld"</span>, d[n][K]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote class="blockquote-center">因为知道了自己是多么的菜,所以才要更加努力去追求那个永远也不可能实现的梦想</blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;版权原因,题面不公开&lt;br&gt;
    
    </summary>
    
    
      <category term="OI" scheme="http://krrrr.xyz/%E5%88%86%E7%B1%BB/OI/"/>
    
    
      <category term="ZROI" scheme="http://krrrr.xyz/%E6%A0%87%E7%AD%BE/ZROI/"/>
    
  </entry>
  
  <entry>
    <title>普及五联测D4</title>
    <link href="http://krrrr.xyz/2019/10/26/%E6%99%AE%E5%8F%8A%E4%BA%94%E8%81%94%E6%B5%8BD4/"/>
    <id>http://krrrr.xyz/2019/10/26/普及五联测D4/</id>
    <published>2019-10-26T00:49:08.000Z</published>
    <updated>2019-10-26T06:35:07.460Z</updated>
    
    <content type="html"><![CDATA[<p>版权原因,题面不公开.<br><a id="more"></a></p><h3 id="刷题王者"><a href="#刷题王者" class="headerlink" title="刷题王者"></a>刷题王者</h3><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>直接开$map$统计即可.</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">bool</span> mp[<span class="number">10005</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">( <span class="keyword">void</span> )</span> </span>&#123;</span><br><span class="line"><span class="built_in">scanf</span> ( <span class="string">"%d"</span> , &amp;n );</span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= n ; i++ ) &#123;</span><br><span class="line"><span class="keyword">int</span> num;</span><br><span class="line"><span class="built_in">scanf</span> ( <span class="string">"%d"</span> , &amp;num );</span><br><span class="line"><span class="keyword">while</span> ( num-- ) &#123;</span><br><span class="line"><span class="keyword">int</span> x;</span><br><span class="line"><span class="built_in">scanf</span> ( <span class="string">"%d"</span> , &amp;x );</span><br><span class="line">mp[x] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">1000</span> ; i &lt;= <span class="number">9999</span> ; i++ ) </span><br><span class="line"> <span class="keyword">if</span> ( mp[i] ) </span><br><span class="line"> ans++;</span><br><span class="line"><span class="built_in">printf</span> ( <span class="string">"%d\n"</span> , ans );</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="回到原点"><a href="#回到原点" class="headerlink" title="回到原点"></a>回到原点</h3><h4 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h4><p>考虑我们按照原来的字符串进行移动之后的位置$(x,y)$.发现对原来字符串进行操作的话,如果我们把某个向上的和向下的操作变成向左或向右的,那么每次可以从$(x,y)$向左上/下,右上/下移动.<br>所以我们每次可以对于$x$和$y$的绝对值$+1$或者$-1$.所以答案就是$min(abs(x),abs(y)) + max ( abs ( x ) - min ( abs ( x ) , abs ( y ) ) , abs ( y ) - min ( abs ( x ) , abs ( y ) ) ) / 2$.</p><h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1005</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> len , x , y;</span><br><span class="line"><span class="keyword">char</span> s[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">( <span class="keyword">void</span> )</span> </span>&#123;</span><br><span class="line"><span class="built_in">scanf</span> ( <span class="string">"%s"</span> , s + <span class="number">1</span> );</span><br><span class="line">len = <span class="built_in">strlen</span> ( s + <span class="number">1</span> );</span><br><span class="line"><span class="keyword">if</span> ( len &amp; <span class="number">1</span> ) &#123;</span><br><span class="line"><span class="built_in">puts</span> ( <span class="string">"-1"</span> );</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= len ; i++ ) &#123;</span><br><span class="line"><span class="keyword">if</span> ( s[i] == <span class="string">'U'</span> ) </span><br><span class="line">y++;</span><br><span class="line"><span class="keyword">if</span> ( s[i] == <span class="string">'D'</span> ) </span><br><span class="line">y--;</span><br><span class="line"><span class="keyword">if</span> ( s[i] == <span class="string">'L'</span> ) </span><br><span class="line">x--;</span><br><span class="line"><span class="keyword">if</span> ( s[i] == <span class="string">'R'</span> ) </span><br><span class="line">x++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">ans += min ( <span class="built_in">abs</span> ( x ) , <span class="built_in">abs</span> ( y ) );</span><br><span class="line"><span class="keyword">if</span> ( x &gt;= <span class="number">0</span> ) </span><br><span class="line">x -= ans;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> ( x &lt; <span class="number">0</span> ) </span><br><span class="line">x += ans;</span><br><span class="line"><span class="keyword">if</span> ( y &gt;= <span class="number">0</span> ) </span><br><span class="line">y -= ans;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> ( y &lt; <span class="number">0</span> ) </span><br><span class="line">y += ans;</span><br><span class="line"><span class="keyword">if</span> ( x != <span class="number">0</span> ) </span><br><span class="line">ans += <span class="built_in">abs</span> ( x / <span class="number">2</span> );</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> ( y != <span class="number">0</span> ) </span><br><span class="line">ans += <span class="built_in">abs</span> ( y / <span class="number">2</span> );</span><br><span class="line"><span class="built_in">printf</span> ( <span class="string">"%d\n"</span> , ans );</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="快乐矩阵"><a href="#快乐矩阵" class="headerlink" title="快乐矩阵"></a>快乐矩阵</h3><h4 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h4><p>发现原来某些点的贡献可以压缩到一个点,所以我们对每一行求一个前缀差,然后再对这最后一列的前缀差求一个前缀差,判断一下是否为$0$即可.</p><h4 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> mp[<span class="number">505</span>][<span class="number">505</span>];</span><br><span class="line"><span class="keyword">int</span> n , m;</span><br><span class="line"><span class="keyword">int</span> num[<span class="number">505</span>];</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span> <span class="params">( <span class="keyword">void</span> )</span> </span>&#123;</span><br><span class="line"><span class="comment">//freopen ( "C.in" , "r" , stdin );</span></span><br><span class="line">ios :: sync_with_stdio ( <span class="literal">false</span> );</span><br><span class="line"><span class="built_in">cin</span>.tie ( <span class="number">0</span> ) , <span class="built_in">cout</span>.tie ( <span class="number">0</span> );</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= n ; i++ ) </span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">int</span> j = <span class="number">1</span> ; j &lt;= m ; j++ ) </span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; mp[i][j];</span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= n ; i++ ) &#123;</span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">int</span> j = <span class="number">1</span> ; j &lt; m ; j++ )</span><br><span class="line">mp[i][j + <span class="number">1</span>] -= mp[i][j];</span><br><span class="line">num[i] = mp[i][m];</span><br><span class="line"><span class="comment">//cout &lt;&lt; num[i] &lt;&lt; endl;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> now = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">1</span> ; i &lt; n ; i++ ) </span><br><span class="line">num[i + <span class="number">1</span>] -= num[i];</span><br><span class="line">now = num[n];</span><br><span class="line"><span class="keyword">if</span> ( <span class="built_in">abs</span> ( now )  == <span class="number">0</span> ) </span><br><span class="line"><span class="built_in">puts</span> ( <span class="string">"Yes"</span> );</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line"><span class="built_in">puts</span> ( <span class="string">"No"</span> );</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="梦中的位运算"><a href="#梦中的位运算" class="headerlink" title="梦中的位运算"></a>梦中的位运算</h3><h4 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h4><p>发现进行操作一定比不操作更优秀,所以我们要求的就是操作到不能再操作了的时候这个序列的平方和.<br>又因为这个操作的本质就是把$1$都放到某一个数字上,所以我们直接统计一下二进制下某一位出现了多少次然后贪心统计即可.</p><h4 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span> <span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> s = <span class="number">0</span> , w = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">char</span> ch = getchar ();</span><br><span class="line"><span class="keyword">while</span> ( ch &gt; <span class="string">'9'</span> || ch &lt; <span class="string">'0'</span> ) &#123; <span class="keyword">if</span> ( ch == <span class="string">'-'</span> ) w = <span class="number">-1</span>; ch = getchar ();&#125;</span><br><span class="line"><span class="keyword">while</span> ( ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span> ) &#123; s = s * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar ();&#125;</span><br><span class="line"><span class="keyword">return</span> s * w; </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">print</span> <span class="params">( __int128 x )</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> ( !x )</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">print ( x / <span class="number">10</span> );</span><br><span class="line"><span class="built_in">putchar</span> ( x % <span class="number">10</span> + <span class="string">'0'</span> );</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> num[<span class="number">35</span>];</span><br><span class="line">__int128 ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">( <span class="keyword">void</span> )</span> </span>&#123;</span><br><span class="line">n = read ();</span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= n ; i++ ) &#123;</span><br><span class="line"><span class="keyword">int</span> x = read ();</span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">int</span> j = <span class="number">0</span> ; j &lt;= <span class="number">30</span> ; j++ ) </span><br><span class="line"><span class="keyword">if</span> ( x &amp; ( <span class="number">1</span> &lt;&lt; j ) ) </span><br><span class="line">num[j]++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= n ; i++ ) &#123;</span><br><span class="line">__int128 re = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">int</span> j = <span class="number">0</span> ; j &lt;= <span class="number">30</span> ; j++ )</span><br><span class="line"><span class="keyword">if</span> ( num[j] &gt;= i )</span><br><span class="line">re |= (<span class="number">1l</span>l &lt;&lt; j);</span><br><span class="line">ans += re * re;</span><br><span class="line">&#125;</span><br><span class="line">print ( ans );</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote class="blockquote-center">因为知道了自己是多么的菜,所以才要更加努力去追求那个永远也不可能实现的梦想</blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;版权原因,题面不公开.&lt;br&gt;
    
    </summary>
    
    
      <category term="OI" scheme="http://krrrr.xyz/%E5%88%86%E7%B1%BB/OI/"/>
    
    
      <category term="ZROI" scheme="http://krrrr.xyz/%E6%A0%87%E7%AD%BE/ZROI/"/>
    
  </entry>
  
  <entry>
    <title>Educational Codeforces Round 75题解</title>
    <link href="http://krrrr.xyz/2019/10/25/Edu75/"/>
    <id>http://krrrr.xyz/2019/10/25/Edu75/</id>
    <published>2019-10-25T03:04:47.000Z</published>
    <updated>2019-10-25T08:16:44.355Z</updated>
    
    <content type="html"><![CDATA[<p>意外感觉还挺友善的?<br><a id="more"></a></p><h3 id="Broken-Keyboard"><a href="#Broken-Keyboard" class="headerlink" title="Broken Keyboard"></a>Broken Keyboard</h3><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>考虑一段字符连续出现的次数是奇数次还是偶数次,如果有某种字符连续出现了奇数次那么就是一定存在的.</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="number">0</span>),<span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; T;</span><br><span class="line"><span class="keyword">while</span> ( T-- ) &#123;</span><br><span class="line"><span class="built_in">string</span> s;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; s;</span><br><span class="line"><span class="keyword">int</span> len = s.size ();</span><br><span class="line"><span class="built_in">map</span> &lt; <span class="keyword">char</span> , <span class="keyword">bool</span> &gt; ans;</span><br><span class="line"><span class="keyword">char</span> las = <span class="string">'.'</span>;</span><br><span class="line"><span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span> ; i &lt;= len ; i++ )&#123;</span><br><span class="line"><span class="keyword">if</span> ( las != s[i] ) &#123;</span><br><span class="line"><span class="keyword">if</span> ( num % <span class="number">2</span> == <span class="number">1</span> ) </span><br><span class="line">ans[las] = <span class="number">1</span>; </span><br><span class="line">las = s[i];</span><br><span class="line">num = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">num++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">int</span> i = ( <span class="keyword">int</span> ) <span class="string">'a'</span> ; i &lt;= ( <span class="keyword">int</span> ) <span class="string">'z'</span> ; i++ ) </span><br><span class="line"><span class="keyword">if</span> ( ans[(<span class="keyword">char</span>)i] == <span class="number">1</span> ) </span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ( <span class="keyword">char</span> ) i;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>; </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;<span class="comment">//</span></span><br></pre></td></tr></table></figure><h3 id="Binary-Palindromes"><a href="#Binary-Palindromes" class="headerlink" title="Binary Palindromes"></a>Binary Palindromes</h3><h4 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h4><p>发现如果可以根据题目中给的条件来交换的话,那么原问题可以等价为给你若干个$1$和$0$,然后能对于某些给定的长度,最多能拼出多少回文串.<br>发现如果我们要构造串的话,那么在前$len/i$(向下取整)个位置,我们不用考虑什么其他的条件,只需要每次选择一个剩余数量大的然后$-2$即可.<br>然后我们发现如果我们要构造的串的长度为奇数的话,中间的那个用什么是个问题,我们考虑一下,因为我们在构造过程的第一步中要拿出两个来构造,那么如果剩余数量是奇数一定会比剩余数量是偶数更劣.<br>而奇数$-1=$偶数,所以如果有剩余个数是奇数的话,我们拿出一个奇数的来$-1$,否则选择一个剩余数量多的构造.</p><h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> len[<span class="number">55</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">ios :: sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="number">0</span>),<span class="built_in">cout</span>.tie(<span class="number">0</span>); </span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; T;</span><br><span class="line"><span class="keyword">while</span> ( T-- ) &#123;</span><br><span class="line"><span class="built_in">memset</span> ( len , <span class="number">0</span> , <span class="keyword">sizeof</span> ( len ) );</span><br><span class="line"><span class="keyword">int</span> NumZ = <span class="number">0</span> , NumO = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= n ; i++ ) &#123;</span><br><span class="line"><span class="built_in">string</span> s;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;s;</span><br><span class="line">len[i] = s.size();</span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">int</span> j = <span class="number">0</span> ; j &lt; len[i] ; j++ ) </span><br><span class="line"><span class="keyword">if</span> ( s[j] == <span class="string">'0'</span> ) </span><br><span class="line">NumZ++;</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">NumO++;</span><br><span class="line">&#125;</span><br><span class="line">sort ( len + <span class="number">1</span> , len + <span class="number">1</span> + n ); </span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0</span>; </span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= n ; i++ ) &#123;</span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">int</span> j = <span class="number">1</span> ; j &lt;= len[i] / <span class="number">2</span> ; j++ ) &#123;</span><br><span class="line"><span class="keyword">if</span> ( NumO &gt; NumZ ) </span><br><span class="line">NumO -= <span class="number">2</span>;</span><br><span class="line"><span class="keyword">else</span>  </span><br><span class="line">NumZ -= <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ( len[i] % <span class="number">2</span> == <span class="number">1</span> ) </span><br><span class="line"><span class="keyword">if</span> ( NumO &gt;= <span class="number">1</span> &amp;&amp; NumO % <span class="number">2</span> == <span class="number">1</span> ) </span><br><span class="line">NumO--;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> ( NumZ &gt;= <span class="number">1</span> &amp;&amp; NumZ % <span class="number">2</span> == <span class="number">1</span> ) </span><br><span class="line">NumZ--; </span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> ( NumO &gt; NumZ ) </span><br><span class="line">NumO -= <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span>  </span><br><span class="line">NumZ -= <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ( NumZ &gt;= <span class="number">0</span> &amp;&amp; NumO &gt;= <span class="number">0</span> ) </span><br><span class="line">ans++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Minimize-The-Integer"><a href="#Minimize-The-Integer" class="headerlink" title="Minimize The Integer"></a>Minimize The Integer</h3><h4 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h4><p>发现这样一个结论,如果可以交换任意不同相邻奇偶数的话,那么原来奇数和偶数相对于自己的奇偶性的数的相对位置是不会改变的.<br>所以我们可以分别把奇数和偶数存储起来.然后开两个队列,分别对比奇数和偶数队列的队头大小并且贪心的选择一个小的输出即可.</p><h4 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">string</span> s;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">( <span class="keyword">void</span> )</span> </span>&#123;</span><br><span class="line">ios :: sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="number">0</span>),<span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; T;</span><br><span class="line"><span class="keyword">while</span> ( T-- ) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; s;</span><br><span class="line"><span class="keyword">int</span> len = s.size ();</span><br><span class="line"><span class="built_in">queue</span> &lt; <span class="keyword">int</span> &gt; qu[<span class="number">2</span>];</span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; len ; i++ ) </span><br><span class="line"><span class="keyword">if</span> ( ( ( <span class="keyword">int</span> ) s[i] - <span class="string">'0'</span> ) % <span class="number">2</span> == <span class="number">0</span> ) </span><br><span class="line">qu[<span class="number">0</span>].push ( ( <span class="keyword">int</span> ) s[i] - <span class="string">'0'</span> );</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">qu[<span class="number">1</span>].push ( ( <span class="keyword">int</span> ) s[i] - <span class="string">'0'</span> );</span><br><span class="line">qu[<span class="number">0</span>].push ( <span class="number">11</span> );</span><br><span class="line">qu[<span class="number">1</span>].push ( <span class="number">11</span> );</span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= len ; i++ ) &#123;</span><br><span class="line"><span class="keyword">if</span> ( qu[<span class="number">0</span>].front () &lt; qu[<span class="number">1</span>].front () ) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; qu[<span class="number">0</span>].front ();</span><br><span class="line">qu[<span class="number">0</span>].pop ();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> ( qu[<span class="number">0</span>].front () &gt; qu[<span class="number">1</span>].front () ) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; qu[<span class="number">1</span>].front ();</span><br><span class="line">qu[<span class="number">1</span>].pop ();</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Salary-Changing"><a href="#Salary-Changing" class="headerlink" title="Salary Changing"></a>Salary Changing</h3><h4 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h4><p>发现可以二分这个$mid$,然后我们考虑怎么$check$.<br>对于某个区间$[l,r]$,如果$r&gt;=mid$,那么说明在这个区间中我们可以取到$mid$.<br>然后我们把能取到$mid$的区间全部取到$mid$,发现如果大于$mid$的区间刚好为$(n+1)/2$个,那么说明这个取值是可行的.</p><h4 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cassert&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">1e9</span> + <span class="number">5</span>;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> L, R;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> Node &amp;other) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> L &lt; other.L;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> N, H;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> S;</span><br><span class="line"><span class="built_in">vector</span>&lt;Node&gt; v;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">possible</span><span class="params">(<span class="keyword">int</span> median)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (Node &amp;s : v)</span><br><span class="line">        sum += s.L;</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = N - <span class="number">1</span>; i &gt;= <span class="number">0</span> &amp;&amp; count &lt; H; i--)</span><br><span class="line">        <span class="keyword">if</span> (v[i].R &gt;= median) &#123;</span><br><span class="line">            sum += max(median - v[i].L, <span class="number">0</span>);</span><br><span class="line">            count++;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> count == H &amp;&amp; sum &lt;= S;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="number">0</span>),<span class="built_in">cout</span>.tie(<span class="number">0</span>); </span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; T;</span><br><span class="line">    <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; N &gt;&gt; S;</span><br><span class="line">    H = (N + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">    v.resize(N);</span><br><span class="line">    <span class="keyword">for</span> ( Node &amp;s : v )</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; s.L &gt;&gt; s.R;</span><br><span class="line">    sort ( v.begin() , v.end () );</span><br><span class="line">    <span class="keyword">int</span> l = <span class="number">0</span>, r = INF , ans; </span><br><span class="line">    <span class="keyword">while</span> ( l &lt;= r ) &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = ( l + r ) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> ( possible ( mid ) ) &#123;</span><br><span class="line">            ans = mid;</span><br><span class="line">l = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            r = mid - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="string">'\n'</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote class="blockquote-center">因为知道了自己是多么的菜,所以才要更加努力去追求那个永远也不可能实现的梦想</blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;意外感觉还挺友善的?&lt;br&gt;
    
    </summary>
    
    
      <category term="OI" scheme="http://krrrr.xyz/%E5%88%86%E7%B1%BB/OI/"/>
    
    
      <category term="CodeForces题解" scheme="http://krrrr.xyz/%E6%A0%87%E7%AD%BE/CodeForces%E9%A2%98%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>[51NodP1682] 中位数计数</title>
    <link href="http://krrrr.xyz/2019/10/24/51Nod-P1682%E4%B8%AD%E4%BD%8D%E6%95%B0%E8%AE%A1%E6%95%B0/"/>
    <id>http://krrrr.xyz/2019/10/24/51Nod-P1682中位数计数/</id>
    <published>2019-10-24T12:38:31.000Z</published>
    <updated>2019-10-24T12:48:41.395Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.51nod.com/Challenge/Problem.html#problemId=1682" target="_blank" rel="noopener">传送门</a><br><a id="more"></a></p><p>发现题目中的数据范围说明我们需要一个时间复杂度为$O(n^2)$的算法.<br>发现我们可以考虑每个数字的贡献,我们发现,对于某个位置上的数字而言,包含这个位置的区间的数量是$n$级别的.<br>所以我们可以尝试对于每个位置的数字,枚举包含这个位置的区间然后统计答案.<br>所以问题就转化成了怎么统计答案.由于权值的范围很大,所以我们考虑设$sum_{n+j}$表示排序后,与$i$这个位置的数字还需要移动正负$j$个单位才能到中位数的位置.<br>然后我们枚举完所有区间之后直接统计就好了.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">8e3</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> num[N], sum[N &lt;&lt; <span class="number">1</span>], ans[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">( <span class="keyword">void</span> )</span> </span>&#123;</span><br><span class="line">ios :: sync_with_stdio ( <span class="literal">false</span> );</span><br><span class="line"><span class="built_in">cin</span>.tie ( <span class="number">0</span> ) , <span class="built_in">cout</span>.tie ( <span class="number">0</span> );</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n; </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; num[i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">        <span class="built_in">memset</span>(sum, <span class="number">0</span>, <span class="keyword">sizeof</span>(sum));</span><br><span class="line">        <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &gt;= <span class="number">0</span>; j--)&#123;</span><br><span class="line">            <span class="keyword">if</span> (num[j] &gt; num[i])</span><br><span class="line">cnt++;</span><br><span class="line">            <span class="keyword">if</span> (num[j] &lt; num[i])</span><br><span class="line">cnt--;</span><br><span class="line">            sum[<span class="number">8000</span>+cnt]++;</span><br><span class="line">        &#125;</span><br><span class="line">        cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt; n; j++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (num[j] &gt; num[i])</span><br><span class="line">cnt++;</span><br><span class="line">            <span class="keyword">if</span> (num[j] &lt; num[i])</span><br><span class="line">cnt--;</span><br><span class="line">            ans[i] += sum[<span class="number">8000</span>-cnt];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans[i];</span><br><span class="line">        <span class="keyword">if</span> (i != n<span class="number">-1</span>)</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote class="blockquote-center">因为知道了自己是多么的菜,所以才要更加努力去追求那个永远也不可能实现的梦想</blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://www.51nod.com/Challenge/Problem.html#problemId=1682&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;传送门&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="OI" scheme="http://krrrr.xyz/%E5%88%86%E7%B1%BB/OI/"/>
    
    
      <category term="思维" scheme="http://krrrr.xyz/%E6%A0%87%E7%AD%BE/%E6%80%9D%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>[JZOJ]平均数</title>
    <link href="http://krrrr.xyz/2019/10/24/JZOJ-%E5%B9%B3%E5%9D%87%E6%95%B0/"/>
    <id>http://krrrr.xyz/2019/10/24/JZOJ-平均数/</id>
    <published>2019-10-24T06:26:20.000Z</published>
    <updated>2019-10-24T06:50:48.813Z</updated>
    
    <content type="html"><![CDATA[<p>莫得传送门qwq,,,<br><a id="more"></a></p><p><img src="https://github.com/wqyzstql/PicBed/blob/master/201910241.png?raw=true" alt="题面"></p><p>考虑二分平均值mid，设当前平均值小于等于mid的个数为$f(mid)$。当$f(mid)&gt;k$，则缩小$mid$。然后剩下的问题就变成了怎么求出这个$f$了.<br>我们设𝑎数组前缀和为$sum_i$,那么区间$[𝑗+1,𝑖]$的平均值为$\frac{𝑠𝑢𝑚[𝑖]−𝑠𝑢𝑚[𝑗]}{𝑖−𝑗}$.<br>然后观察对于一对$(𝑖,𝑗)$：</p><script type="math/tex; mode=display">\frac{𝑠𝑢𝑚_i−𝑠𝑢𝑚_j}{𝑖−𝑗}≤𝑚𝑖𝑑</script><script type="math/tex; mode=display">⇔𝑠𝑢𝑚_i−𝑠𝑢𝑚_j≤𝑚𝑖𝑑∗(𝑖−𝑗)</script><script type="math/tex; mode=display">⇔𝑠𝑢𝑚_i−𝑚𝑖𝑑∗𝑖≤𝑠𝑢𝑚_j−𝑚𝑖𝑑∗𝑗</script><p>显然,如果我们定义$v_i$表示$sum_i-mid \times i$的话,那么$f(mid)$即为$v$数组的逆序对.<br>所以我们要做的就是求出逆序对的个数即可,可以用树状数组或者归并排序轻松解决.</p><blockquote class="blockquote-center">因为知道了自己是多么的菜,所以才要更加努力去追求那个永远也不可能实现的梦想</blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;莫得传送门qwq,,,&lt;br&gt;
    
    </summary>
    
    
      <category term="OI" scheme="http://krrrr.xyz/%E5%88%86%E7%B1%BB/OI/"/>
    
    
      <category term="二分" scheme="http://krrrr.xyz/%E6%A0%87%E7%AD%BE/%E4%BA%8C%E5%88%86/"/>
    
      <category term="分治" scheme="http://krrrr.xyz/%E6%A0%87%E7%AD%BE/%E5%88%86%E6%B2%BB/"/>
    
      <category term="树状数组" scheme="http://krrrr.xyz/%E6%A0%87%E7%AD%BE/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>[51Nod]P1686 第K大区间</title>
    <link href="http://krrrr.xyz/2019/10/24/51NodP1686-%E7%AC%ACK%E5%A4%A7%E5%8C%BA%E9%97%B4/"/>
    <id>http://krrrr.xyz/2019/10/24/51NodP1686-第K大区间/</id>
    <published>2019-10-24T01:51:19.000Z</published>
    <updated>2019-10-24T02:02:35.018Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.51nod.com/Challenge/Problem.html#problemId=1686" target="_blank" rel="noopener">传送门</a><br><a id="more"></a><br>注意到如果我们设$f_i$表示值大于$i$的区间有多少个的话,那么显然$i$越大,区间的个数越小,具有单调性,所以显然可以二分解决.<br>又因为题目中的限制可以转化为$f_i&gt;=k$并且$i$最大.那么我们可以去二分这个$i$然后统计一下$f_i$有多少个.<br>那么现在的问题就是怎么去统计这个$f_i$到底有多少.<br>我们先对原数组进行离散化处理(因为原来的权值范围实在是太大了),然后开一个$buck_i$表示$i$这个数字出现了多少次.<br>那么发现如果我们使用$two$_$pointers$统计答案的话,那么每次会更新众数的那个值一定只能是新加进来的那个值.<br>所以我们只需要判断一下是不是$buck_r&gt;=mid$即可.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n , k;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> id;</span><br><span class="line"><span class="keyword">int</span> v;</span><br><span class="line">&#125;ls[N];</span><br><span class="line"><span class="keyword">int</span> num[N] , idx;</span><br><span class="line"><span class="keyword">int</span> buck[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">cmp</span> <span class="params">( Node x , Node y )</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> x.v &lt; y.v;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> pos[N];</span><br><span class="line"><span class="built_in">vector</span> &lt; <span class="keyword">int</span> &gt; G[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">check</span> <span class="params">( <span class="keyword">int</span> x )</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ( x == <span class="number">1</span> ) </span><br><span class="line"><span class="keyword">return</span> n * ( n - <span class="number">1</span> ) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span> , L = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= n ; i++ )</span><br><span class="line">G[i].clear();</span><br><span class="line">    <span class="built_in">memset</span> ( buck , <span class="number">0</span> , <span class="keyword">sizeof</span> ( buck ) );</span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= n ; i++ ) &#123;</span><br><span class="line">        <span class="keyword">if</span> ( buck[num[i]] &gt;= x - <span class="number">1</span> ) </span><br><span class="line">            pos[i] = G[num[i]][buck[num[i]] + <span class="number">1</span> - x];</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">pos[i] = <span class="number">0</span>;</span><br><span class="line">        L = max ( L , pos[i] );</span><br><span class="line">        ans += L;</span><br><span class="line">        buck[num[i]]++;</span><br><span class="line">        <span class="keyword">int</span> tmp = buck[num[i]];</span><br><span class="line">        G[num[i]].push_back( i );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span> <span class="params">( <span class="keyword">void</span> )</span> </span>&#123;</span><br><span class="line">ios :: sync_with_stdio ( <span class="literal">false</span> );</span><br><span class="line"><span class="built_in">cin</span>.tie ( <span class="number">0</span> ) , <span class="built_in">cout</span>.tie ( <span class="number">0</span> );</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; k;</span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= n ; i++ ) &#123;</span><br><span class="line">ls[i].id = i;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; ls[i].v;</span><br><span class="line">&#125;</span><br><span class="line">sort ( ls + <span class="number">1</span> , ls + <span class="number">1</span> + n , cmp );</span><br><span class="line"></span><br><span class="line">ls[<span class="number">0</span>].v = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= n ; i++ ) &#123;</span><br><span class="line"><span class="keyword">if</span> ( ls[i].v != ls[i - <span class="number">1</span>].v ) </span><br><span class="line">idx++;</span><br><span class="line">num[ls[i].id] = idx;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> l = <span class="number">1</span> , r = n , ans = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> ( l &lt;= r ) &#123;</span><br><span class="line"><span class="keyword">int</span> mid = ( l + r ) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> ( check ( mid ) &gt;= k ) &#123;</span><br><span class="line">l = mid + <span class="number">1</span>;</span><br><span class="line">ans = mid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">r = mid - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote class="blockquote-center">因为知道了自己是多么的菜,所以才要更加努力去追求那个永远也不可能实现的梦想</blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://www.51nod.com/Challenge/Problem.html#problemId=1686&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;传送门&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="OI" scheme="http://krrrr.xyz/%E5%88%86%E7%B1%BB/OI/"/>
    
    
      <category term="二分" scheme="http://krrrr.xyz/%E6%A0%87%E7%AD%BE/%E4%BA%8C%E5%88%86/"/>
    
  </entry>
  
  <entry>
    <title>Codeforces Round #595 (Div. 3)</title>
    <link href="http://krrrr.xyz/2019/10/23/Round595/"/>
    <id>http://krrrr.xyz/2019/10/23/Round595/</id>
    <published>2019-10-23T02:40:01.000Z</published>
    <updated>2019-10-23T12:51:51.422Z</updated>
    
    <content type="html"><![CDATA[<p>降智题真的可以为所欲为.<br><a id="more"></a></p><h3 id="Yet-Another-Dividing-into-Teams"><a href="#Yet-Another-Dividing-into-Teams" class="headerlink" title="Yet Another Dividing into Teams"></a>Yet Another Dividing into Teams</h3><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>因为题目中有个条件叫做每个$a_i$互不相同,所以我们可以先排序之后看一下$a_i$于$a_{i-1}$的差的绝对值是否为$1$.如果有的话答案就是$2$,否则答案显然为$1$.  </p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n , ans;</span><br><span class="line"><span class="keyword">int</span> num[<span class="number">105</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">( <span class="keyword">void</span> )</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;T;</span><br><span class="line"><span class="keyword">while</span>(T--)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;num[i];</span><br><span class="line">sort(num+<span class="number">1</span>,num+<span class="number">1</span>+n);</span><br><span class="line">ans=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">abs</span>(num[i]-num[i<span class="number">-1</span>])==<span class="number">1</span>)</span><br><span class="line">ans=<span class="number">2</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Books-Exchange"><a href="#Books-Exchange" class="headerlink" title="Books Exchange"></a>Books Exchange</h3><h4 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h4><p>$B1$和$B2$就一起说了….首先如果$i$可以把他的信息传给$d_i$,那么我们由信息传递那道题的思路可知我们可以从$i$到$d_i$连一条边.而每个点要知道自己的信息,就是要在自己所在的强连通分量中走一圈.即每个点的答案就是每个点所在强连通分量的大小.<br>又因为题目保证一定有解,所以直接$Tarjan$缩点然后直接统计$size$即可,多测注意清空.</p><h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,t,idx,Bcnt;</span><br><span class="line"><span class="keyword">int</span> head[N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> to;</span><br><span class="line"><span class="keyword">int</span> next;</span><br><span class="line">&#125;e[N&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> dfn[N],low[N];</span><br><span class="line"><span class="keyword">int</span> Belong[N],siz[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span> <span class="params">( <span class="keyword">int</span> x , <span class="keyword">int</span> y )</span> </span>&#123;</span><br><span class="line">e[++t].to = y;</span><br><span class="line">e[t].next = head[x];</span><br><span class="line">head[x] = t;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">stack</span> &lt; <span class="keyword">int</span> &gt; st;</span><br><span class="line"><span class="keyword">bool</span> instack[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Tarjan</span> <span class="params">( <span class="keyword">int</span> cur )</span> </span>&#123;</span><br><span class="line">st.push ( cur );</span><br><span class="line">dfn[cur] = low[cur] = ++idx;</span><br><span class="line">instack[cur] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">int</span> i = head[cur] ; i ; i = e[i].next ) &#123;</span><br><span class="line"><span class="keyword">int</span> j = e[i].to;</span><br><span class="line"><span class="keyword">if</span> ( !dfn[j] ) &#123;</span><br><span class="line">Tarjan ( j );</span><br><span class="line">low[cur] = min ( low[cur] , low[j] );</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> ( instack[j] ) </span><br><span class="line">low[cur] = min ( low[cur] , dfn[j] );</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">int</span> k;</span><br><span class="line"><span class="keyword">if</span> ( dfn[cur] == low[cur] ) &#123;</span><br><span class="line">Bcnt++;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">k = st.top ();</span><br><span class="line">instack[k] = <span class="number">0</span>;</span><br><span class="line">st.pop ();</span><br><span class="line">Belong[k] = Bcnt;</span><br><span class="line">siz[Belong[k]]++;</span><br><span class="line">&#125; <span class="keyword">while</span> ( k != cur );</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">( <span class="keyword">void</span> )</span> </span>&#123;</span><br><span class="line">ios :: sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="number">0</span>),<span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;T;</span><br><span class="line"><span class="keyword">while</span>(T--)&#123;</span><br><span class="line">t=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">memset</span>(head,<span class="number">0</span>,<span class="keyword">sizeof</span>(head));</span><br><span class="line"><span class="built_in">memset</span>(dfn,<span class="number">0</span>,<span class="keyword">sizeof</span>(dfn));</span><br><span class="line"><span class="built_in">memset</span>(low,<span class="number">0</span>,<span class="keyword">sizeof</span>(low));</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">int</span> to;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;to;</span><br><span class="line">add(i,to);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line"><span class="keyword">if</span> (!dfn[i] ) &#123;</span><br><span class="line"><span class="keyword">while</span>(!st.empty())</span><br><span class="line">st.pop();</span><br><span class="line">Tarjan(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//cout&lt;&lt;t&lt;&lt;endl;</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;siz[Belong[i]]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Good-Numbers-easy-version"><a href="#Good-Numbers-easy-version" class="headerlink" title="Good Numbers (easy version)"></a>Good Numbers (easy version)</h3><h4 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h4><p>我们发现在$3^i&lt;=10000$的情况下$i$最大只到$10$,所以我们可以$2^{log_3n}$的时间复杂度枚举一下所有的$good$数,每次询问时$check$一下即可.</p><h4 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,idx;</span><br><span class="line"><span class="keyword">int</span> num[<span class="number">10004</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">ksm</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> res=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(y)&#123;</span><br><span class="line"><span class="keyword">if</span>(y&amp;<span class="number">1</span>)</span><br><span class="line">res*=x;</span><br><span class="line">x=x*x;</span><br><span class="line">y&gt;&gt;=<span class="number">1</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">( <span class="keyword">void</span> )</span> </span>&#123;</span><br><span class="line">ios :: sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="number">0</span>),<span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=(<span class="number">1</span>&lt;&lt;<span class="number">10</span>)<span class="number">-1</span>;i++)&#123;</span><br><span class="line"><span class="keyword">int</span> now=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=<span class="number">10</span>;j++)</span><br><span class="line"><span class="keyword">if</span>(i&amp;(<span class="number">1</span>&lt;&lt;j))</span><br><span class="line">now=now+ksm(<span class="number">3</span>,j);</span><br><span class="line">num[++idx]=now;</span><br><span class="line">&#125; </span><br><span class="line">sort(num+<span class="number">1</span>,num+<span class="number">1</span>+idx);</span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;T;</span><br><span class="line"><span class="keyword">while</span>(T--)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=idx;i++)</span><br><span class="line"><span class="keyword">if</span>(num[i]&gt;=n)&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;num[i]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Good-Numbers-hard-version"><a href="#Good-Numbers-hard-version" class="headerlink" title="Good Numbers (hard version)"></a>Good Numbers (hard version)</h3><h4 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h4><p>考虑$C1$中的思路发现这样枚举的话太费事了.所以我们可以先找到一个小于$n$的$good$数,而这个数显然可以贪心的在$O(log_3n)$的复杂度内求出来.然后我们考虑怎么让这个数字增加.<br>我们用二进制表示每个$3^i$是否被加入到这个数字里,那么我们可以发现我们要做的就是找到一个二进制下最左边的右边是$0$的$1$,把$0$变成$1$,然后把前边的$1$都变成$0$然后统计新的数字是什么即可.</p><h4 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">bool</span> used[<span class="number">42</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">ksm</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> res=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(y)&#123;</span><br><span class="line"><span class="keyword">if</span>(y&amp;<span class="number">1</span>)</span><br><span class="line">res*=x;</span><br><span class="line">x=x*x;</span><br><span class="line">y&gt;&gt;=<span class="number">1</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span> <span class="params">( <span class="keyword">void</span> )</span> </span>&#123;</span><br><span class="line">ios :: sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="number">0</span>),<span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;T;</span><br><span class="line"><span class="keyword">while</span>(T--)&#123;</span><br><span class="line"><span class="built_in">memset</span>(used,<span class="number">0</span>,<span class="keyword">sizeof</span>(used));</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line"><span class="keyword">int</span> tmp=n,res=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> MAX=<span class="number">40</span>,MAXX=<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">while</span>(tmp)&#123;</span><br><span class="line"><span class="keyword">int</span> sign=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(MAX&lt;=<span class="number">0</span>)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;MAX;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(ksm(<span class="number">3</span>,i)&gt;tmp)&#123;</span><br><span class="line">MAXX=max(MAXX,i);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125; </span><br><span class="line">sign=i;</span><br><span class="line">&#125;</span><br><span class="line">used[sign]=<span class="number">1</span>;</span><br><span class="line">tmp-=ksm(<span class="number">3</span>,sign);</span><br><span class="line">res+=ksm(<span class="number">3</span>,sign);</span><br><span class="line">MAX=sign;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(res==n)</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;res&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">int</span> sign; </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">40</span>;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line"><span class="keyword">if</span>(used[i])&#123;</span><br><span class="line">sign=i;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> css=<span class="number">0</span>; </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=sign;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(used[i]==<span class="number">1</span>&amp;&amp;used[i+<span class="number">1</span>]==<span class="number">0</span>)&#123;</span><br><span class="line">css = ksm ( <span class="number">3</span> , i + <span class="number">1</span> );</span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">int</span> j = i + <span class="number">2</span> ; j &lt;= sign ; j++ ) </span><br><span class="line"><span class="keyword">if</span> ( used[j] ) </span><br><span class="line">css = css + ksm ( <span class="number">3</span> , j ); </span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt;css &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Too-Many-Segments-easy-version"><a href="#Too-Many-Segments-easy-version" class="headerlink" title="Too Many Segments (easy version)"></a>Too Many Segments (easy version)</h3><h4 id="思路-4"><a href="#思路-4" class="headerlink" title="思路"></a>思路</h4><p>发现我们只需要每次找到一个被覆盖次数大于$k$的点,然后寻找一下覆盖了这个点的区间中右端点最靠右的贪心的删去即可.<br>时间复杂度$O(n^2)$.</p><h4 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">205</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n , k;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Sen</span> &#123;</span> <span class="keyword">int</span> l,r,id; &#125; se[N];</span><br><span class="line"><span class="keyword">bool</span> use[N];</span><br><span class="line"><span class="keyword">int</span> num[N];</span><br><span class="line"><span class="keyword">int</span> opt[N] , ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">( <span class="keyword">void</span> )</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">ios :: sync_with_stdio ( <span class="literal">false</span> );</span><br><span class="line"><span class="built_in">cin</span>.tie ( <span class="number">0</span> ) , <span class="built_in">cout</span>.tie ( <span class="number">0</span> );</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; k;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> MinLim = <span class="number">2147483647</span> , MaxLim = <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= n ; i++ ) &#123; </span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; se[i].l &gt;&gt; se[i].r; </span><br><span class="line">se[i].id = i; </span><br><span class="line">MinLim = min ( MinLim , se[i].l ) , MaxLim = max ( MaxLim , se[i].r );&#125;</span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= n ; i++ ) </span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">int</span> j = se[i].l ; j &lt;= se[i].r ;j++ ) </span><br><span class="line">num[j]++;</span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">int</span> i = MinLim ; i &lt;= MaxLim ; i++ ) &#123;</span><br><span class="line"><span class="keyword">while</span> ( num[i] &gt; k ) &#123;</span><br><span class="line"><span class="keyword">int</span> MaxDisTanceR = <span class="number">-1</span> , MaxDisTanceSign = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">int</span> j = <span class="number">1</span> ; j &lt;= n ; j++ ) </span><br><span class="line"><span class="keyword">if</span> ( se[j].l &lt;= i &amp;&amp; se[j].r &gt;= i &amp;&amp; !use[j] ) </span><br><span class="line"><span class="keyword">if</span> ( MaxDisTanceR &lt; se[j].r ) &#123;</span><br><span class="line">MaxDisTanceR = se[j].r , MaxDisTanceSign = j;&#125;</span><br><span class="line">use[MaxDisTanceSign] = <span class="number">1</span>;</span><br><span class="line">opt[++ans] = MaxDisTanceSign;</span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">int</span> j = se[MaxDisTanceSign].l ; j &lt;= se[MaxDisTanceSign].r ; j++ ) </span><br><span class="line">num[j]--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= ans ; i++ ) </span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; opt[i] &lt;&lt; <span class="string">" "</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Too-Many-Segments-hard-version"><a href="#Too-Many-Segments-hard-version" class="headerlink" title="Too Many Segments (hard version)"></a>Too Many Segments (hard version)</h3><h4 id="思路-5"><a href="#思路-5" class="headerlink" title="思路"></a>思路</h4><p>我们发现按照右端点排序之后,对于每个区间,如果它即将要覆盖的这个区间的最大值小于$k$的话,那么直接覆盖是没有问题的.<br>否则考虑对后面的贡献的话,如果这个区间之前的区间不选择的话,那么前边的区间不选一定比不选现在的这个区间更劣.(因为删除排序后前边的节点对后面的贡献更小).<br>所以我们需要一个可以维护区间$MAX$和区间加的数据结构维护即可.(线段树).</p><h4 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a>代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN=<span class="number">2e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n,k;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> x,y;</span><br><span class="line"><span class="keyword">int</span> id;</span><br><span class="line">&#125;sg[MAXN];</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span> &lt;(node a,node b)&#123;</span><br><span class="line"><span class="keyword">return</span> a.y&lt;b.y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lc k&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rc k&lt;&lt;1|1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ls lc,l,mid</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rs rc,mid+1,r</span></span><br><span class="line"><span class="keyword">int</span> mx[MAXN&lt;&lt;<span class="number">2</span>],tag[MAXN&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> k,<span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">mx[k]+=v;</span><br><span class="line">tag[k]+=v;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">mx[k]=max(mx[lc],mx[rc]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushdwn</span><span class="params">(<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">add(lc,tag[k]);</span><br><span class="line">add(rc,tag[k]);</span><br><span class="line">tag[k]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Query</span><span class="params">(<span class="keyword">int</span> k,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> qx,<span class="keyword">int</span> qy)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(qx&lt;=l&amp;&amp;r&lt;=qy) <span class="keyword">return</span> mx[k];</span><br><span class="line">pushdwn(k);</span><br><span class="line"><span class="keyword">int</span> mid=l+r&gt;&gt;<span class="number">1</span>,res=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(qx&lt;=mid) res=max(res,Query(ls,qx,qy));</span><br><span class="line"><span class="keyword">if</span>(mid&lt;qy) res=max(res,Query(rs,qx,qy));</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Modify</span><span class="params">(<span class="keyword">int</span> k,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> qx,<span class="keyword">int</span> qy)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(qx&lt;=l&amp;&amp;r&lt;=qy) <span class="keyword">return</span> add(k,<span class="number">1</span>);</span><br><span class="line">pushdwn(k);</span><br><span class="line"><span class="keyword">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(qx&lt;=mid) Modify(ls,qx,qy);</span><br><span class="line"><span class="keyword">if</span>(mid&lt;qy) Modify(rs,qx,qy);</span><br><span class="line">pushup(k);</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> m;</span><br><span class="line"><span class="keyword">bool</span> vis[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;k);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;sg[i].x,&amp;sg[i].y),sg[i].id=i;</span><br><span class="line">sort(sg+<span class="number">1</span>,sg+n+<span class="number">1</span>);</span><br><span class="line">m=n;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line"><span class="keyword">if</span>(Query(<span class="number">1</span>,<span class="number">1</span>,<span class="number">2e5</span>,sg[i].x,sg[i].y)&lt;k)</span><br><span class="line">Modify(<span class="number">1</span>,<span class="number">1</span>,<span class="number">2e5</span>,sg[i].x,sg[i].y),m--,vis[i]=<span class="number">1</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,m);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line"><span class="keyword">if</span>(!vis[i]) <span class="built_in">printf</span>(<span class="string">"%d "</span>,sg[i].id);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="By-Elevator-or-Stairs"><a href="#By-Elevator-or-Stairs" class="headerlink" title="By Elevator or Stairs?"></a>By Elevator or Stairs?</h3><h4 id="思路-6"><a href="#思路-6" class="headerlink" title="思路"></a>思路</h4><p>可以发现在每一层时,你是在电梯上还是在楼梯上是影响继续向后转移的,所以我们可以开$f_{i,j}$表示现在位于第$i$层,在/不在楼梯上时最小的时间花费.<br>然后转移的话考虑是从上一层走楼梯来还是走电梯来即可.</p><h4 id="代码-6"><a href="#代码-6" class="headerlink" title="代码"></a>代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">2e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> n,c;</span><br><span class="line"><span class="keyword">int</span> A[N],B[N],f[N][<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="number">0</span>),<span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; c;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; A[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; B[i];</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="number">0</span> &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">    <span class="built_in">memset</span>(f,<span class="number">0x3f3f3f3f</span>,<span class="keyword">sizeof</span>(f));</span><br><span class="line">    f[<span class="number">1</span>][<span class="number">1</span>] = c;</span><br><span class="line">    f[<span class="number">1</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        f[i][<span class="number">0</span>] = min(f[i<span class="number">-1</span>][<span class="number">0</span>]+A[i], f[i<span class="number">-1</span>][<span class="number">1</span>]+A[i]);</span><br><span class="line">        f[i][<span class="number">1</span>] = min(f[i<span class="number">-1</span>][<span class="number">0</span>]+B[i]+c, f[i<span class="number">-1</span>][<span class="number">1</span>]+B[i]);</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; min(f[i][<span class="number">0</span>], f[i][<span class="number">1</span>]) &lt;&lt; <span class="string">" "</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Maximum-Weight-Subset"><a href="#Maximum-Weight-Subset" class="headerlink" title="Maximum Weight Subset"></a>Maximum Weight Subset</h3><h4 id="思路-7"><a href="#思路-7" class="headerlink" title="思路"></a>思路</h4><p>update:(官方题解.我反正还没懂)😂我们设$f_{i,j}$表示现在是以$i$为根的节点,选中的点最浅深度是$j$时划分出子集的最大权值.<br>初始化时显然$f_{i,0}=a_i$.显然这个是刚开始时没有子树的情况,然后我们一颗颗的添加子树.<br>考虑怎么转移:因为我们一定是从底向上转移的,所以我们对于每个子树的根节点$i$,枚举一下这个点是继承的哪一颗子树的$f$,同时我们还要考虑其他子树对答案的贡献值,显然,距离可以直接进行转移).<br>总的方程为:$f_{v,dep}=max(f_{v,dep},(dep==0?a_v:f_{v,dep-1})+\sum_{son_v}f_{son,max(dep-1,k-dep-1)})$.<br>最终答案即为$f_{0,0}$</p><h4 id="代码-7"><a href="#代码-7" class="headerlink" title="代码"></a>代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">210</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> n, k;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; g, dp;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> v, <span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">dp[v][<span class="number">0</span>] = a[v];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> to : g[v]) </span><br><span class="line"><span class="keyword">if</span> (to != p) \</span><br><span class="line">    dfs(to, v);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> dep = <span class="number">0</span>; dep &lt; N; ++dep) &#123;</span><br><span class="line"><span class="keyword">if</span> (dep == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> to : g[v]) &#123;</span><br><span class="line"><span class="keyword">if</span> (to == p)</span><br><span class="line">    <span class="keyword">continue</span>;</span><br><span class="line">dp[v][dep] += dp[to][max(<span class="number">0</span>, k - dep - <span class="number">1</span>)];</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> to : g[v]) &#123;</span><br><span class="line"><span class="keyword">if</span> (to == p) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">int</span> cur = dp[to][dep - <span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> other : g[v]) &#123;</span><br><span class="line"><span class="keyword">if</span> (other == p || other == to)</span><br><span class="line">    <span class="keyword">continue</span>;</span><br><span class="line">cur += dp[other][max(dep - <span class="number">1</span>, k - dep - <span class="number">1</span>)];</span><br><span class="line">&#125;</span><br><span class="line">dp[v][dep] = max(dp[v][dep], cur);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> dep = N - <span class="number">1</span>; dep &gt; <span class="number">0</span>; --dep) </span><br><span class="line">dp[v][dep - <span class="number">1</span>] = max(dp[v][dep - <span class="number">1</span>], dp[v][dep]);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; k;</span><br><span class="line">++k;</span><br><span class="line">a = <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(n);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">&#125;</span><br><span class="line">g = <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;(n);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> x, y;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; x &gt;&gt; y;</span><br><span class="line">--x, --y;</span><br><span class="line">g[x].push_back(y);</span><br><span class="line">g[y].push_back(x);</span><br><span class="line">&#125;</span><br><span class="line">dp = <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;(n, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(N));</span><br><span class="line">dfs(<span class="number">0</span>, <span class="number">-1</span>);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; dp[<span class="number">0</span>][<span class="number">0</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote class="blockquote-center">因为知道了自己是多么的菜,所以才要更加努力去追求那个永远也不可能实现的梦想</blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;降智题真的可以为所欲为.&lt;br&gt;
    
    </summary>
    
    
      <category term="OI" scheme="http://krrrr.xyz/%E5%88%86%E7%B1%BB/OI/"/>
    
    
      <category term="CodeForces题解" scheme="http://krrrr.xyz/%E6%A0%87%E7%AD%BE/CodeForces%E9%A2%98%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>提高失联测D7</title>
    <link href="http://krrrr.xyz/2019/10/21/%E6%8F%90%E9%AB%98%E5%A4%B1%E8%81%94%E6%B5%8BD7/"/>
    <id>http://krrrr.xyz/2019/10/21/提高失联测D7/</id>
    <published>2019-10-21T13:38:39.000Z</published>
    <updated>2019-10-22T07:52:24.038Z</updated>
    
    <content type="html"><![CDATA[<p>版权原因,题面不公开.<br><a id="more"></a></p><h3 id="dls的生日礼物"><a href="#dls的生日礼物" class="headerlink" title="dls的生日礼物"></a>dls的生日礼物</h3><p>还是首先考虑无解的话会是什么情况,无解的话,一定是某一段长度大于$1$的区间被覆盖了两次以上,这个显然可以离散化来统计.<br>然后我们再来想有解的情况,我们考虑,这道题让你把原来的区间分成两个集合,而相交的区间必须颜色不同.所以我们考虑到二分图模型.<br>如果两个区间相交的话,那么这两个区间是要有边相连的.而因为我们已经排除了无解的情况,所以有解的情况一定会是一张二分图.即所有的连通块都是二分图.<br>但是我们发现,如果暴力枚举区间连边的话是$O(n^2)$的,需要考虑怎么优化.<br>我们又发现在某个连通块中,因为连通块中的点都是区间看成的点,所以一个连通块也就代表了一个区间,我们只需要考虑一下互不相交的连通块的个数$x$然后答案就是$2^x$.</p><h3 id="dls的生日宴会"><a href="#dls的生日宴会" class="headerlink" title="dls的生日宴会"></a>dls的生日宴会</h3><p>首先我们发现,如果我们按照$k=\frac{n}{2} , \frac{n}{4} , \frac{n}{8}$不断选取$k$的值的话,那么轮数为$logn$轮,即轮数最多为$logn$(向上取整)轮.<br>我们假设我们一共操作了$m$轮,第$i$轮我们选择的$k$的值为$k_i$,那么如果满足能找到$dls$的话,需要满足</p><script type="math/tex; mode=display">m<=\Pi_{i=1}^m k_i</script><p>所以我们就需要找到一组满足这个条件的$k_i$并且最小化$\sum_{i=1}^mk_i$.<br>然后我们可以枚举$m$,同时考虑枚举$\sum_{i=1}^mk_i$,显然$\sum_{i=1}^mk_i$越大,$\Pi_{i=1}^mk_i$越大.所以可以考虑二分$\sum_{i=1}^mk_i$.<br>然后我们的问题就只有怎么$check$一组$k_i$是不是合法.我们发现,如果在确定的$\sum_{i=1}^mk_i$中,要使得$\Pi_{i=1}^mk_i$最大,那么由<strong>均值不等式</strong>显然有任意$i,j|k_i-k_j|&lt;=1$.<br>即对于一组确定的$\sum$,只有唯一的一个$\Pi$与之对应,然后直接统计答案即可.</p><h3 id="dls的生日派对"><a href="#dls的生日派对" class="headerlink" title="dls的生日派对"></a>dls的生日派对</h3><p><img src="https://krrrr.xyz/PicBed/201910221.png" alt="qwq"></p><p><del>众所周知超哥线段树是NOIP考点</del></p><blockquote class="blockquote-center">因为知道了自己是多么的菜,所以才要更加努力去追求那个永远也不可能实现的梦想</blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;版权原因,题面不公开.&lt;br&gt;
    
    </summary>
    
    
      <category term="OI" scheme="http://krrrr.xyz/%E5%88%86%E7%B1%BB/OI/"/>
    
    
      <category term="ZROI" scheme="http://krrrr.xyz/%E6%A0%87%E7%AD%BE/ZROI/"/>
    
  </entry>
  
  <entry>
    <title>Codeforces Global Round 5题解</title>
    <link href="http://krrrr.xyz/2019/10/21/GrobalRound5/"/>
    <id>http://krrrr.xyz/2019/10/21/GrobalRound5/</id>
    <published>2019-10-21T11:39:59.000Z</published>
    <updated>2019-10-21T11:46:30.122Z</updated>
    
    <content type="html"><![CDATA[<p>传说中集齐了五颗无限宝石的$tourist$一个响指能让所有人的$rating$消失一半<br><a id="more"></a></p><h3 id="Balanced-Rating-Changes"><a href="#Balanced-Rating-Changes" class="headerlink" title="Balanced Rating Changes"></a>Balanced Rating Changes</h3><p>发现在答案一定存在的情况下,对于每个偶数,一定是直接把$i$变成$\frac{i}{2}$.我们要考虑的就只有奇数的情况.<br>显然,对于每个正数奇数和每个负数奇数,他们分别向上取整和向下取整的次数应该是一样多的.<br>所以我们不如<strong>钦定</strong>刚开始无论正的奇数向下取整,负的奇数向上取整,然后扫一遍$check$即可.<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> change;</span><br><span class="line"><span class="keyword">int</span> num[<span class="number">20000</span>],ans[<span class="number">20000</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=T;i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;num[i]);</span><br><span class="line">ans[i]=num[i]/<span class="number">2</span>;</span><br><span class="line">change+=ans[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(change==<span class="number">0</span>)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=T;i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans[i]);</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(change&gt;<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=T&amp;&amp;change!=<span class="number">0</span>;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(num[i]&lt;<span class="number">0</span>&amp;&amp;num[i]%<span class="number">2</span>==<span class="number">-1</span>)&#123;</span><br><span class="line">change--;</span><br><span class="line">ans[i]--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=T&amp;&amp;change!=<span class="number">0</span>;i++)</span><br><span class="line"><span class="keyword">if</span>(num[i]%<span class="number">2</span>==<span class="number">1</span>&amp;&amp;num[i]&gt;<span class="number">0</span>)&#123;</span><br><span class="line">ans[i]++;</span><br><span class="line">change++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=T;i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans[i]);</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="Balanced-Tunnel"><a href="#Balanced-Tunnel" class="headerlink" title="Balanced Tunnel"></a>Balanced Tunnel</h3><p>考虑如果有一辆车在进入隧道行使的过程中没有被其他车超车的话,那么本来在它前边的车出去之后应该还在它前边(废话).<br>考虑怎么判断这个东西,我们对于初始位置的车辆,我们记录一个$id_i$,即初始在$i$这个位置的车辆,它的$id$为$i$.<br>然后我们发现在$id$这个东西,如果有一辆车$j$在车$i$的前方,那么$id_j$一定大于$id_i$.而如果本来有一辆车在它后边超过了它,那么在新的车辆中一定有一个$max(id_{i+1}…id_{n})&gt;id_i$(注意这里的标号为重排之后的标号.)<br>那么我们只需要记录一个重排之后的车的$id$的后缀最大值,然后对于每辆车$i$,我们$check$一下前缀最大值是不是有比它小的从而可以不重不漏的$check$它有没有超车,然后统计答案即可.<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> pos[N],fin[N];</span><br><span class="line"><span class="keyword">int</span> mins[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(mins,<span class="number">0x3f</span>,<span class="keyword">sizeof</span>(mins));</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="number">0</span>),<span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">int</span> x;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;x;</span><br><span class="line">pos[x]=i;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">int</span> x;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;x;</span><br><span class="line">fin[i]=pos[x];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=n;i&gt;=<span class="number">1</span>;i--)</span><br><span class="line">mins[i]=min(mins[i+<span class="number">1</span>],fin[i]);</span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)</span><br><span class="line"><span class="keyword">if</span>(mins[i+<span class="number">1</span>]&lt;fin[i])</span><br><span class="line">ans++;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="Balanced-Removals-Easier"><a href="#Balanced-Removals-Easier" class="headerlink" title="Balanced Removals (Easier)"></a>Balanced Removals (Easier)</h3><p>发现我们需要一个$O(n^2)$的算法.<br>我们发现对于某个点$i$,那么距离它最近的点一定是最优的(因为中间不可能有其他的点).<br>所以我们只需要对于每个点枚举一下目前没有用过的点中距离它最近的点即可.<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">2005</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> x,y,z;</span><br><span class="line">&#125; node[N];</span><br><span class="line"><span class="keyword">bool</span> rem[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">abs</span>(node[x].x-node[y].x)+<span class="built_in">abs</span>(node[x].y-node[y].y)+<span class="built_in">abs</span>(node[x].z-node[y].z);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="number">0</span>),<span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;node[i].x&gt;&gt;node[i].y&gt;&gt;node[i].z;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(rem[i])</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">int</span> mins=<span class="number">1e16</span>,sign;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(rem[j])</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">int</span> val=calc(i,j);</span><br><span class="line"><span class="keyword">if</span>(val&lt;mins)&#123;</span><br><span class="line">mins=val;</span><br><span class="line">sign=j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;i&lt;&lt;<span class="string">" "</span>&lt;&lt;sign&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">rem[i]=<span class="number">1</span>;</span><br><span class="line">rem[sign]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="Balanced-Removals-Harder"><a href="#Balanced-Removals-Harder" class="headerlink" title="Balanced Removals (Harder)"></a>Balanced Removals (Harder)</h3><p>发现我们需要一个$O(nlogn)$的算法.<br>而直接优化$Eazy$难度的算法貌似不怎么可能,所以我们考虑换方法.<br>我们首先想怎么降维,我们对于$x$和$y$相等的先用贪心取最短的处理的话,那么发现$z$这一维就没啥用了.<br>那么这个问题就转化成了二维的问题,然后我们再对于所有$x$相等的重复贪心取最短处理,这样的话我们只需要排两次序即可.</p><blockquote class="blockquote-center">因为知道了自己是多么的菜,所以才要更加努力去追求那个永远也不可能实现的梦想</blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;传说中集齐了五颗无限宝石的$tourist$一个响指能让所有人的$rating$消失一半&lt;br&gt;
    
    </summary>
    
    
      <category term="OI" scheme="http://krrrr.xyz/%E5%88%86%E7%B1%BB/OI/"/>
    
    
      <category term="Codeforces题解" scheme="http://krrrr.xyz/%E6%A0%87%E7%AD%BE/Codeforces%E9%A2%98%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>柯学上网教程</title>
    <link href="http://krrrr.xyz/2019/10/21/%E6%9F%AF%E5%AD%A6%E4%B8%8A%E7%BD%91/"/>
    <id>http://krrrr.xyz/2019/10/21/柯学上网/</id>
    <published>2019-10-21T11:39:58.000Z</published>
    <updated>2019-10-21T11:56:00.426Z</updated>
    
    <content type="html"><![CDATA[<p>感觉我人要没.jpg<br><a id="more"></a></p><p>“欸,你为啥能上Google啊?”<br>这都$9102$年了,如果你还说你是用的某虚拟专线网络的话那你就8太彳亍了.毕竟…国外用着靠谱的那些东西,他们的价格是这样的:<br><img src="https://i.loli.net/2019/10/21/QJrzbOw7FqekI3W.png" alt="1.png"><br>这样的<br><img src="https://i.loli.net/2019/10/21/csiBdQSlMRnzpv2.png" alt="2.png"><br>还有这样的<br><img src="https://i.loli.net/2019/10/21/fc2dIkOyEeoHTNp.png" alt="3.png"> </p><p>emmmmm…如果你家里有矿的话你现在可以不要往下阅读了.</p><p>显然对于一般的家里没矿的普通人来说,这东西的价格显然不现实对趴.<br>所以怎么办呢?</p><p><del>没钱,没办法,没钱你想什么柯学上网</del><br>其实百度也挺好用的,不要想着用$Google$了,好好的做一个社会主义好青年趴(doge).</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;感觉我人要没.jpg&lt;br&gt;
    
    </summary>
    
    
      <category term="吹水" scheme="http://krrrr.xyz/%E5%88%86%E7%B1%BB/%E5%90%B9%E6%B0%B4/"/>
    
    
      <category term="柯学上网" scheme="http://krrrr.xyz/%E6%A0%87%E7%AD%BE/%E6%9F%AF%E5%AD%A6%E4%B8%8A%E7%BD%91/"/>
    
  </entry>
  
  <entry>
    <title>四大图床稳定性测试</title>
    <link href="http://krrrr.xyz/2019/10/21/%E5%9B%9B%E5%A4%A7%E5%9B%BE%E5%BA%8A%E7%A8%B3%E5%AE%9A%E6%80%A7%E6%B5%8B%E8%AF%95x/"/>
    <id>http://krrrr.xyz/2019/10/21/四大图床稳定性测试x/</id>
    <published>2019-10-21T10:29:18.000Z</published>
    <updated>2019-10-23T03:01:03.866Z</updated>
    
    <content type="html"><![CDATA[<p>众所周知的360,新浪,百度,搜狗图床,到底谁最<del>容易挂</del>稳定呢<br><a id="more"></a></p><p>统一上传一张图,看看哪一个图床最后挂掉(我感觉退役之前是挂不完了)</p><h1 id="新浪图床"><a href="#新浪图床" class="headerlink" title="新浪图床:"></a>新浪图床:</h1><p><img src="http://ww1.sinaimg.cn/large/007TTSK9ly1g8606pxryij31hc0u0hdt.jpg" alt="qwq.jpg"></p><h1 id="搜狗图床"><a href="#搜狗图床" class="headerlink" title="搜狗图床:"></a>搜狗图床:</h1><p>update: 2019-10-23,它404了(新浪图床获胜).<br><img src="https://i.loli.net/2019/10/23/sHXxU5aKmCzjeL9.png" alt="1.png"></p><h1 id="百度图床"><a href="#百度图床" class="headerlink" title="百度图床:"></a>百度图床:</h1><p><img src="https://i.loli.net/2019/10/21/EdSw1p6JBGi5jHF.png" alt="1.png"><br>打假赛的百度图床选手提前倒下(doge)</p><h1 id="360图床"><a href="#360图床" class="headerlink" title="360图床:"></a>360图床:</h1><p><img src="https://i.loli.net/2019/10/21/EdSw1p6JBGi5jHF.png" alt="1.png"><br>打假赛的360图床选手提前倒下(doge)</p><p><del>感觉竞争并不会太激烈.jpg</del>啥玩意有竞争吗?</p><h1 id="我自己的github图床"><a href="#我自己的github图床" class="headerlink" title="我自己的github图床:"></a>我自己的github图床:</h1><p><img src="https://github.com/wqyzstql/PicBed/blob/master/201910213.jpg?raw=true" alt="kd"></p><p>做个对比吧<del>万一github没了就尴尬了</del></p><h1 id="update"><a href="#update" class="headerlink" title="update:"></a>update:</h1><p>总结一下,因为百度图床和360图床直接上传失败,所以只有搜狗和新浪图床的竞争.搜狗图床只存活了两天….所以要是想要存图的话….<del>还是用github的图床吧</del></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;众所周知的360,新浪,百度,搜狗图床,到底谁最&lt;del&gt;容易挂&lt;/del&gt;稳定呢&lt;br&gt;
    
    </summary>
    
    
      <category term="吹水" scheme="http://krrrr.xyz/%E5%88%86%E7%B1%BB/%E5%90%B9%E6%B0%B4/"/>
    
    
      <category term="无聊" scheme="http://krrrr.xyz/%E6%A0%87%E7%AD%BE/%E6%97%A0%E8%81%8A/"/>
    
  </entry>
  
  <entry>
    <title>普转提D5题解</title>
    <link href="http://krrrr.xyz/2019/10/20/%E6%99%AE%E8%BD%AC%E6%8F%90D5%E9%A2%98%E8%A7%A3/"/>
    <id>http://krrrr.xyz/2019/10/20/普转提D5题解/</id>
    <published>2019-10-20T06:23:30.000Z</published>
    <updated>2019-10-21T08:51:33.225Z</updated>
    
    <content type="html"><![CDATA[<p>版权原因,题面不公开<br><a id="more"></a></p><h3 id="Zbox-loves-keyboard"><a href="#Zbox-loves-keyboard" class="headerlink" title="Zbox loves keyboard"></a>Zbox loves keyboard</h3><p>首先考虑直接递推,但是由于$Backspace$操作的存在,使得出现了后效性,所以貌似无法直接递推.<br>然后我们考虑一下先不考虑$Backspace$怎么做.我们引入图论模型,把$[1,10^6]$中的每个值都看做一个点.<br>然后我们考虑前几个操作,那么  </p><ol><li>对于每个点$x$,由$x$向$x+1$连接一条边.</li><li>对于每个点$x$,我们从小到大枚举$k$使得从$x$到$x \times k &lt;= n$连接一条边.</li></ol><p>然后我们只需要从$x$向$n$跑一遍最短路即可(目测会卡某死掉的算法).<br>然后我们再来考虑一下有$Backspace$怎么做.我们发现,如果我们从某个点$i$超级加倍到了$2 \times i$,而$2 \times i$比$n$大好多好多,那么我们在一个一个$Backspace$的时候一定会遇到一个$j (n&lt;j&lt;i)$可以从$x$转移到.<br>所以我们<del>瞎猜</del>看题解看出来了$Backspace$操作的上界$100$,然后我们对于每个$i$,都向$[max(1,i-100),i-1]$的区间的点连边就好了.</p><p>这样的话我们计算一下时间复杂度发现边的数量为调和级数为$nInn$的复杂度,而我们跑一遍$Heap$_$Dijkstra$是$O(nlog_2m)$的.所以总复杂度为$O(n{log^2_2n})$.<br>注意到$n$其实挺大的,所以需要卡卡常数(比如用斐波那契堆跑$Heap$_$Dijkstra$什么的)</p><h3 id="Zbox-loves-graph"><a href="#Zbox-loves-graph" class="headerlink" title="Zbox loves graph"></a>Zbox loves graph</h3><p>这道题正解好像真的是暴力(<br>首先发现如果我们缩点缩出来一个$DAG$之后,对于每一个强连通分量我们可以开一个$bitset$来统计.<br>但是如果强连通分量很多的话不行?<br>发现一个题目中给定的一个重要的条件:<br><img src="https://krrrr.xyz/PicBed/201910211.png" alt="random"><br>因为这是一张随机图,所以强连通分量的个数一定不会太多,而且<strong>弱联通分量</strong>也不会太多.<br>既然是暴力,那么我们考虑一下怎么卡常.<br>首先$bitset$的常数小的一批.但是貌似直接做还是有点困难.<br>我们考虑把所有的弱联通分量分别拿出来对里边的点进行重标号之后再分别做出来,然后直接对$bitset$进行一次$or$操作这样可以省去很多时间.<br>剩下的….<del>不说了我继续去卡常了</del></p><h3 id="Zbox-loves-memory"><a href="#Zbox-loves-memory" class="headerlink" title="Zbox loves memory"></a>Zbox loves memory</h3><p><del>这个真的连正解是啥都不知道</del>块状链表套$tire$,嗯这很<strong>SCP</strong>.</p><h3 id="ISN"><a href="#ISN" class="headerlink" title="ISN"></a>ISN</h3><p>这道题听说树状数组优化下$DP$就过了,咱也不敢问.<br><img src="https://krrrr.xyz/PicBed/201910212.png" alt="solution"></p><blockquote class="blockquote-center">因为知道了自己是多么的菜,所以才要更加努力去追求那个永远也不可能实现的梦想</blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;版权原因,题面不公开&lt;br&gt;
    
    </summary>
    
    
      <category term="OI" scheme="http://krrrr.xyz/%E5%88%86%E7%B1%BB/OI/"/>
    
    
      <category term="ZROI" scheme="http://krrrr.xyz/%E6%A0%87%E7%AD%BE/ZROI/"/>
    
  </entry>
  
  <entry>
    <title>取石子(概率期望)</title>
    <link href="http://krrrr.xyz/2019/10/16/%E6%A6%82%E7%8E%87%E6%9C%9F%E6%9C%9B%E5%85%A5%E9%97%A8%E5%8F%96%E7%9F%B3%E5%AD%90/"/>
    <id>http://krrrr.xyz/2019/10/16/概率期望入门取石子/</id>
    <published>2019-10-16T06:13:35.000Z</published>
    <updated>2019-10-21T03:44:47.868Z</updated>
    
    <content type="html"><![CDATA[<p>我看我是完全不懂哦<br><a id="more"></a></p><p>题面:<br><img src="https://krrrr.xyz/PicBed/201910162.png" alt="title"><br>其中$1&lt;=n&lt;=10^5$,$1&lt;=a_i&lt;=10^9$</p><p>首先我们推广一下,概率具有可加性(也叫线性性).<br>用公式解释就是$E(XY)=E(X)+E(Y)$.<br>然后具体推广到这道题的话,我们设$E(t)$表示答案,那么$E(t)=[\sum_{i=2}^{n}P_i]+1$.其中$P_i$表示$i$这堆在$1$号堆之前被拿的期望.<br>然后假设我们每次在$1$号堆和$x$号堆之间选择一堆的话,那么选择$x$号堆还是选择$1$号堆之间的<strong>相对概率</strong>是不受其他堆石子影响的.<br>即$P_i=\frac{a_i}{a_i+a_1}$.<br>那么答案很显然就是$ans=[\sum_{i=2}^{n}\frac{a_i}{a_1+a_i}]+ 1$<br>时间复杂度为$O(n)$<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">double</span> a[N];</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="number">0</span>),<span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line"><span class="keyword">double</span> ans=<span class="number">1.0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)</span><br><span class="line">ans=ans+(a[i]/(a[<span class="number">1</span>]+a[i]));</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote class="blockquote-center">因为知道了自己是多么的菜,所以才要更加努力去追求那个永远也不可能实现的梦想</blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我看我是完全不懂哦&lt;br&gt;
    
    </summary>
    
    
      <category term="OI" scheme="http://krrrr.xyz/%E5%88%86%E7%B1%BB/OI/"/>
    
    
      <category term="概率期望" scheme="http://krrrr.xyz/%E6%A0%87%E7%AD%BE/%E6%A6%82%E7%8E%87%E6%9C%9F%E6%9C%9B/"/>
    
  </entry>
  
  <entry>
    <title>Karen And SpuerMarket题解</title>
    <link href="http://krrrr.xyz/2019/10/16/SuperMarket/"/>
    <id>http://krrrr.xyz/2019/10/16/SuperMarket/</id>
    <published>2019-10-16T01:54:48.000Z</published>
    <updated>2019-10-21T03:44:35.836Z</updated>
    
    <content type="html"><![CDATA[<p>九条可怜是个可爱的女孩子<br><a id="more"></a><br><img src="https://krrrr.xyz/PicBed/201910161.png" alt="bj"><br>首先发现,题目中的对于使用优惠劵的条件的约束,如果建一张图出来,那么很容易就可以发现满足这是一棵树.<br>所以我们考虑使用树形$DP$来解决问题.<br>我们设$f_{i,j,0/1}$来表示在以$i$为根节点的子树中,选择$j$个使用优惠卷,当前的这个选/不选择优惠卷时能得到的最小<strong>花费</strong>.<br>然后转移的时候枚举一下子树,因为体积都为$1$,所以可以根据经典的树上背包的优化把这道题优化到$O(n^2)$.<br>考虑一下怎么转移,显然,当我们当前到达的$i$这个节点使用优惠券的话,那么它可以从它的子树中使用或者不用优惠卷的状态转移过来,如果当前的这个节点不适用优惠券的话,那么它就只能从它子树的不使用优惠券的状态转移过来.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sz(x) ((int) (x).size())</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> forn(i,n) for (int i = 0; i &lt; int(n); ++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> all(x) (x).begin(), (x).end()</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> i64;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">double</span> ld;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="keyword">int</span>(<span class="number">1e9</span>) + <span class="keyword">int</span>(<span class="number">1e5</span>);</span><br><span class="line"><span class="keyword">const</span> ll infl = ll(<span class="number">2e18</span>) + ll(<span class="number">1e10</span>);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">5005</span>;</span><br><span class="line"><span class="keyword">int</span> B;</span><br><span class="line"><span class="keyword">int</span> c[maxn];</span><br><span class="line"><span class="keyword">int</span> d[maxn];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; g[maxn];</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> kc[maxn][maxn];</span><br><span class="line"><span class="keyword">int</span> kd[maxn][maxn];</span><br><span class="line"><span class="keyword">int</span> cnt[maxn];</span><br><span class="line"><span class="keyword">int</span> buf[<span class="number">2</span>][maxn];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> *a, <span class="keyword">int</span> *b, <span class="keyword">int</span> *to, <span class="keyword">int</span> c1, <span class="keyword">int</span> c2)</span> </span>&#123;</span><br><span class="line">    forn (i, c1 + c2 + <span class="number">1</span>)</span><br><span class="line">        to[i] = inf;</span><br><span class="line">    forn (i, c1 + <span class="number">1</span>)</span><br><span class="line">        forn (j, c2 + <span class="number">1</span>)</span><br><span class="line">            to[i + j] = min(to[i + j], a[i] + b[j]);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> v: g[u])</span><br><span class="line">        dfs(v);</span><br><span class="line">    <span class="keyword">int</span> q = <span class="number">0</span>;</span><br><span class="line">    forn (i, n + <span class="number">1</span>)</span><br><span class="line">        buf[q][i] = inf;</span><br><span class="line"> </span><br><span class="line">    cnt[u] = <span class="number">1</span>;</span><br><span class="line">    buf[q][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    buf[q][<span class="number">1</span>] = c[u];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> v: g[u]) &#123;</span><br><span class="line">        merge(buf[q], kc[v], buf[q ^ <span class="number">1</span>], cnt[u], cnt[v]);</span><br><span class="line">        q ^= <span class="number">1</span>;</span><br><span class="line">        cnt[u] += cnt[v];</span><br><span class="line">    &#125;</span><br><span class="line">    forn (i, n + <span class="number">1</span>)</span><br><span class="line">        kc[u][i] = buf[q][i];</span><br><span class="line"> </span><br><span class="line">    q = <span class="number">0</span>;</span><br><span class="line">    forn (i, n + <span class="number">1</span>)</span><br><span class="line">        buf[q][i] = inf;</span><br><span class="line">    cnt[u] = <span class="number">1</span>;</span><br><span class="line"> </span><br><span class="line">    buf[q][<span class="number">1</span>] = c[u] - d[u];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> v: g[u]) &#123;</span><br><span class="line">        merge(buf[q], kd[v], buf[q ^ <span class="number">1</span>], cnt[u], cnt[v]);</span><br><span class="line">        q ^= <span class="number">1</span>;</span><br><span class="line">        cnt[u] += cnt[v];</span><br><span class="line">    &#125;</span><br><span class="line">    forn (i, n + <span class="number">1</span>)</span><br><span class="line">        kd[u][i] = min(buf[q][i], kc[u][i]);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="number">0</span>),<span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; B;</span><br><span class="line">    forn (i, n) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; c[i] &gt;&gt; d[i];</span><br><span class="line">        <span class="keyword">if</span> (i) &#123;</span><br><span class="line">            <span class="keyword">int</span> x;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; x;</span><br><span class="line">            --x;</span><br><span class="line">            g[x].push_back(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">int</span> p = n;</span><br><span class="line">    <span class="keyword">while</span> (kd[<span class="number">0</span>][p] &gt; B)</span><br><span class="line">        --p;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; p &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote class="blockquote-center">因为知道了自己是多么的菜,所以才要更加努力去追求那个永远也不可能实现的梦想</blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;九条可怜是个可爱的女孩子&lt;br&gt;
    
    </summary>
    
    
      <category term="OI" scheme="http://krrrr.xyz/%E5%88%86%E7%B1%BB/OI/"/>
    
    
      <category term="DP" scheme="http://krrrr.xyz/%E6%A0%87%E7%AD%BE/DP/"/>
    
      <category term="树形DP" scheme="http://krrrr.xyz/%E6%A0%87%E7%AD%BE/%E6%A0%91%E5%BD%A2DP/"/>
    
      <category term="背包" scheme="http://krrrr.xyz/%E6%A0%87%E7%AD%BE/%E8%83%8C%E5%8C%85/"/>
    
  </entry>
  
  <entry>
    <title>CodeForces Round #592</title>
    <link href="http://krrrr.xyz/2019/10/15/Round-592/"/>
    <id>http://krrrr.xyz/2019/10/15/Round-592/</id>
    <published>2019-10-15T10:22:48.000Z</published>
    <updated>2019-10-21T03:46:12.524Z</updated>
    
    <content type="html"><![CDATA[<p>我好菜啊<br><a id="more"></a></p><h3 id="Pens-and-Pencils"><a href="#Pens-and-Pencils" class="headerlink" title="Pens and Pencils"></a>Pens and Pencils</h3><p>发现直接除一下,算出来分别需要多少铅笔和钢笔,最后看一下加起来是不是大于$k$即可.<br>注意一个细节,假如我们有$8$个工作需求,然后一支铅笔可以解决$3$个的话,那么我们需要$3$支铅笔.<br>所以我们不能直接算$a/x$,而是要算$(a+(x-1))/x$.<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;T;</span><br><span class="line"><span class="keyword">while</span>(T--)&#123;</span><br><span class="line"><span class="keyword">int</span> a,b,c,d,k;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b&gt;&gt;c&gt;&gt;d&gt;&gt;k;</span><br><span class="line"><span class="keyword">int</span> ll=(a+(c<span class="number">-1</span>))/c;</span><br><span class="line"><span class="keyword">int</span> rr=(b+(d<span class="number">-1</span>))/d;</span><br><span class="line"><span class="keyword">if</span>(ll+rr&gt;k)</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"-1"</span>);</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;ll&lt;&lt; <span class="string">" "</span>&lt;&lt;rr&lt;&lt;<span class="built_in">endl</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="Rooms-and-Staircases"><a href="#Rooms-and-Staircases" class="headerlink" title="Rooms and Staircases"></a>Rooms and Staircases</h3><p>首先考虑一下走楼梯对答案有什么好处.<br>如果不走楼梯的话,那么答案一定就是$n$.<br>我们设一个楼梯在房间$i$的位置,那么我们从$1$走到$i$时,如果选择从$i$这个点走下去的话.那么如果我们向右走,显然和直接不走楼梯没区别.<br>而且根据题目中的限定,我们向初始走的位置的反方向走的时候就一定不能再回来了,所以我们的决策就是在每个楼梯的地方,判断一下是继续走的答案更优秀,还是走回去的答案更优秀,取最大值即可.<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">string</span> s;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="number">0</span>),<span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; T;</span><br><span class="line"><span class="keyword">while</span> (T--)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n&gt;&gt;s;</span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line"><span class="keyword">if</span>(s[i]==<span class="string">'1'</span>)</span><br><span class="line">ans=max(ans,<span class="number">2</span>*(i+<span class="number">1</span>));</span><br><span class="line"><span class="keyword">int</span> now=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=n<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line"><span class="keyword">if</span>(s[i]==<span class="string">'1'</span>)</span><br><span class="line">ans=max(ans,<span class="number">2</span>*(now));</span><br><span class="line">now++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(ans==<span class="number">-1</span>)</span><br><span class="line">ans=n;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="The-Football-Season"><a href="#The-Football-Season" class="headerlink" title="The Football Season"></a>The Football Season</h3><p>现在不会x. </p><h3 id="Paint-the-Tree"><a href="#Paint-the-Tree" class="headerlink" title="Paint the Tree"></a>Paint the Tree</h3><p>首先考虑判断一下无解的情况,由于每相邻的三个点都不能同色,而我们只能把这些点染成三种颜色.<br>那么考虑某个节点$i$,如果和$i$直接相邻的点多于$2$个,那么无论如何都会有两个节点同色的.<br><img src="https://krrrr.xyz/PicBed/201910151.jpg" alt="pic1"><br>发现在上图(样例二)中,因为与节点$3$直接相邻的点为$3$个.所以这个情况是无解的.<br>所以发现有解的情况只有是链的情况.<br>而在一条链的情况下,如果我们确定了前两个节点的颜色的话,那么这条链的颜色也是一定可以被确定下来的.<br>又因为前两个点的颜色只有$3 \times 2=6$种情况,所以我们可以直接暴力统计答案即可.<br>时间复杂度为$O(6 \times n)$.<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n, tot, rt, len, ansx, ansy;</span><br><span class="line">ll f[N][<span class="number">5</span>][<span class="number">5</span>], ans;</span><br><span class="line"><span class="keyword">int</span> fr[N][<span class="number">5</span>][<span class="number">5</span>];</span><br><span class="line"><span class="keyword">int</span> c[<span class="number">5</span>][N];</span><br><span class="line"><span class="keyword">int</span> head[N], deg[N], sen[N], res[N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span> </span><br><span class="line"><span class="keyword">int</span> u;</span><br><span class="line"><span class="keyword">int</span> v;</span><br><span class="line"><span class="keyword">int</span> next;</span><br><span class="line">&#125; e[N &lt;&lt; <span class="number">1</span>];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">    e[++tot] = (Edge) &#123;u, v, head[u]&#125;;</span><br><span class="line">head[u] = tot;</span><br><span class="line">    e[++tot] = (Edge) &#123;v, u, head[v]&#125;;</span><br><span class="line">head[v] = tot;</span><br><span class="line">    <span class="keyword">return</span>; </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs1</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> fa)</span> </span>&#123;</span><br><span class="line">    sen[++len] = u;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i = head[u]; i; i = e[i].next) &#123;</span><br><span class="line">        <span class="keyword">int</span> v = e[i].v;</span><br><span class="line">        <span class="keyword">if</span>(v == fa) <span class="keyword">continue</span>;</span><br><span class="line">        dfs1(v, u);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>; </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="number">0</span>),<span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n;i++)</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=<span class="number">4</span>;j++)</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;=<span class="number">4</span>;k++)</span><br><span class="line">    f[i][j][k]=<span class="number">1e16</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">3</span>; i++) </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;c[i][j];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> u, v;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;u&gt;&gt;v;</span><br><span class="line">        deg[u]++;</span><br><span class="line">deg[v]++;</span><br><span class="line">        addedge(u, v);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) </span><br><span class="line"><span class="keyword">if</span>(deg[i] &gt;= <span class="number">3</span>) &#123; </span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"-1"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line"><span class="keyword">if</span>(deg[i] == <span class="number">1</span>) &#123;</span><br><span class="line">rt = i;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">    dfs1(rt, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">3</span>; i++) </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">3</span>; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i == j) <span class="keyword">continue</span>;</span><br><span class="line">            f[<span class="number">2</span>][i][j] = min(f[<span class="number">2</span>][i][j], (ll)c[i][sen[<span class="number">1</span>]] + c[j][sen[<span class="number">2</span>]]);</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">3</span>; i &lt;= n; i++) </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">3</span>; j++) </span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= <span class="number">3</span>; k++) </span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> t = <span class="number">1</span>; t &lt;= <span class="number">3</span>; t++) &#123;</span><br><span class="line">                    <span class="keyword">if</span>(j == k || j == t || k == t) <span class="keyword">continue</span>;</span><br><span class="line">                    <span class="keyword">if</span>(f[i][k][t] &gt; f[i - <span class="number">1</span>][j][k] + c[t][sen[i]]) &#123;</span><br><span class="line">                        f[i][k][t] = f[i - <span class="number">1</span>][j][k] + c[t][sen[i]];</span><br><span class="line">                        fr[i][k][t] = j;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;   </span><br><span class="line">    ans = f[<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">3</span>; i++)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">3</span>; j++) </span><br><span class="line">        <span class="keyword">if</span>(f[n][i][j] &lt; ans) &#123;</span><br><span class="line">            ans = f[n][i][j];</span><br><span class="line">            ansx = i; ansy = j;</span><br><span class="line">        &#125;</span><br><span class="line">    res[sen[n - <span class="number">1</span>]] = ansx; res[sen[n]] = ansy;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = n; i &gt;= <span class="number">3</span>; i--) &#123;</span><br><span class="line">        <span class="keyword">int</span> go = fr[i][ansx][ansy];</span><br><span class="line">        ansy = ansx;</span><br><span class="line">ansx = go;</span><br><span class="line">        res[sen[i - <span class="number">2</span>]] = go;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;res[i]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="Minimizing-Difference"><a href="#Minimizing-Difference" class="headerlink" title="Minimizing Difference"></a>Minimizing Difference</h3><p><del>这不是一眼题吗为什么要放到E上,放到C上不行吗</del><br>发现我们每次操作的话肯定是对最大值或者最小值进行操作.所以我们先把原来的数组排序.<br>然后我们每次枚举一下我们要把第几大的和第几小的进行操作,而这个操作显然可以双指针优化.<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1e18</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> n, k,ans;</span><br><span class="line"><span class="keyword">int</span> a[N], sum[N], cnt[N];</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="number">0</span>),<span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; k;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++ i)&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">cnt[i] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">sort(a + <span class="number">1</span>, a + n + <span class="number">1</span>);</span><br><span class="line">ans = a[n] - a[<span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++ i)&#123;</span><br><span class="line"><span class="keyword">int</span> l = <span class="number">1</span> + i;</span><br><span class="line"><span class="keyword">int</span> r = n - i;</span><br><span class="line"><span class="keyword">if</span> (l &gt;= r) <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">if</span> (l + <span class="number">1</span> != r)&#123;</span><br><span class="line"><span class="keyword">int</span> can = k / (i+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span> (can == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">int</span> lim = a[l+<span class="number">1</span>]-a[l] + a[r]-a[r<span class="number">-1</span>];</span><br><span class="line">ans -= min(lim, can);</span><br><span class="line">k -= min(lim, can) * (i+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span> (lim &gt; can) <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (l + <span class="number">1</span> == r)&#123;</span><br><span class="line"><span class="keyword">int</span> can = k / (i+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span> (can == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">int</span> lim = a[r]-a[l];</span><br><span class="line">ans -= min(lim, can);</span><br><span class="line">k -= min(lim, can) * (i+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote class="blockquote-center">因为知道了自己是多么的菜,所以才要更加努力去追求那个永远也不可能实现的梦想</blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我好菜啊&lt;br&gt;
    
    </summary>
    
    
      <category term="OI" scheme="http://krrrr.xyz/%E5%88%86%E7%B1%BB/OI/"/>
    
    
      <category term="CodeForces题解" scheme="http://krrrr.xyz/%E6%A0%87%E7%AD%BE/CodeForces%E9%A2%98%E8%A7%A3/"/>
    
  </entry>
  
</feed>
