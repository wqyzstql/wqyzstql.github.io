{"meta":{"title":"KRrrrrrrrr_Blog","subtitle":"以梦为马，不负年华","description":"沙雕复读机||没学上了","author":"KRrrrrrrrr","url":"http://krrrr.xyz"},"pages":[{"title":"categories","date":"2019-09-10T10:34:34.000Z","updated":"2019-09-10T10:35:02.335Z","comments":true,"path":"categories/index.html","permalink":"http://krrrr.xyz/categories/index.html","excerpt":"","text":""},{"title":"梦开始的地方","date":"2019-09-12T02:19:05.000Z","updated":"2019-09-12T02:57:39.993Z","comments":true,"path":"about/index.html","permalink":"http://krrrr.xyz/about/index.html","excerpt":"","text":"本人是个蒟蒻,如果看到了我的$blog$侵权了的话可以联系我删掉 QQ:1139198820"},{"title":"AK IOI的大佬们","date":"2018-10-13T07:30:16.000Z","updated":"2019-09-16T10:40:15.516Z","comments":true,"path":"friends/index.html","permalink":"http://krrrr.xyz/friends/index.html","excerpt":"","text":"\\text{Menci} \\text{_rqy} \\text{zlb} \\text{Rain_Air} \\text{Vimin} \\text{Hawking_llfz} \\text{Phecda} \\text{L_Y_T} \\text{准点的星辰} \\text{wyxdrqc} \\text{JK}"},{"title":"tags","date":"2019-09-10T10:35:15.000Z","updated":"2019-09-10T10:36:13.583Z","comments":true,"path":"tags/index.html","permalink":"http://krrrr.xyz/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"SCP-114514","slug":"SCP1","date":"2019-09-23T03:26:04.000Z","updated":"2019-09-23T09:05:42.673Z","comments":true,"path":"2019/09/23/SCP1/","link":"","permalink":"http://krrrr.xyz/2019/09/23/SCP1/","excerpt":"qwq","text":"qwq SCP-114514 研究社 等级: Keter 特殊收容措施: 目前SCP-114514无法被收容,目前基金会的目的是使SCP-114514保持不再发生变化. 项目描述: 已知SCP-114514曾经的名称有信息学,OI,国际象棋,围棋,五子棋,羽毛球,篮球,OSU,植物大战僵尸,外卖K歌研究社.已知项目会在随机的时间进行名称上的变化.目前已经证实,在每次项目的名称发生改变时,项目内的人员(称之为$SCP-114514-1919810$)的兴趣爱好会随着研究社的名称发生变化. 经过研究发现,SCP-114514内的人员爱好需要的物件似乎并不需要从外界获取,会有一个被称为$SCP-114514-1$的被称为$Z$主任的人形实体供给,而供给的物品似乎是从内部自然产生的. 在每次项目的名称发生改变时,会强制将项目周边距离不超过$10m$的人员强制转化为$SCP-114514-1919810$,已知这一影响不可逆.而且在普通人员被强制转化后,会在[数据删除]的时间之内丧失对文化课学习的兴趣. 常人暴露在SCP-114514面前是致命的,所以对于SCP-114514的任何接触需要3名及以上四级权限者的允许,且实验者在实验后将被强制隔离$3$天,如果在隔离时间之内实验者表现了明显的兴趣爱好变化,那么实验者将会被处决. 对于SCP-114514的进一步研究报告为致命媒介模因,需要得到O5议会的批准之后访问. 您好,监督者,已取消对机动特遣队的派遣指令.","categories":[{"name":"吹水","slug":"吹水","permalink":"http://krrrr.xyz/分类/吹水/"}],"tags":[{"name":"SCP乱搞","slug":"SCP乱搞","permalink":"http://krrrr.xyz/标签/SCP乱搞/"}]},{"title":"Codeforces Round #587题解","slug":"CodeforcesRound-587题解","date":"2019-09-22T07:46:20.000Z","updated":"2019-09-22T11:04:02.608Z","comments":true,"path":"2019/09/22/CodeforcesRound-587题解/","link":"","permalink":"http://krrrr.xyz/2019/09/22/CodeforcesRound-587题解/","excerpt":"LYT我对不起你啊/ll","text":"LYT我对不起你啊/ll Prefixes经过观察私信找规律之后发现,对于每个偶数的前缀$i$,如果$i&gt;2$且$i$这个前缀满足条件,那么$i/2$也一定会满足条件.所以我们要满足的就是对于每个最小的间隔为$2$的区间,使他们当中有一个$a$和一个$b$ 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970#include &lt;cstdio&gt;#include &lt;algorithm&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;queue&gt;#include &lt;map&gt;#include &lt;set&gt;#include &lt;cmath&gt;#include &lt;cctype&gt;#include &lt;ctime&gt;#include &lt;vector&gt;#include &lt;cstdlib&gt;#include &lt;stack&gt;#define ll long long#define pll std::pair&lt;int,int&gt;#define MP std::make_pair#define fi first#define se second#define oo 2147483647#define PI 3.141592653590#define rint register int#define F(i,num,b) for(rint i=num;i&lt;=b;i++)#define D(i,num,b) for(rint i=num;i&gt;=b;i--)#define G(i,num,b,c) for(rint num=head[b];num;num=c[num].next) inline int _read () &#123;int s = 0 , w = 1;char ch = getchar ();while ( ch &gt; '9' || ch &lt; '0' ) &#123; if ( ch == '-' ) w = -1; ch = getchar ();&#125;while ( ch &gt;= '0' &amp;&amp; ch &lt;= '9' ) &#123; s = s * 10 + ch - '0'; ch = getchar ();&#125;return s * w;&#125;template &lt; class T &gt; inline void read ( T &amp;x ) &#123;T s = 0 , w = 1;char ch = getchar ();while ( ch &gt; '9' || ch &lt; '0' ) &#123; if ( ch == '-' ) w = -1; ch = getchar ();&#125;while ( ch &gt;= '0' &amp;&amp; ch &lt;= '9' ) &#123; s = s * 10 + ch - '0'; ch = getchar ();&#125;x = s * w;return;&#125;template &lt; class T , typename ...Argc &gt; inline void read ( T &amp;x , Argc &amp;...Args ) &#123;read ( x );read ( Args... );return;&#125; template &lt; class T &gt; inline T max ( T x , T y ) &#123;return x &gt; y ? x : y;&#125;template &lt; class T &gt; inline T min ( T x , T y ) &#123;return x &lt; y ? x : y;&#125;template &lt; class T &gt; inline void abs ( T x ) &#123;return x &gt; 0 ? x : -x;&#125;template &lt; typename T &gt; void write ( T x ) &#123;if ( x &lt; 0 ) x = -x , putchar ( '-' );if ( x &gt; 9 ) write ( x / 10 );putchar ( x % 10 + 48 );return;&#125;template &lt; typename T &gt; void writeln ( T x ) &#123;write ( x ); printf (\"\\n\"); &#125;template &lt; class T &gt; inline T gcd ( T x , T y ) &#123;if ( x &lt; y ) swap ( x , y );if ( !y ) return x;return gcd ( y , x % y );&#125;template &lt; class T &gt; inline T ksm ( T x , T y , T Mod ) &#123;T tmp = 1;while ( y ) &#123;if ( y % 2 == 1 ) tmp = ( tmp * x % Mod );x = ( x * x ) % Mod;y &gt;&gt;= 1;&#125;return tmp;&#125; /**********************************************************************************************************************************************************************************************************************************************************************/ const int N = 2e5 + 10; int n , ans;char ss[N]; int main() &#123; read ( n ); scanf ( \"%s\" , ss + 1 ); int s1 = 0 , s2 = 0; for ( int i = 1 ; i &lt;= n ; i++ ) &#123; if ( ss[i] == 'a' ) s1++; else s2++; if ( i % 2 == 0 ) &#123; if ( s1 == s2 ) continue; ans++; if ( s1 &gt; s2 ) ss[i] = 'b'; else ss[i] = 'a'; s1 = 0; s2 = 0; &#125; &#125; writeln ( ans ); for ( int i = 1 ; i &lt;= n ; i++ ) printf ( \"%c\" , ss[i] ); return 0; &#125; Shooting通过观察样例可知,从大到小排序即可qwq… 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566#include &lt;cstdio&gt;#include &lt;algorithm&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;queue&gt;#include &lt;map&gt;#include &lt;set&gt;#include &lt;cmath&gt;#include &lt;cctype&gt;#include &lt;ctime&gt;#include &lt;vector&gt;#include &lt;cstdlib&gt;#include &lt;stack&gt;#define ll long long#define pll std::pair&lt;int,int&gt;#define MP std::make_pair#define fi first#define se second#define oo 2147483647#define PI 3.141592653590#define rint register int#define F(i,num,b) for(rint i=num;i&lt;=b;i++)#define D(i,num,b) for(rint i=num;i&gt;=b;i--)#define G(i,num,b,c) for(rint num=head[b];num;num=c[num].next) inline int _read () &#123;int s = 0 , w = 1;char ch = getchar ();while ( ch &gt; '9' || ch &lt; '0' ) &#123; if ( ch == '-' ) w = -1; ch = getchar ();&#125;while ( ch &gt;= '0' &amp;&amp; ch &lt;= '9' ) &#123; s = s * 10 + ch - '0'; ch = getchar ();&#125;return s * w;&#125;template &lt; class T &gt; inline void read ( T &amp;x ) &#123;T s = 0 , w = 1;char ch = getchar ();while ( ch &gt; '9' || ch &lt; '0' ) &#123; if ( ch == '-' ) w = -1; ch = getchar ();&#125;while ( ch &gt;= '0' &amp;&amp; ch &lt;= '9' ) &#123; s = s * 10 + ch - '0'; ch = getchar ();&#125;x = s * w;return;&#125;template &lt; class T , typename ...Argc &gt; inline void read ( T &amp;x , Argc &amp;...Args ) &#123;read ( x );read ( Args... );return;&#125; template &lt; class T &gt; inline T max ( T x , T y ) &#123;return x &gt; y ? x : y;&#125;template &lt; class T &gt; inline T min ( T x , T y ) &#123;return x &lt; y ? x : y;&#125;template &lt; class T &gt; inline void abs ( T x ) &#123;return x &gt; 0 ? x : -x;&#125;template &lt; typename T &gt; void write ( T x ) &#123;if ( x &lt; 0 ) x = -x , putchar ( '-' );if ( x &gt; 9 ) write ( x / 10 );putchar ( x % 10 + 48 );return;&#125;template &lt; typename T &gt; void writeln ( T x ) &#123;write ( x ); printf (\"\\n\"); &#125;template &lt; class T &gt; inline T gcd ( T x , T y ) &#123;if ( x &lt; y ) swap ( x , y );if ( !y ) return x;return gcd ( y , x % y );&#125;template &lt; class T &gt; inline T ksm ( T x , T y , T Mod ) &#123;T tmp = 1;while ( y ) &#123;if ( y % 2 == 1 ) tmp = ( tmp * x % Mod );x = ( x * x ) % Mod;y &gt;&gt;= 1;&#125;return tmp;&#125; /**********************************************************************************************************************************************************************************************************************************************************************/ const int N = 1005; int n;struct Node &#123; int val; int pos;&#125;ls[N]; ll ans; inline bool cmp ( Node x , Node y ) &#123; return x.val &gt; y.val;&#125; int main() &#123; read ( n ); F ( i , 1 , n ) &#123; ls[i].val = _read (); ls[i].pos = i; &#125; std :: sort ( ls + 1 , ls + 1 + n , cmp ); F ( i , 1 , n ) ans += ls[i].val * ( i - 1 ) + 1; writeln ( ans ); F ( i , 1 , n ) printf ( \"%d \" , ls[i].pos ); return 0; &#125; White Sheet发现如果这个白色矩形的四条边都被覆盖了的话,那么中间一定也被覆盖了.然后暴力枚举判断即可. 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677#include &lt;cstdio&gt;#include &lt;algorithm&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;queue&gt;#include &lt;map&gt;#include &lt;set&gt;#include &lt;cmath&gt;#include &lt;cctype&gt;#include &lt;ctime&gt;#include &lt;vector&gt;#include &lt;cstdlib&gt;#include &lt;stack&gt;#define ll long long#define pll std::pair&lt;int,int&gt;#define MP std::make_pair#define fi first#define se second#define oo 2147483647#define PI 3.141592653590#define rint register int#define F(i,num,b) for(rint i=num;i&lt;=b;i++)#define D(i,num,b) for(rint i=num;i&gt;=b;i--)#define G(i,num,b,c) for(rint num=head[b];num;num=c[num].next) inline int _read () &#123;int s = 0 , w = 1;char ch = getchar ();while ( ch &gt; '9' || ch &lt; '0' ) &#123; if ( ch == '-' ) w = -1; ch = getchar ();&#125;while ( ch &gt;= '0' &amp;&amp; ch &lt;= '9' ) &#123; s = s * 10 + ch - '0'; ch = getchar ();&#125;return s * w;&#125;template &lt; class T &gt; inline void read ( T &amp;x ) &#123;T s = 0 , w = 1;char ch = getchar ();while ( ch &gt; '9' || ch &lt; '0' ) &#123; if ( ch == '-' ) w = -1; ch = getchar ();&#125;while ( ch &gt;= '0' &amp;&amp; ch &lt;= '9' ) &#123; s = s * 10 + ch - '0'; ch = getchar ();&#125;x = s * w;return;&#125;template &lt; class T , typename ...Argc &gt; inline void read ( T &amp;x , Argc &amp;...Args ) &#123;read ( x );read ( Args... );return;&#125; template &lt; class T &gt; inline T max ( T x , T y ) &#123;return x &gt; y ? x : y;&#125;template &lt; class T &gt; inline T min ( T x , T y ) &#123;return x &lt; y ? x : y;&#125;template &lt; class T &gt; inline void abs ( T x ) &#123;return x &gt; 0 ? x : -x;&#125;template &lt; typename T &gt; void write ( T x ) &#123;if ( x &lt; 0 ) x = -x , putchar ( '-' );if ( x &gt; 9 ) write ( x / 10 );putchar ( x % 10 + 48 );return;&#125;template &lt; typename T &gt; void writeln ( T x ) &#123;write ( x ); printf (\"\\n\"); &#125;template &lt; class T &gt; inline T gcd ( T x , T y ) &#123;if ( x &lt; y ) swap ( x , y );if ( !y ) return x;return gcd ( y , x % y );&#125;template &lt; class T &gt; inline T ksm ( T x , T y , T Mod ) &#123;T tmp = 1;while ( y ) &#123;if ( y % 2 == 1 ) tmp = ( tmp * x % Mod );x = ( x * x ) % Mod;y &gt;&gt;= 1;&#125;return tmp;&#125; /**********************************************************************************************************************************************************************************************************************************************************************/ struct Point&#123; int x; int y;&#125;p[7];int main ( void )&#123; for(int i=1;i&lt;=6;i++) scanf(\"%d%d\",&amp;p[i].x,&amp;p[i].y); if(p[3].x&lt;=p[1].x&amp;&amp;p[3].y&lt;=p[1].y&amp;&amp;p[4].x&gt;=p[2].x&amp;&amp;p[4].y&gt;=p[2].y)&#123; printf(\"NO\\n\"); return 0; &#125; if(p[5].x&lt;=p[1].x&amp;&amp;p[5].y&lt;=p[1].y&amp;&amp;p[6].x&gt;=p[2].x&amp;&amp;p[6].y&gt;=p[2].y)&#123; printf(\"NO\\n\"); return 0; &#125; if(p[3].x&lt;=p[1].x&amp;&amp;p[4].x&gt;=p[2].x&amp;&amp;p[5].x&lt;=p[1].x&amp;&amp;p[6].x&gt;=p[2].x)&#123; if(p[3].y&lt;=p[1].y&amp;&amp;p[4].y&gt;=p[5].y&amp;&amp;p[6].y&gt;=p[2].y)&#123; printf(\"NO\\n\"); return 0; &#125; if(p[5].y&lt;=p[1].y&amp;&amp;p[6].y&gt;=p[3].y&amp;&amp;p[4].y&gt;=p[2].y)&#123; printf(\"NO\\n\"); return 0; &#125; &#125; if(p[3].y&lt;=p[1].y&amp;&amp;p[4].y&gt;=p[2].y&amp;&amp;p[5].y&lt;=p[1].y&amp;&amp;p[6].y&gt;=p[2].y)&#123; if(p[3].x&lt;=p[1].x&amp;&amp;p[4].x&gt;=p[5].x&amp;&amp;p[6].x&gt;=p[2].x)&#123; printf(\"NO\\n\"); return 0; &#125; if(p[5].x&lt;=p[1].x&amp;&amp;p[6].x&gt;=p[3].x&amp;&amp;p[4].x&gt;=p[2].x)&#123; printf(\"NO\\n\"); return 0; &#125; &#125; printf(\"YES\\n\"); return 0;&#125; Swords发现求个$gcd$就好了 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465#include &lt;cstdio&gt;#include &lt;algorithm&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;queue&gt;#include &lt;map&gt;#include &lt;set&gt;#include &lt;cmath&gt;#include &lt;cctype&gt;#include &lt;ctime&gt;#include &lt;vector&gt;#include &lt;cstdlib&gt;#include &lt;stack&gt;#define ll long long#define pll std::pair&lt;int,int&gt;#define MP std::make_pair#define fi first#define se second#define oo 2147483647#define PI 3.141592653590#define rint register int#define F(i,num,b) for(rint i=num;i&lt;=b;i++)#define D(i,num,b) for(rint i=num;i&gt;=b;i--)#define G(i,num,b,c) for(rint num=head[b];num;num=c[num].next) inline int _read () &#123;int s = 0 , w = 1;char ch = getchar ();while ( ch &gt; '9' || ch &lt; '0' ) &#123; if ( ch == '-' ) w = -1; ch = getchar ();&#125;while ( ch &gt;= '0' &amp;&amp; ch &lt;= '9' ) &#123; s = s * 10 + ch - '0'; ch = getchar ();&#125;return s * w;&#125;template &lt; class T &gt; inline void read ( T &amp;x ) &#123;T s = 0 , w = 1;char ch = getchar ();while ( ch &gt; '9' || ch &lt; '0' ) &#123; if ( ch == '-' ) w = -1; ch = getchar ();&#125;while ( ch &gt;= '0' &amp;&amp; ch &lt;= '9' ) &#123; s = s * 10 + ch - '0'; ch = getchar ();&#125;x = s * w;return;&#125;template &lt; class T , typename ...Argc &gt; inline void read ( T &amp;x , Argc &amp;...Args ) &#123;read ( x );read ( Args... );return;&#125; template &lt; class T &gt; inline T max ( T x , T y ) &#123;return x &gt; y ? x : y;&#125;template &lt; class T &gt; inline T min ( T x , T y ) &#123;return x &lt; y ? x : y;&#125;template &lt; class T &gt; inline void abs ( T x ) &#123;return x &gt; 0 ? x : -x;&#125;template &lt; typename T &gt; void write ( T x ) &#123;if ( x &lt; 0 ) x = -x , putchar ( '-' );if ( x &gt; 9 ) write ( x / 10 );putchar ( x % 10 + 48 );return;&#125;template &lt; typename T &gt; void writeln ( T x ) &#123;write ( x ); printf (\"\\n\"); &#125;template &lt; class T &gt; inline T gcd ( T x , T y ) &#123;if ( x &lt; y ) swap ( x , y );if ( !y ) return x;return gcd ( y , x % y );&#125;template &lt; class T &gt; inline T ksm ( T x , T y , T Mod ) &#123;T tmp = 1;while ( y ) &#123;if ( y % 2 == 1 ) tmp = ( tmp * x % Mod );x = ( x * x ) % Mod;y &gt;&gt;= 1;&#125;return tmp;&#125; /**********************************************************************************************************************************************************************************************************************************************************************/ const int N = 2e5 + 10; int n , maxs;int num[N];ll ans , sum; int main() &#123; read ( n ); F ( i , 1 , n ) &#123; num[i] = _read (); maxs = max ( maxs , num[i] ); &#125; F ( i , 1 , n ) &#123; int res = ( maxs - num[i] ); ans = std :: __gcd ( ans , res * 1ll ); &#125; if ( ans == 0 ) &#123; puts ( \"0 0\" ); return 0; &#125; else &#123; F ( i , 1 , n ) sum += ( maxs - num[i] ) / ans; printf ( \"%I64d %I64d\\n\" , sum , ans ); &#125; return 0; &#125; Numerical Sequence (easy version)发现$k$只有$10^9$的范围,所以就暴力跳就可以了. 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;cstring&gt;#include&lt;algorithm&gt;#include&lt;cmath&gt; using namespace std; #define LL long long#define N 40010 LL sum[N],T; int judge(int x) &#123; int count = (int)log10((double)x) + 1; return count;&#125;int fun(int x) &#123; int sum = pow(10,x); return sum;&#125;void solve() &#123; int sumn = 0; memset(sum, 0,sizeof(sum)); for(int i = 1 ; i &lt; 40005 ; ++i) &#123; sumn += judge(i); sum[i] = sum[i - 1] +sumn; &#125;&#125;void answer(int x) &#123; int j,ans,summ,i = 1; while(sum[i] &lt; x) i++; ans = x - sum[i -1]; summ = 0; for(j = 1 ; j &lt;= i ; ++j) &#123; summ += judge(j); if(summ &gt;= ans) break; &#125; if(summ == ans) printf(\"%d\\n\", j %10); if(summ &gt; ans) printf(\"%d\\n\", (j / fun(summ -ans)) % 10);&#125; int main() &#123; scanf(\"%lld\",&amp;T); solve(); while(T--) &#123; int pos; scanf(\"%d\",&amp;pos); answer(pos); &#125; //system(\"pause\"); return 0;&#125; 因为知道了自己是多么的菜,所以才要更加努力去追求那个永远也不可能实现的梦想","categories":[{"name":"OI","slug":"OI","permalink":"http://krrrr.xyz/分类/OI/"}],"tags":[{"name":"Codeforces题解","slug":"Codeforces题解","permalink":"http://krrrr.xyz/标签/Codeforces题解/"}]},{"title":"普转提七连测D3","slug":"P转TD3","date":"2019-09-22T07:41:51.000Z","updated":"2019-09-24T11:55:02.637Z","comments":true,"path":"2019/09/22/P转TD3/","link":"","permalink":"http://krrrr.xyz/2019/09/22/P转TD3/","excerpt":"版权原因,题面不公开","text":"版权原因,题面不公开password: zhengrui666abstract: 只有知道密码的人才能看呢message: 你一定知道密码趴 序列我们考虑化简式子: (x^2+y)^2\\equiv(x^2-y)^2+1\\pmod{p}两边的平方式展开之后再合并同类项之后可有 4x^2y\\equiv1\\pmod{p}我们发现,如果我们把$4x^2$看作一个整体,那么$y$就是$4x^2$在膜$p$意义下的逆元.所以我们现在的任务变成了找对于每个$num_i$,$4num_i$的逆元有多少个 又因为题面中说了数字互不相等,所以我们完全可以使用$unordered$_$map$统计. 注意去重即可,时间复杂度$O(nlogINTMAX)$ 汽水乍一看并莫得啥思路.然后我们想一下,如果我们把每个糖浆的浓度都减少$n$的话,那么我们的任务就变成了怎么凑出$0$浓度的任务.然后我们建立一个图论模型:我们设$dis_i$表示凑到$i+n$这个浓度时最少用的糖浆是多少,显然可以使用$bfs$求最短路. 因为知道了自己是多么的菜,所以才要更加努力去追求那个永远也不可能实现的梦想","categories":[{"name":"OI","slug":"OI","permalink":"http://krrrr.xyz/分类/OI/"}],"tags":[{"name":"ZROI","slug":"ZROI","permalink":"http://krrrr.xyz/标签/ZROI/"}]},{"title":"提高失联测D4","slug":"提高失联测D4","date":"2019-09-22T07:40:32.000Z","updated":"2019-09-22T11:46:36.817Z","comments":true,"path":"2019/09/22/提高失联测D4/","link":"","permalink":"http://krrrr.xyz/2019/09/22/提高失联测D4/","excerpt":"只有知道密码的人才能看呢","text":"你一定知道密码趴 Incorrect Password! No content to display! U2FsdGVkX1+SKZtfqPz77o8v8HjEvgtowzW5Fb/bAe3Oq9QGeY+jQ7GlbBaRKsaraHa0WN+MB6M9SSACTDGBgwnJAL1rfT/pa86+kU7rbwSfQdC4dUUWzCd/yWteMMXL0k6lgMkv1mG0B2ii2okSSEqxsQWeY4p4aDwNQlyHOnWHLjsv+lQ+QUx1iVE3rYHgbnaRcvMBvq3+wwjRn1OI/+r+XmgThUZitkcKKgEpYNe+YazmSb6Vcyb9tl32klB0rG4tgmkGjHSk+9F+nQXqm8Zt2WUXStsBl/EMMBLXDR2InSCVK/KGnVktNSBLIpMIgEkUHCp9UA47yx9Y50JdlV/vStS/1RBmwr7g6zpMIxtQLnDCGRW95GStZjSizMOUoUtdC9qyXuX6q6yCY6Lnbj4JSXtIzlV1zjrCHwlBWJYJsRiEBWSkxy4VbJ2EZTrYkKC/HWiTmrYNNZ/uaknXHeK8p1iBBDKRNi+IVKIG5vxXKUZ0pLh1CnIrp8AhaHCCfzjrv9+HyRCGcTJWX64WxBEhsQ2BCBEcxCVZiPnCG/22CxB5OX2vNvGo778lMhQARLFU3AERhRQGrtiHwTavBSFIPOQx4Yh/bbcBpcNJrEHA4ejI6ILshXOjez/Yoo+A6lv+NQcaM0k8Wb/nDeMxM4c2KPoz9fMcp09oQX779rfBUlq8QbF81PKNnySG4II2s5yDFh7m27iRtwuqM7wJwQ==","categories":[{"name":"OI","slug":"OI","permalink":"http://krrrr.xyz/分类/OI/"}],"tags":[{"name":"ZROI","slug":"ZROI","permalink":"http://krrrr.xyz/标签/ZROI/"}]},{"title":"普及五连测D2","slug":"PJ五连测D2","date":"2019-09-21T02:52:48.000Z","updated":"2019-09-24T10:57:28.446Z","comments":true,"path":"2019/09/21/PJ五连测D2/","link":"","permalink":"http://krrrr.xyz/2019/09/21/PJ五连测D2/","excerpt":"只有知道密码的人才能看呢","text":"你一定知道密码趴 Incorrect Password! No content to display! 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","categories":[{"name":"OI","slug":"OI","permalink":"http://krrrr.xyz/分类/OI/"}],"tags":[{"name":"ZROI","slug":"ZROI","permalink":"http://krrrr.xyz/标签/ZROI/"}]},{"title":"Educational Codeforces Round 73题解","slug":"CF题解解","date":"2019-09-20T09:46:05.000Z","updated":"2019-09-21T02:50:51.018Z","comments":true,"path":"2019/09/20/CF题解解/","link":"","permalink":"http://krrrr.xyz/2019/09/20/CF题解解/","excerpt":"qwq","text":"qwq A.2048 Game我们发现,我们可以忽略掉$2048$以上的数,剩下的数开桶统计然后贪心即可. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566#include &lt;cstdio&gt;#include &lt;algorithm&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;queue&gt;#include &lt;map&gt;#include &lt;set&gt;#include &lt;cmath&gt;#include &lt;cctype&gt;#include &lt;ctime&gt;#include &lt;vector&gt;#include &lt;cstdlib&gt;#include &lt;stack&gt;#define ll long long#define pll std::pair&lt;int,int&gt;#define mp std::make_pair#define fi first#define se second#define oo 2147483647#define PI 3.141592653590#define rint register int#define F(i,a,b) for(rint i=a;i&lt;=b;i++)#define D(i,a,b) for(rint i=a;i&gt;=b;i--)inline int _read () &#123;int s = 0 , w = 1;char ch = getchar ();while ( ch &gt; '9' || ch &lt; '0' ) &#123; if ( ch == '-' ) w = -1; ch = getchar ();&#125;while ( ch &gt;= '0' &amp;&amp; ch &lt;= '9' ) &#123; s = s * 10 + ch - '0'; ch = getchar ();&#125;return s * w;&#125;template &lt; class T &gt; inline void read ( T &amp;x ) &#123;T s = 0 , w = 1;char ch = getchar ();while ( ch &gt; '9' || ch &lt; '0' ) &#123; if ( ch == '-' ) w = -1; ch = getchar ();&#125;while ( ch &gt;= '0' &amp;&amp; ch &lt;= '9' ) &#123; s = s * 10 + ch - '0'; ch = getchar ();&#125;x = s * w;return;&#125;template &lt; class T , typename ...Argc &gt; inline void read ( T &amp;x , Argc &amp;...Args ) &#123;read ( x );read ( Args... );return;&#125; template &lt; class T &gt; inline T max ( T x , T y ) &#123;return x &gt; y ? x : y;&#125;template &lt; class T &gt; inline T min ( T x , T y ) &#123;return x &lt; y ? x : y;&#125;template &lt; class T &gt; inline void abs ( T x ) &#123;return x &gt; 0 ? x : -x;&#125;template &lt; typename T &gt; void write ( T x ) &#123;if ( x &lt; 0 ) x = -x , putchar ( '-' );if ( x &gt; 9 ) write ( x / 10 );putchar ( x % 10 + 48 );return;&#125;template &lt; typename T &gt; void writeln ( T x ) &#123;write ( x ); printf (\"\\n\"); &#125;template &lt; class T &gt; inline T gcd ( T x , T y ) &#123;if ( x &lt; y ) swap ( x , y );if ( !y ) return x;return gcd ( y , x % y );&#125;template &lt; class T &gt; inline T ksm ( T x , T y , T Mod ) &#123;T tmp = 1;while ( y ) &#123;if ( y % 2 == 1 ) tmp = ( tmp * x % Mod );x = ( x * x ) % Mod;y &gt;&gt;= 1;&#125;return tmp;&#125; /**********************************************************************************************************************************************************************************************************************************************************************/const int N = 105;int n; ll num[N];int used[2050];int main ( void ) &#123; int T = _read (); while ( T-- ) &#123; memset ( used , 0 , sizeof ( used ) ); n = _read (); F ( i , 1 , n ) &#123; num[i] = _read (); if ( num[i] &lt;= 2048 ) used[num[i]]++; &#125; if ( used[2048] ) &#123; puts ( \"YES\" ); continue; &#125; for ( int i = 1 ; i &lt;= 1024 ; i *= 2 ) used[i * 2] += ( used[i] / 2 ); if ( used[2048] ) puts ( \"YES\" ); else puts ( \"NO\" ); &#125; return 0;&#125; B.Knights我们贪心的考虑一下,如果我们现在这个位置的骑士,在它能移动的八个方向上,都会碰到其他的骑士,那么这个位置对答案的贡献一定是最优的. 结合样例,我们可以发现这样一种构造方法,我们从点$(1,1)$开始进行一次$bfs$,然后按照骑士的移动方法,每次更新一层,然后把这一层的骑士染色成和现在的骑士颜色不一样的颜色. 对于剩下的,那么可以证明没有任何点能跳到这个点,所以随便什么颜色都可以. 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071#include &lt;cstdio&gt;#include &lt;algorithm&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;queue&gt;#include &lt;map&gt;#include &lt;set&gt;#include &lt;cmath&gt;#include &lt;cctype&gt;#include &lt;ctime&gt;#include &lt;vector&gt;#include &lt;cstdlib&gt;#include &lt;stack&gt;#define ll long long#define pll std::pair&lt;int,int&gt;#define fi first#define se second#define oo 2147483647#define PI 3.141592653590#define rint register int#define F(i,a,b) for(rint i=a;i&lt;=b;i++)#define D(i,a,b) for(rint i=a;i&gt;=b;i--)inline int _read () &#123;int s = 0 , w = 1;char ch = getchar ();while ( ch &gt; '9' || ch &lt; '0' ) &#123; if ( ch == '-' ) w = -1; ch = getchar ();&#125;while ( ch &gt;= '0' &amp;&amp; ch &lt;= '9' ) &#123; s = s * 10 + ch - '0'; ch = getchar ();&#125;return s * w;&#125;template &lt; class T &gt; inline void read ( T &amp;x ) &#123;T s = 0 , w = 1;char ch = getchar ();while ( ch &gt; '9' || ch &lt; '0' ) &#123; if ( ch == '-' ) w = -1; ch = getchar ();&#125;while ( ch &gt;= '0' &amp;&amp; ch &lt;= '9' ) &#123; s = s * 10 + ch - '0'; ch = getchar ();&#125;x = s * w;return;&#125;template &lt; class T , typename ...Argc &gt; inline void read ( T &amp;x , Argc &amp;...Args ) &#123;read ( x );read ( Args... );return;&#125; template &lt; class T &gt; inline T max ( T x , T y ) &#123;return x &gt; y ? x : y;&#125;template &lt; class T &gt; inline T min ( T x , T y ) &#123;return x &lt; y ? x : y;&#125;template &lt; class T &gt; inline void abs ( T x ) &#123;return x &gt; 0 ? x : -x;&#125;template &lt; typename T &gt; void write ( T x ) &#123;if ( x &lt; 0 ) x = -x , putchar ( '-' );if ( x &gt; 9 ) write ( x / 10 );putchar ( x % 10 + 48 );return;&#125;template &lt; typename T &gt; void writeln ( T x ) &#123;write ( x ); printf (\"\\n\"); &#125;template &lt; class T &gt; inline T gcd ( T x , T y ) &#123;if ( x &lt; y ) swap ( x , y );if ( !y ) return x;return gcd ( y , x % y );&#125;template &lt; class T &gt; inline T ksm ( T x , T y , T Mod ) &#123;T tmp = 1;while ( y ) &#123;if ( y % 2 == 1 ) tmp = ( tmp * x % Mod );x = ( x * x ) % Mod;y &gt;&gt;= 1;&#125;return tmp;&#125; /**********************************************************************************************************************************************************************************************************************************************************************/int n;char mp[105][105];const int dx[] = &#123; 0 , 1 , 1 , -1 , -1 , 2 , 2 , -2 , - 2 &#125;;const int dy[] = &#123; 0 , 2 , -2 , 2 , -2 , 1 , -1 , 1 , -1 &#125;;void dfs ( int x , int y , char col ) &#123; mp[x][y] = col; for ( int i = 1 ; i &lt;= 8 ; i++ ) &#123; int xx = x + dx[i]; int yy = y + dy[i]; if ( xx &gt;= 1 &amp;&amp; xx &lt;= n &amp;&amp; yy &gt;= 1 &amp;&amp; yy &lt;= n &amp;&amp; mp[xx][yy] != 'W' &amp;&amp; mp[xx][yy] != 'B' ) dfs ( xx , yy , col == 'W' ? 'B' : 'W' ); &#125; return;&#125;int main ( void ) &#123; n = _read (); dfs ( 1 , 1 , 'W' ); bool flag = 1; for ( int i = 1 ; i &lt;= n ; i++ ) &#123; for ( int j = 1 ; j &lt;= n ; j++ ) &#123; if ( mp[i][j] == 'W' || mp[i][j] == 'B' ) printf (\"%c\",mp[i][j]); else &#123; printf (\"%c\" , flag?'B':'W'); flag ^= 1; &#125; &#125; puts(\"\"); &#125; return 0;&#125;// Main Code C.Perfect Team一个直观的感觉就是你从$c,m$中取一个$Min$,然后我们会发现可能人数凑不够$Min*3$,所以我们判断一下$min(Min,sum/3)$就是答案了. 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152#include &lt;cstdio&gt;#include &lt;algorithm&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;queue&gt;#include &lt;map&gt;#include &lt;set&gt;#include &lt;cmath&gt;#include &lt;cctype&gt;#include &lt;ctime&gt;#include &lt;vector&gt;#include &lt;cstdlib&gt;#include &lt;stack&gt;#define ll long long#define pll std::pair&lt;int,int&gt;#define mp std::make_pair#define fi first#define se second#define oo 2147483647#define PI 3.141592653590#define rint register int#define F(i,a,b) for(rint i=a;i&lt;=b;i++)#define D(i,a,b) for(rint i=a;i&gt;=b;i--)inline int _read () &#123;int s = 0 , w = 1;char ch = getchar ();while ( ch &gt; '9' || ch &lt; '0' ) &#123; if ( ch == '-' ) w = -1; ch = getchar ();&#125;while ( ch &gt;= '0' &amp;&amp; ch &lt;= '9' ) &#123; s = s * 10 + ch - '0'; ch = getchar ();&#125;return s * w;&#125;template &lt; class T &gt; inline void read ( T &amp;x ) &#123;T s = 0 , w = 1;char ch = getchar ();while ( ch &gt; '9' || ch &lt; '0' ) &#123; if ( ch == '-' ) w = -1; ch = getchar ();&#125;while ( ch &gt;= '0' &amp;&amp; ch &lt;= '9' ) &#123; s = s * 10 + ch - '0'; ch = getchar ();&#125;x = s * w;return;&#125;template &lt; class T , typename ...Argc &gt; inline void read ( T &amp;x , Argc &amp;...Args ) &#123;read ( x );read ( Args... );return;&#125; template &lt; class T &gt; inline T max ( T x , T y ) &#123;return x &gt; y ? x : y;&#125;template &lt; class T &gt; inline T min ( T x , T y ) &#123;return x &lt; y ? x : y;&#125;template &lt; class T &gt; inline void abs ( T x ) &#123;return x &gt; 0 ? x : -x;&#125;template &lt; typename T &gt; void write ( T x ) &#123;if ( x &lt; 0 ) x = -x , putchar ( '-' );if ( x &gt; 9 ) write ( x / 10 );putchar ( x % 10 + 48 );return;&#125;template &lt; typename T &gt; void writeln ( T x ) &#123;write ( x ); printf (\"\\n\"); &#125;template &lt; class T &gt; inline T gcd ( T x , T y ) &#123;if ( x &lt; y ) swap ( x , y );if ( !y ) return x;return gcd ( y , x % y );&#125;template &lt; class T &gt; inline T ksm ( T x , T y , T Mod ) &#123;T tmp = 1;while ( y ) &#123;if ( y % 2 == 1 ) tmp = ( tmp * x % Mod );x = ( x * x ) % Mod;y &gt;&gt;= 1;&#125;return tmp;&#125; /**********************************************************************************************************************************************************************************************************************************************************************/int n;int c , m , x;int main ( void ) &#123; int T = _read (); while ( T-- ) &#123; read ( c , m , x ); int mins = min ( c , m ); int sums = c + m + x; printf ( \"%d\\n\" , min ( mins , sums / 3 ) ); &#125; return 0;&#125;// Main Code D.Make The Fence Great Again毒瘤出题人一个DP数据范围开3e5 看到$3e5$的数据范围,第一反应就是贪心,但是发现貌似不怎么可做?然后开始考虑$DP$,发现如果$i$这个点被升高了的话,貌似对后边的点是有影响的,有后效性,怎么办?我们经过观察可知,如果一个点要升高,那么它最多升高两次,所以我们可以设$f_{i,j}$表示现在是第$i$个位置,其中$i$这个位置升高了$j$次. 转移的话很显然,我们枚举一个最小的$f_{i-1,k}$并且要保证$fence_{i-1}.high+k$不等于$fence_i.high+j$然后转移就好了. 时间复杂度的话是$O(n*16)$硬核O(nlogn) 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475#include &lt;cstdio&gt;#include &lt;algorithm&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;queue&gt;#include &lt;map&gt;#include &lt;set&gt;#include &lt;cmath&gt;#include &lt;cctype&gt;#include &lt;ctime&gt;#include &lt;vector&gt;#include &lt;cstdlib&gt;#include &lt;stack&gt;#define int long long#define pll std::pair&lt;int,int&gt;#define mp std::make_pair#define fi first#define se second#define oo 2147483647#define PI 3.141592653590#define rint register int#define F(i,a,b) for(rint i=a;i&lt;=b;i++)#define D(i,a,b) for(rint i=a;i&gt;=b;i--)inline int _read () &#123;int s = 0 , w = 1;char ch = getchar ();while ( ch &gt; '9' || ch &lt; '0' ) &#123; if ( ch == '-' ) w = -1; ch = getchar ();&#125;while ( ch &gt;= '0' &amp;&amp; ch &lt;= '9' ) &#123; s = s * 10 + ch - '0'; ch = getchar ();&#125;return s * w;&#125;template &lt; class T &gt; inline void read ( T &amp;x ) &#123;T s = 0 , w = 1;char ch = getchar ();while ( ch &gt; '9' || ch &lt; '0' ) &#123; if ( ch == '-' ) w = -1; ch = getchar ();&#125;while ( ch &gt;= '0' &amp;&amp; ch &lt;= '9' ) &#123; s = s * 10 + ch - '0'; ch = getchar ();&#125;x = s * w;return;&#125;template &lt; class T , typename ...Argc &gt; inline void read ( T &amp;x , Argc &amp;...Args ) &#123;read ( x );read ( Args... );return;&#125; template &lt; class T &gt; inline T max ( T x , T y ) &#123;return x &gt; y ? x : y;&#125;template &lt; class T &gt; inline T min ( T x , T y ) &#123;return x &lt; y ? x : y;&#125;template &lt; class T &gt; inline void abs ( T x ) &#123;return x &gt; 0 ? x : -x;&#125;template &lt; typename T &gt; void write ( T x ) &#123;if ( x &lt; 0 ) x = -x , putchar ( '-' );if ( x &gt; 9 ) write ( x / 10 );putchar ( x % 10 + 48 );return;&#125;template &lt; typename T &gt; void writeln ( T x ) &#123;write ( x ); printf (\"\\n\"); &#125;template &lt; class T &gt; inline T gcd ( T x , T y ) &#123;if ( x &lt; y ) swap ( x , y );if ( !y ) return x;return gcd ( y , x % y );&#125;template &lt; class T &gt; inline T ksm ( T x , T y , T Mod ) &#123;T tmp = 1;while ( y ) &#123;if ( y % 2 == 1 ) tmp = ( tmp * x % Mod );x = ( x * x ) % Mod;y &gt;&gt;= 1;&#125;return tmp;&#125; /**********************************************************************************************************************************************************************************************************************************************************************/const int N = 3e5 + 10;int n , idx;struct Node &#123; int hi; int vi;&#125;fence[N];int f[N][5];signed main ( void ) &#123; int T = _read (); while ( T-- ) &#123; n = _read (); for ( int i = 1 ; i &lt;= n ; i++ ) &#123; read ( fence[i].hi , fence[i].vi ); for ( int j = 0 ; j &lt;= 4 ; j++ ) f[i][j] = 1e17; &#125; for ( int i = 1 ; i &lt;= n ; i++ ) &#123; for ( int j = 0 ; j &lt;= 4 ; j++ ) &#123; for ( int k = 0 ; k &lt;= 4 ; k++ ) &#123; if ( fence[i].hi + j == fence[i - 1].hi + k ) continue; f[i][j] = min ( f[i][j] , f[i - 1][k] ); &#125; if ( f[i][j] == 1e17 ) continue; f[i][j] += 1ll * j * fence[i].vi; &#125; &#125; int ans = 1e17; for ( int i = 0 ; i &lt;= 4 ; i++ ) ans = min ( ans , f[n][i] ); writeln ( ans ); &#125; return 0;&#125;// Main Code 因为知道了自己是多么的菜,所以才要更加努力去追求那个永远也不可能实现的梦想","categories":[{"name":"OI","slug":"OI","permalink":"http://krrrr.xyz/分类/OI/"}],"tags":[{"name":"CodeForces题解","slug":"CodeForces题解","permalink":"http://krrrr.xyz/标签/CodeForces题解/"}]},{"title":"[USACO09FEB]改造路Revamping Trails题解","slug":"改造路题解","date":"2019-09-18T02:27:56.000Z","updated":"2019-09-18T02:44:05.103Z","comments":true,"path":"2019/09/18/改造路题解/","link":"","permalink":"http://krrrr.xyz/2019/09/18/改造路题解/","excerpt":"复习了一波分层图….","text":"复习了一波分层图…. 可以发现这道题就是分层图裸题.我们可以设$dis_{time,i}$表示现在已经用了$time$次免费机会,到达了$i$这个点的时候的最短路径.那么我们在进行堆优化$Dijkstra$时($SPFA$跑分层图一般会死的很惨),我们对于每次转移时,判断一下是否使用一次免费机会即可. 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;#include &lt;queue&gt;#define K 25#define N 10005#define M 4200005#define F(i,a,b) for(int i=a;i&lt;=b;i++)#define G(i,a,b) for(int i=head[a];i;i=b[i].next)using namespace std;int n,m,k,t,start,end;struct Edge&#123; int to; int data; int next;&#125;e[M];struct Que&#123; int time,cur; Que(int a,int b):time(a),cur(b)&#123;&#125;&#125;;int head[N],vis[K][N];bool inque[K][N];int ans=2147483647;struct cmp &#123; bool operator () ( Que x , Que y ) &#123; return vis[x.time][x.cur] &gt; vis[y.time][y.cur]; &#125;&#125;;priority_queue &lt; Que , vector &lt; Que &gt; , cmp &gt; qu;void add (int x,int y,int z)&#123; e[++t].to=y; e[t].data=z; e[t].next=head[x]; head[x]=t; return;&#125;inline void spfa (int x)&#123; memset(vis,0x3f3f3f3f,sizeof(vis)); vis[0][x]=0; inque[0][x]=1; qu.push(Que(0,1)); while (!qu.empty())&#123; Que j=qu.top(); qu.pop(); inque[j.time][j.cur]=0; G(i,j.cur,e)&#123; int k=e[i].to; if (vis[j.time][k]&gt;vis[j.time][j.cur]+e[i].data)&#123; vis[j.time][k]=vis[j.time][j.cur]+e[i].data; if (!inque[j.time][k])&#123; inque[j.time][k]=1; qu.push(Que(j.time,k)); &#125; &#125; &#125; if (j.time&lt;k) G(i,j.cur,e)&#123; int k=e[i].to; if (vis[j.time+1][k]&gt;vis[j.time][j.cur])&#123; vis[j.time+1][k]=vis[j.time][j.cur]; if (!inque[j.time+1][k])&#123; inque[j.time+1][k]=1; qu.push(Que(j.time+1,k)); &#125; &#125; &#125; &#125; F(i,0,k) ans=min(ans,vis[i][n]); return;&#125;int main()&#123; scanf (\"%d%d%d\",&amp;n,&amp;m,&amp;k); F(i,1,m)&#123; int x,y,z; scanf (\"%d%d%d\",&amp;x,&amp;y,&amp;z); add (x,y,z); add (y,x,z); &#125; spfa(1); printf (\"%d\\n\",ans); return 0;&#125; 因为知道了自己是多么的菜,所以才要更加努力去追求那个永远也不可能实现的梦想","categories":[{"name":"OI","slug":"OI","permalink":"http://krrrr.xyz/分类/OI/"}],"tags":[{"name":"图论","slug":"图论","permalink":"http://krrrr.xyz/标签/图论/"},{"name":"DP","slug":"DP","permalink":"http://krrrr.xyz/标签/DP/"},{"name":"最短路","slug":"最短路","permalink":"http://krrrr.xyz/标签/最短路/"},{"name":"分层图","slug":"分层图","permalink":"http://krrrr.xyz/标签/分层图/"}]},{"title":"提高失恋测D3","slug":"提高失恋测D3","date":"2019-09-16T11:00:10.000Z","updated":"2019-09-22T11:49:36.258Z","comments":true,"path":"2019/09/16/提高失恋测D3/","link":"","permalink":"http://krrrr.xyz/2019/09/16/提高失恋测D3/","excerpt":"只有知道密码的人才能看呢","text":"你一定知道密码趴 Incorrect Password! No content to display! ","categories":[{"name":"OI","slug":"OI","permalink":"http://krrrr.xyz/分类/OI/"}],"tags":[{"name":"ZROI","slug":"ZROI","permalink":"http://krrrr.xyz/标签/ZROI/"}]},{"title":"CodeForces round585题解","slug":"round585题解","date":"2019-09-15T10:27:30.000Z","updated":"2019-09-18T02:40:34.240Z","comments":true,"path":"2019/09/15/round585题解/","link":"","permalink":"http://krrrr.xyz/2019/09/15/round585题解/","excerpt":"","text":"A.傻逼题,暴力枚举即可(我也就只会傻逼题了) 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586#include &lt;cstdio&gt;#include &lt;algorithm&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;queue&gt;#include &lt;map&gt;#include &lt;set&gt;#include &lt;cmath&gt;#include &lt;cctype&gt;#include &lt;ctime&gt;#include &lt;vector&gt;#include &lt;cstdlib&gt;#include &lt;stack&gt;#define ll long long#define pll std::pair&lt;int,int&gt;#define MP std::make_pair#define fi first#define se second#define oo 2147483647#define PI 3.141592653590#define rint register int#define F(i,a,b) for(rint i=a;i&lt;=b;i++)#define D(i,a,b) for(rint i=a;i&gt;=b;i--)#define G(i,a,b,c) for(rint a=head[b];a;a=c[a].next)inline int _read () &#123;int s = 0 , w = 1;char ch = getchar ();while ( ch &gt; '9' || ch &lt; '0' ) &#123; if ( ch == '-' ) w = -1; ch = getchar ();&#125;while ( ch &gt;= '0' &amp;&amp; ch &lt;= '9' ) &#123; s = s * 10 + ch - '0'; ch = getchar ();&#125;return s * w;&#125;template &lt; class T &gt; inline void read ( T &amp;x ) &#123;T s = 0 , w = 1;char ch = getchar ();while ( ch &gt; '9' || ch &lt; '0' ) &#123; if ( ch == '-' ) w = -1; ch = getchar ();&#125;while ( ch &gt;= '0' &amp;&amp; ch &lt;= '9' ) &#123; s = s * 10 + ch - '0'; ch = getchar ();&#125;x = s * w;return;&#125;template &lt; class T , typename ...Argc &gt; inline void read ( T &amp;x , Argc &amp;...Args ) &#123;read ( x );read ( Args... );return;&#125; template &lt; class T &gt; inline T max ( T x , T y ) &#123;return x &gt; y ? x : y;&#125;template &lt; class T &gt; inline T min ( T x , T y ) &#123;return x &lt; y ? x : y;&#125;template &lt; class T &gt; inline void abs ( T x ) &#123;return x &gt; 0 ? x : -x;&#125;template &lt; typename T &gt; void write ( T x ) &#123;if ( x &lt; 0 ) x = -x , putchar ( '-' );if ( x &gt; 9 ) write ( x / 10 );putchar ( x % 10 + 48 );return;&#125;template &lt; typename T &gt; void writeln ( T x ) &#123;write ( x ); printf (\"\\n\"); &#125;template &lt; class T &gt; inline T gcd ( T x , T y ) &#123;if ( x &lt; y ) swap ( x , y );if ( !y ) return x;return gcd ( y , x % y );&#125;template &lt; class T &gt; inline T ksm ( T x , T y , T Mod ) &#123;T tmp = 1;while ( y ) &#123;if ( y % 2 == 1 ) tmp = ( tmp * x % Mod );x = ( x * x ) % Mod;y &gt;&gt;= 1;&#125;return tmp;&#125; /**********************************************************************************************************************************************************************************************************************************************************************/const int N = 10005;int n , a1 , a2 , k1 , k2 , idx;int num[N];inline bool cmp1 ( int x , int y ) &#123; return x &gt; y;&#125;inline bool cmp2 ( int x , int y ) &#123; return x &lt; y;&#125;int main ( void ) &#123; read ( a1 , a2 , k1 , k2 , n ); for ( int i = 1 ; i &lt;= a1 ; i++ ) num[++idx] = k1; for ( int i = 1 ; i &lt;= a2 ; i++ ) num[++idx] = k2; std :: sort ( num + 1 , num + 1 + idx , cmp1 ); int ans = 0; int tmp = n; for ( int i = 1 ; i &lt;= idx ; i++ ) if ( tmp &lt; num[i] ) &#123; tmp = 0; break; &#125; else tmp -= num[i] - 1; if ( tmp == 0 ) printf ( \"%d \" , ans ); else printf ( \"%d \" , tmp ); std :: sort ( num + 1 , num + 1 + idx , cmp2 ); ans = 0 , tmp = n; for ( int i = 1 ; i &lt;= idx ; i++ ) if ( tmp &lt; num[i] ) break; else &#123; ans ++; tmp -= num[i]; &#125; printf ( \"%d\\n\" , ans ); return 0;&#125;// Main Code B.分从后往前现在的数的正负性讨论即可,负负得正. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566#include &lt;cstdio&gt;#include &lt;algorithm&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;queue&gt;#include &lt;map&gt;#include &lt;set&gt;#include &lt;cmath&gt;#include &lt;cctype&gt;#include &lt;ctime&gt;#include &lt;vector&gt;#include &lt;cstdlib&gt;#include &lt;stack&gt;#define ll long long#define pll std::pair&lt;int,int&gt;#define MP std::make_pair#define fi first#define se second#define oo 2147483647#define PI 3.141592653590#define rint register int#define F(i,num,b) for(rint i=num;i&lt;=b;i++)#define D(i,num,b) for(rint i=num;i&gt;=b;i--)#define G(i,num,b,c) for(rint num=head[b];num;num=c[num].next)inline int _read () &#123;int s = 0 , w = 1;char ch = getchar ();while ( ch &gt; '9' || ch &lt; '0' ) &#123; if ( ch == '-' ) w = -1; ch = getchar ();&#125;while ( ch &gt;= '0' &amp;&amp; ch &lt;= '9' ) &#123; s = s * 10 + ch - '0'; ch = getchar ();&#125;return s * w;&#125;template &lt; class T &gt; inline void read ( T &amp;x ) &#123;T s = 0 , w = 1;char ch = getchar ();while ( ch &gt; '9' || ch &lt; '0' ) &#123; if ( ch == '-' ) w = -1; ch = getchar ();&#125;while ( ch &gt;= '0' &amp;&amp; ch &lt;= '9' ) &#123; s = s * 10 + ch - '0'; ch = getchar ();&#125;x = s * w;return;&#125;template &lt; class T , typename ...Argc &gt; inline void read ( T &amp;x , Argc &amp;...Args ) &#123;read ( x );read ( Args... );return;&#125; template &lt; class T &gt; inline T max ( T x , T y ) &#123;return x &gt; y ? x : y;&#125;template &lt; class T &gt; inline T min ( T x , T y ) &#123;return x &lt; y ? x : y;&#125;template &lt; class T &gt; inline void abs ( T x ) &#123;return x &gt; 0 ? x : -x;&#125;template &lt; typename T &gt; void write ( T x ) &#123;if ( x &lt; 0 ) x = -x , putchar ( '-' );if ( x &gt; 9 ) write ( x / 10 );putchar ( x % 10 + 48 );return;&#125;template &lt; typename T &gt; void writeln ( T x ) &#123;write ( x ); printf (\"\\n\"); &#125;template &lt; class T &gt; inline T gcd ( T x , T y ) &#123;if ( x &lt; y ) swap ( x , y );if ( !y ) return x;return gcd ( y , x % y );&#125;template &lt; class T &gt; inline T ksm ( T x , T y , T Mod ) &#123;T tmp = 1;while ( y ) &#123;if ( y % 2 == 1 ) tmp = ( tmp * x % Mod );x = ( x * x ) % Mod;y &gt;&gt;= 1;&#125;return tmp;&#125; /**********************************************************************************************************************************************************************************************************************************************************************/const int N = 4e5 + 10;int n;ll num[N] , s[N];ll tai,fro;ll odd,uodd;int main ( void ) &#123; read ( n ); F ( i , 1 , n ) &#123; num[i] = _read (); s[i] = s[i - 1] ^ ( num[i] &lt; 0 ); if ( s[i] == 1 ) &#123; tai += odd; fro += uodd; odd++; fro++; &#125; else &#123; tai += uodd; fro += odd; tai++; uodd++; &#125; &#125; std :: cout &lt;&lt; fro &lt;&lt; \" \" &lt;&lt; tai &lt;&lt; std :: endl; return 0;&#125; C.发现只有$A$和$B$,两种字符,很容易发现规律. 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485#include &lt;cstdio&gt;#include &lt;algorithm&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;queue&gt;#include &lt;map&gt;#include &lt;set&gt;#include &lt;cmath&gt;#include &lt;cctype&gt;#include &lt;ctime&gt;#include &lt;vector&gt;#include &lt;cstdlib&gt;#include &lt;stack&gt;#define ll long long#define pll std::pair&lt;int,int&gt;#define MP std::make_pair#define fi first#define se second#define oo 2147483647#define PI 3.141592653590#define rint register int#define F(i,num,b) for(rint i=num;i&lt;=b;i++)#define D(i,num,b) for(rint i=num;i&gt;=b;i--)#define G(i,num,b,c) for(rint num=head[b];num;num=c[num].next)inline int _read () &#123;int s = 0 , w = 1;char ch = getchar ();while ( ch &gt; '9' || ch &lt; '0' ) &#123; if ( ch == '-' ) w = -1; ch = getchar ();&#125;while ( ch &gt;= '0' &amp;&amp; ch &lt;= '9' ) &#123; s = s * 10 + ch - '0'; ch = getchar ();&#125;return s * w;&#125;template &lt; class T &gt; inline void read ( T &amp;x ) &#123;T s = 0 , w = 1;char ch = getchar ();while ( ch &gt; '9' || ch &lt; '0' ) &#123; if ( ch == '-' ) w = -1; ch = getchar ();&#125;while ( ch &gt;= '0' &amp;&amp; ch &lt;= '9' ) &#123; s = s * 10 + ch - '0'; ch = getchar ();&#125;x = s * w;return;&#125;template &lt; class T , typename ...Argc &gt; inline void read ( T &amp;x , Argc &amp;...Args ) &#123;read ( x );read ( Args... );return;&#125; template &lt; class T &gt; inline T max ( T x , T y ) &#123;return x &gt; y ? x : y;&#125;template &lt; class T &gt; inline T min ( T x , T y ) &#123;return x &lt; y ? x : y;&#125;template &lt; class T &gt; inline void abs ( T x ) &#123;return x &gt; 0 ? x : -x;&#125;template &lt; typename T &gt; void write ( T x ) &#123;if ( x &lt; 0 ) x = -x , putchar ( '-' );if ( x &gt; 9 ) write ( x / 10 );putchar ( x % 10 + 48 );return;&#125;template &lt; typename T &gt; void writeln ( T x ) &#123;write ( x ); printf (\"\\n\"); &#125;template &lt; class T &gt; inline T gcd ( T x , T y ) &#123;if ( x &lt; y ) swap ( x , y );if ( !y ) return x;return gcd ( y , x % y );&#125;template &lt; class T &gt; inline T ksm ( T x , T y , T Mod ) &#123;T tmp = 1;while ( y ) &#123;if ( y % 2 == 1 ) tmp = ( tmp * x % Mod );x = ( x * x ) % Mod;y &gt;&gt;= 1;&#125;return tmp;&#125; /**********************************************************************************************************************************************************************************************************************************************************************/char s[3][200005];int n , sum;int can1,can2,bc;int cnt1[200005],cnt2[200005];int main()&#123; read ( n ); scanf ( \"%s%s\" , s[1] , s[2] ); for(int i=0;i&lt;n;i++)&#123; if(s[1][i]!=s[2][i])&#123; if(s[1][i]=='a')&#123; can1++; cnt1[can1]=i+1; &#125; else&#123; can2++; cnt2[can2]=i+1; &#125; &#125; &#125; if(n%2==1)&#123; puts ( \"-1\" ); return 0; &#125; if(can1%2==1)&#123; sum+=2; sum+=(n-2)/2; writeln ( sum ); printf ( \"%d %d\\n\" , cnt1[1] , cnt1[1] ); printf ( \"%d %d\\n\" , cnt1[1] , cnt2[1] ); for(int i=2;i&lt;=can1;i+=2) printf ( \"%d %d\\n\" , cnt1[i] , cnt1[i + 1] ); for(int i=2;i&lt;=can2;i+=2) printf ( \"%d %d\\n\" , cnt2[i] , cnt2[i + 1] ); return 0; &#125; sum=(can1+can2)/2; writeln ( sum ); for(int i=1;i&lt;=can1;i+=2) printf ( \"%d %d\\n\" , cnt1[i] , cnt1[i + 1] ); for(int i=1;i&lt;=can2;i+=2) printf ( \"%d %d\\n\" , cnt2[i] , cnt2[i + 1] ); return 0;&#125; 因为知道了自己是多么的菜,所以才要更加努力去追求那个永远也不可能实现的梦想","categories":[{"name":"OI","slug":"OI","permalink":"http://krrrr.xyz/分类/OI/"}],"tags":[{"name":"CodeForces题解","slug":"CodeForces题解","permalink":"http://krrrr.xyz/标签/CodeForces题解/"}]},{"title":"普转提七连测D2","slug":"普专提D2","date":"2019-09-15T06:15:02.000Z","updated":"2019-09-22T11:49:13.552Z","comments":true,"path":"2019/09/15/普专提D2/","link":"","permalink":"http://krrrr.xyz/2019/09/15/普专提D2/","excerpt":"只有知道密码的人才能看呢","text":"你一定知道密码趴 Incorrect Password! No content to display! ","categories":[{"name":"OI","slug":"OI","permalink":"http://krrrr.xyz/分类/OI/"}],"tags":[{"name":"ZROI","slug":"ZROI","permalink":"http://krrrr.xyz/标签/ZROI/"}]},{"title":"数据生成","slug":"数据生成","date":"2019-09-14T06:36:05.000Z","updated":"2019-09-14T06:37:45.814Z","comments":true,"path":"2019/09/14/数据生成/","link":"","permalink":"http://krrrr.xyz/2019/09/14/数据生成/","excerpt":"图和树的数据生成器","text":"图和树的数据生成器 图有向图和无向图同样适用的数据生成器,可生成随机图 12345678910111213141516171819202122232425262728293031323334353637383940#include&lt;cstdio&gt;#include&lt;algorithm&gt;#include&lt;cstdlib&gt;#include&lt;cstring&gt;#include&lt;set&gt;#include&lt;ctime&gt;#include&lt;iostream&gt;using namespace std;int n,m,s,T;inline int random() &#123; static int seed = s; return seed = (int)(seed*48271ll%2147483647);&#125;set&lt;int&gt;to[100005];//去重int main() &#123; srand ( time ( NULL ) ) ; cin &gt;&gt; T; cout &lt;&lt; T &lt;&lt; endl; while(T--) &#123; s = rand(); n = 96; m = 102; printf(\"%d %d \\n\",n,m); for(int i = 1 ; i &lt;= m ; i++) &#123; int u = random() % n + 1; int v = random() % n + 1; while(to[u].find(v) != to[u].end() || u == v) &#123; u = random() % n + 1; v = random() % n + 1; &#125; printf(\"%d %d\\n\",u,v); to[u].insert(v); &#125; printf(\"\\n\"); &#125; return 0;&#125; 树保证数据为一棵随机树 1234567891011121314151617181920212223242526272829303132333435363738#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;algorithm&gt;#include&lt;ctime&gt;#include&lt;cstring&gt;#include&lt;cstdlib&gt;using namespace std;int a[10005],e[10005][2];int n = 1000;bool flag[10005];int main() &#123; freopen(\"testdata.in\",\"w\",stdout); printf(\"%d\\n\",n); for(int i = 1 ; i &lt;= n ; i++) &#123; a[i] = rand() % n + 1; while(flag[a[i]]) a[i] = rand() % n + 1; flag[a[i]] = 1; &#125; for(int i = 2 ; i &lt;= n ; i++) &#123; e[i-1][0] = a[i]; e[i-1][1] = a[rand() % (i - 1) + 1]; &#125; memset(flag,0,sizeof(flag)); for(int i = 1 ; i &lt; n ; i++) &#123; int x = rand() % (n - 1) + 1; while(flag[x]) x = rand() % (n - 1) + 1; flag[x] = 1; int f = rand() % 2; if(f) printf(\"%d %d\\n\",e[x][0],e[x][1]); else printf(\"%d %d\\n\",e[x][1],e[x][0]); &#125; return 0;&#125;","categories":[{"name":"知识水平","slug":"知识水平","permalink":"http://krrrr.xyz/分类/知识水平/"}],"tags":[{"name":"数据制造","slug":"数据制造","permalink":"http://krrrr.xyz/标签/数据制造/"}]},{"title":"普及五联测D1","slug":"普及五联测D1","date":"2019-09-14T06:29:43.000Z","updated":"2019-09-22T11:48:49.105Z","comments":true,"path":"2019/09/14/普及五联测D1/","link":"","permalink":"http://krrrr.xyz/2019/09/14/普及五联测D1/","excerpt":"只有知道密码的人才能看呢","text":"你一定知道密码趴 Incorrect Password! No content to display! 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","categories":[{"name":"OI","slug":"OI","permalink":"http://krrrr.xyz/分类/OI/"}],"tags":[{"name":"ZROI","slug":"ZROI","permalink":"http://krrrr.xyz/标签/ZROI/"}]},{"title":"题解:树","slug":"题解-树","date":"2019-09-12T02:53:52.000Z","updated":"2019-09-18T02:37:04.624Z","comments":true,"path":"2019/09/12/题解-树/","link":"","permalink":"http://krrrr.xyz/2019/09/12/题解-树/","excerpt":"暴力都不想写的题…","text":"暴力都不想写的题… 考虑到题目中要求的最小的那个东西不太好求所以我们可以找一个最大的符合条件的值,我们记为$tmp$,那么有$ans=tmp+1$ 那我们考虑一下这个$tmp$怎么求.","categories":[{"name":"OI","slug":"OI","permalink":"http://krrrr.xyz/分类/OI/"}],"tags":[{"name":"DP","slug":"DP","permalink":"http://krrrr.xyz/标签/DP/"},{"name":"树的直径","slug":"树的直径","permalink":"http://krrrr.xyz/标签/树的直径/"}]},{"title":"ZROI普转提D1题解","slug":"ZROI题解","date":"2019-09-11T12:52:58.000Z","updated":"2019-09-22T11:48:23.729Z","comments":true,"path":"2019/09/11/ZROI题解/","link":"","permalink":"http://krrrr.xyz/2019/09/11/ZROI题解/","excerpt":"只有知道密码的人才能看呢","text":"你一定知道密码趴 Incorrect Password! No content to display! ","categories":[{"name":"OI","slug":"OI","permalink":"http://krrrr.xyz/分类/OI/"}],"tags":[{"name":"ZROI","slug":"ZROI","permalink":"http://krrrr.xyz/标签/ZROI/"}]},{"title":"散步","slug":"散步题解","date":"2019-09-11T12:36:29.000Z","updated":"2019-09-18T02:41:32.208Z","comments":true,"path":"2019/09/11/散步题解/","link":"","permalink":"http://krrrr.xyz/2019/09/11/散步题解/","excerpt":"这题好难啊","text":"这题好难啊 首先可以发现可以二分答案. 我们可以考虑二分一个最长的路径长度$mid$,然后将每个点看成不能在最多连续走$mid$个相同的路的情况下,从$1$号点到$n$号点是否联通. 然后现在的问题就变成了判断图的连通性的问题.我们发现,每个点只有两条出边.而且每种类型的出边只有一条,那么可以发现同样的类型的路径的走路的路径,可以看作一个集合.我们可以设$dis_{i,siz}$表示$i$这个点一直按照$siz$类型的路径一直走,最后一段$siz$路径的长度,然后我们发现,如果$i$这个点走到$j$这个点时,那么$dis_{j,siz}=dis_{i,siz}+1$,而我们发现这个东西显然可以用带权并查集来维护.在使用了带权并查集之后,我们每次就可以在$O(logn)$的时间复杂度内求出以某个点为起点走到最远能走到那个点了.然后我们可以进行一次$bfs$.在某次更新中,可以发现,如果现在到达这个点的最后的路径是$siz$类型的话,如果现在这个点连向的$siz xor 1$类型的点还没有被入队过,那么就将这个点扔进队里. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113#include &lt;cstdio&gt;#include &lt;algorithm&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;queue&gt;#include &lt;map&gt;#include &lt;set&gt;#include &lt;cmath&gt;#include &lt;cctype&gt;#include &lt;ctime&gt;#include &lt;vector&gt;#include &lt;cstdlib&gt;#include &lt;stack&gt;#define ll long long#define pll std::pair&lt;int,int&gt;#define mp std::make_pair#define oo 2147483647#define PI 3.141592653590#define rint register int#define F(i,a,b) for(rint i=a;i&lt;=b;i++)#define D(i,a,b) for(rint i=a;i&gt;=b;i--)inline int _read () &#123;int s = 0 , w = 1;char ch = getchar ();while ( ch &gt; '9' || ch &lt; '0' ) &#123; if ( ch == '-' ) w = -1; ch = getchar ();&#125;while ( ch &gt;= '0' &amp;&amp; ch &lt;= '9' ) &#123; s = s * 10 + ch - '0'; ch = getchar ();&#125;return s * w;&#125;template &lt; class T &gt; inline void read ( T &amp;x ) &#123;T s = 0 , w = 1;char ch = getchar ();while ( ch &gt; '9' || ch &lt; '0' ) &#123; if ( ch == '-' ) w = -1; ch = getchar ();&#125;while ( ch &gt;= '0' &amp;&amp; ch &lt;= '9' ) &#123; s = s * 10 + ch - '0'; ch = getchar ();&#125;x = s * w;return;&#125;template &lt; class T , typename ...Argc &gt; inline void read ( T &amp;x , Argc &amp;...Args ) &#123;read ( x );read ( Args... );return;&#125; template &lt; class T &gt; inline T max ( T x , T y ) &#123;return x &gt; y ? x : y;&#125;template &lt; class T &gt; inline T min ( T x , T y ) &#123;return x &lt; y ? x : y;&#125;template &lt; class T &gt; inline void abs ( T x ) &#123;return x &gt; 0 ? x : -x;&#125;template &lt; typename T &gt; void write ( T x ) &#123;if ( x &lt; 0 ) x = -x , putchar ( '-' );if ( x &gt; 9 ) write ( x / 10 );putchar ( x % 10 + 48 );return;&#125;template &lt; typename T &gt; void writeln ( T x ) &#123;write ( x ); printf (\"\\n\"); &#125;template &lt; class T &gt; inline T gcd ( T x , T y ) &#123;if ( x &lt; y ) swap ( x , y );if ( !y ) return x;return gcd ( y , x % y );&#125;template &lt; class T &gt; inline T ksm ( T x , T y , T Mod ) &#123;T tmp = 1;while ( y ) &#123;if ( y % 2 == 1 ) tmp = ( tmp * x % Mod );x = ( x * x ) % Mod;y &gt;&gt;= 1;&#125;return tmp;&#125; /**********************************************************************************************************************************************************************************************************************************************************************/const int N = 2e5 + 10; int n;int G[N][2];int father[N][2] , dis[N][2];bool vis[N][2];struct Node &#123; int pos; int kid;&#125;;std :: queue &lt; Node &gt; qu;int find ( int x , int kd ) &#123; if ( father[x][kd] != x ) &#123; int tmp = father[x][kd]; father[x][kd] = find ( father[x][kd] , kd ); dis[x][kd] += dis[tmp][kd]; &#125; return father[x][kd];&#125;inline bool check ( int rdm ) &#123; memset ( vis , false , sizeof ( vis ) ); memset ( dis , 0 , sizeof ( dis ) ); F ( i , 1 , n ) father[i][0] = father[i][1] = i; qu.push ( Node &#123; 1 , 0 &#125; ); qu.push ( Node &#123; 1 , 1 &#125; ); while ( !qu.empty() ) &#123; int j = qu.front().pos; int siz = qu.front().kid; qu.pop(); int now = 0; while ( 1 ) &#123; int root = find ( j , siz ); now = dis[j][siz]; if ( now + 1 &gt; rdm ) break; int kt = G[root][siz]; int kj = find ( kt , siz ); if ( !vis[kt][siz ^ 1] ) &#123; vis[kt][siz ^ 1] = 1; qu.push ( Node &#123; kt , siz ^ 1 &#125; ); &#125; if ( kj == root ) break; father[root][siz] = kt; dis[root][siz] = 1; &#125; &#125; if ( vis[n][0] || vis[n][1] ) return 1; return 0;&#125;int main ( void ) &#123; read ( n ); F ( i , 1 , n ) &#123; G[i][0] = _read(); G[i][1] = _read(); &#125; int l = 0 , r = n + 1; while ( l &lt;= r ) &#123; int mid = ( l + r ) &gt;&gt; 1; if ( check ( mid ) ) r = mid - 1; else l = mid + 1; &#125; if ( l &gt; n ) puts ( \"-1\" ); else writeln ( l ); return 0;&#125;// Main Code","categories":[{"name":"OI","slug":"OI","permalink":"http://krrrr.xyz/分类/OI/"}],"tags":[{"name":"图论","slug":"图论","permalink":"http://krrrr.xyz/标签/图论/"},{"name":"二分","slug":"二分","permalink":"http://krrrr.xyz/标签/二分/"},{"name":"最短路","slug":"最短路","permalink":"http://krrrr.xyz/标签/最短路/"}]},{"title":"Codeforces Round 72 题解报告","slug":"题解报告","date":"2019-09-11T10:49:39.000Z","updated":"2019-09-18T02:40:46.032Z","comments":true,"path":"2019/09/11/题解报告/","link":"","permalink":"http://krrrr.xyz/2019/09/11/题解报告/","excerpt":"qwq","text":"qwq A.第一眼看上去貌似是个找规律$O(1)$题,实际看了一下,确实是找规律$O(1)$题.所以就开始愉快的找规律,于是就有了以下的提交记录: emmm…. QAQ然后我们考虑一下正解. 我们设原来我们有$str in exp$,我们设我们分给$str x$点的$exp$,分给$in y$点的$exp$,那么显然有: x+y=exp \\ and \\ str+x>in+y发现上边的这个方程,通过将$y$用$exp-x$代替之后,我们可以解出$x$的具体范围.而且我们可以发现:所有$x$的取值范围一共只有$exp + 1$种,所以就可以愉快的求出答案了. 最后别忘了判断$exp$为$0$的情况. 1234567891011121314151617181920212223242526272829#include&lt;bits/stdc++.h&gt;#define int long longusing namespace std;signed main()&#123; ios::sync_with_stdio(false); cin.tie(0),cout.tie(0); int T; cin&gt;&gt;T; while(T--)&#123; int str,in,exp; cin&gt;&gt;str&gt;&gt;in&gt;&gt;exp; if (exp==0)&#123; if(str&gt;in) cout&lt;&lt;\"1\"&lt;&lt;endl; else cout&lt;&lt;\"0\"&lt;&lt;endl; continue; &#125; if(in+exp-str&lt;0)&#123; cout&lt;&lt;exp+1&lt;&lt;endl; continue; &#125; int ans=min(exp+1,(exp+1)-max(0ll,((in+exp-str)/2+1))); if ( ans &lt; 0 ) ans = 0; cout&lt;&lt;ans&lt;&lt;endl; &#125; return 0;&#125; B.这么可爱的怪兽我怎么可能忍心去打它呢 我们看到题,首先想到,如果我们砍一刀,这个怪兽不死,那么它如果长出来的头大于我们我们这次砍掉的头.那么我们这次的操作显然没用.所以,在前几刀砍不死怪兽的情况下,我们需要最大化每一次砍头时的$d_i-h_i$,同时我们发现.在某一次砍头中,如果这次的$d_j$非常大,大到一下子可以把怪兽剩下的头砍完.我们就可以不用管这次砍头的副作用$h_j$了. 所以我们维护两个最大值,即$d_i-h_i$的最大值以及$d_i$的最大值,然后直接找题意做即可. 1234567891011121314151617181920212223242526272829303132333435363738#include&lt;bits/stdc++.h&gt;#define int long longusing namespace std;int n,x;signed main()&#123; ios::sync_with_stdio(false); cin.tie(0),cout.tie(0); int T; cin&gt;&gt;T; while(T--)&#123; int maxs=-1e16; int Damage=-1e16; cin&gt;&gt;n&gt;&gt;x; for(int i=1;i&lt;=n;i++) &#123; int tx,ty; cin&gt;&gt;tx&gt;&gt;ty; maxs=max(maxs,tx); Damage=max(Damage,tx-ty); &#125; if ( x &lt;= maxs ) &#123; cout &lt;&lt; \"1\" &lt;&lt; endl; continue; &#125; if(Damage&lt;=0)&#123; cout&lt;&lt;\"-1\"&lt;&lt;endl; continue; &#125; int now = ( x - maxs ) / Damage; if ( now * Damage &lt; x - maxs ) now+=2; else now++; cout&lt;&lt;now&lt;&lt;endl; &#125; return 0;&#125; C.通过读题,我们可以发现一个很重要的东西:$\\sum_{i=1}^t len_i&lt;=2*10^5$. 通过这个性质,我们可以发现,我们在枚举每一次的区间时,这个区间的最长长度为$log_2len$. 然后就做完了?? 我们枚举一下每个区间的左/右端点,然后直接暴力统计答案就好了. 123456789101112131415161718192021222324252627282930#include &lt;iostream&gt;#include &lt;vector&gt;#include &lt;algorithm&gt;#include &lt;cstring&gt;using namespace std;typedef long long LL;const int N = 200000 + 10;int t,nex[N];char s[N];int main() &#123; scanf(\"%d\",&amp;t); while(t--) &#123; scanf(\"%s\",s+1); int n=strlen(s+1); nex[n+1]=n+1; for(int i=n;i&gt;=1;i--) &#123; if(s[i]=='0') nex[i]=nex[i+1]; else nex[i]=i; &#125; int ans=0; for(int i=1;i&lt;=n;i++)&#123; int now=0; for(int j=nex[i];j&lt;=min(n,nex[i]+20);j++)&#123; now=now*2+s[j]-'0'; if(now==j-i+1) ans++; &#125; &#125; printf(\"%d\\n\", ans); &#125;&#125;","categories":[{"name":"OI","slug":"OI","permalink":"http://krrrr.xyz/分类/OI/"}],"tags":[{"name":"CodeForces题解","slug":"CodeForces题解","permalink":"http://krrrr.xyz/标签/CodeForces题解/"}]},{"title":"Round #582解题报告","slug":"Round-2","date":"2019-09-11T10:48:46.000Z","updated":"2019-09-18T02:40:50.144Z","comments":true,"path":"2019/09/11/Round-2/","link":"","permalink":"http://krrrr.xyz/2019/09/11/Round-2/","excerpt":"qwq","text":"qwq A.Chips Moving题意就是给你n个数,你每次可以选择一个数,对他进行免费的加2或者减2.或者花费1的代价,对某个数进行加一或者减一,求让所有的数变成一样的最小代价. 很显然可以发现,奇数和奇数之间可以相互转变,偶数和偶数之间也可以相互转变,那么我们只需要考虑让奇数全部变成偶数或者让偶数变成奇数就好了. 1234567891011121314#include &lt;bits/stdc++.h&gt;using namespace std;int main() &#123; int n; cin &gt;&gt; n; int cnto = 0; for (int i = 0; i &lt; n; ++i) &#123; int x; cin &gt;&gt; x; cnto += x &amp; 1; &#125; cout &lt;&lt; min(cnto, n - cnto) &lt;&lt; endl; return 0;&#125; B.Bad Prices题意就是给你一个序列$A$,让你求出所有$A_i$中,$\\sum_{i=1}^n[A_i&gt;A_{j(i&lt;j&lt;=n)}?0:1]$ 显然可以直接维护一个后缀最小值,然后判断一下当前$A_i$的值和当前后缀最小值的大小关系,如果$A_i&gt;num_i$,那么ans++ 123456789101112131415161718192021222324252627282930#include&lt;bits/stdc++.h&gt;using namespace std; const int N=150005; int n;int num[N];int mins[N]; int main()&#123; int T; scanf(\"%d\",&amp;T); while(T--)&#123; memset(mins,0x3f3f3f3f,sizeof(mins)); scanf(\"%d\",&amp;n); for(int i=1;i&lt;=n;i++) scanf(\"%d\",&amp;num[i]); for(int i=n-1;i&gt;=1;i--) mins[i]=min(mins[i+1],num[i+1]); int ans=0; for(int i=1;i&lt;n;i++) if(num[i]&gt;mins[i]) ans++; printf(\"%d\\n\",ans); &#125; return 0;&#125; // C.Book Reading显然可以发现,题目中要求的个位数字只受要除的数的个位的影响,所以我们在求出来了倍数的个数$num$时,可以发现,个位数字的出现是有周期的,而这个周期和周期中的数字是由要除的数字的个位决定的.而因为要除的数字的个位最多只有10个,所以我们可以先预处理出每个数字的周期以及他们的和,再对多出来的部分直接暴力就可以了. 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253#include&lt;bits/stdc++.h&gt;#define int long long using namespace std; int n,m;int ned[10],idx[10];int sum[10][10]; signed main()&#123; ios::sync_with_stdio(false); cin.tie(0),cout.tie(0); for(int i=1;i&lt;=9;i++)&#123; int now=i; sum[i][++idx[i]]=i; now+=i; while(now!=i)&#123; if(now&gt;=10) now-=10; sum[i][++idx[i]]=now; now+=i; &#125; &#125; for(int i=1;i&lt;=9;i++) for(int j=1;j&lt;=idx[i];j++) ned[i]+=sum[i][j]; int T; cin&gt;&gt;T; while(T--)&#123; int ans=0; cin&gt;&gt;n&gt;&gt;m; int numm=n/m; int tmp = m; tmp%=10; if(tmp==0||numm==0)&#123; cout&lt;&lt;\"0\"&lt;&lt;endl; continue; &#125; int fir = numm/idx[tmp]; ans+=fir*ned[tmp]; // cout&lt;&lt;fir&lt;&lt;\" \"&lt;&lt;tmp&lt;&lt;endl; int sos=0; for(int i=fir*idx[tmp]+1;i&lt;=numm;i++) ans+=sum[tmp][i-fir*idx[tmp]]; cout&lt;&lt;ans&lt;&lt;endl; &#125; return 0;&#125; // D.Equalizing by Division我们可以发现,对于某一个数$i$,他能变成的数的个数为$log_2i+1$个,而且题目中$i$的权值也不大,所以我们可以开一个桶,按照从小到大的顺序处理每一个数字,每次处理的时候将它能变成的$log_2i$个数字在桶中的权值全部+1,同时花费就是从原来的i到目前的数字要除几次二,当发现有桶中的数字大于给定的$k$时,更新答案. 123456789101112131415161718192021222324252627282930313233343536373839404142#include&lt;bits/stdc++.h&gt;using namespace std; const int N = 2e5 + 10; int n,k,ans=2147483647;int num[N];struct Node&#123; int val; int now;&#125;buck[N]; int main()&#123; ios::sync_with_stdio(false); cin.tie(0),cout.tie(0); cin&gt;&gt;n&gt;&gt;k; for(int i=1;i&lt;=n;i++) &#123; cin&gt;&gt;num[i]; buck[num[i]].now++; if(buck[num[i]].now&gt;=k)&#123; cout&lt;&lt;\"0\"&lt;&lt;endl; return 0; &#125; &#125; sort(num+1,num+1+n); for(int i=1;i&lt;=n;i++)&#123; int idx=1,tmp=num[i]/2; while(tmp)&#123; buck[tmp].now++; buck[tmp].val+=idx; if(buck[tmp].now&gt;=k) ans=min(ans,buck[tmp].val); tmp/=2; idx++; &#125; &#125; cout&lt;&lt;ans&lt;&lt;endl; return 0;&#125; //","categories":[{"name":"OI","slug":"OI","permalink":"http://krrrr.xyz/分类/OI/"}],"tags":[{"name":"CodeForces题解","slug":"CodeForces题解","permalink":"http://krrrr.xyz/标签/CodeForces题解/"}]},{"title":"Atcoder Qualification解题报告","slug":"Qualification解题报告","date":"2019-09-11T10:47:57.000Z","updated":"2019-09-18T02:41:02.545Z","comments":true,"path":"2019/09/11/Qualification解题报告/","link":"","permalink":"http://krrrr.xyz/2019/09/11/Qualification解题报告/","excerpt":"qwq","text":"qwq T1:题目中给你一个$D$和一个$M$(一年有$D$个月,一个月有$M$天)让你求出: 的个数.其中$d_1$表示个位,$d_{10}$表示十位. 因为数据范围比较小,所以可以直接暴力枚举解决qwq… 12345678910111213141516#include&lt;bits/stdc++.h&gt;using namespace std;int m,d,ans;int main(void)&#123; scanf(\"%d%d\",&amp;m,&amp;d); for(int i=1;i&lt;=m;i++)&#123; for(int sw=22;sw&lt;=d;sw++)&#123; int g=sw%10; int s=sw/10; if(g&gt;=2&amp;&amp;s&gt;=2&amp;&amp;s*g==i) ans++; &#125; &#125; printf(\"%d\\n\",ans); return 0;&#125; T2:给你一个数列$A$,将这个$A$不断$copy k$次变成数列$B$.最后让你求出数列$B$的逆序对个数.$k&lt;=10^9$ 看到$k$那么大,肯定可以$n^2$暴力了啊qwq 我们考虑这k组中的每一组.如果我们考虑原数列$A$中的每一位$A_i$,如果出现了一个$A_j&lt;A_i$,那么在从第$2$组开始,到第$k$组,这些比$A_i$小的数都会对$A_i$有贡献,而且第$3$组到第$k$组也会对第$2$组有贡献,这样一直递推下去,会发现有$1+(k-1)*(k-1)/2$次贡献,而且最后不要忘了一组中对自己的贡献. 1234567891011121314151617181920212223242526272829303132333435363738#include&lt;bits/stdc++.h&gt;#define int long longusing namespace std;const int N=2004;const int HA=1e9+7;int n,k,ans;int num[N],dd[N];inline int ksm(int x,int y)&#123; int tmp=1; while(y)&#123; if(y&amp;1) tmp=(tmp*x)%HA; x=(x*x)%HA; y&gt;&gt;=1; &#125; return tmp%HA;&#125;signed main()&#123; scanf(\"%lld%lld\",&amp;n,&amp;k); for(int i=1;i&lt;=n;i++) scanf(\"%lld\",&amp;num[i]); for(int i=1;i&lt;=n;i++) for(int j=1;j&lt;=n;j++)&#123; if(num[j]&lt;num[i]) dd[i]++; &#125; for(int i=1;i&lt;=n;i++)&#123; ans=(ans+k*(k-1)%HA*ksm(2,HA-2)%HA*dd[i]%HA)%HA; int tdp = 0; for(int j=i+1;j&lt;=n;j++) if(num[j]&lt;num[i]) tdp++; ans = ( ans + tdp * k ) % HA; &#125; printf(\"%lld\\n\",ans); return 0; &#125; T4:T3我不会欸qwq(捂脸)","categories":[{"name":"OI","slug":"OI","permalink":"http://krrrr.xyz/分类/OI/"}],"tags":[{"name":"Atcoder题解","slug":"Atcoder题解","permalink":"http://krrrr.xyz/标签/Atcoder题解/"}]},{"title":"Round #573 (Div. 2)解题报告","slug":"Round-1","date":"2019-09-11T10:46:57.000Z","updated":"2019-09-18T02:40:55.105Z","comments":true,"path":"2019/09/11/Round-1/","link":"","permalink":"http://krrrr.xyz/2019/09/11/Round-1/","excerpt":"qwq","text":"qwq A:没啥可说的,直接按照$Mod 4$分类然后讨论就好了. B:显然可以发现答案只能是0,1,2,3中的某一个,我们只需要将读入记录下来,然后对于每一种胜利的情况分组枚举一下,记录一个最小的ans就可以了. C:考虑每一次操作中,这一页的最右边能消除几个.我们可以设我们已经消除了$sum$个数字,那么当前的$m_i$在消除之后中的书中的位置就是$m_i-sum$,我们就可以推导出来当前$m_i$的这一页的最右边的一个数字就是$((m_i-sum)/k+1)*k$,我们只需要开一个关于i的指针就可以了,时间复杂度为$O(m)$. D:考虑必胜情况:在另外一个人开始取的时候有$2$个或者以上的重复组.或者在有1个重复组时,取出一个重复组(因为不取就会输)之后回和另外一个元素再组成一个重复组. 我们再考虑完这种情况之后,可以发现,我们在将原来的数组排序之后,如果两边都按照最优方式取石子,那么最后的(在决定胜负之前),石子的序列一定是$B_i=i-1$的这样的一个等差数列.所以我们需要对原数组排序,然后统计一个$\\sum_{i=1}^n A_i-(i-1)$,判断一下这个$sum$的奇偶性就可以了. PS:一定要先判断有没有例外的必胜情况(我就是这么WA了4发qwq….) 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859#include&lt;bits/stdc++.h&gt;#define int long longusing namespace std;const int N=1e5+10;int n,idxx;int num[N],dis[N];map&lt;int,bool&gt;mp;signed main()&#123; ios::sync_with_stdio(false); cin.tie(0),cout.tie(0); cin&gt;&gt;n; for(int i=1;i&lt;=n;i++) cin&gt;&gt;num[i]; sort(num+1,num+1+n); int sum=0,dpp=0; for(int i=1;i&lt;=n;i++)&#123; if(num[i]==num[i-1]&amp;&amp;i&gt;=2)&#123; dpp++; dis[++idxx]=num[i]; &#125; sum+=num[i]-i+1; mp[num[i]]=1; &#125; if(n==1)&#123; if(sum&amp;1) cout&lt;&lt;\"sjfnb\"&lt;&lt;endl; else cout&lt;&lt;\"cslnb\"&lt;&lt;endl; return 0; &#125; if(dpp==1&amp;&amp;num[1]==0&amp;&amp;num[2]==0)&#123; cout&lt;&lt;\"cslnb\"&lt;&lt;endl; return 0; &#125; if(dpp==1&amp;&amp;n==2)&#123; cout&lt;&lt;\"sjfnb\"&lt;&lt;endl; return 0; &#125; if(dpp==1)&#123; if(mp[dis[1]-1]) cout&lt;&lt;\"cslnb\"&lt;&lt;endl; else &#123; if(!(sum&amp;1)) cout&lt;&lt;\"cslnb\"&lt;&lt;endl; else cout&lt;&lt;\"sjfnb\"&lt;&lt;endl; &#125; return 0; &#125; if(dpp&gt;=2)&#123; cout&lt;&lt;\"cslnb\"&lt;&lt;endl; return 0; &#125; if(!(sum&amp;1)) cout&lt;&lt;\"cslnb\"&lt;&lt;endl; else cout&lt;&lt;\"sjfnb\"&lt;&lt;endl; return 0;&#125;","categories":[{"name":"OI","slug":"OI","permalink":"http://krrrr.xyz/分类/OI/"}],"tags":[{"name":"CodeForces题解","slug":"CodeForces题解","permalink":"http://krrrr.xyz/标签/CodeForces题解/"}]},{"title":"Round","slug":"Round","date":"2019-09-11T10:44:02.000Z","updated":"2019-09-18T02:35:48.224Z","comments":true,"path":"2019/09/11/Round/","link":"","permalink":"http://krrrr.xyz/2019/09/11/Round/","excerpt":"qwq","text":"qwq A:这道题能想到二进制转十进制然后判断满足的个数，但是转十进制范围已经超过了$long long$，直接模拟会溢出因为满足条件数值的都是4的次幂，所以二进制首位1后跟的$2k$个$0$即为$4$的$k$次幂直接对$0$的个数分析即可 B:很明显的一道贪心题目,当求最小的$sum$时,显然当$1$最多时,$sum$最小.当求$sum$最大时同理.又因为当$a_i$是一个偶数时,$\\frac{a_i}{2}$肯定存在,而且$a_i$的最小值为1,所以显然$a_i$的值就只能是$2^j$. C:(个人感觉比$D$难$QAQ…$)让你在给定的序列$P$中求一个子序列,使得在图中按照该子序列进行最短路径移动时可以完整经过原序列$P$.乍一看一点思路都没有.但是仔细思考可以发现一点点思路.我们可以从题目中给出的起点(也就是一号点)开始进行移动,然后在原序列$P$中如果需要经过$P_{i}$和$P_{i+1}$,那么我们显然可以得到$P_i$与$P_{i+1}$一定是直接相连的(因为题目中没有给出无解的情况).那么我们可以扩展一下,假设我们现在在$P_j$号点,我们要走到$P_k$号点.那么如果$dis[P_j][P_k]==j-k$,那么在有解的情况下,一定是有$P_j$经过了所有的$j&lt;i&lt;k$的点(可以自己画个图证明一下).在这种情况下,我们就可以选择扩展答案了. (感觉还是放一下代码比较好qwq) 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556#include&lt;bits/stdc++.h&gt;using namespace std;const int oo = 0x3f3f3f3f;const int N = 105;const int M = 1e6 + 10;int n,m,idx;char mp[N][N];int G[N][N],point[M],ans[M];int qu[M&lt;&lt;1];int head=1,tai=0;int main()&#123; memset ( G , 0x3f3f3f3f , sizeof ( G ) ); scanf ( \"%d\" , &amp;n ); for ( int i = 1 ; i &lt;= n ; i++ ) scanf ( \"%s\" , mp[i] + 1 ); for ( int i = 1 ; i &lt;= n ; i++ ) &#123; for ( int j = 1 ; j &lt;= n ; j++ ) if ( mp[i][j] == '1' ) G[i][j] = 1; G[i][i] = 1; &#125; for ( int k = 1 ; k &lt;= n ; k++ ) for ( int i = 1 ; i &lt;= n ; i++ ) for ( int j = 1 ; j &lt;= n ; j++ ) G[i][j] = min ( G[i][j] , G[i][k] + G[k][j] ); scanf(\"%d\",&amp;m); for ( int i = 1 ; i &lt;= m ; i++ ) scanf ( \"%d\" , &amp;point[i] );// for(int i=1;i&lt;=n;i++)&#123;// for(int j=1;j&lt;=n;j++)// printf(\"%d \" ,G[i][j]);// puts(\"\");// &#125; int st=1,now=2; while(now&lt;=m)&#123; int diss=now-st; if(diss==G[point[st]][point[now]])&#123; if(head&lt;=tai) head++; qu[++tai]=now; now++; &#125; else &#123; ans[++idx]=point[st]; if(head&lt;=tai) st=qu[head++]; &#125; &#125; ans[++idx]=point[st]; if(ans[idx]!=point[m]) ans[++idx]=point[m]; printf(\"%d\\n\",idx); for(int i=1;i&lt;=idx;i++) printf (\"%d \",ans[i]); return 0;&#125; D:感觉比$C$简单啊$QAQ$….让你求一个字符串使得这个字符串和给定01字符串的每一个子区间的最长单调不降区间长度一样长.我们自己理解了以后可以发现,一个区间的最长单调不降区间长度只是和每一个$1$后的$0$有关系,而和$0$后的$1$无关.(因为对于两个子串$11$和$01$,它们的最长不降区间是一样的).那么我们就可以考虑把原字符串的一些$1$变成$0$.就可以了. 但是怎么改变呢?我们考虑到,对于某一段连续的$1$,那么这段连续区间中的第一个1很显然是不必要的(而且不是最后一个1),那么我们可以把这些个1变成0.(然后就做完辣qwq) 123456789101112131415161718192021#include&lt;bits/stdc++.h&gt;using namespace std;const int N = 1e5 + 10;int tmpp;char ss[N] , tt[N];int main()&#123; scanf ( \"%s\" , ss + 1 ); int len = strlen ( ss + 1 ); for ( int i = 1 ; i &lt;= len ; i++ ) tt[i] = ss[i]; for ( int i = len ; i &gt;= 1 ; i-- ) &#123; if ( ss[i] == '1' &amp;&amp; tmpp &gt;= 0 ) tt[i] = '0'; int cur=ss[i] == '1' ? 1 : -1; tmpp = min ( tmpp + cur , cur ); &#125; for ( int i = 1 ; i &lt;= len ; i++ ) printf ( \"%c\" , tt[i] ); return 0;&#125;// E:现在还不会qwq","categories":[{"name":"OI","slug":"OI","permalink":"http://krrrr.xyz/分类/OI/"}],"tags":[{"name":"CodeForces题解","slug":"CodeForces题解","permalink":"http://krrrr.xyz/标签/CodeForces题解/"}]},{"title":"20190819模拟赛题解","slug":"20190819模拟赛题解","date":"2019-09-11T10:43:00.000Z","updated":"2019-09-18T02:32:01.404Z","comments":true,"path":"2019/09/11/20190819模拟赛题解/","link":"","permalink":"http://krrrr.xyz/2019/09/11/20190819模拟赛题解/","excerpt":"qwq","text":"qwq 又是爆零的一次比赛欸qwq… T1: 让你在一个矩阵中,找出一条路径,使得经过的路径方差最小. 我就直接放题解了qwq… 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849#include&lt;bits/stdc++.h&gt;template &lt;class T&gt;bool Reduce(T &amp;a,T const &amp;b)&#123; return a&gt;b?a=b,1:0;&#125;const int N=31,inf=1e9+7,S=59*30;int n,m,ans;int a[N][N];int f[N][N];int cnt=0;void init()&#123; std::ios::sync_with_stdio(false); freopen(\"path.in\",\"r\",stdin); freopen(\"path.out\",\"w\",stdout); std::cin&gt;&gt;n&gt;&gt;m; for(int i=1;i&lt;=n;++i) for(int j=1;j&lt;=m;++j) std::cin&gt;&gt;a[i][j];&#125;int calc(const int &amp;sum,const int &amp;i,const int &amp;j)&#123; return (n+m-1)*a[i][j]*a[i][j]-2*sum*a[i][j];&#125;int dp(int sum)&#123; for(int i=0;i&lt;N;++i) for(int j=0;j&lt;N;++j) f[i][j]=inf; f[1][1]=calc(sum,1,1); for(int j=2;j&lt;=m;++j) Reduce(f[1][j],f[1][j-1]+calc(sum,1,j)); for(int i=2;i&lt;=n;++i) Reduce(f[i][1],f[i-1][1]+calc(sum,i,1)); for(int i=2;i&lt;=n;++i) for(int j=2;j&lt;=m;++j)&#123; Reduce(f[i][j],f[i-1][j]+calc(sum,i,j)); Reduce(f[i][j],f[i][j-1]+calc(sum,i,j)); &#125; return sum*sum+f[n][m];&#125;int main()&#123; init(); ans=inf; for(int sum=1;sum&lt;=S;++sum) Reduce(ans,dp(sum)); std::cout&lt;&lt;ans; return 0;&#125; T2:让你每次从一个区间向另一个区间连边,最后求起点到所有点的最短路. 很显然是线段树优化建图,开两颗线段树A,B,第一颗线段树从儿子节点向父亲连边,另外一条线段树从父亲向儿子连边.但是一个点一个点的向区间连边太麻烦了,所以我们需要建一个虚点,每次从区间[l1,r1]向一个虚点连边,然后再用这个虚点向区间[l2,r2]连边,这样就可以了. (但是我被卡常了) 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;#include &lt;queue&gt;inline int read () &#123; int s = 0 , w = 1; char ch = getchar (); while ( ch &gt; '9' || ch &lt; '0' ) &#123; if ( ch == '-' ) w = -1; ch = getchar ();&#125; while ( ch &gt;= '0' &amp;&amp; ch &lt;= '9' ) &#123; s = s * 10 + ch - '0'; ch = getchar ();&#125; return s * w;&#125; const int N = 500010;const int M = 2210000;int n , m , p , tot , cnt , root_f , root_s;struct edge&#123; int to; int next; int date;&#125;e[11000000];struct Node&#123; int lc; int rc;&#125;tree[N&lt;&lt;2];int head[M] , dis[M] , pos[N];bool vis[M];std :: priority_queue &lt; std :: pair &lt; int , int &gt; , std :: vector &lt; std :: pair &lt; int , int &gt; &gt; , std :: greater &lt; std :: pair &lt; int , int &gt; &gt; &gt; q; inline void add(int x,int y,int date)&#123; e[++cnt].to=y; e[cnt].next=head[x]; head[x]=cnt; e[cnt].date=date; return;&#125;void FBuild(int &amp;root,int l,int r)&#123; root=++tot; if ( l == r ) &#123; pos[l]=root; return; &#125; int mid=l+r&gt;&gt;1; FBuild(tree[root].lc,l,mid); FBuild(tree[root].rc,mid+1,r); add(tree[root].lc,root,0); add(tree[root].rc,root,0); return;&#125;void SBuild(int &amp;root,int l,int r)&#123; root=++tot; if(l==r)&#123; add(root,pos[l],0); return; &#125; int mid=l+r&gt;&gt;1; SBuild(tree[root].lc,l,mid); SBuild(tree[root].rc,mid+1,r); add(root,tree[root].lc,0); add(root,tree[root].rc,0); return;&#125;void FAdd(int root,int l,int r,int x,int y)&#123; if(x&lt;=l&amp;&amp;r&lt;=y) &#123; add(root,tot,1); return; &#125; int mid=l+r&gt;&gt;1; if(x&lt;=mid) FAdd(tree[root].lc,l,mid,x,y); if(y&gt;mid) FAdd(tree[root].rc,mid+1,r,x,y);&#125;void SAdd(int root,int l,int r,int x,int y)&#123; if(x&lt;=l&amp;&amp;r&lt;=y) &#123; add(tot,root,1); return; &#125; int mid=l+r&gt;&gt;1; if(x&lt;=mid) SAdd(tree[root].lc,l,mid,x,y); if(y&gt;mid) SAdd(tree[root].rc,mid+1,r,x,y); return;&#125;inline void Dijkstra()&#123; memset(dis,0x3f3f3f3f,sizeof(dis)); q.push(std :: make_pair(0,pos[p])); dis[pos[p]]=0; while(!q.empty())&#123; int x=q.top().second; q.pop(); if(vis[x]) continue; vis[x]=1; for(int i=head[x];i;i=e[i].next)&#123; int y=e[i].to; if(dis[x]+e[i].date&lt;dis[y])&#123; dis[y]=dis[x]+e[i].date; q.push(std ::make_pair(dis[y],y)); &#125; &#125; &#125; return;&#125;int main ( void ) &#123; freopen(\"road.in\",\"r\",stdin); freopen(\"road.out\",\"w\",stdout); n = read(); m = read(); p = read(); FBuild ( root_f , 1 , n ); SBuild ( root_s , 1 , n ); while ( m-- ) &#123; int x1 = read() , y1 = read() , x2 = read() , y2 = read(); tot++; FAdd(root_f,1,n,x1,y1); SAdd(root_s,1,n,x2,y2); tot++; FAdd(root_f,1,n,x2,y2); SAdd(root_s,1,n,x1,y1); &#125; Dijkstra(); for(int i=1;i&lt;=n;++i) printf(\"%d\\n\",dis[pos[i]]/2); return 0;&#125; T3:给你一个矩阵,让你求出这个矩阵中的一个最大的子矩阵,使得这个子矩阵的每一行和每一列都是等差数列 暂时咕咕咕一会,不会","categories":[{"name":"OI","slug":"OI","permalink":"http://krrrr.xyz/分类/OI/"}],"tags":[{"name":"模拟赛题解","slug":"模拟赛题解","permalink":"http://krrrr.xyz/标签/模拟赛题解/"}]},{"title":"邪教算法学习小结","slug":"邪教算法学习小结","date":"2019-09-11T10:41:49.000Z","updated":"2019-09-18T02:36:02.272Z","comments":true,"path":"2019/09/11/邪教算法学习小结/","link":"","permalink":"http://krrrr.xyz/2019/09/11/邪教算法学习小结/","excerpt":"qwq","text":"qwq 事实证明,邪教算法是很有用的qwq(以下材料大多抄袭OI-wiki)qwq Part1:随机函数:但是并找不到什么随机化好题qwq,,,,,先Pass了再说qwq… Part2:爬山算法:个人理解就是一个比较跳的贪心(真的是个贪心)….一般常用于单峰函数的求解,但是单峰函数为啥不写三分呢? 爬山算法的一般流程其实就是:选定一个初始答案,通过某种方法计算出另外一个答案,if 另一个答案更优 then 转移否则不变, 很形象的就是了爬山这种东西. 例题 JSOI2008球形空间产生器 空间模型的爬山就是很正常的模板了,直接给代码了qwq 1234567891011121314151617181920212223242526272829303132333435363738394041#include &lt;bits/stdc++.h&gt;using namespace std;const int N = 10005;int n;double tot , f[1005][1005];double ans[N] , cans[N] , dis[N];inline void check () &#123; tot = 0; for ( int i = 1 ; i &lt;= n + 1 ; i++ ) &#123; cans[i] = 0; dis[i] = 0; for ( int j = 1 ; j &lt;= n ; j++ ) dis[i] += ( f[i][j] - ans[j] ) * ( f[i][j] - ans[j] ); dis[i] = sqrt ( dis[i] ); tot += dis[i]; &#125; tot /= ( n + 1 ); for ( int i = 1 ; i &lt;= n + 1 ; i++ ) for ( int j = 1 ; j &lt;= n ; j++ ) cans[j] += ( dis[i] - tot ) * ( f[i][j] - ans[j] ) / tot; return;&#125;int main() &#123; scanf ( \"%d\" , &amp;n ); for ( int i = 1 ; i &lt;= n + 1 ; i++ ) for ( int j = 1 ; j &lt;= n ; j++ ) &#123; scanf ( \"%lf\" , &amp;f[i][j] ); ans[j] += f[i][j]; &#125; for ( int i = 1 ; i &lt;= n ; i++ ) ans[i] /= ( n + 1 ); for ( double T = 10001 ; T &gt;= 0.0000001 ; T *= 0.99995 ) &#123; check (); for ( int j = 1 ; j &lt;= n ; j++ ) ans[j] += cans[j] * T; &#125; for ( int i = 1 ; i &lt;= n ; i++ ) printf ( \"%.3lf \" , ans[i] ); return 0;&#125; Part3. 模拟退火理解了爬山算法了之后,可以发现爬山算法存在的很显然的一个局限性:只能贪心,而这种在处理一些多峰函数时往往会只找到函数的某个极大值而不是最大值.所以我们就要引入模拟退火这种方法.,那么$What is $模拟退火呢? (以下内容来自WIKI) : 12345模拟退火来自冶金学的专有名词退火。退火是将材料加热后再经特定速率冷却，目的是增大晶粒的体积，并且减少晶格中的缺陷。材料中的原子原来会停留在使内能有局部最小值的位置，加热使能量变大，原子会离开原来位置，而随机在其他位置中移动。退火冷却时速度较慢，使得原子有较多可能可以找到内能比原先更低的位置。模拟退火的原理也和金属退火的原理近似：我们将热力学的理论套用到统计学上，将搜寻空间内每一点想像成空气内的分子；分子的能量，就是它本身的动能；而搜寻空间内的每一点，也像空气分子一样带有“能量”，以表示该点对命题的合适程度。算法先以搜寻空间内一个任意点作起始：每一步先选择一个“邻居”，然后再计算从现有位置到达“邻居”的概率。可以证明，模拟退火算法所得解依概率收敛到全局最优解。 听起来很懵逼是不是qwq..没关系,其实就是如果你通过现在的这个状态,以某种方式得到了另外一个答案时,你不再像爬山算法那样直接转移,而已要像下图: 发生转移之后,随着温度T的不断降低,可以发现$\\frac{-\\Delta E}{T}$是不断减小的(因为在新状态更劣的情况下,$-\\Delta E$一定为负数),那么$e^\\frac{-\\Delta E}{T}$一定也是不断减小的并且趋向于0.即模拟退火算法在温度较低时退化为爬山算法.这时只能寻找当前的函数极大值,所以怎么调参使得温度$T$较大时转移到正确的峰函数区间是解决问题的关键(但是还是只能靠运气qwq) 一般模拟退火的代码大概框架如下: 123456789101112inline void SA () &#123; for ( double T = StartTemplature ; T &gt;= EndTemplature ; T *= Coolingcoefficient ) &#123; Typename Newans = Getans();//此处Getans为某个获得新答案的函数. Typename delta = ans - Newans; if ( Newans &gt; ans ) //这里假设当值大时答案更优 ans = Newans; else if ( exp ( -delta / T ) &lt; ( double ) rand () % RAND_MAX ) ans = Newans; &#125; return;&#125; 其实为了保证答案的正确性,一般都会跑多次模拟退火从而增加求得最优解的概率.(调参也是个非常痛苦的过程,因为模拟退火比爬山算法更为看脸随机,所以每个参数的小差别可能导致答案的天壤之别.) 例题 [TJOI2010]分金币 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758#include &lt;iostream&gt;#include &lt;cstdio&gt;#include &lt;algorithm&gt;#include &lt;cmath&gt;#include &lt;cstring&gt; #include &lt;ctime&gt;#define int long longconst int N = 1005;inline int read () &#123; int s = 0 , w = 1; char ch = getchar (); while ( ch &gt; '9' || ch &lt; '0' ) &#123; if ( ch == '-' ) w = -1; ch = getchar ();&#125; while ( ch &gt;= '0' &amp;&amp; ch &lt;= '9' ) &#123; s = s * 10 + ch - '0'; ch = getchar ();&#125; return s * w;&#125;int n , ans = 2147483647;int num[N];inline int get () &#123; int sum1 = 0 , sum2 = 0; for ( int i = 1 ; i &lt;= ( n + 1 ) / 2 ; i++ ) sum1 += num[i]; for ( int i = ( n + 1 ) / 2 + 1 ; i &lt;= n ; i++ ) sum2 += num[i]; return abs ( sum1 - sum2 );&#125;inline void SA () &#123; double T = 5000; while ( T &gt;= 1e-10 ) &#123; int l = rand () % n + 1 , r = rand () % n + 1; std :: swap ( num[l] , num[r] ); int sum = get (); if ( sum &lt; ans ) ans = sum; else if ( exp ( ( ans - sum ) / T ) &lt; (double(rand())/RAND_MAX) ) std :: swap ( num[l] , num[r] ); T *= 0.98; &#125; return;&#125;signed main ( void ) &#123; srand ( rand() ); int T = read (); while ( T-- ) &#123; n = read (); for ( int i = 1 ; i &lt;= n ; i++ ) num[i] = read (); for ( int i = 1 ; i &lt;= 100 ; i++ ) SA (); printf ( \"%lld\\n\" , ans ); ans = 2147483647; &#125; return 0;&#125;","categories":[{"name":"OI","slug":"OI","permalink":"http://krrrr.xyz/分类/OI/"}],"tags":[{"name":"学习笔记","slug":"学习笔记","permalink":"http://krrrr.xyz/标签/学习笔记/"},{"name":"玄学","slug":"玄学","permalink":"http://krrrr.xyz/标签/玄学/"}]},{"title":"Noip2018游记","slug":"Noip2018游记","date":"2018-11-17T06:36:28.000Z","updated":"2019-09-11T12:45:03.687Z","comments":true,"path":"2018/11/17/Noip2018游记/","link":"","permalink":"http://krrrr.xyz/2018/11/17/Noip2018游记/","excerpt":"真没想到我能活着苟到写游记的一天$qwq$","text":"真没想到我能活着苟到写游记的一天$qwq$ Day-1最近几天有点累，早上就不去学校了（然而事实证明这是很正确的抉择）。早上一觉睡到了$8:20$，早上起来想起来$wucstdio$大佬说过立过的$flag$不拔在$Noip$会掉$rp$然后早睡起来就开始肝猪国杀，一直到$10:40$左右重构完了（历时$3$天终于写完了）下午回到学校，发现早上是信心鼓励赛幸好没去23333然后下午+晚上一直在写模板题。（顺便凑出来了$AC520$） Day 0早上教练居然给我们请假不用早来了哎$qwq….$上午开始走，一开始的时候还想在车上背个板子什么的然后SCP真好看又颓了会知乎然后就发现到了$cyyz$了 住宿安排完成了之后居然才$2:30$多一点，然后在宿舍里不知道该干啥。不过感觉$cyyz$的移动信号貌似比$SDSC$的时候快了一点（大雾）然后$wucstdio$给我打电话说楼下有很多大佬，自己迅速下楼去膜神仙。 终于见到了$rqy$姐姐本人了好兴奋$qwq$，不过$rqy$姐姐好像比自己想的稍微内敛了一点。 但是这并改变不了rqy姐姐是人赢的性质据说看见神仙可以rp++,（但是rp貌似被rqy姐姐吸走了QAQ) 晚上全宿舍都在打板子，但是试机的时候$wyxdrqc$和$zyp$大佬还有很多人（包括我）试机的时候线段树都打错了（大雾）。给自己喜欢的人打了个电话，加油qaq… Day 1早上起来，自己冷静了一下，打开题目一看$T1$，哎我为什么$T1$只会$70$分啊….，然后自己又推了1h还是没有推出来，心态当场爆炸qwq…T2当成数论推了半天，然后自己冷静的写了一个乱搞做法，也不知道能得多少分。T3完全不会，打一个直径分滚粗了。 出考场：啊你们怎么都做过原题吗？啊T2是个裸背包吗？啊T3你们都会写70分吗？心态崩了我要妹子QWQ….. 下午心态一直RE中，在宿舍里颓了一下午。不管怎么说第二天都想翻盘。 Day 2第二天睡了一觉，发现心情稍微好了一点。到了考场之后，看到第一题$m=n$我就感觉药丸…. 为什么$Noip$的$T1$要考基环树啊….. 写了个$60$分的树上贪心，然后开始想环上怎么做。然而我很$zz$的没有看数据范围可以$n^2$过，一直在写$O(n)$的做法。然后我就写挂了，自己补了只有环的做法，$72分滚了$。 T2看的时候：啊？读题读了$10mins$确定我不会，然后就决定打表了。 T3：……为什么$Noip$要考$ddp$啊。。。。 出了考场发现大家都说D2不会做当时甚至有些开心。 然后晚上就回去上晚自习了。 一年半的OI一场空，$D1TI$见祖宗说我是再适合不过的了。本来还以为自己能去$PKUWC$,好吧，我还是太$naive$了，感觉自己要与省一擦肩而过….剩下一年自己就养生好了，再来一年起码要拿一个$1=$啊$qwq…..$ 回家之后心态一直RE,,,,不过幸好$wucstdio$大佬能和我谈了谈人生….瞬间感觉$wucstdio$成了我的人生导师qaq…. 以后的路自己就要自己决定了，不过自己决定那些比赛也是要一起参加的qaq… 那些能进入省选的$OIer$们要加油鸭$qaq…$我会一直陪着你们的$@wyxdrqc @wucstdio @lingyuqing$ 你们的$wqyzstql$也要和你们一起努力了。","categories":[{"name":"吹水","slug":"吹水","permalink":"http://krrrr.xyz/分类/吹水/"}],"tags":[{"name":"游记","slug":"游记","permalink":"http://krrrr.xyz/标签/游记/"}]},{"title":"考前模板整理","slug":"考前模板整理","date":"2018-11-06T23:35:06.000Z","updated":"2019-09-18T02:41:38.927Z","comments":true,"path":"2018/11/07/考前模板整理/","link":"","permalink":"http://krrrr.xyz/2018/11/07/考前模板整理/","excerpt":"$Noip$之前在这里整理一波模板….集成了一下所有的$TG$和$PJ$应该会考的模板","text":"$Noip$之前在这里整理一波模板….集成了一下所有的$TG$和$PJ$应该会考的模板 PS:所有模板纯属现场手搓，不保证正确性（比如手抖打错字母什么的），如果找到错误请及时告知我qwq 快速排序最基本的板子了吧,$C++$选手表示开心$qaq$。1234567891011121314151617#include &lt;algorithm&gt;#include &lt;cstdio&gt;const int N = 1e5 + 10int n;int num[N];int main ( void ) &#123; scanf ( \"%d\" , &amp;n ); for ( int i = 1 ; i &lt;= n ; i++ ) scanf ( \"%d\" , &amp;num[i] ); sort ( num + 1 , num + 1 + n ); for ( int i = 1 ; i &lt;= n ; i++ ) printf ( \"%d%c\" , num[i] , i == n ? '\\n' : ' ' ); return 0;&#125; 并查集12345678910111213141516171819202122232425262728293031323334#include &lt;iostream&gt;#include &lt;cstring&gt;#include &lt;algorithm&gt;#include &lt;cstdio&gt;const int N = 1e5 + 10;int n , m;int find ( int x ) &#123; if ( x != father[x] ) father[x] = find ( father[x] ); return father[x];&#125;int main ( void ) &#123; scanf ( \"%d%d\" , &amp;n , &amp;m ); for ( int i = 1 ; i &lt;= n ; i++ ) father[i] = i; for ( int i = 1 ; i &lt;= m ; i++ ) &#123; int x , y , z; scanf ( \"%d%d%d\" , &amp;z , &amp;x , &amp;y ); if ( z == 1 ) &#123; x = find ( x ) , y = find ( y ); father[x] = y; &#125; else if ( z == 2 ) &#123; x = find ( x ) , y = find ( y ); if ( x == y ) puts ( \"Y\" ); else puts ( \"N\" ); &#125; &#125; return 0;&#125; 快速幂个人感觉这个还是个挺重要的板子了吧…..12345678910111213141516171819202122#include &lt;cstdio&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;#include &lt;cstring&gt;inline int Fast_Power ( int x , int y ) &#123; int sum = 1; while ( y ) &#123; if ( y &amp; 1 ) sum = sum * x; x = x * x; y &gt;&gt;= 1; &#125; return sum;&#125;int main ( void ) &#123; int n , m; scanf ( \"%d%d\" , &amp;n , &amp;m ); printf ( \"%d\\n\" , Fast_Power ( n , m ) ); return 0;&#125; 线性筛素数这个其实只是筛素数的话是挺简单的，但是我决定连$\\phi$一起筛出来（如果用不到的话就把$phi$数组自动忽略掉就好了）12345678910111213141516171819202122232425262728293031323334353637#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;const int N = 5e5 + 10;int n , cnt;int prime[N] , phi[N];bool flag[N];int main ( void ) &#123; flag[1] = 1; phi[1] = 1; scanf ( \"%d\" , &amp;n ); for ( int i = 2 ; i &lt;= n ; i++ ) &#123; if ( !flag[i] ) &#123; flag[i] = 1; prime[++cnt] = i; phi[i] = i - 1; &#125; for ( int j = 1 ; j &lt;= cnt &amp;&amp; i * prime[j] &lt;= n ; j++ ) &#123; flag[i * prime[j]] = 1; if ( i % prime[j] == 0 ) &#123; phi[i * prime[j]] = phi[i] * prime[j]; break; &#125; phi[i * prime[j]] = phi[i] * phi[prime[j]]; &#125; &#125; for ( int i = 1 ; i &lt;= cnt ; i++ ) printf ( \"%d \" , prime[i] ); puts ( \"\" ); for ( int i = 1 ; i &lt;= n ; i++ ) printf ( \"%d \" , phi[i] ); return 0;&#125; 【模板】堆又是一个$C++$党的福利$qwq$,直接用$priority_queue$模拟就好啦123456789101112131415161718192021222324252627#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;using std :: priority_queue;int n;priority_queue &lt; int , std :: vector &lt; int &gt; , std :: greater &lt; int &gt; &gt; qu;int main ( void ) &#123; scanf ( \"%d\" , &amp;n ); for ( int i = 1 ; i &lt;= n ; i++ ) &#123; int opts; scanf ( \"%d\" , &amp;opts ); if ( opts == 1 ) &#123; int x; scanf ( \"%d\" , &amp;x ); qu.push ( x ); &#125; else if ( opts == 2 ) printf ( \"%d\\n\" , qu.top () ); else if ( opts == 3 ) qu.pop (); &#125; return 0;&#125; 字符串蛤希其实我个人比较倾向于写自然溢出或者直接随机一个质数$qwq$12345678910111213141516171819202122232425262728293031#include &lt;cstdio&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;#include &lt;cstring&gt;typedef unsigned long long ull;const ull base = 233;const int N = 1e4;const int M = 1e3;int n;char s[N][M];ull has[N];int main ( void ) &#123; scanf ( \"%d\" , &amp;n ); for ( int i = 1 ; i &lt;= n ; i++ ) scanf ( \"%s\" , s[i] + 1 ); for ( int i = 1 ; i &lt;= n ; i++ ) &#123; int len = strlen ( s[i] + 1 ); for ( int j = 1 ; j &lt;= len ; j++ ) has[i] = has[i] * base + s[i][j]; &#125; std :: sort ( has + 1 , has + 1 + n ); int ans = 0; for ( int i = 1 ; i &lt;= n ; i++ ) if ( has[i] != has[i + 1] ) ans++; printf ( \"%d\\n\" , ans ); return 0;&#125; 最小生成树不会写$prim$的蒟蒻瑟瑟发抖….123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;const int N = 1e4 + 10;const int M = 2e5 + 10;int n , m;struct Edge &#123; int from; int to; int data;&#125;e[M];int father[N];inline int read () &#123; int s = 0 , w = 1; char ch = getchar (); while ( ch &gt; '9' || ch &lt; '0' ) &#123; if ( ch == '-' ) w = -1; ch = getchar ();&#125; while ( ch &gt;= '0' &amp;&amp; ch &lt;= '9' ) &#123; s = s * 10 + ch - '0'; ch = getchar ();&#125; return s * w;&#125;inline bool cmp ( Edge x , Edge y ) &#123; return x.data &lt; y.data;&#125;int find ( int x ) &#123; if ( x != father[x] ) father[x] = find ( father[x] ); return father[x];&#125;void Union ( int x , int y ) &#123; x = find ( x ) , y = find ( y ); father[x] = y; return;&#125;inline bool Judge ( int x , int y ) &#123; x = find ( x ) , y = find ( y ); return ( x == y ) ? true : false;&#125;int main ( void ) &#123; n = read () , m = read (); for ( int i = 1 ; i &lt;= n ; i++ ) father[i] = i; for ( int i = 1 ; i &lt;= m ; i++ ) &#123; int x = read () , y = read () , z = read (); e[i].from = x; e[i].to = y; e[i].data = z; &#125; std :: sort ( e + 1 , e + 1 + m , cmp ); int NowEdge = 0 , NowVal = 0; for ( int i = 1 ; i &lt;= m ; i++ ) &#123; int l = e[i].from , r = e[i].to; if ( Judge ( l ,r ) ) continue; Union ( l , r ); NowEdge++; NowVal += e[i].data; if ( NowEdge == n - 1 ) break; &#125; if ( NowEdge == n - 1 ) printf ( \"%d\\n\" , NowVal ); else puts ( \"orz\" ); return 0;&#125; 单源最短路 （有负权边）这张图有负权边，所以只能写某已经死掉的$SPFA$了123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960#include &lt;cstdio&gt;#include &lt;iostream&gt;#include &lt;cstring&gt;#include &lt;algorithm&gt;#include &lt;queue&gt;const int N = 1e4 + 10;const int M = 1e5 + 10;using std :: queue;int n , m , t;struct Edge &#123; int to; int data; int next;&#125;e[M];int head[N] , dis[N];bool inque[N];inline int read () &#123; int s = 0; bool flag = 0; char ch = getchar (); while ( ch &gt; '9' || ch &lt; '0' ) &#123; if ( ch == '0' ) flag = 1; ch = getchar ();&#125; while ( ch &gt;= '0' &amp;&amp; ch &lt;= '9' ) &#123; s = s * 10 + ch - '0'; ch = getchar ();&#125; return ( flag ) ? -s : s;&#125;void Spfa ( int x ) &#123; memset ( dis , 0x3f3f3f3f , sizeof ( dis ) ); inque[x] = 1;dis[x] = 0; qu.push ( x ); while ( !qu.empty () ) &#123; int j = qu.front (); qu.pop (); inque[j] = 0; for ( int i = head[j] ; i ; i = e[i].next ) &#123; int k = e[i].to; if ( dis[k] &gt; dis[j] + e[i].data ) &#123; dis[k] = dis[j] + e[i].data; if ( !inque[k] ) &#123; inque[k] = 1; qu.push ( k ); &#125; &#125; &#125; &#125; return;&#125;int main ( void ) &#123; n = read () , m = read (); for ( int i = 1 ; i &lt;= m ; i++ ) &#123; int x = read () , y = read () , z = read (); add ( x , y , z ); &#125; Spfa ( 1 ); for ( int i = 1 ; i &lt;= n ; i++ ) printf ( \"%d%c\" , dis[i] == 0x3f3f3f3f ? 2147483647 : dis[i] , i == n ? '\\n' : ' ' ); return 0;&#125; 单源最短路 （无负权边）在题目明确说没有负权边的情况下，跑堆优化的$Dijkstra$一定是最稳的其实代码长得都差不多123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172#include &lt;queue&gt;#include &lt;iostream&gt;#include &lt;cstring&gt;#include &lt;algorithm&gt;#include &lt;cstdio&gt;#define F(i,a,b) for ( int i = a ; i &lt;= b ; i++ )#define MP std::make_pair#define se second#define fi firsttypedef std::pair &lt; int , int &gt; pll;const int N = 1e5 + 10; const int M = 4e5 + 20;std::priority_queue &lt; pll , std::vector &lt; pll &gt; , std::greater &lt; pll &gt; &gt; qu;int n , m , s , t;struct Edge &#123; int to; int data; int next;&#125;e[M];int head[N] , dis[N];bool inque[N];inline int read () &#123; int s = 0 , w = 1; char ch = getchar (); while ( ch &gt; '9' || ch &lt; '0' ) &#123; if ( ch == '-' ) w = -1; ch = getchar ();&#125; while ( ch &gt;= '0' &amp;&amp; ch &lt;= '9' ) &#123; s = s * 10 + ch - '0'; ch = getchar ();&#125; return s * w;&#125;void add ( int x , int y , int z ) &#123; e[++t].to = y; e[t].data = z; e[t].next = head[x]; head[x] = t; return;&#125;inline void Heap_Dijkstra ( int x ) &#123; memset ( dis , 0x3f3f3f3f , sizeof ( dis ) ); dis[x] = 0; qu.push ( MP ( dis[x] , x ) ); while ( !qu.empty () ) &#123; int j = qu.top ().se; qu.pop (); if ( inque[j] ) continue; inque[j] = 1; for ( int i = head[j] ; i ; i = e[i].next ) &#123; int k = e[i].to; if ( dis[k] &gt; dis[j] + e[i].data ) &#123; dis[k] = dis[j] + e[i].data; qu.push ( MP ( dis[k] , k ) ); &#125; &#125; &#125; return;&#125;int main ( void ) &#123; n = read (); m = read (); s = read (); F ( i , 1 , m ) &#123; int x = read () , y = read () , z = read (); add ( x , y , z ); &#125; Heap_Dijkstra ( s ); F ( i , 1 , n ) printf ( \"%d \" , dis[i] ); return 0;&#125; 就先整理这些吧…留个坑等着填….","categories":[{"name":"吹水","slug":"吹水","permalink":"http://krrrr.xyz/分类/吹水/"}],"tags":[{"name":"学习笔记","slug":"学习笔记","permalink":"http://krrrr.xyz/标签/学习笔记/"}]},{"title":"[SDOI2010] 所驼门王的宝藏","slug":"i-t","date":"2018-11-05T02:55:13.000Z","updated":"2019-09-18T02:36:16.288Z","comments":true,"path":"2018/11/05/i-t/","link":"","permalink":"http://krrrr.xyz/2018/11/05/i-t/","excerpt":"一道思维难度很简单，代码实现难度非常$mmp$的毒瘤题…..(这很$SDOI…..$)","text":"一道思维难度很简单，代码实现难度非常$mmp$的毒瘤题…..(这很$SDOI…..$) 题目连接：SDOI2010 所驼门王的宝藏 好，我们直接跳过题目背景。 然后我们会发现，如果这道题能把图建出来，那么直接一遍$DAG$上$DP$就过了。 蒽，这不是$sb$题吗？ 然后让我们看数据范围：$1&lt;=n&lt;=1000000$ 笑容逐渐消失 但是我们考虑一下，既然我们要建一张$DAG$。那么，我们完全没有必要对所有的点进行两两连边。我们只需要对每一行和每一列进行连边，把他们连成一个环，这样的话，建边复杂度就会从$O(n^2)$变成$O(n)$了。 然后对于自由门的情况，对不起，我不知道怎么优化，所以我决定暴力建边。 （分析可以发现即使全是自由门，你暴力建边也不会$TLE$） 代码如下： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197#include &lt;cstdio&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;#include &lt;cstring&gt;#include &lt;stack&gt;#include &lt;map&gt;const int N = 1e6 + 10;const int M = 5e6 + 10;using std :: map;using std :: stack;int ans = -0x3f3f3f3f;int n , r , c , t;int dx[] = &#123; 0 , 0 , 1 , 1 , 1 , -1 , -1 , -1 &#125;;int dy[] = &#123; 1 , -1 , 1 , 0 , -1 , 1 , 0 , -1 &#125;;struct Node &#123; int x; int y; int opts; int id;&#125;p[N];struct Edge &#123; int from; int to; int next; &#125;e[M];int idx , Bcnt;int head[N] , dfn[N] , low[N];int Belong[N] , size[N] , f[N];int degree[N];bool instack[N];map &lt; std :: pair &lt; int , int &gt; , int &gt; mp;map &lt; std :: pair &lt; int , int &gt; , int &gt; mat;stack &lt; int &gt; st;inline int read () &#123; int s = 0 , w = 1; char ch = getchar (); while ( ch &gt; '9' || ch &lt; '0' ) &#123; if ( ch == '-' ) w = -1; ch = getchar ();&#125; while ( ch &gt;= '0' &amp;&amp; ch &lt;= '9' ) &#123; s = s * 10 + ch - '0'; ch = getchar ();&#125; return s * w;&#125;template &lt; class T &gt;inline T min ( T x , T y ) &#123; return x &lt; y ? x : y;&#125;template &lt; class T &gt;inline T max ( T x , T y ) &#123; return x &gt; y ? x : y;&#125;inline void add ( int x , int y ) &#123; e[++t].to = y; e[t].from = x; e[t].next = head[x]; head[x] = t; return;&#125;bool cmp1 ( Node a , Node b ) &#123; if ( a.x != b.x ) return a.x &lt; b.x; if ( a.opts == 1 ) return 1; if ( b .opts == 1 ) return 0; return a.y &lt; b.y;&#125;bool cmp2 ( Node a , Node b ) &#123; if ( a.y != b.y ) return a.y &lt; b.y; if ( a.opts == 2 ) return 1; if ( b.opts == 2 ) return 0; return a.x &lt; b.x;&#125;void Tarjan ( int cur ) &#123; dfn[cur] = low[cur] = ++idx; instack[cur] = 1; st.push ( cur ); for ( int i = head[cur] ; i ; i = e[i].next ) &#123; int j = e[i].to; if ( !dfn[j] ) &#123; Tarjan ( j ); low[cur] = min ( low[cur] , low[j] ); &#125; else if ( instack[j] ) low[cur] = min ( low[cur] , dfn[j] ); &#125; int k; if ( low[cur] == dfn[cur] ) &#123; Bcnt++; do &#123; k = st.top ();; st.pop (); instack[k] = 0; Belong[k] = Bcnt; size[Bcnt]++; &#125; while ( k != cur ); &#125; return;&#125;void dfs ( int cur , int father ) &#123; if ( f[cur] &gt; size[cur] ) return; f[cur] = size[cur]; for ( int i = head[cur] ; i ; i = e[i].next ) &#123; int j = e[i].to; if ( j == father ) continue; dfs ( j , cur ); f[cur] = max ( f[cur] , f[j] + size[cur] ); &#125; return;&#125;int main ( void ) &#123; n = read () , r = read () , c = read (); for ( int i = 1 ; i &lt;= n ; i++ ) &#123; p[i].x = read (); p[i].y = read (); p[i].opts = read (); p[i].id = i; mp[std::make_pair ( p[i].x , p[i].y )] = i; &#125; std :: sort ( p + 1 , p + n + 1 , cmp1 ); int first = 1 , last = 1; for ( int i = 1 ; i &lt;= n ; i++ ) &#123; if ( p[i].x != p[i + 1].x ) &#123; if ( first != last ) add ( p[last].id , p[first].id ); last = first = i + 1; &#125; else &#123; if ( p[last].opts == 1 ) add ( p[last].id , p[i + 1].id ); if ( p[i + 1].opts == 1 ) last = i + 1; if ( p[first].opts != 1 ) last = first = i + 1; &#125; &#125; first = last = 1; std :: sort ( p + 1 , p + 1 + n , cmp2 ); for ( int i = 1 ; i &lt;= n ; i++ ) &#123; if ( p[i].y != p[i + 1].y ) &#123; if ( first != last ) add ( p[last].id , p[first].id ); last = first = i + 1; &#125; else &#123; if ( p[last].opts == 2 ) add ( p[last].id , p[i + 1].id ); if ( p[i + 1].opts == 2 ) last = i + 1; if ( p[first].opts != 2 ) last = first = i + 1; &#125; &#125; //printf ( \"%d\\n\" , t ); for ( int i = 1 ; i &lt;= n ; i++ ) if ( p[i].opts == 3 ) for ( int j = 0 ; j &lt; 8 ; j++ ) &#123; int xx = p[i].x + dx[j]; int yy = p[i].y + dy[j]; if ( mp[std :: pair &lt; int , int &gt; ( xx , yy )] ) add ( p[i].id , mp[std :: pair &lt; int , int &gt; ( xx , yy )] ); &#125; // printf ( \"%d\\n\" , t ); // for ( int i = 1 ; i &lt;= t ; i++ ) // printf ( \"%d %d\\n\" , e[i].from , e[i].to ); for ( int i = 1 ; i &lt;= n ; i++ ) if ( !Belong[i] ) Tarjan ( i ); for ( int i = 1 ; i &lt;= n ; i++ ) for ( int j = head[i] ; j ; j = e[j].next ) &#123; int k = e[j].to; if ( Belong[i] != Belong[k] ) mat[std :: make_pair ( Belong[i] , Belong[k] )] = 1; &#125; t = 0; memset ( head, 0 , sizeof ( head ) ); for ( auto it = mat.begin () ; it != mat.end() ; it++ ) &#123; add ( it -&gt; first.first , it -&gt; first.second ); degree[it -&gt; first.second]++; &#125; // for ( int i = 1 ; i &lt;= Bcnt ; i++ ) // printf ( \"%d \" , degree[i] ); for ( int i = 1 ; i &lt;= Bcnt ; i++ ) if ( degree[i] == 0 ) &#123; dfs ( i , 0 ); ans = max ( ans , f[i] ); &#125; printf ( \"%d\\n\" , ans ); return 0;&#125;","categories":[{"name":"OI","slug":"OI","permalink":"http://krrrr.xyz/分类/OI/"}],"tags":[{"name":"图论","slug":"图论","permalink":"http://krrrr.xyz/标签/图论/"},{"name":"DAG","slug":"DAG","permalink":"http://krrrr.xyz/标签/DAG/"}]},{"title":"qbxt D2T2 Code 题解","slug":"题解","date":"2018-11-04T02:40:29.000Z","updated":"2019-09-18T02:36:11.712Z","comments":true,"path":"2018/11/04/题解/","link":"","permalink":"http://krrrr.xyz/2018/11/04/题解/","excerpt":"看了一眼之后完全就是一脸懵逼的题….","text":"看了一眼之后完全就是一脸懵逼的题…. 首先先读题$qaq$…..题目的大致意思就是给你一个矩阵，然后问你把这个矩阵横竖填成异或值为$1$的矩阵的方案数。 很明显，这道题没有什么枚举上界，所以你想直接枚举的话是不太可能的。那么我们怎么办呢$?$ 我也不知道 既然枚举补星，那么我们就用一个比较常见的正难则反的思想。对于这道题，我们可以容斥的去做 那么，首先，所有的方案是什么呢？ All = 2^{n*m}为什么呢？一共有n+m个校验码，我们按位数考虑，在只有1位的情况下，那么这一位可能是$0$或者$1$。那么就是$(2^n)^m$的方案数了。 然后我们考虑对于每一位删掉不合法的情况：因为异或起来是$1$，那么对于没一行或者每一列，$1$的个数总是奇数。那么我们就可以根据这个东西来进行删除不合法状态的操作了 最后统计出来答案 我们发现，因为有$k$位，而我们是按位考虑的。所以我们最后要取答案的$k$次方。 代码如下：12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152#include &lt;bits/stdc++.h&gt;#define int long longconst int N = 505;const int MOD = 1e9 + 7;int c[N][N];int n , m , k , t , ans;inline int read () &#123; int s = 0 , w = 1; char ch = getchar (); while ( ch &gt; '9' || ch &lt; '0' ) &#123; if ( ch == '-' ) w = -1; ch = getchar ();&#125; while ( ch &gt;= '0' &amp;&amp; ch &lt;= '9' ) &#123; s = s * 10 + ch - '0'; ch = getchar ();&#125; return s * w;&#125;int Fast_Power ( int x , int y ) &#123; int sum = 1; while ( y ) &#123; if ( y &amp; 1 ) sum = sum * x % MOD; x = x * x % MOD; y &gt;&gt;= 1; &#125; return sum;&#125;signed main() &#123; for ( int i = 1 ; i &lt;= 500 ; i++ ) c[i][i] = c[i][0]=1; for ( int i = 2 ; i &lt;= 500 ; i++ ) for ( int j = 1 ; j &lt; i ; j++ ) c[i][j] = ( c[i - 1][j] + c[i - 1][j - 1] ) %MOD; t = read(); while ( t-- ) &#123; n = read () , m = read() , k = read (); int ans = Fast_Power ( 2 , n * m ); for ( int i = 0 ; i &lt;= n ; i++ ) for ( int j = 0 ; j &lt;= m ; j++ ) &#123; if ( i == 0 &amp;&amp; j == 0 ) continue; if ( ( i + j ) &amp; 1 ) ans = ( ans + MOD - Fast_Power ( 2 , ( n - i ) * ( m - j ) ) * c[n][i] % MOD * c[m][j] % MOD ) % MOD; else ans = ( ans + Fast_Power ( 2 , ( n - i ) * ( m - j ) ) * c[n][i] % MOD * c[m][j] % MOD ) % MOD; &#125; ans = Fast_Power ( ans , k ); printf ( \"%lld\\n\" , ans ); &#125; return 0;&#125;","categories":[{"name":"OI","slug":"OI","permalink":"http://krrrr.xyz/分类/OI/"}],"tags":[{"name":"思维","slug":"思维","permalink":"http://krrrr.xyz/标签/思维/"},{"name":"数学","slug":"数学","permalink":"http://krrrr.xyz/标签/数学/"},{"name":"容斥原理","slug":"容斥原理","permalink":"http://krrrr.xyz/标签/容斥原理/"}]},{"title":"[题解] Noip2016D1T3 换教室","slug":"换教室题解","date":"2018-11-02T03:10:17.000Z","updated":"2019-09-18T02:36:22.063Z","comments":true,"path":"2018/11/02/换教室题解/","link":"","permalink":"http://krrrr.xyz/2018/11/02/换教室题解/","excerpt":"一道被天天爱跑步抢尽了风头的最没有排面的$T3…..$","text":"一道被天天爱跑步抢尽了风头的最没有排面的$T3…..$说实话，这道题我刚开始是不会的，然后我看了L_Y_T大爷的$Blog$之后才恍然大悟（$Blog$写的很好，赞一个）先安利完$Blog$再说L_Y_T大爷的Blog 看了$Blog$之后,突然发现，这东西要求的概率知识点我都是会的，只是DP式子想不出来而已$qaq…$(我好菜啊) 因为题目中说，我们最多可以换$m$次，而题目中说的你只能在开始之前选择方案的说法完全没用，毕竟谁会知道你是预测了未来呢（逃 然后，因为有$n$个课程，所以我们设$f[i][j][0/1]$来表示第i个点,第j次换,换不换 然后我们分情况来表示转移：每个教室分为两种情况 1.换2.不换这个是挺平常的然后复杂在换与不换的分情况上了~~~不换:不换是分为这样几种情况:上一个也不换 , 上一个换 且成功,上一个换但失败同理,换也有好多种情况:上一个点不换,这个点失败上一个点不换,这个点成功上一个点换成功,这个点成功上一个点换成功,这个点失败上一个点换失败,这个点成功上一个点换失败,这个点也失败 然后方程好复杂的，是：1234567891011121314151617181920212223242526 上一点不换:f[i-1][j-1][0]这一点换1.失败消耗体力: dis[c[i-1]][c[i]] 分析: 由于上一个点不换,所以上一个点一定是在c[]中的;假定这次失败,那么这次也只能去c[]中的教室;2.成功消耗体力: dis[c[i-1]][d[i]]分析: 由于上一个点不换,所以上一个点一定是在c[]中的;假定这次成功,那么这次能去d[]中的教室;那么,失败的概率是1-k[],成功的概率是k[].综上,这种情况就是:f[i-1][j-1][0]+dis[c[i-1]][d[i]]*k[i]+dis[c[i-1]][c[i]]*(1.0-k[i]) 同理,上一点换,这一点换1.上一点失败,这一点失败(以后省一点哈)消耗体力: dis[c[i-1]][c[i]]概率:都失败这运气也没谁了!!!! 概率:(1.0-k[i-1])*(1.0-k[i])2.失败,成功消耗体力: dis[c[i-1]][d[i]]概率 : (1.0-k[i-1])*k[i]3.成功,失败消耗体力 : dis[d[i-1]][c[i]]概率: k[i-1]*(1.0-k[i])4.成功,成功消耗体力: dis[d[i-1]][d[i]] 概率: k[i-1]*k[i] 然后对于不换的方程：12f[i][j][0] = min(f[i-1][j][0]+dis[c[i-1]][c[i]],f[i-1][j][1]+dis[c[i-1]][c[i]]*(1.0-k[i-1])+dis[d[i-1]][c[i]]*k[i-1]) ; 之前需要Floyd预处理一下，然后就好啦(这道题的确比天天爱跑步简单23333)123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;const int N = 2050;const int M = 350;int n , m , v , e;int c[N] , d[N] ;double G[M][M] , f[N][N][2];double k[N];template &lt; class T &gt;inline T min ( T x , T y ) &#123; return x &lt; y ? x : y;&#125;int main ( void ) &#123; scanf ( \"%d%d%d%d\" , &amp;n , &amp;m , &amp;v , &amp;e ); for ( int i = 1 ; i &lt;= n ; i++ ) scanf ( \"%d\" , &amp;c[i] ); for ( int i = 1 ; i &lt;= n ; i++ ) scanf ( \"%d\" , &amp;d[i] ); for ( int i = 1 ; i &lt;= n ; i++ ) scanf ( \"%lf\" , &amp;k[i] ); for ( int i = 1 ; i &lt;= v ; i++ ) for ( int j = 1 ; j &lt;= v ; j++ ) G[i][j] = 0x3f3f3f3f; for ( int i = 1 ; i &lt;= n ; i++ ) for ( int j = 0 ; j &lt;= m ; j++ ) f[i][j][0] = f[i][j][1] = 0x3f3f3f3f; for ( int i = 1 ; i &lt;= v ; i++ ) G[i][i] = 0 ; for ( int i = 1 ; i &lt;= e ; i++ ) &#123; int x , y; double z; scanf ( \"%d%d%lf\" , &amp;x , &amp;y , &amp;z ); if ( G[x][y] &gt; z ) G[x][y] = G[y][x] = z; &#125; for ( int l = 1 ; l &lt;= v ; l++ ) for ( int i = 1 ; i &lt;= v ; i++ ) for ( int j = 1 ; j &lt;= v ; j++ ) G[i][j] = min ( G[i][j] , G[i][l] + G[l][j] ); f[1][0][0] = f[1][1][1] = 0.0000; for ( int i = 2 ; i &lt;= n ; i++ ) for ( int j = 0 ; j &lt;= min ( i , m ) ; j++ ) &#123; f[i][j][0] = min ( f[i - 1][j][0] + G[c[i - 1]][c[i]] , f[i - 1][j][1] + G[c[i - 1]][c[i]] * ( 1.0 - k[i - 1] ) + G[d[i - 1]][c[i]] * k[i - 1] ); if(j &gt;= 1) &#123; f[i][j][1] = min ( f[i - 1][j - 1][0] + G[c[i - 1]][d[i]] * k[i] + G[c[i - 1]][c[i]] * ( 1.0 - k[i] ) , f[i - 1][j - 1][1] + G[c[i - 1]][c[i]] * ( 1.0 - k[i - 1] ) * ( 1.0 - k[i] ) + G[c[i - 1]][d[i]] *k[i] * ( 1.0 - k[i - 1] ) + G[d[i - 1]][c[i]] * k[i - 1]* ( 1.0 - k[i] ) + G[d[i - 1]][d[i]] * k[i - 1] * k[i] ); &#125; &#125; double ans = 0x7fffffff; for ( int i = 0 ; i &lt;= m ; i++ ) for ( int j = 0 ; j &lt;= 1 ; j++ ) ans = min ( ans , f[n][i][j] ); printf ( \"%.2lf\\n\" , ans ) ; return 0 ;&#125;","categories":[{"name":"OI","slug":"OI","permalink":"http://krrrr.xyz/分类/OI/"}],"tags":[{"name":"概率期望","slug":"概率期望","permalink":"http://krrrr.xyz/标签/概率期望/"},{"name":"DP","slug":"DP","permalink":"http://krrrr.xyz/标签/DP/"}]},{"title":"概率入门","slug":"概率入门","date":"2018-11-02T03:04:29.000Z","updated":"2019-09-18T02:36:29.361Z","comments":true,"path":"2018/11/02/概率入门/","link":"","permalink":"http://krrrr.xyz/2018/11/02/概率入门/","excerpt":"其实这道初赛题是我第一次做的概率题","text":"其实这道初赛题是我第一次做的概率题 我们来看一眼这道毒瘤题： 题面其实已经很清楚了，我们可以发现，当这个青蛙在第$1$块石头时，那么这只青蛙完全可以不用跳，我们设$f(k)$表示这只青蛙在$k$号荷叶上，期望需要$f(k)$次跳到$1$号荷叶，那么我们有： f(1)=0我们接着来考虑当这只青蛙在$2$号荷叶时的情况，它可以跳到$1$号和$2$号荷叶，当它跳到$1$号荷叶时，它完成了任务，跳了一步。当它跳到$2$号时，它还有$f(2)$步，因为每一次跳跃时，跳跃到每一个荷叶上的几率是相等的，所以我们有： f(2)=[1+(1+f(2))]/2同理，我们可以得到： f(3)=[1+(1+f(2))+(1+f(3))]/3推广到一般形式则有: f(k)=[\\sum_{i=1}^k{f(i)+1}]/k我们化简一下，有： f(k)=1+\\frac {1}{k}\\sum_{i=1}^kf(i) 我们看到这个式子：$f(k)=1+\\frac {1}{k}\\sum_{i=1}^kf(i)$ 当$i==k$的时候,我们会发现式子里出现了一个$f(k)$….. 这咋求啊 我们展开这个式子，会发现原来的式子等价于： f(k)=1+\\frac {1}{k}\\sum_{i=1}^{k-1}f(i)+\\frac 1kf(k)这时候如果把$f(k)$看作一个未知数的话，我们可以发现$f(k)$的这一项是可以合并的。但是我们先两边同乘一个$k$，把分母去掉，就会有： k*f(k)=k+\\sum_{i=1}^{k-1}f(i)+f(k)这样答案就很显然了，合并掉等式两边相等的$f(k)$，会得到： (k-1)*f(k)=k+\\sum_{i=1}^{k-1}f(i)最后，两边同除$(k-1)$，有最后答案上的公式： f(k)=\\frac{k}{k-1}(1+\\frac {\\sum_{i=1}^{k-1}f(i)}{k-1})通过这个式子计算可以得到$f(5)=\\frac{37}{12}$,也就是答案 做完了QAQ(写Markdown好累啊qwq…)","categories":[{"name":"OI","slug":"OI","permalink":"http://krrrr.xyz/分类/OI/"}],"tags":[{"name":"学习笔记","slug":"学习笔记","permalink":"http://krrrr.xyz/标签/学习笔记/"},{"name":"概率期望","slug":"概率期望","permalink":"http://krrrr.xyz/标签/概率期望/"}]},{"title":"[POI2015]WIL-Wilcze题解","slug":"POI2015-WIL-Wilcze题解","date":"2018-11-02T02:40:29.000Z","updated":"2019-09-18T02:32:30.728Z","comments":true,"path":"2018/11/02/POI2015-WIL-Wilcze题解/","link":"","permalink":"http://krrrr.xyz/2018/11/02/POI2015-WIL-Wilcze题解/","excerpt":"其实这本来是$QBXT$的$T2$，但是由于毒瘤$zhw$跑得快（雾），导致我们发现这是某$poi$原题。","text":"其实这本来是$QBXT$的$T2$，但是由于毒瘤$zhw$跑得快（雾），导致我们发现这是某$poi$原题。 首先看题面:题目链接 详细读了一遍之后，其实对于这道题，我的第一反应是贪心（也许是因为我太菜了）。然后打了一遍，小样例过了，然后被大样例$hack$。 之后我又用命分析了一下。可以发现，因为题目中保证每个数的值全部$&gt;=0$，即每个数都是正整数。所以我们与其选长度不到$d$的区间删除，不如直接选择长度为$d$的区间删除。 那么在一段长度已知的序列中，长度为$d$的子序列个数是已知的，那么我们就可以预处理出每一段长度为$d$的子序列。然后我们又发现，题目中要求区间的长度不超过p，那么我们很明显的可以想到尺取法。 然后我们就可以用单调队列来维护我们预处理出的这些长度为$d$的子序列。然后对于区间长度取$max$就是答案了。 最后怒斥一波出原题的出题人$qaq$….(虽然$zhw$很帅) 代码： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950#include&lt;cstdio&gt;#include&lt;deque&gt;typedef long long ll;using std::deque;const ll N=2000010;ll n,p,d;ll a[N];ll sum[N];ll hea[N];struct Node&#123; ll pos,val; Node(ll pos,ll val):pos(pos),val(val)&#123;&#125; Node()&#123;&#125;&#125;;inline void read(ll &amp;x)&#123; ll s=0,w=1; char ch=getchar(); while(ch&gt;'9'||ch&lt;'0')&#123;if(ch=='-')w=-1;ch=getchar();&#125; while(ch&gt;='0'&amp;&amp;ch&lt;='9')&#123;s=s*10+ch-'0';ch=getchar();&#125; x=s*w; return;&#125;deque&lt;Node&gt;q;int main()&#123; read(n);read(p);read(d); for(int i=1;i&lt;=n;i++)read(a[i]),sum[i]=sum[i-1]+a[i]; for(int i=1;i&lt;=n-d;i++) hea[i]=sum[i+d]-sum[i]; for(int i=n-d+1;i&lt;=n;i++) hea[i]=sum[n]-sum[i]; ll ans=0; int l=0; for(int i=d+1;i&lt;=n;i++) &#123; while(!q.empty()&amp;&amp;q.back().val&lt;hea[i-d])q.pop_back(); q.push_back(Node(i-d,hea[i-d])); while(l&lt;i-d&amp;&amp;sum[i]-sum[l]-q.front().val&gt;p) &#123; l++; while(l&gt;q.front().pos)q.pop_front(); &#125; ans=std::max(ans,(ll)i-l); &#125; printf(\"%lld\",ans); return 0;&#125;","categories":[{"name":"OI","slug":"OI","permalink":"http://krrrr.xyz/分类/OI/"}],"tags":[{"name":"单调队列","slug":"单调队列","permalink":"http://krrrr.xyz/标签/单调队列/"}]},{"title":"复赛冲刺Day1R1-Color题解","slug":"复赛冲刺Day1R1-Colory题解","date":"2018-11-01T11:28:35.000Z","updated":"2019-09-18T02:30:11.974Z","comments":true,"path":"2018/11/01/复赛冲刺Day1R1-Colory题解/","link":"","permalink":"http://krrrr.xyz/2018/11/01/复赛冲刺Day1R1-Colory题解/","excerpt":"这道题是考试时的$T2$，我感觉这道题出的特别好（虽然当时并不会做","text":"这道题是考试时的$T2$，我感觉这道题出的特别好（虽然当时并不会做 首先看题目:$emmmmm…..$什么鬼啊这个题是$QAQ$ 当时直接一脸懵逼，然后只会写2^n 枚举每一种填充方式，然后再检测的方法…然而这道题这么做只有10分啊$qaq….$ 然后赛后题解告诉我：这题TM是个欧拉回路！！！！当时我就懵逼了….然后当dalao们给我把这道题讲明白了之后，我才发现这道题思路的奇妙。 首先，我们发现，对于一个点，它对应着一个横坐标和一个纵坐标。蒽….一个点对应着两个数值，这个时候我们应该想到什么？二分图？对了，这东西还真的就是要你用二分图的思想来建图….(心态崩了我要妹子$QAQ$) 我们建图，然后我们发现，因为一个点对应着一个横坐标和一个纵坐标，那么我们想到：在二分图中，每一条边也是对应着两种点。那么受到这样的启发，我们就可以建图了：我们把横坐标和纵坐标分别看成一种点，然后将题目中给你的点看成这张图上的边，那么因为题目中要求：黑点和白点的绝对值差不大于1…..，那么我们能想到什么呢？我们要对这些边进行黑白染色，所以我们要一个点出发，一直走一条欧拉回路，这样能走遍所有的边。 但是这样做，我们会发现一个问题：只有$subtask4$的$30$分数据告诉你是偶数。而存在欧拉回路的图的特点是什么呢？每个点的度数都是偶数，那么当点的度数是奇数的时候，我们怎么办呢？ 我在这里选择了度数为奇数的点向一个虚拟节点连边，然后当所有点的度数都是偶数时，这时候没有其他点向这个点连边所以这时候这个虚拟节点对答案没有影响。 然后，我们就直接对边进行染色就可以了。 我只想说，这道题出的真的好，佩服出题人。 代码：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt; const int N = 5e5 + 10; struct Data &#123; int v; int p;&#125;data[N];struct Edge &#123; int to; int next;&#125;e[N &lt;&lt; 1];int n , m , t = 1 , num;int head[N] , d[N];int x[N] , y[N] , ans[N];bool flag[N]; inline int read () &#123; int s = 0 , w = 1; char ch = getchar (); while ( ch &gt; '9' || ch &lt; '0' ) &#123; if ( ch == '-' ) w = -1; ch = getchar ();&#125; while ( ch &gt;= '0' &amp;&amp; ch &lt;= '9' ) &#123; s = s * 10 + ch - '0'; ch = getchar ();&#125; return s * w;&#125;inline void add ( int x , int y ) &#123; e[++t].to = y; e[t].next = head[x]; head[x] = t; return;&#125;inline bool cmp ( Data x , Data y ) &#123; return x.v&lt;y.v;&#125;void lisanhua () &#123; for ( int i = 1 ; i &lt;= n ; i++ ) &#123; data[i].v = x[i]; data[i].p = i; &#125; std :: sort ( data + 1 , data + 1 + n , cmp ); data[0].v = -1; for ( int i = 1 ; i &lt;= n ; i++ ) &#123; if ( data[i].v != data[i - 1].v ) num++; x[data[i].p] = num; &#125; for ( int i = 1 ; i &lt;= n ; i++ ) &#123; data[i].v = y[i]; data[i].p = i; &#125; std :: sort ( data + 1 , data + 1 + n , cmp ); data[0].v = -1; for ( int i = 1 ; i &lt;= n ; i++ ) &#123; if ( data[i].v != data[i - 1].v ) num++; y[data[i].p] = num; &#125; return;&#125;void dfs ( int cur , bool last ) &#123; for ( int i = head[cur] ; i ; i = e[i].next ) &#123; if ( flag[i &gt;&gt; 1] ) continue; int j = e[i].to; flag[i &gt;&gt; 1] = 1; d[cur]--; d[j]--; ans[i &gt;&gt; 1] = !last; dfs ( j , !last ); &#125; return;&#125; int main ( void ) &#123; n = read (); for ( int i = 1 ; i &lt;= n ; i++ ) &#123; x[i] = read (); y[i] = read (); &#125; lisanhua(); for ( int i = 1 ; i &lt;= n ; i++ ) &#123; d[x[i]]++; d[y[i]]++; add ( x[i] , y[i] ); add ( y[i] , x[i] ); &#125; for ( int i = 1 ; i &lt;= num ; i++ ) if ( d[i] &amp; 1 ) &#123; d[i]++; d[num + 1]++; add ( i , num + 1 ); add ( num + 1 , i ); &#125; num++; memset ( ans , -1 , sizeof ( ans ) ); for ( int i = 1 ; i &lt;= num ; i++ ) while ( d[i] ) dfs ( i , 1 ); for ( int i = 1 ; i &lt;= n ; i++ ) printf ( \"%d%c\" , ans[i] , i == n ? '\\n' : ' ' ); return 0;&#125;","categories":[{"name":"OI","slug":"OI","permalink":"http://krrrr.xyz/分类/OI/"}],"tags":[{"name":"模拟赛题解","slug":"模拟赛题解","permalink":"http://krrrr.xyz/标签/模拟赛题解/"}]},{"title":"复赛冲刺Day1R1-Count题解","slug":"qbxtD1T1题解","date":"2018-11-01T03:19:25.000Z","updated":"2019-09-18T02:32:18.434Z","comments":true,"path":"2018/11/01/qbxtD1T1题解/","link":"","permalink":"http://krrrr.xyz/2018/11/01/qbxtD1T1题解/","excerpt":"其实我感觉这道数论题还是挺简单的（虽然我不会）","text":"其实我感觉这道数论题还是挺简单的（虽然我不会） 这道数论题，我初看的时候是挺一脸懵逼的，然后据$wucstdio$大爷提供的思路，我们可以发现：题意求的是$x$,$y$在$mod P$下的逆元，存在解的条件是$gcd(x,p)==1$，即x,p互质。所以由题解有设 1 到 P − 1 中与 P 互质的数有 s 个，考虑这 s 个数与它们的逆元组成的二元组，这些二元组一定符合条件，那么只要考虑去重的问题 所以我们只需要知道从$1$到$n$中和$n$互质的数的个数这个东西是什么呢？这个东西很明显是$phi$函数。所以我们只需要求出$\\phi(p)$，再加上$x^2\\equiv1\\pmod{p}$的数，最后除$2$就好了。 代码：123456789101112131415161718192021222324252627282930313233343536#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;const int N = 1e7 + 10;int n;int tot , prime[N] , phi[N];bool flag[N];int main ( void ) &#123; scanf ( \"%d\" , &amp;n ); flag[1] = 1; phi[1] = 1; for ( int i = 2 ; i &lt;= n ; i++ ) &#123; if ( !flag[i] ) &#123; prime[++tot] = i; phi[i] = i - 1; &#125; for ( int j = 1 ; j &lt;= tot &amp;&amp; i * prime[j] &lt;= n ; j++ ) &#123; flag[i * prime[j]] = 1; if ( i % prime[j] == 0 ) &#123; phi[i * prime[j]] = phi[i] *prime[j]; break; &#125; phi[i * prime[j]] = phi[i] * phi[prime[j]]; &#125; &#125; long long ans = phi[n]; for ( long long i = 1 ; i &lt;= n ; i++ ) if ( i * i % n == 1 ) ans++; printf ( \"%lld\\n\" , ( long long ) ( ans ) / 2 ); return 0;&#125;","categories":[{"name":"OI","slug":"OI","permalink":"http://krrrr.xyz/分类/OI/"}],"tags":[{"name":"模拟赛题解","slug":"模拟赛题解","permalink":"http://krrrr.xyz/标签/模拟赛题解/"}]},{"title":"A*学习笔记","slug":"A-学习笔记","date":"2018-10-19T03:26:25.000Z","updated":"2019-09-18T02:36:37.889Z","comments":true,"path":"2018/10/19/A-学习笔记/","link":"","permalink":"http://krrrr.xyz/2018/10/19/A-学习笔记/","excerpt":"例题：$LuoguP2324$:骑士精神 $A*$嘛，很早时候就听说过，貌似是一种很神奇的算法。听长者讲过一遍，一直都想自己打一遍。但是一直没机会。所以来自己写一遍就好啦。","text":"例题：$LuoguP2324$:骑士精神 $A*$嘛，很早时候就听说过，貌似是一种很神奇的算法。听长者讲过一遍，一直都想自己打一遍。但是一直没机会。所以来自己写一遍就好啦。 $A*$的重点就是一个叫做估价函数的东西，但是这个叫估价函数的东西你必须要好好写，不然你会搜出来$WA$的好成绩对于这道题，我就是将现在的棋盘和目标棋盘不同棋子数的差当作估价函数（其实是正确的)。然后，我们就可以加一个类似于剪枝的东西：如果现在的步数$+$估价函数估计的值$&gt;$现在的$max$，直接$return$就好。剩下的东西就是个大爆搜了， 以下是代码： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990#include &lt;cstdio&gt;#include &lt;iostream&gt;#include &lt;cstring&gt;#include &lt;cstring&gt;#include &lt;algorithm&gt;const int goal[7][7] = &#123; &#123; 0 , 0 , 0 , 0 , 0 , 0 &#125;, &#123; 0 , 1 , 1 , 1 , 1 , 1 &#125;, &#123; 0 , 0 , 1 , 1 , 1 , 1 &#125;, &#123; 0 , 0 , 0 , 2 , 1 , 1 &#125;, &#123; 0 , 0 , 0 , 0 , 0 , 1 &#125;, &#123; 0 , 0 , 0 , 0 , 0 , 0 &#125;&#125;;char mp[6][6];int now[6][6];bool flag;int dx[] = &#123; 0 , 1 , 1 , -1 , -1 , 2 , 2 , -2 , -2 &#125;;int dy[] = &#123; 0 , 2 , -2 , 2 , -2 , 1 , -1 , 1 , -1 &#125;;inline int calcu () &#123; int tmp = 0; for ( int i = 1 ; i &lt;= 5 ; i++ ) for ( int j = 1 ; j &lt;= 5 ; j++ ) &#123; if ( now[i][j] != goal[i][j] ) tmp++; &#125; return tmp;&#125;inline void swap ( int &amp;x , int &amp;y ) &#123; int t = x; x = y; y = t; return;&#125;void A_Star ( int x , int y , int dep , int MaxStep ) &#123; if ( flag ) return; if ( dep == MaxStep ) &#123; if ( calcu () == 0 ) &#123; flag = 1; printf ( \"%d\\n\" , MaxStep ); return; &#125; return; &#125; for ( int i = 1 ; i &lt;= 8 ; i++ ) &#123; int xx = x + dx[i]; int yy = y + dy[i]; if ( xx &gt; 5 || xx &lt; 1 || yy &gt; 5 || yy &lt; 1 ) continue; swap ( now[x][y] , now[xx][yy] ); if ( calcu () + dep &lt;= MaxStep ) A_Star ( xx , yy , dep + 1 , MaxStep ); swap ( now[x][y] , now[xx][yy] ); &#125; return;&#125;int main ( void ) &#123; int ttt; scanf ( \"%d\" , &amp;ttt ); while ( ttt-- ) &#123; flag = 0; for ( int i = 1 ; i &lt;= 5 ; i++ ) scanf ( \"%s\" , mp[i] + 1 ); int st_x , st_y; for ( int i = 1 ; i &lt;= 5 ; i++ ) for ( int j = 1 ; j &lt;= 5 ; j++ ) if ( mp[i][j] == '*' ) &#123; st_x = i; st_y = j; now[i][j] = 2; &#125; else now[i][j] = mp[i][j] - '0'; if ( calcu () == 0 ) &#123; puts ( \"0\" ); return 0; &#125; for ( int i = 1 ; i &lt;= 15 ; i++ ) if ( !flag ) A_Star ( st_x , st_y , 0 , i ); if ( !flag ) puts ( \"-1\" ); &#125; return 0;&#125;","categories":[{"name":"OI","slug":"OI","permalink":"http://krrrr.xyz/分类/OI/"}],"tags":[{"name":"学习笔记","slug":"学习笔记","permalink":"http://krrrr.xyz/标签/学习笔记/"},{"name":"玄学","slug":"玄学","permalink":"http://krrrr.xyz/标签/玄学/"}]},{"title":"wucstdio的毒瘤模拟赛","slug":"wucstdio的毒瘤模拟赛","date":"2018-10-18T09:25:47.000Z","updated":"2019-09-18T02:30:18.519Z","comments":true,"path":"2018/10/18/wucstdio的毒瘤模拟赛/","link":"","permalink":"http://krrrr.xyz/2018/10/18/wucstdio的毒瘤模拟赛/","excerpt":"$wucstdio$大爷的Flag还是没有倒….","text":"$wucstdio$大爷的Flag还是没有倒…. T1: 反正我刚开始对这道题是完全没有什么信心的qaq（才不会告诉你我直接去看的$T2$） 考虑$50$分的情况：一条链。所以就是一个等差数列了qwq 考虑剩余的正解，我们可以把每一步的期望值当成这棵树的权值，然后因为从上向下和从下向上的期望值可能不太一样，所以我们需要两个函数来表示：（相当于两条边）。 我们设$f(x) g(x)$分别表示从下向上和从上向下的情况，所以我们考虑求出$f(x)$时，我们要考虑以下情况： 直接走到这个节点的父节点，所以这种情况下，对这个节点对答案的贡献就是$\\frac {1}{d[x]}了$ 还有一种情况就是这个节点先跳到他的儿子，再跳回这个节点，再跳过去。这个时候，因为我们需要一步来跳过去，所以这种情况对答案的贡献就是:$\\sum_{j=son} \\frac {1}{d[x]}[1 + f(x) + f(j) ]$ 我们综合考虑一下这两种情况对答案的贡献值，将这两个式子加起来，我们就会得到下边的这个式子： f(x) = \\frac{1}{d} + \\sum_{j=son}\\frac{1}{d}\\times[1 +f(x) + f ( j )]我们安置我们做期望的一贯思路（好像我做过多少期望一样QwQ），因为$num[son]=p-1$，所以我们可以得到这样一个式子： d\\times f(x)=1+d-1+(d-1)f(x)+\\sum_{j}f(j)化简一下之后有： f(x)=d+\\sum_{j}f(j)然后我们来考虑一下$g(x)$这个东西怎么求，当我们经过观察之后，我们可以发现这个式子有三种情况： 他的父亲直接跳到他这里，这种情况对答案的贡献就是$\\frac{1}{d[father]}$ 他的父亲先跳到他的爷爷，然后再跳回来，这种情况下，对答案的贡献就是：$\\frac{1}{d[father]}\\times (1 + g(p) +g(x) )$ 他的父亲跳到他的兄弟然后再跳到他自己。 我们把这三种情况加起来，就会有： g(x)=\\dfrac {1}{d[father]} \\times(1+g(p)+g(x))+\\dfrac {1}{d[father]}+\\sum_{pa_j=pa_x\\&\\&j\\not=x}\\dfrac {1}{d[father]} (1+f(j)+g(x))继续化简有： g(x)=g(p)+f(p)-f(x)通过这种方式，我们就可以把$g(x) f(x)$算出来，相当于边长。 算出边长后，这个问题就转化成了：给你一颗树，求树的直径。我选择了DP求直径，就很简单了。 代码：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104#include &lt;cstdio&gt;#include &lt;iostream&gt;#include &lt;cstdio&gt;#include &lt;algorithm&gt;#include &lt;cmath&gt;const int N = 2e5 + 10;int n , m , t;struct Edge &#123; int to; int next;&#125;e[N &lt;&lt; 1];int head[N];int now_ans;int f[N] , g[N] , p[N];int LongDis[N][2] , SecondDis[N][2];inline int read () &#123; int s = 0 , w = 1; char ch = getchar (); while ( ch &gt; '9' || ch &lt; '0' ) &#123; if ( ch == '-' ) w = -1; ch = getchar ();&#125; while ( ch &gt;= '0' &amp;&amp; ch &lt;= '9' ) &#123; s = s * 10 + ch - '0'; ch = getchar ();&#125; return s * w;&#125; inline void add ( int x , int y ) &#123; e[++t].to = y; e[t].next = head[x]; head[x] = t; return;&#125;inline int min ( int x , int y ) &#123; return x &lt; y ? x : y;&#125;inline int max ( int x , int y ) &#123; return x &gt; y ? x : y;&#125;void Find_f ( int root , int fa ) &#123; f[root] = p[root]; for ( int i = head[root] ; i ; i = e[i].next ) &#123; int j = e[i].to; if ( j == fa ) continue; Find_f ( j , root ); f[root] += f[j]; &#125; return;&#125;void Find_g ( int root , int fa ) &#123; for ( int i = head[root] ; i ; i = e[i].next ) &#123; int j = e[i].to; if ( j == fa ) continue; g[j] = f[root] + g[root] - f[j]; Find_g ( j , root ); &#125; return;&#125;void Work ( int root , int fa ) &#123; int Frist = 0 , Second = 0; for ( int i = head[root] ; i ; i = e[i].next ) &#123; int j = e[i].to; if ( j == fa ) continue; Work ( j , root ); if ( LongDis[j][0] + g[j] &gt; LongDis[root][0] ) &#123; SecondDis[root][0] = LongDis[root][0]; LongDis[root][0] = LongDis[j][0] + g[j]; Frist = j; &#125; else if ( LongDis[j][0] + g[j] &gt; SecondDis[root][0] ) SecondDis[root][0] = LongDis[j][0] + g[j]; if ( LongDis[j][1] + f[j] &gt; LongDis[root][1] ) &#123; SecondDis[root][1] = LongDis[root][1]; LongDis[root][1] = LongDis[j][1] + f[j]; Second = j; &#125; else if ( LongDis[j][1] + f[j] &gt; SecondDis[root][1] ) SecondDis[root][1] = LongDis[j][1] + f[j]; &#125; if ( Frist != Second ) now_ans = max ( LongDis[root][0] + LongDis[root][1] , now_ans ); else if ( Frist == Second ) now_ans = max ( now_ans , max ( SecondDis[root][1] + LongDis[root][0] , SecondDis[root][0] + LongDis[root][1] ) ); return;&#125;int main ( void ) &#123; freopen ( \"tree.in\" , \"r\" , stdin ); freopen ( \"tree.out\" , \"w\" , stdout ); n = read (); for ( int i = 1 ; i &lt; n ; i++ ) &#123; int x = read () , y = read (); add ( x , y ); add ( y , x ); p[x]++; p[y]++; &#125; Find_f ( 1 , 0 ); Find_g ( 1 , 0 ); Work ( 1 , 0 ); printf ( \"%d.00000\\n\" , now_ans ); return 0;&#125; T2:其实暴力还是挺显然的","categories":[{"name":"OI","slug":"OI","permalink":"http://krrrr.xyz/分类/OI/"}],"tags":[{"name":"模拟赛题解","slug":"模拟赛题解","permalink":"http://krrrr.xyz/标签/模拟赛题解/"}]},{"title":"前排打出题人的一套题","slug":"前排打出题人的一套题","date":"2018-10-17T12:38:43.000Z","updated":"2019-09-18T02:29:35.248Z","comments":true,"path":"2018/10/17/前排打出题人的一套题/","link":"","permalink":"http://krrrr.xyz/2018/10/17/前排打出题人的一套题/","excerpt":"不管怎么样，先打死出题人再说qaq…","text":"不管怎么样，先打死出题人再说qaq… T1:人贩子$LLFZ$ 题意很显然就是最优贸易啊…. 一眼看出来是缩点+DP….但是为什么我之前是SPFA过的啊QAQ…写SPFA比较稳….然后….就写了…. 上代码吧…. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123#include &lt;cstdio&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;#include &lt;cstring&gt;#include &lt;queue&gt;const int N = 1e5 + 10;const int M = 1e6 + 10;const int INF = 2147483647;#define G(i,a,b,c) for ( int i = b[a] ; i ; i = c[i].next )int n , m , t , cnt;struct Edge &#123; int to; int data; int next;&#125;e[M] , e_[M];int head[N] , head_[N];int maxs[N] , mins[N];int dis[N] , value[N];bool inque[N];std :: queue &lt; int &gt; qu;inline int read () &#123; int s = 0 , w = 1; char ch = getchar (); while ( ch &gt; '9' || ch &lt; '0' ) &#123; if ( ch == '-' ) w = -1; ch = getchar ();&#125; while ( ch &gt;= '0' &amp;&amp; ch &lt;= '9' ) &#123; s = s * 10 + ch - '0'; ch = getchar ();&#125; return s * w;&#125;inline void add ( int x , int y , int z ) &#123; e[++t].to = y; e[t].data = z; e[t].next = head[x]; head[x] = t; return;&#125;inline void add_ ( int x , int y , int z ) &#123; e_[++cnt].to = y; e_[cnt].data = z; e_[cnt].next = head_[x]; head_[x] = cnt; return;&#125;template &lt; class T &gt; inline T min ( T x , T y ) &#123; return x &lt; y ? x : y;&#125;template &lt; class T &gt;inline T max ( T x , T y ) &#123; return x &gt; y ? x : y;&#125;void Heap_Dijkstra () &#123; std :: memset ( dis , 0x3f3f3f3f , sizeof ( dis ) ); inque[1] = 1 , dis[1] = value[1]; qu.push ( 1 ); while ( !qu.empty () ) &#123; int j = qu.front (); inque[j] = 0; qu.pop (); G ( i , j , head , e ) &#123; int k = e[i].to; if ( dis[k] &gt; min ( dis[j] , e[i].data ) ) &#123; dis[k] = min ( dis[j] , e[i].data ); if ( !inque[k] ) &#123; inque[k] = 1; qu.push ( k ); &#125; &#125; &#125; &#125; for ( int i = 1 ; i &lt;= n ; i++ ) mins[i] = dis[i]; std :: memset ( dis , -0x3f3f3f3f , sizeof ( dis ) ); inque[n] = 1 , dis[n] = value[n]; qu.push ( n ); while ( !qu.empty () ) &#123; int j = qu.front (); qu.pop (); inque[j] = 0; G ( i , j , head_ , e_ ) &#123; int k = e_[i].to; if ( dis[k] &lt; max ( dis[j] , e_[i].data ) ) &#123; dis[k] = max ( dis[j] , e_[i].data ); if ( !inque[k] ) &#123; inque[k] = 1; qu.push ( k ); &#125; &#125; &#125; &#125; for ( int i = 1 ; i &lt;= n ; i++ ) maxs[i] = dis[i]; return;&#125; int main ( void ) &#123; freopen ( \"child.in\" , \"r\" , stdin ); freopen ( \"child.out\" , \"w\" , stdout ); n = read (); m = read (); for ( int i = 1 ; i &lt;= n ; i++ ) value[i] = read (); for ( int i = 1 ; i &lt;= m ; i++ ) &#123; int x = read () , y = read () , z = read (); if ( z == 1 ) &#123; add ( x , y , value[y] ); add_ ( y , x , value[x] ); &#125; else if ( z == 2 ) &#123; add ( x , y , value[y] ); add ( y , x , value[x] ); add_ ( y , x , value[x] ); add_ ( x , y , value[y] ); &#125; &#125; Heap_Dijkstra (); int ans = -INF; for ( int i = 1 ; i &lt;= n ; i++ ) ans = max ( ans , maxs[i] - mins[i] ); printf ( \"%d\\n\" , ans ); return 0;&#125; T2 : food 再来拿出题人祭天祭一波… 话说我直接读题读错了然后写了个错误的DP然后还A了是什么鬼啊…. 话说我考虑了前缀和，那么我还过了，说明直接加起来然后除就可以? 123456789101112131415161718192021222324252627282930313233343536373839404142434445#include &lt;cstdio&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;#include &lt;cstring&gt;const int N = 15;int n , ans = -1;int A , B , C;int p1 , p2 , p3;int MaxTime[N];int f[N][105][105][105];inline int read () &#123; int s = 0 , w = 1; char ch = getchar (); while ( ch &gt; '9' || ch &lt; '0' ) &#123; if ( ch == '-' ) w = -1; ch = getchar ();&#125; while ( ch &gt;= '0' &amp;&amp; ch &lt;= '9' ) &#123; s = s * 10 + ch - '0'; ch = getchar ();&#125; return s * w;&#125;inline int max ( int x , int y ) &#123; return x &gt; y ? x : y;&#125;int main ( void ) &#123; freopen ( \"food.in\" , \"r\" , stdin ); freopen ( \"food.out\" , \"w\" , stdout ); A = read () , B = read () , C = read (); p1 = read () , p2 = read () , p3 = read (); n = read (); for ( int i = 1 ; i &lt;= n ; i++ ) &#123; MaxTime[i] = read (); MaxTime[i] = MaxTime[i - 1] + MaxTime[i]; &#125; for ( int i = 1 ; i &lt;= n ; i++ ) for ( int j = A ; j * p1 &lt;= MaxTime[i] &amp;&amp; j&lt;=100 ; j++ ) for ( int k = B; j * p1 + k * p2 &lt;= MaxTime[i] &amp;&amp; k &lt;= 100 ; k++ ) for ( int l = C ; j * p1 + k * p2 + l * p3 &lt;= MaxTime[i] &amp;&amp; l &lt;=100 ; l++ ) &#123; f[i][j][k][l] = max ( f[i][j][k][l] , max ( f[i - 1][j - A][k - B][l - C] + 1 , f[i][j - A][k - B][l - C] + 1 ) ); ans = max ( ans , f[i][j][k][l] ); &#125; printf ( \"%d\\n\" , ans ); return 0;&#125; T3: Happy 再吐槽一波为什么Noip模拟赛会考离散对数（然而我并不会….） 其实应该是一道签到题吧。。。 暴力水过…. 123456789101112131415161718192021222324252627282930313233343536373839#include &lt;cstdio&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;#include &lt;cstring&gt;inline int read () &#123; int s = 0 , w = 1; char ch = getchar (); while ( ch &gt; '9' || ch &lt; '0' ) &#123; if ( ch == '-' ) w = -1; ch = getchar ();&#125; while ( ch &gt;= '0' &amp;&amp; ch &lt;= '9' ) &#123; s = s * 10 + ch - '0'; ch = getchar ();&#125; return s * w;&#125;int P , A , B;bool app[50005];int main ( void ) &#123; freopen ( \"happy.in\" , \"r\" , stdin ); freopen ( \"happy.out\" , \"w\" , stdout ); int T = read (); while ( T-- ) &#123; int now = 1; memset ( app , false , sizeof ( app ) ); P = read () , A = read () , B = read (); for ( int i = 1 ; ; i++ ) &#123; now = ( now * A ) % P; if ( now == B ) &#123; printf ( \"%d\\n\" , i ); break; &#125; if ( app[now] ) &#123; puts ( \"Couldn't Produce!\" ); break; &#125; app[now] = 1; &#125; &#125; return 0;&#125;","categories":[{"name":"OI","slug":"OI","permalink":"http://krrrr.xyz/分类/OI/"}],"tags":[{"name":"模拟赛题解","slug":"模拟赛题解","permalink":"http://krrrr.xyz/标签/模拟赛题解/"}]},{"title":"My_Code_Style","slug":"My_Code_Style","date":"2018-10-13T07:30:16.000Z","updated":"2019-09-18T02:30:58.338Z","comments":true,"path":"2018/10/13/My_Code_Style/","link":"","permalink":"http://krrrr.xyz/2018/10/13/My_Code_Style/","excerpt":"介绍下本蒟蒻的丑死的码风$qwq$…(码风大概是魔改了神犇$Menci$的)","text":"介绍下本蒟蒻的丑死的码风$qwq$…(码风大概是魔改了神犇$Menci$的) 在打CF时并不是这个码风 码风概述： 所有的#include后必须有一个空格,例如#include 无论什么样子的程序，都必须写cstdio cstring algorithm iostream这四个头文件。 在主程序的int main()中要加$void$，即为int main(void) 一般不写using namespace std; 所有的变量必须定义在第一个自定义函数之前，且变量和第一个自定义函数，最后一个自定义函数和$main$之间必须有一个换行 每个函数之后尽可能有$return$， 在一般情况下，在花括号内的内容不加逗号 缩进： 对于每个代码块，使用4空格或者等长的Tab缩进。 括号： 大括号不换行 空格： 个人感觉自己的空格比较的毒瘤。 1.在每个函数声明时，函数名后的括号与函数名之间必须有一个空格,而且括号内如果需要声明变量，则要先有一个空格，且逗号的前后都必须有一个空格。 2.在for循环的声明中，每一个字符（变量名除外），都要用空格隔开。 3.数组内一般不加空格，但是如果有运算符则运算符前后必须有空格。 4.每个可以前后匹配的括号前后必须有空格。 变量： 1.基本所有变量都是全局变量，但有些ans,sum最后统计答案时使用的变量可以定义为局部变量。 2.所有的变量名称都必须与要存储的东西的中文意思有沾边，比如树直接定义为tree而不是T。（极度不能容忍变量名直接为a,b,c,d,e,f,g,的情况。 3.定义N,M等时一般只用N,M为名称而不是MAXN,MAXM. 4.定义的结构体类型在定义变量时必须紧接着声明完成结构体后，并且结构体中变量需要定义一个加一个换行。 5.在变量命名时较长的变量名可以用_来连接，并且大小写交替使用，如Add_Tree_Val 把上边所有毒瘤的码风结合起来之后代码大概长这个样子qwq.. update:还是加上模板舒服qwq 不要吐槽我的丑逼$Splay…..$ 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181#include &lt;cstdio&gt;#include &lt;algorithm&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;queue&gt;#include &lt;map&gt;#include &lt;set&gt;#include &lt;cmath&gt;#include &lt;cctype&gt;#include &lt;ctime&gt;#include &lt;vector&gt;#include &lt;cstdlib&gt;#include &lt;stack&gt;#define ll long long#define pll std::pair&lt;int,int&gt;#define mp std::make_pair#define fi first#define se second#define oo 2147483647#define PI 3.141592653590#define rint register inttemplate &lt; class T &gt; inline void read ( T &amp;x ) &#123;T s = 0 , w = 1;char ch = getchar ();while ( ch &gt; '9' || ch &lt; '0' ) &#123; if ( ch == '-' ) w = -1; ch = getchar ();&#125;while ( ch &gt;= '0' &amp;&amp; ch &lt;= '9' ) &#123; s = s * 10 + ch - '0'; ch = getchar ();&#125;x = s * w;return;&#125;template &lt; class T , typename ...Argc &gt; inline void read ( T &amp;x , Argc &amp;...Args ) &#123;read ( x );read ( Args... );return;&#125; template &lt; class T &gt; inline T max ( T x , T y ) &#123;return x &gt; y ? x : y;&#125;template &lt; class T &gt; inline T min ( T x , T y ) &#123;return x &lt; y ? x : y;&#125;template &lt; class T &gt; inline void abs ( T x ) &#123;return x &gt; 0 ? x : -x;&#125;inline int _read () &#123;int s = 0 , w = 1;char ch = getchar ();while ( ch &gt; '9' || ch &lt; '0' ) &#123; if ( ch == '-' ) w = -1; ch = getchar ();&#125;while ( ch &gt;= '0' &amp;&amp; ch &lt;= '9' ) &#123; s = s * 10 + ch - '0'; ch = getchar ();&#125;return s * w;&#125;template &lt;typename T&gt; void write(T x) &#123;if (x &lt; 0) x = -x, putchar('-');if (x &gt; 9) write(x / 10);putchar(x % 10 + 48);return;&#125;template &lt;typename T&gt; void writeln(T x) &#123; write(x); printf (\"\\n\"); &#125;/**********************************************************************************************************************************************************************************************************************************************************************/const int N = 1e6 + 5;int root , tot , n;struct Tree &#123; int ch[2]; int val; int father; int size; int cnt;&#125;tree[N];void pushup ( int cur ) &#123; tree[cur].size = tree[tree[cur].ch[0]].size + tree[tree[cur].ch[1]].size + tree[cur].cnt; return;&#125;void rotate ( int x ) &#123; int y = tree[x].father; int z = tree[y].father; int k = tree[y].ch[1] == x; tree[z].ch[tree[z].ch[1] == y] = x; tree[x].father = z; tree[y].ch[k] = tree[x].ch[k ^ 1]; tree[tree[x].ch[k ^1]].father = y; tree[x].ch[k ^ 1] = y; tree[y].father = x; pushup ( x ); pushup ( y ); return;&#125;void Splay ( int x , int goal ) &#123; while ( tree[x].father != goal ) &#123; int y = tree[x].father; int z = tree[y].father; if ( z != goal ) ( tree[y].ch[0] == x ) ^ ( tree[z].ch[0] == y ) ? rotate ( x ) : rotate ( y ); rotate ( x ); &#125; if ( goal == 0 ) root = x; return;&#125;void insert ( int x ) &#123; int cur = root , father = 0; while ( cur &amp;&amp; tree[cur].val != x ) &#123; father = cur; cur = tree[cur].ch[x &gt; tree[cur].val]; &#125; if ( cur ) tree[cur].cnt++; else &#123; cur = ++tot; if ( father ) tree[father].ch[x &gt; tree[father].val] = cur; tree[cur].ch[0] = tree[cur].ch[1] = 0; tree[cur].father = father; tree[cur].val = x; tree[cur].cnt = 1; tree[cur].size = 1; &#125; Splay ( cur , 0 ); return;&#125;void Find ( int x ) &#123; int cur = root; if ( !cur ) return; while ( tree[cur].ch[x &gt; tree[cur].val] &amp;&amp; x != tree[cur].val ) cur = tree[cur].ch[ x &gt; tree[cur].val]; Splay ( cur , 0 ); return;&#125;int Next ( int x , int f )&#123; Find ( x ); int cur = root; if ( tree[cur].val &gt; x &amp;&amp; f ) return cur; if ( tree[cur].val &lt; x &amp;&amp; !f ) return cur; cur = tree[cur].ch[f]; while ( tree[cur].ch[f ^ 1] ) cur = tree[cur].ch [f ^ 1]; return cur;&#125;void Delete ( int x ) &#123; int last = Next ( x , 0 ); int next = Next ( x , 1 ); Splay ( last , 0 ); Splay ( next , last ); int del = tree[next].ch[0]; if ( tree[del].cnt &gt; 1 ) &#123; tree[del].cnt--; Splay ( del , 0 ); &#125; else tree[next].ch[0] = 0; return;&#125;int kth ( int x ) &#123; int cur = root; if ( tree[cur].size &lt; x ) return 0; while ( 1 ) &#123; int y = tree[cur].ch[0]; if ( x &gt; tree[y].size + tree[cur].cnt ) &#123; x -= tree[y].size + tree[cur].cnt; cur = tree[cur].ch[1]; &#125; else if ( tree[y].size &gt;= x ) cur = y; else return tree[cur].val; &#125;&#125;int main ( void ) &#123; n = read (); insert ( 2147483647 ); insert ( -2147483647 ); while ( n-- ) &#123; int opt = read (); if ( opt == 1 ) &#123; int x = read (); insert ( x ); &#125; else if ( opt == 2 ) &#123; int x = read (); Delete ( x ); &#125; else if ( opt == 3 ) &#123; int x = read (); Find ( x ); printf ( \"%d\\n\" , tree[tree[root].ch[0]].size ); &#125; else if ( opt == 4 ) &#123; int x = read (); printf ( \"%d\\n\" , kth ( x + 1 ) ); &#125; else if ( opt == 5 ) &#123; int x = read (); printf ( \"%d\\n\" , tree[Next ( x , 0 )].val ); &#125; else if ( opt == 6 ) &#123; int x = read (); printf ( \"%d\\n\" , tree[Next ( x , 1 )].val ); &#125; &#125; return 0;&#125; 因为知道了自己是多么的菜,所以才要更加努力去追求那个永远也不可能实现的梦想","categories":[{"name":"OI","slug":"OI","permalink":"http://krrrr.xyz/分类/OI/"}],"tags":[{"name":"CodeStyle","slug":"CodeStyle","permalink":"http://krrrr.xyz/标签/CodeStyle/"}]}]}