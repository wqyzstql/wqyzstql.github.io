{"meta":{"title":"KRrrrrrrrr_Blog","subtitle":"以梦为马，不负年华","description":"沙雕复读机||没学上了","author":"KRrrrrrrrr","url":"http://krrrr.xyz"},"pages":[{"title":"梦开始的地方","date":"2019-09-12T02:19:05.000Z","updated":"2019-09-12T02:57:39.993Z","comments":true,"path":"about/index.html","permalink":"http://krrrr.xyz/about/index.html","excerpt":"","text":"本人是个蒟蒻,如果看到了我的$blog$侵权了的话可以联系我删掉 QQ:1139198820"},{"title":"categories","date":"2019-09-10T10:34:34.000Z","updated":"2019-09-10T10:35:02.335Z","comments":true,"path":"categories/index.html","permalink":"http://krrrr.xyz/categories/index.html","excerpt":"","text":""},{"title":"AK IOI的大佬们","date":"2018-10-13T07:30:16.000Z","updated":"2019-09-16T10:40:15.516Z","comments":true,"path":"friends/index.html","permalink":"http://krrrr.xyz/friends/index.html","excerpt":"","text":"\\text{Menci} \\text{_rqy} \\text{zlb} \\text{Rain_Air} \\text{Vimin} \\text{Hawking_llfz} \\text{Phecda} \\text{L_Y_T} \\text{准点的星辰} \\text{wyxdrqc} \\text{JK}"},{"title":"tags","date":"2019-09-10T10:35:15.000Z","updated":"2019-09-10T10:36:13.583Z","comments":true,"path":"tags/index.html","permalink":"http://krrrr.xyz/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"SCP-114514","slug":"SCP1","date":"2019-09-23T03:26:04.000Z","updated":"2019-09-23T09:05:42.673Z","comments":true,"path":"2019/09/23/SCP1/","link":"","permalink":"http://krrrr.xyz/2019/09/23/SCP1/","excerpt":"qwq","text":"qwq SCP-114514 研究社 等级: Keter 特殊收容措施: 目前SCP-114514无法被收容,目前基金会的目的是使SCP-114514保持不再发生变化. 项目描述: 已知SCP-114514曾经的名称有信息学,OI,国际象棋,围棋,五子棋,羽毛球,篮球,OSU,植物大战僵尸,外卖K歌研究社.已知项目会在随机的时间进行名称上的变化.目前已经证实,在每次项目的名称发生改变时,项目内的人员(称之为$SCP-114514-1919810$)的兴趣爱好会随着研究社的名称发生变化. 经过研究发现,SCP-114514内的人员爱好需要的物件似乎并不需要从外界获取,会有一个被称为$SCP-114514-1$的被称为$Z$主任的人形实体供给,而供给的物品似乎是从内部自然产生的. 在每次项目的名称发生改变时,会强制将项目周边距离不超过$10m$的人员强制转化为$SCP-114514-1919810$,已知这一影响不可逆.而且在普通人员被强制转化后,会在[数据删除]的时间之内丧失对文化课学习的兴趣. 常人暴露在SCP-114514面前是致命的,所以对于SCP-114514的任何接触需要3名及以上四级权限者的允许,且实验者在实验后将被强制隔离$3$天,如果在隔离时间之内实验者表现了明显的兴趣爱好变化,那么实验者将会被处决. 对于SCP-114514的进一步研究报告为致命媒介模因,需要得到O5议会的批准之后访问. 您好,监督者,已取消对机动特遣队的派遣指令.","categories":[{"name":"吹水","slug":"吹水","permalink":"http://krrrr.xyz/分类/吹水/"}],"tags":[{"name":"SCP乱搞","slug":"SCP乱搞","permalink":"http://krrrr.xyz/标签/SCP乱搞/"}]},{"title":"Codeforces Round #587题解","slug":"CodeforcesRound-587题解","date":"2019-09-22T07:46:20.000Z","updated":"2019-09-22T11:04:02.608Z","comments":true,"path":"2019/09/22/CodeforcesRound-587题解/","link":"","permalink":"http://krrrr.xyz/2019/09/22/CodeforcesRound-587题解/","excerpt":"LYT我对不起你啊/ll","text":"LYT我对不起你啊/ll Prefixes经过观察私信找规律之后发现,对于每个偶数的前缀$i$,如果$i&gt;2$且$i$这个前缀满足条件,那么$i/2$也一定会满足条件.所以我们要满足的就是对于每个最小的间隔为$2$的区间,使他们当中有一个$a$和一个$b$ 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970#include &lt;cstdio&gt;#include &lt;algorithm&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;queue&gt;#include &lt;map&gt;#include &lt;set&gt;#include &lt;cmath&gt;#include &lt;cctype&gt;#include &lt;ctime&gt;#include &lt;vector&gt;#include &lt;cstdlib&gt;#include &lt;stack&gt;#define ll long long#define pll std::pair&lt;int,int&gt;#define MP std::make_pair#define fi first#define se second#define oo 2147483647#define PI 3.141592653590#define rint register int#define F(i,num,b) for(rint i=num;i&lt;=b;i++)#define D(i,num,b) for(rint i=num;i&gt;=b;i--)#define G(i,num,b,c) for(rint num=head[b];num;num=c[num].next) inline int _read () &#123;int s = 0 , w = 1;char ch = getchar ();while ( ch &gt; '9' || ch &lt; '0' ) &#123; if ( ch == '-' ) w = -1; ch = getchar ();&#125;while ( ch &gt;= '0' &amp;&amp; ch &lt;= '9' ) &#123; s = s * 10 + ch - '0'; ch = getchar ();&#125;return s * w;&#125;template &lt; class T &gt; inline void read ( T &amp;x ) &#123;T s = 0 , w = 1;char ch = getchar ();while ( ch &gt; '9' || ch &lt; '0' ) &#123; if ( ch == '-' ) w = -1; ch = getchar ();&#125;while ( ch &gt;= '0' &amp;&amp; ch &lt;= '9' ) &#123; s = s * 10 + ch - '0'; ch = getchar ();&#125;x = s * w;return;&#125;template &lt; class T , typename ...Argc &gt; inline void read ( T &amp;x , Argc &amp;...Args ) &#123;read ( x );read ( Args... );return;&#125; template &lt; class T &gt; inline T max ( T x , T y ) &#123;return x &gt; y ? x : y;&#125;template &lt; class T &gt; inline T min ( T x , T y ) &#123;return x &lt; y ? x : y;&#125;template &lt; class T &gt; inline void abs ( T x ) &#123;return x &gt; 0 ? x : -x;&#125;template &lt; typename T &gt; void write ( T x ) &#123;if ( x &lt; 0 ) x = -x , putchar ( '-' );if ( x &gt; 9 ) write ( x / 10 );putchar ( x % 10 + 48 );return;&#125;template &lt; typename T &gt; void writeln ( T x ) &#123;write ( x ); printf (\"\\n\"); &#125;template &lt; class T &gt; inline T gcd ( T x , T y ) &#123;if ( x &lt; y ) swap ( x , y );if ( !y ) return x;return gcd ( y , x % y );&#125;template &lt; class T &gt; inline T ksm ( T x , T y , T Mod ) &#123;T tmp = 1;while ( y ) &#123;if ( y % 2 == 1 ) tmp = ( tmp * x % Mod );x = ( x * x ) % Mod;y &gt;&gt;= 1;&#125;return tmp;&#125; /**********************************************************************************************************************************************************************************************************************************************************************/ const int N = 2e5 + 10; int n , ans;char ss[N]; int main() &#123; read ( n ); scanf ( \"%s\" , ss + 1 ); int s1 = 0 , s2 = 0; for ( int i = 1 ; i &lt;= n ; i++ ) &#123; if ( ss[i] == 'a' ) s1++; else s2++; if ( i % 2 == 0 ) &#123; if ( s1 == s2 ) continue; ans++; if ( s1 &gt; s2 ) ss[i] = 'b'; else ss[i] = 'a'; s1 = 0; s2 = 0; &#125; &#125; writeln ( ans ); for ( int i = 1 ; i &lt;= n ; i++ ) printf ( \"%c\" , ss[i] ); return 0; &#125; Shooting通过观察样例可知,从大到小排序即可qwq… 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566#include &lt;cstdio&gt;#include &lt;algorithm&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;queue&gt;#include &lt;map&gt;#include &lt;set&gt;#include &lt;cmath&gt;#include &lt;cctype&gt;#include &lt;ctime&gt;#include &lt;vector&gt;#include &lt;cstdlib&gt;#include &lt;stack&gt;#define ll long long#define pll std::pair&lt;int,int&gt;#define MP std::make_pair#define fi first#define se second#define oo 2147483647#define PI 3.141592653590#define rint register int#define F(i,num,b) for(rint i=num;i&lt;=b;i++)#define D(i,num,b) for(rint i=num;i&gt;=b;i--)#define G(i,num,b,c) for(rint num=head[b];num;num=c[num].next) inline int _read () &#123;int s = 0 , w = 1;char ch = getchar ();while ( ch &gt; '9' || ch &lt; '0' ) &#123; if ( ch == '-' ) w = -1; ch = getchar ();&#125;while ( ch &gt;= '0' &amp;&amp; ch &lt;= '9' ) &#123; s = s * 10 + ch - '0'; ch = getchar ();&#125;return s * w;&#125;template &lt; class T &gt; inline void read ( T &amp;x ) &#123;T s = 0 , w = 1;char ch = getchar ();while ( ch &gt; '9' || ch &lt; '0' ) &#123; if ( ch == '-' ) w = -1; ch = getchar ();&#125;while ( ch &gt;= '0' &amp;&amp; ch &lt;= '9' ) &#123; s = s * 10 + ch - '0'; ch = getchar ();&#125;x = s * w;return;&#125;template &lt; class T , typename ...Argc &gt; inline void read ( T &amp;x , Argc &amp;...Args ) &#123;read ( x );read ( Args... );return;&#125; template &lt; class T &gt; inline T max ( T x , T y ) &#123;return x &gt; y ? x : y;&#125;template &lt; class T &gt; inline T min ( T x , T y ) &#123;return x &lt; y ? x : y;&#125;template &lt; class T &gt; inline void abs ( T x ) &#123;return x &gt; 0 ? x : -x;&#125;template &lt; typename T &gt; void write ( T x ) &#123;if ( x &lt; 0 ) x = -x , putchar ( '-' );if ( x &gt; 9 ) write ( x / 10 );putchar ( x % 10 + 48 );return;&#125;template &lt; typename T &gt; void writeln ( T x ) &#123;write ( x ); printf (\"\\n\"); &#125;template &lt; class T &gt; inline T gcd ( T x , T y ) &#123;if ( x &lt; y ) swap ( x , y );if ( !y ) return x;return gcd ( y , x % y );&#125;template &lt; class T &gt; inline T ksm ( T x , T y , T Mod ) &#123;T tmp = 1;while ( y ) &#123;if ( y % 2 == 1 ) tmp = ( tmp * x % Mod );x = ( x * x ) % Mod;y &gt;&gt;= 1;&#125;return tmp;&#125; /**********************************************************************************************************************************************************************************************************************************************************************/ const int N = 1005; int n;struct Node &#123; int val; int pos;&#125;ls[N]; ll ans; inline bool cmp ( Node x , Node y ) &#123; return x.val &gt; y.val;&#125; int main() &#123; read ( n ); F ( i , 1 , n ) &#123; ls[i].val = _read (); ls[i].pos = i; &#125; std :: sort ( ls + 1 , ls + 1 + n , cmp ); F ( i , 1 , n ) ans += ls[i].val * ( i - 1 ) + 1; writeln ( ans ); F ( i , 1 , n ) printf ( \"%d \" , ls[i].pos ); return 0; &#125; White Sheet发现如果这个白色矩形的四条边都被覆盖了的话,那么中间一定也被覆盖了.然后暴力枚举判断即可. 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677#include &lt;cstdio&gt;#include &lt;algorithm&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;queue&gt;#include &lt;map&gt;#include &lt;set&gt;#include &lt;cmath&gt;#include &lt;cctype&gt;#include &lt;ctime&gt;#include &lt;vector&gt;#include &lt;cstdlib&gt;#include &lt;stack&gt;#define ll long long#define pll std::pair&lt;int,int&gt;#define MP std::make_pair#define fi first#define se second#define oo 2147483647#define PI 3.141592653590#define rint register int#define F(i,num,b) for(rint i=num;i&lt;=b;i++)#define D(i,num,b) for(rint i=num;i&gt;=b;i--)#define G(i,num,b,c) for(rint num=head[b];num;num=c[num].next) inline int _read () &#123;int s = 0 , w = 1;char ch = getchar ();while ( ch &gt; '9' || ch &lt; '0' ) &#123; if ( ch == '-' ) w = -1; ch = getchar ();&#125;while ( ch &gt;= '0' &amp;&amp; ch &lt;= '9' ) &#123; s = s * 10 + ch - '0'; ch = getchar ();&#125;return s * w;&#125;template &lt; class T &gt; inline void read ( T &amp;x ) &#123;T s = 0 , w = 1;char ch = getchar ();while ( ch &gt; '9' || ch &lt; '0' ) &#123; if ( ch == '-' ) w = -1; ch = getchar ();&#125;while ( ch &gt;= '0' &amp;&amp; ch &lt;= '9' ) &#123; s = s * 10 + ch - '0'; ch = getchar ();&#125;x = s * w;return;&#125;template &lt; class T , typename ...Argc &gt; inline void read ( T &amp;x , Argc &amp;...Args ) &#123;read ( x );read ( Args... );return;&#125; template &lt; class T &gt; inline T max ( T x , T y ) &#123;return x &gt; y ? x : y;&#125;template &lt; class T &gt; inline T min ( T x , T y ) &#123;return x &lt; y ? x : y;&#125;template &lt; class T &gt; inline void abs ( T x ) &#123;return x &gt; 0 ? x : -x;&#125;template &lt; typename T &gt; void write ( T x ) &#123;if ( x &lt; 0 ) x = -x , putchar ( '-' );if ( x &gt; 9 ) write ( x / 10 );putchar ( x % 10 + 48 );return;&#125;template &lt; typename T &gt; void writeln ( T x ) &#123;write ( x ); printf (\"\\n\"); &#125;template &lt; class T &gt; inline T gcd ( T x , T y ) &#123;if ( x &lt; y ) swap ( x , y );if ( !y ) return x;return gcd ( y , x % y );&#125;template &lt; class T &gt; inline T ksm ( T x , T y , T Mod ) &#123;T tmp = 1;while ( y ) &#123;if ( y % 2 == 1 ) tmp = ( tmp * x % Mod );x = ( x * x ) % Mod;y &gt;&gt;= 1;&#125;return tmp;&#125; /**********************************************************************************************************************************************************************************************************************************************************************/ struct Point&#123; int x; int y;&#125;p[7];int main ( void )&#123; for(int i=1;i&lt;=6;i++) scanf(\"%d%d\",&amp;p[i].x,&amp;p[i].y); if(p[3].x&lt;=p[1].x&amp;&amp;p[3].y&lt;=p[1].y&amp;&amp;p[4].x&gt;=p[2].x&amp;&amp;p[4].y&gt;=p[2].y)&#123; printf(\"NO\\n\"); return 0; &#125; if(p[5].x&lt;=p[1].x&amp;&amp;p[5].y&lt;=p[1].y&amp;&amp;p[6].x&gt;=p[2].x&amp;&amp;p[6].y&gt;=p[2].y)&#123; printf(\"NO\\n\"); return 0; &#125; if(p[3].x&lt;=p[1].x&amp;&amp;p[4].x&gt;=p[2].x&amp;&amp;p[5].x&lt;=p[1].x&amp;&amp;p[6].x&gt;=p[2].x)&#123; if(p[3].y&lt;=p[1].y&amp;&amp;p[4].y&gt;=p[5].y&amp;&amp;p[6].y&gt;=p[2].y)&#123; printf(\"NO\\n\"); return 0; &#125; if(p[5].y&lt;=p[1].y&amp;&amp;p[6].y&gt;=p[3].y&amp;&amp;p[4].y&gt;=p[2].y)&#123; printf(\"NO\\n\"); return 0; &#125; &#125; if(p[3].y&lt;=p[1].y&amp;&amp;p[4].y&gt;=p[2].y&amp;&amp;p[5].y&lt;=p[1].y&amp;&amp;p[6].y&gt;=p[2].y)&#123; if(p[3].x&lt;=p[1].x&amp;&amp;p[4].x&gt;=p[5].x&amp;&amp;p[6].x&gt;=p[2].x)&#123; printf(\"NO\\n\"); return 0; &#125; if(p[5].x&lt;=p[1].x&amp;&amp;p[6].x&gt;=p[3].x&amp;&amp;p[4].x&gt;=p[2].x)&#123; printf(\"NO\\n\"); return 0; &#125; &#125; printf(\"YES\\n\"); return 0;&#125; Swords发现求个$gcd$就好了 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465#include &lt;cstdio&gt;#include &lt;algorithm&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;queue&gt;#include &lt;map&gt;#include &lt;set&gt;#include &lt;cmath&gt;#include &lt;cctype&gt;#include &lt;ctime&gt;#include &lt;vector&gt;#include &lt;cstdlib&gt;#include &lt;stack&gt;#define ll long long#define pll std::pair&lt;int,int&gt;#define MP std::make_pair#define fi first#define se second#define oo 2147483647#define PI 3.141592653590#define rint register int#define F(i,num,b) for(rint i=num;i&lt;=b;i++)#define D(i,num,b) for(rint i=num;i&gt;=b;i--)#define G(i,num,b,c) for(rint num=head[b];num;num=c[num].next) inline int _read () &#123;int s = 0 , w = 1;char ch = getchar ();while ( ch &gt; '9' || ch &lt; '0' ) &#123; if ( ch == '-' ) w = -1; ch = getchar ();&#125;while ( ch &gt;= '0' &amp;&amp; ch &lt;= '9' ) &#123; s = s * 10 + ch - '0'; ch = getchar ();&#125;return s * w;&#125;template &lt; class T &gt; inline void read ( T &amp;x ) &#123;T s = 0 , w = 1;char ch = getchar ();while ( ch &gt; '9' || ch &lt; '0' ) &#123; if ( ch == '-' ) w = -1; ch = getchar ();&#125;while ( ch &gt;= '0' &amp;&amp; ch &lt;= '9' ) &#123; s = s * 10 + ch - '0'; ch = getchar ();&#125;x = s * w;return;&#125;template &lt; class T , typename ...Argc &gt; inline void read ( T &amp;x , Argc &amp;...Args ) &#123;read ( x );read ( Args... );return;&#125; template &lt; class T &gt; inline T max ( T x , T y ) &#123;return x &gt; y ? x : y;&#125;template &lt; class T &gt; inline T min ( T x , T y ) &#123;return x &lt; y ? x : y;&#125;template &lt; class T &gt; inline void abs ( T x ) &#123;return x &gt; 0 ? x : -x;&#125;template &lt; typename T &gt; void write ( T x ) &#123;if ( x &lt; 0 ) x = -x , putchar ( '-' );if ( x &gt; 9 ) write ( x / 10 );putchar ( x % 10 + 48 );return;&#125;template &lt; typename T &gt; void writeln ( T x ) &#123;write ( x ); printf (\"\\n\"); &#125;template &lt; class T &gt; inline T gcd ( T x , T y ) &#123;if ( x &lt; y ) swap ( x , y );if ( !y ) return x;return gcd ( y , x % y );&#125;template &lt; class T &gt; inline T ksm ( T x , T y , T Mod ) &#123;T tmp = 1;while ( y ) &#123;if ( y % 2 == 1 ) tmp = ( tmp * x % Mod );x = ( x * x ) % Mod;y &gt;&gt;= 1;&#125;return tmp;&#125; /**********************************************************************************************************************************************************************************************************************************************************************/ const int N = 2e5 + 10; int n , maxs;int num[N];ll ans , sum; int main() &#123; read ( n ); F ( i , 1 , n ) &#123; num[i] = _read (); maxs = max ( maxs , num[i] ); &#125; F ( i , 1 , n ) &#123; int res = ( maxs - num[i] ); ans = std :: __gcd ( ans , res * 1ll ); &#125; if ( ans == 0 ) &#123; puts ( \"0 0\" ); return 0; &#125; else &#123; F ( i , 1 , n ) sum += ( maxs - num[i] ) / ans; printf ( \"%I64d %I64d\\n\" , sum , ans ); &#125; return 0; &#125; Numerical Sequence (easy version)发现$k$只有$10^9$的范围,所以就暴力跳就可以了. 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;cstring&gt;#include&lt;algorithm&gt;#include&lt;cmath&gt; using namespace std; #define LL long long#define N 40010 LL sum[N],T; int judge(int x) &#123; int count = (int)log10((double)x) + 1; return count;&#125;int fun(int x) &#123; int sum = pow(10,x); return sum;&#125;void solve() &#123; int sumn = 0; memset(sum, 0,sizeof(sum)); for(int i = 1 ; i &lt; 40005 ; ++i) &#123; sumn += judge(i); sum[i] = sum[i - 1] +sumn; &#125;&#125;void answer(int x) &#123; int j,ans,summ,i = 1; while(sum[i] &lt; x) i++; ans = x - sum[i -1]; summ = 0; for(j = 1 ; j &lt;= i ; ++j) &#123; summ += judge(j); if(summ &gt;= ans) break; &#125; if(summ == ans) printf(\"%d\\n\", j %10); if(summ &gt; ans) printf(\"%d\\n\", (j / fun(summ -ans)) % 10);&#125; int main() &#123; scanf(\"%lld\",&amp;T); solve(); while(T--) &#123; int pos; scanf(\"%d\",&amp;pos); answer(pos); &#125; //system(\"pause\"); return 0;&#125; 因为知道了自己是多么的菜,所以才要更加努力去追求那个永远也不可能实现的梦想","categories":[{"name":"OI","slug":"OI","permalink":"http://krrrr.xyz/分类/OI/"}],"tags":[{"name":"Codeforces题解","slug":"Codeforces题解","permalink":"http://krrrr.xyz/标签/Codeforces题解/"}]},{"title":"普转提七连测D3","slug":"P转TD3","date":"2019-09-22T07:41:51.000Z","updated":"2019-09-24T12:07:56.703Z","comments":true,"path":"2019/09/22/P转TD3/","link":"","permalink":"http://krrrr.xyz/2019/09/22/P转TD3/","excerpt":"只有知道密码的人才能看呢","text":"你一定知道密码趴 Incorrect Password! No content to display! U2FsdGVkX19AxJJNksjxoV0x5t4mjkMM+3Mj3cU4gIImRFesLcQQWYV6wSNH6UyLI8mS0uRMkDvtdrmC5kEutnz8BqxAHYcplbBGTRQ3yTZOR4U8YG7UVq5emzbYkDJl71120+TCIhGuwSgOuVHp0UCK17zumAKPPJ85YWv8SZ24l6aTfAPImWjNEsfTOdnTWwJc6UiFUZ/xasCwIQ+wII0b2LWzQc0UuEOCpULnQlhg8w4/eoIOARmBgqQ6dD3B1apQ11JeQJ7+Y6s07dw8gbNaVVSoGwLQTrJQXhEm8GdmDky43q/F9i2qaKTtrCWgKIu4Hfm1/9jl3B1TH/bSNQKNq7xcpkr8KKO/wnecby7ANtvK5fRh2uVq3qH7anulflxWMJyUL05iSJfHHgCJCmwoFkCl3CO/XqY9ZG4qEpr2zjiGSauc0gLzfk9ACc71EXy1n62MDhSIJOKzHpPNTVjUCh6cqKowsYh3K2K33FZf/3Ft6DO7yxqGc1Kk3uBKQmYr7MzFew9BVUNoSUvLQmb4BOn/XfHYsVnnckkXz/f1CKH+TRG0JxZjBfQQOVHGlLsHESW5cbePUXCHsWJfkayK32IlSajErgFdMEgA96MGrmdIIBcOrB4w36ctSpR4fPK/ynVjDj2clhocGkiri5YsZ++9NPoyF4k4b6Moq2PZvpSjUgfRLuez3Vop4O/yh/Pj1i5mR0YdQ7LcHN9a/RrVYlIXw09rN0U+nX28n/CplXQDQZqd1mhZ8Ga8f50P1VPPzzXV9Vr5KAx+ks0fWyVYcDa+GFTr8kSGqd6hqX8yJv9BSaGNYujetmLLWT7khSf34l+G0Nc8INKDFXn8SFDo4VNBrUBmv6XIBKtsYrmP9Qu2qEhiUA2AxF0MblPGHQcUPvCG5pFbqdVBoWHtj6Nh/b0Vq09+PBQhDvc/BJr3X1kn7RYMpPXUrVwm0a9jfVEKoftA8Z9YKrZUL0K3FBAkSM6y8iGTC1Lu5GqVZAqKpgqV8bs8P7n+olx09I3oBKlb/IoNYzHTYAHnB+7HcAvhLVugyUwEKn6t3T3qqZDGOQVf+HaZ+YyHs/G6x0jHJXo5hNQR1zZo0vXb/uipwqtpOOLngDjV823fGIxTr/BzMLwopbkMTSBTDoboAX2411Aatur0bc85pNxa+G3KWBiFhih6+Cd7uL0+HEnnbBz8UzHkCrj75qprX26zXwd7uZHBilba+MXcxuIw8m/BKMzqEMq49845ZSR231z7/+yXu6YzWcUZJq9Hy57/r8yPypyFKxhCrCwtFWtoA5wIENtoVQRyijcWi9P6GqIMdMAUrRLqSau4/7jd+zghf+BloJEotifuT815hP9ry9s4Qxd9rrLL+4yG35mDGwqFBHy7uTN0PBfSLX8IhV9zzlFrfiX4rGYTZPotwry0JOvDeLKJ4g2/beQ5eqsUHLh/URXHWra8re5cjQD6JiCUCIO+Bp66svubUPMXr2QZeKwLTPujtkGLll+ompiokzIjt1eaGnpu2o31v311IqWb8W9/6L6eXLrBS7nxfV3lZpvIGj6dWvGr6tACbW13Cm96+cBizTJVigARBEU9QfzB2q2vfFDDq98z1aJ6KpdIyWuOilequfvY8mnAEfITJPLt0f13VtK6cbTIwIiqPh6YPIdYDGjNgc6XUZUVDDviVaXhPxAi+tODg8O6Be9QDnsowY3pzbH1ZcAcCUOMKrxkoc2ecmXxCEZnnWhHRfEoQltcWQ3qvrwmHZorJsBdqL/sATQAbRgrSDcPNZisqu+H+ahCKpvZIjegGloQXN5NQ8pkbiwOP/S5o9hRaMFC6+p/IZS3+JDk0J5AaOqotO7Ky32atnRavEZ1eg4zwqtPBVD3EXEQKyD9/v0ruvgRxzUBwBAEIg8QyQZ+MV/JWM6u0JS4I96FEruRRcwCWflvLoFkFO+exDZlYCif4skiJRKy9yDzmhsBeVBrO+TQNHuHpFTxHcVcXdDeUtLKG58G2f6d0gEzrGUmZm0jqwos/acgCgoJh1uK7cSQleahGKxdpapF8VHNxns2Aj8vhZ/uRfuSa6AmnN1Ni5uSZyHvqXo1LnL7mPtCfddRvuzGHahENme7swdORsr/sWQoF6MmQzbLKWF6y9bd1ynBJdp8albH0WsvvyJU4CIeA/ekEc1STNp7Edw5w7HPcaIgOXO46RzNrzy9G2ETRYi7w5dJm8fgwknNb6VB5iayFHWMTG2gOaPe7+ZyKCSFJDY9Y7inbi9Mq2X21aVFYo79PPm0iuTMiwDYntgDVRDBC02Zcghjk6iCbb4O3VIj1XzhLfUNDpbBeqmzpJHgCIW4isPu4ATZhZ0HjjJBmOCGFsV+EH/MxrzmICZEOQZ3jQpwMVbaiFzkSQTRsO/m3DIQ2qRDykYXJiY9VGF7xcOQHkwkpiGX8Y3+6Cb5R8KWbZOAIrw2FdQ+V+F7OOOWVl345IwfHkLQcJXS0K3GKtdU8qufxheIf12ztRPCr7NgmSlBCIUxLnnmHZQoARYbW08SUp/3yRrw7ai25+XA7ywL4OK+yWMpGXVmvIq5fkDTanETS74s1MZx5NJxBa6Os+SHoI1ONutyqgWZxYREcaWQ0kGb1MUm5gD5vCFYMWe9El89i+Kre3JWgjDS4bjJhO1X02pK0Ga8oYfkw9uV7T6kWCtMUES2RpOXi2kI28X6S0Q8285oXnytn5E+TRrY5p0tP5L/oEBBwzGfeQq4JL1uRsJV4ma93culjGt12kWmzHFzr20cdTjZpPb/KuiZ3RoYhdIhG/+O2/gcnGirEfb3Yx9ZNnOqH8ERmBz/7qWzIT5O5IPrV7Gq7bXV1T6AioRUJZPvlQyKccX+A8hHz/xP7JV/KW0wMq4sjvZZxukRwBbj5XZthgbs4w4dtt/HFBt7au4w+B+3diSGUFIgEgnUKjxajqjw1XP9m/bSIES+RQm6K1Miwye+3Hll2saG6K1wATj3t3W5HLbq9htnZOuIwkat/XmrIft3dHmJ83/8eZ9V5wrQ9MvAh68hRCX5ypfsetiYl4UUp5zUbke0onCExsPvOp56zATdxJ2ro2t6++HJzvN9/5kChORNRMn8FmJNEVtfdFPH2LAk1PugPp/ujit6gADjGU7MPdPQP/OvkrAPMBqC+ZhcqYc/9sbjAIt+tiIOElpmq3qzUZBO01jSiFn8SpLB304XbaArgsMPFTwjsmuyVibye43J5F0+G99sOeGgUgPDzdRD6kUn2zW3RBDs1t0XhLwpg5LmSO1rEEW8g0bnQNBmpLxZx5peQ0by2ez3ovZuj/9iiN+15HvTtLAtLOhonMawCbhblkER8aLjJgJvzqpGQTh0OQcWhsQ0ozR4ZaTPjK3P1WgiH4KAeh5KQ/b8UmvpbdbES1CRqksOCy/U9mV0a7R5jP88KpewcCX+EHSDz0889iUit4zqXbHI8wa/nhw6Af1KpbC/3QifKSOC9fHu2Jj7MzlwZJiiBadC0eYMadZMIXm1SlT7cENcGKl1xmjm7nMhoTkeBb5A7kkjPn3i7RzVVbG2iNqP9N2JUx/9JDSlq92YavnU+d042zs9n0+y8/3G3lEiCnM9M4IzrZ2n+XBY85N9DXIypo+Otgih29kOowG6R99M+xzyRG204PBNA1EKTDTcUej8w8Xhe2hebvgcOwmsvOYmaaSMf8V5kKt9NfsZoArDmf2qi61eXuGGhD1K3F/Rv7YGkI6tLUnwPTlWGuPv7XzG+P3ZnJhq2aGYD2uW+JPl+ofaQUYw0w7eZeuXdLCTgbXyhru1aP16s+S6MF1myOhqEkBbDk0MpPUt2EN0XS7CbYMo4V8PjHnPZvp4ZxVP2I8zcwKpuCgkuiFUzSTxLL71U9f9rMn92PXio6lONSTZ8qWKxCZwkgJotOuls0bgdbnarKKp9YwRcaslKH89AEjt01Chh4wLw8GjPatJKtXZCZRoLiuzvzOKDa6fz/g25xQzPdXMFWlBEBE08+A6h6ymiBWoHOinHUZQPdYL53VeevB4iUXT0wxstQRzx0XKou19PoRU5fG6W4crtKDpnofui30dRC919LHywX493T9LZOdT47YwXPzoWOujXEb2C7tHW6gHJklv6b53cel42ao/f6Tjq+GGxk5i8I2spRG73ckjJpL/KdpEfWrFT1dprS1pAbJe9Ni529gcnStIth9ccgl5XAvjavt9uMovC7KE2lw89fNdcM606L0nI3sYwJ7Ona3wUYYIpZnkfiLFos0nY6nyxzorcL2FvK7TeLwcFGGzvPnYegPT3bQo3A6WUnbKe/us/0a6b5WSiFp1UMyfOh1a5G4TQ3RbGH3hcSY+wFuZsQSQbRVkecUGC+kZczefAwtUZTxkBMv5rrm+zkW8K4xAQw1NeGKVwY2Vez3u0YU7obLDUPHnpLzp6YqxixWe0arC/MAllqyq4Z1sPdfpOeiUlsk7ghu1EpJqKjAepvL8zSYR7OL+vnjR/SVmABg1QnLhlMAfzTHS+TysUf9rvhn4+xWnaoNewXNO5AyS1Ez+OBaDxcA/eeKk95dquAA0mzuynERfUmDB5oiadir0N3KF6QD7bEnj0rtjbhsx47SW9+1vjw/zbM1uxa4QSIYalmOm4u48Ko+y4LBB6M37cENfTcEfk2AQ9jGu1pof0WJ2yBx3CJEYv0szwTz2v/2zyO8+lMt/GTxPtCNqeItkLTQSmmq6dX4xHthJORZed2qywoBQhP+pWmBBWOVzh7/Jkrnm5/m9rcMtRwf6v4e/352Kt/c3OwrX+xF0bGjjt+qnP4dcvHLDeIPui1W41+cfuuFUBYLIhojAUOIljw+R86qVat/csJnWGJTsiMAbtIOkhHWiJfeU80eoRa86i6GHe52oCSGtHDVtS+3w2753oSMkXIw+GwE+PPSROL2oLuwl2KKA1D5YLwPE4zuwLixBlA9y4hdq4TZDUizdf8xxGNLC7WADMvMvOkd1q/A3yd2A4NwzSQ5y9VxvEO08qzroDW3EqpSO2jARO34gdjN/JYt/bdffcSK0HX2dSnXLvMKlQiBB1ezGy+TkVfscJxSjYp0uP+UT/kN1MyLqwxdubIzyy9LE2IjTpLC4FO6+fkq9WfDp2ZU5Ww/Cim1NdP3ck89JwLVALxywhFrJfV43gFKf5pGlo/o=","categories":[{"name":"OI","slug":"OI","permalink":"http://krrrr.xyz/分类/OI/"}],"tags":[{"name":"ZROI","slug":"ZROI","permalink":"http://krrrr.xyz/标签/ZROI/"}]},{"title":"提高失联测D4","slug":"提高失联测D4","date":"2019-09-22T07:40:32.000Z","updated":"2019-09-22T11:46:36.817Z","comments":true,"path":"2019/09/22/提高失联测D4/","link":"","permalink":"http://krrrr.xyz/2019/09/22/提高失联测D4/","excerpt":"只有知道密码的人才能看呢","text":"你一定知道密码趴 Incorrect Password! No content to display! U2FsdGVkX19duCfRUaFt1xlDAo7HvrIMJAv79Ye1OhNmpdL9IVOKk5VFcL60blpnhaSHbemsO4hUMqs1+dX82LfQb/P4t8287ZMkUbAd5eMBGB7trHMteXnjanEk1Is62GyKJYikPiICOxXEY/o8p0o+DkGEUF2wX3IqRh1/ep+mP7c9L4EfY35/XhtjvdMGQbw/Cz9iYrLzVtPMP6L70Cra3ffw6deAvS6mg1f1fWB27zDa5oYG5AzpLnbV+oO3PtN7NVf1esumntTjUdL62LBd3xyPPNPIfM/a8jMN1jBr6qAb23CsgUxpew5u2yBwjdvohiZneCkx51KFhj0GIQ6BTJ2S5HR8sg2DlC1dlfCPDyOGGUplzRCG+fNThRkWl9PEhg4cYwrMe1yj8k78Jgak+YZuc8dbMdP/mH6m1iqQW/x9S4/sKVdZEX04F7lXevNrkvY+DRLoCKes6FGpAcWtp6ROVoaX+WgUjvUlYAP8oMMEeojiM0rOv1vL4C58zNszX6nnGWJxCzydZxlOrekbE6kRpDgFXUk0VE7zaIIz+zooS7EEFOo7+8TvxFznrD+zmkrCsWERXIpuIaX9R4zq/0IkZfJA79rvAPUQybDW1J26JQfqQDRxvob7xtkpDd8CqqUgfias77V26vHdWHAu7IEYmqvgGYwKarR4ZcRurPmrvyUklBpCIVIO6a9XPShpZqiiFpumGTr9ayxS2w==","categories":[{"name":"OI","slug":"OI","permalink":"http://krrrr.xyz/分类/OI/"}],"tags":[{"name":"ZROI","slug":"ZROI","permalink":"http://krrrr.xyz/标签/ZROI/"}]},{"title":"普及五连测D2","slug":"PJ五连测D2","date":"2019-09-21T02:52:48.000Z","updated":"2019-09-24T10:57:28.446Z","comments":true,"path":"2019/09/21/PJ五连测D2/","link":"","permalink":"http://krrrr.xyz/2019/09/21/PJ五连测D2/","excerpt":"只有知道密码的人才能看呢","text":"你一定知道密码趴 Incorrect Password! No content to display! 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","categories":[{"name":"OI","slug":"OI","permalink":"http://krrrr.xyz/分类/OI/"}],"tags":[{"name":"ZROI","slug":"ZROI","permalink":"http://krrrr.xyz/标签/ZROI/"}]},{"title":"Educational Codeforces Round 73题解","slug":"CF题解解","date":"2019-09-20T09:46:05.000Z","updated":"2019-09-21T02:50:51.018Z","comments":true,"path":"2019/09/20/CF题解解/","link":"","permalink":"http://krrrr.xyz/2019/09/20/CF题解解/","excerpt":"qwq","text":"qwq A.2048 Game我们发现,我们可以忽略掉$2048$以上的数,剩下的数开桶统计然后贪心即可. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566#include &lt;cstdio&gt;#include &lt;algorithm&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;queue&gt;#include &lt;map&gt;#include &lt;set&gt;#include &lt;cmath&gt;#include &lt;cctype&gt;#include &lt;ctime&gt;#include &lt;vector&gt;#include &lt;cstdlib&gt;#include &lt;stack&gt;#define ll long long#define pll std::pair&lt;int,int&gt;#define mp std::make_pair#define fi first#define se second#define oo 2147483647#define PI 3.141592653590#define rint register int#define F(i,a,b) for(rint i=a;i&lt;=b;i++)#define D(i,a,b) for(rint i=a;i&gt;=b;i--)inline int _read () &#123;int s = 0 , w = 1;char ch = getchar ();while ( ch &gt; '9' || ch &lt; '0' ) &#123; if ( ch == '-' ) w = -1; ch = getchar ();&#125;while ( ch &gt;= '0' &amp;&amp; ch &lt;= '9' ) &#123; s = s * 10 + ch - '0'; ch = getchar ();&#125;return s * w;&#125;template &lt; class T &gt; inline void read ( T &amp;x ) &#123;T s = 0 , w = 1;char ch = getchar ();while ( ch &gt; '9' || ch &lt; '0' ) &#123; if ( ch == '-' ) w = -1; ch = getchar ();&#125;while ( ch &gt;= '0' &amp;&amp; ch &lt;= '9' ) &#123; s = s * 10 + ch - '0'; ch = getchar ();&#125;x = s * w;return;&#125;template &lt; class T , typename ...Argc &gt; inline void read ( T &amp;x , Argc &amp;...Args ) &#123;read ( x );read ( Args... );return;&#125; template &lt; class T &gt; inline T max ( T x , T y ) &#123;return x &gt; y ? x : y;&#125;template &lt; class T &gt; inline T min ( T x , T y ) &#123;return x &lt; y ? x : y;&#125;template &lt; class T &gt; inline void abs ( T x ) &#123;return x &gt; 0 ? x : -x;&#125;template &lt; typename T &gt; void write ( T x ) &#123;if ( x &lt; 0 ) x = -x , putchar ( '-' );if ( x &gt; 9 ) write ( x / 10 );putchar ( x % 10 + 48 );return;&#125;template &lt; typename T &gt; void writeln ( T x ) &#123;write ( x ); printf (\"\\n\"); &#125;template &lt; class T &gt; inline T gcd ( T x , T y ) &#123;if ( x &lt; y ) swap ( x , y );if ( !y ) return x;return gcd ( y , x % y );&#125;template &lt; class T &gt; inline T ksm ( T x , T y , T Mod ) &#123;T tmp = 1;while ( y ) &#123;if ( y % 2 == 1 ) tmp = ( tmp * x % Mod );x = ( x * x ) % Mod;y &gt;&gt;= 1;&#125;return tmp;&#125; /**********************************************************************************************************************************************************************************************************************************************************************/const int N = 105;int n; ll num[N];int used[2050];int main ( void ) &#123; int T = _read (); while ( T-- ) &#123; memset ( used , 0 , sizeof ( used ) ); n = _read (); F ( i , 1 , n ) &#123; num[i] = _read (); if ( num[i] &lt;= 2048 ) used[num[i]]++; &#125; if ( used[2048] ) &#123; puts ( \"YES\" ); continue; &#125; for ( int i = 1 ; i &lt;= 1024 ; i *= 2 ) used[i * 2] += ( used[i] / 2 ); if ( used[2048] ) puts ( \"YES\" ); else puts ( \"NO\" ); &#125; return 0;&#125; B.Knights我们贪心的考虑一下,如果我们现在这个位置的骑士,在它能移动的八个方向上,都会碰到其他的骑士,那么这个位置对答案的贡献一定是最优的. 结合样例,我们可以发现这样一种构造方法,我们从点$(1,1)$开始进行一次$bfs$,然后按照骑士的移动方法,每次更新一层,然后把这一层的骑士染色成和现在的骑士颜色不一样的颜色. 对于剩下的,那么可以证明没有任何点能跳到这个点,所以随便什么颜色都可以. 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071#include &lt;cstdio&gt;#include &lt;algorithm&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;queue&gt;#include &lt;map&gt;#include &lt;set&gt;#include &lt;cmath&gt;#include &lt;cctype&gt;#include &lt;ctime&gt;#include &lt;vector&gt;#include &lt;cstdlib&gt;#include &lt;stack&gt;#define ll long long#define pll std::pair&lt;int,int&gt;#define fi first#define se second#define oo 2147483647#define PI 3.141592653590#define rint register int#define F(i,a,b) for(rint i=a;i&lt;=b;i++)#define D(i,a,b) for(rint i=a;i&gt;=b;i--)inline int _read () &#123;int s = 0 , w = 1;char ch = getchar ();while ( ch &gt; '9' || ch &lt; '0' ) &#123; if ( ch == '-' ) w = -1; ch = getchar ();&#125;while ( ch &gt;= '0' &amp;&amp; ch &lt;= '9' ) &#123; s = s * 10 + ch - '0'; ch = getchar ();&#125;return s * w;&#125;template &lt; class T &gt; inline void read ( T &amp;x ) &#123;T s = 0 , w = 1;char ch = getchar ();while ( ch &gt; '9' || ch &lt; '0' ) &#123; if ( ch == '-' ) w = -1; ch = getchar ();&#125;while ( ch &gt;= '0' &amp;&amp; ch &lt;= '9' ) &#123; s = s * 10 + ch - '0'; ch = getchar ();&#125;x = s * w;return;&#125;template &lt; class T , typename ...Argc &gt; inline void read ( T &amp;x , Argc &amp;...Args ) &#123;read ( x );read ( Args... );return;&#125; template &lt; class T &gt; inline T max ( T x , T y ) &#123;return x &gt; y ? x : y;&#125;template &lt; class T &gt; inline T min ( T x , T y ) &#123;return x &lt; y ? x : y;&#125;template &lt; class T &gt; inline void abs ( T x ) &#123;return x &gt; 0 ? x : -x;&#125;template &lt; typename T &gt; void write ( T x ) &#123;if ( x &lt; 0 ) x = -x , putchar ( '-' );if ( x &gt; 9 ) write ( x / 10 );putchar ( x % 10 + 48 );return;&#125;template &lt; typename T &gt; void writeln ( T x ) &#123;write ( x ); printf (\"\\n\"); &#125;template &lt; class T &gt; inline T gcd ( T x , T y ) &#123;if ( x &lt; y ) swap ( x , y );if ( !y ) return x;return gcd ( y , x % y );&#125;template &lt; class T &gt; inline T ksm ( T x , T y , T Mod ) &#123;T tmp = 1;while ( y ) &#123;if ( y % 2 == 1 ) tmp = ( tmp * x % Mod );x = ( x * x ) % Mod;y &gt;&gt;= 1;&#125;return tmp;&#125; /**********************************************************************************************************************************************************************************************************************************************************************/int n;char mp[105][105];const int dx[] = &#123; 0 , 1 , 1 , -1 , -1 , 2 , 2 , -2 , - 2 &#125;;const int dy[] = &#123; 0 , 2 , -2 , 2 , -2 , 1 , -1 , 1 , -1 &#125;;void dfs ( int x , int y , char col ) &#123; mp[x][y] = col; for ( int i = 1 ; i &lt;= 8 ; i++ ) &#123; int xx = x + dx[i]; int yy = y + dy[i]; if ( xx &gt;= 1 &amp;&amp; xx &lt;= n &amp;&amp; yy &gt;= 1 &amp;&amp; yy &lt;= n &amp;&amp; mp[xx][yy] != 'W' &amp;&amp; mp[xx][yy] != 'B' ) dfs ( xx , yy , col == 'W' ? 'B' : 'W' ); &#125; return;&#125;int main ( void ) &#123; n = _read (); dfs ( 1 , 1 , 'W' ); bool flag = 1; for ( int i = 1 ; i &lt;= n ; i++ ) &#123; for ( int j = 1 ; j &lt;= n ; j++ ) &#123; if ( mp[i][j] == 'W' || mp[i][j] == 'B' ) printf (\"%c\",mp[i][j]); else &#123; printf (\"%c\" , flag?'B':'W'); flag ^= 1; &#125; &#125; puts(\"\"); &#125; return 0;&#125;// Main Code C.Perfect Team一个直观的感觉就是你从$c,m$中取一个$Min$,然后我们会发现可能人数凑不够$Min*3$,所以我们判断一下$min(Min,sum/3)$就是答案了. 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152#include &lt;cstdio&gt;#include &lt;algorithm&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;queue&gt;#include &lt;map&gt;#include &lt;set&gt;#include &lt;cmath&gt;#include &lt;cctype&gt;#include &lt;ctime&gt;#include &lt;vector&gt;#include &lt;cstdlib&gt;#include &lt;stack&gt;#define ll long long#define pll std::pair&lt;int,int&gt;#define mp std::make_pair#define fi first#define se second#define oo 2147483647#define PI 3.141592653590#define rint register int#define F(i,a,b) for(rint i=a;i&lt;=b;i++)#define D(i,a,b) for(rint i=a;i&gt;=b;i--)inline int _read () &#123;int s = 0 , w = 1;char ch = getchar ();while ( ch &gt; '9' || ch &lt; '0' ) &#123; if ( ch == '-' ) w = -1; ch = getchar ();&#125;while ( ch &gt;= '0' &amp;&amp; ch &lt;= '9' ) &#123; s = s * 10 + ch - '0'; ch = getchar ();&#125;return s * w;&#125;template &lt; class T &gt; inline void read ( T &amp;x ) &#123;T s = 0 , w = 1;char ch = getchar ();while ( ch &gt; '9' || ch &lt; '0' ) &#123; if ( ch == '-' ) w = -1; ch = getchar ();&#125;while ( ch &gt;= '0' &amp;&amp; ch &lt;= '9' ) &#123; s = s * 10 + ch - '0'; ch = getchar ();&#125;x = s * w;return;&#125;template &lt; class T , typename ...Argc &gt; inline void read ( T &amp;x , Argc &amp;...Args ) &#123;read ( x );read ( Args... );return;&#125; template &lt; class T &gt; inline T max ( T x , T y ) &#123;return x &gt; y ? x : y;&#125;template &lt; class T &gt; inline T min ( T x , T y ) &#123;return x &lt; y ? x : y;&#125;template &lt; class T &gt; inline void abs ( T x ) &#123;return x &gt; 0 ? x : -x;&#125;template &lt; typename T &gt; void write ( T x ) &#123;if ( x &lt; 0 ) x = -x , putchar ( '-' );if ( x &gt; 9 ) write ( x / 10 );putchar ( x % 10 + 48 );return;&#125;template &lt; typename T &gt; void writeln ( T x ) &#123;write ( x ); printf (\"\\n\"); &#125;template &lt; class T &gt; inline T gcd ( T x , T y ) &#123;if ( x &lt; y ) swap ( x , y );if ( !y ) return x;return gcd ( y , x % y );&#125;template &lt; class T &gt; inline T ksm ( T x , T y , T Mod ) &#123;T tmp = 1;while ( y ) &#123;if ( y % 2 == 1 ) tmp = ( tmp * x % Mod );x = ( x * x ) % Mod;y &gt;&gt;= 1;&#125;return tmp;&#125; /**********************************************************************************************************************************************************************************************************************************************************************/int n;int c , m , x;int main ( void ) &#123; int T = _read (); while ( T-- ) &#123; read ( c , m , x ); int mins = min ( c , m ); int sums = c + m + x; printf ( \"%d\\n\" , min ( mins , sums / 3 ) ); &#125; return 0;&#125;// Main Code D.Make The Fence Great Again毒瘤出题人一个DP数据范围开3e5 看到$3e5$的数据范围,第一反应就是贪心,但是发现貌似不怎么可做?然后开始考虑$DP$,发现如果$i$这个点被升高了的话,貌似对后边的点是有影响的,有后效性,怎么办?我们经过观察可知,如果一个点要升高,那么它最多升高两次,所以我们可以设$f_{i,j}$表示现在是第$i$个位置,其中$i$这个位置升高了$j$次. 转移的话很显然,我们枚举一个最小的$f_{i-1,k}$并且要保证$fence_{i-1}.high+k$不等于$fence_i.high+j$然后转移就好了. 时间复杂度的话是$O(n*16)$硬核O(nlogn) 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475#include &lt;cstdio&gt;#include &lt;algorithm&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;queue&gt;#include &lt;map&gt;#include &lt;set&gt;#include &lt;cmath&gt;#include &lt;cctype&gt;#include &lt;ctime&gt;#include &lt;vector&gt;#include &lt;cstdlib&gt;#include &lt;stack&gt;#define int long long#define pll std::pair&lt;int,int&gt;#define mp std::make_pair#define fi first#define se second#define oo 2147483647#define PI 3.141592653590#define rint register int#define F(i,a,b) for(rint i=a;i&lt;=b;i++)#define D(i,a,b) for(rint i=a;i&gt;=b;i--)inline int _read () &#123;int s = 0 , w = 1;char ch = getchar ();while ( ch &gt; '9' || ch &lt; '0' ) &#123; if ( ch == '-' ) w = -1; ch = getchar ();&#125;while ( ch &gt;= '0' &amp;&amp; ch &lt;= '9' ) &#123; s = s * 10 + ch - '0'; ch = getchar ();&#125;return s * w;&#125;template &lt; class T &gt; inline void read ( T &amp;x ) &#123;T s = 0 , w = 1;char ch = getchar ();while ( ch &gt; '9' || ch &lt; '0' ) &#123; if ( ch == '-' ) w = -1; ch = getchar ();&#125;while ( ch &gt;= '0' &amp;&amp; ch &lt;= '9' ) &#123; s = s * 10 + ch - '0'; ch = getchar ();&#125;x = s * w;return;&#125;template &lt; class T , typename ...Argc &gt; inline void read ( T &amp;x , Argc &amp;...Args ) &#123;read ( x );read ( Args... );return;&#125; template &lt; class T &gt; inline T max ( T x , T y ) &#123;return x &gt; y ? x : y;&#125;template &lt; class T &gt; inline T min ( T x , T y ) &#123;return x &lt; y ? x : y;&#125;template &lt; class T &gt; inline void abs ( T x ) &#123;return x &gt; 0 ? x : -x;&#125;template &lt; typename T &gt; void write ( T x ) &#123;if ( x &lt; 0 ) x = -x , putchar ( '-' );if ( x &gt; 9 ) write ( x / 10 );putchar ( x % 10 + 48 );return;&#125;template &lt; typename T &gt; void writeln ( T x ) &#123;write ( x ); printf (\"\\n\"); &#125;template &lt; class T &gt; inline T gcd ( T x , T y ) &#123;if ( x &lt; y ) swap ( x , y );if ( !y ) return x;return gcd ( y , x % y );&#125;template &lt; class T &gt; inline T ksm ( T x , T y , T Mod ) &#123;T tmp = 1;while ( y ) &#123;if ( y % 2 == 1 ) tmp = ( tmp * x % Mod );x = ( x * x ) % Mod;y &gt;&gt;= 1;&#125;return tmp;&#125; /**********************************************************************************************************************************************************************************************************************************************************************/const int N = 3e5 + 10;int n , idx;struct Node &#123; int hi; int vi;&#125;fence[N];int f[N][5];signed main ( void ) &#123; int T = _read (); while ( T-- ) &#123; n = _read (); for ( int i = 1 ; i &lt;= n ; i++ ) &#123; read ( fence[i].hi , fence[i].vi ); for ( int j = 0 ; j &lt;= 4 ; j++ ) f[i][j] = 1e17; &#125; for ( int i = 1 ; i &lt;= n ; i++ ) &#123; for ( int j = 0 ; j &lt;= 4 ; j++ ) &#123; for ( int k = 0 ; k &lt;= 4 ; k++ ) &#123; if ( fence[i].hi + j == fence[i - 1].hi + k ) continue; f[i][j] = min ( f[i][j] , f[i - 1][k] ); &#125; if ( f[i][j] == 1e17 ) continue; f[i][j] += 1ll * j * fence[i].vi; &#125; &#125; int ans = 1e17; for ( int i = 0 ; i &lt;= 4 ; i++ ) ans = min ( ans , f[n][i] ); writeln ( ans ); &#125; return 0;&#125;// Main Code 因为知道了自己是多么的菜,所以才要更加努力去追求那个永远也不可能实现的梦想","categories":[{"name":"OI","slug":"OI","permalink":"http://krrrr.xyz/分类/OI/"}],"tags":[{"name":"CodeForces题解","slug":"CodeForces题解","permalink":"http://krrrr.xyz/标签/CodeForces题解/"}]},{"title":"[USACO09FEB]改造路Revamping Trails题解","slug":"改造路题解","date":"2019-09-18T02:27:56.000Z","updated":"2019-09-18T02:44:05.103Z","comments":true,"path":"2019/09/18/改造路题解/","link":"","permalink":"http://krrrr.xyz/2019/09/18/改造路题解/","excerpt":"复习了一波分层图….","text":"复习了一波分层图…. 可以发现这道题就是分层图裸题.我们可以设$dis_{time,i}$表示现在已经用了$time$次免费机会,到达了$i$这个点的时候的最短路径.那么我们在进行堆优化$Dijkstra$时($SPFA$跑分层图一般会死的很惨),我们对于每次转移时,判断一下是否使用一次免费机会即可. 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;#include &lt;queue&gt;#define K 25#define N 10005#define M 4200005#define F(i,a,b) for(int i=a;i&lt;=b;i++)#define G(i,a,b) for(int i=head[a];i;i=b[i].next)using namespace std;int n,m,k,t,start,end;struct Edge&#123; int to; int data; int next;&#125;e[M];struct Que&#123; int time,cur; Que(int a,int b):time(a),cur(b)&#123;&#125;&#125;;int head[N],vis[K][N];bool inque[K][N];int ans=2147483647;struct cmp &#123; bool operator () ( Que x , Que y ) &#123; return vis[x.time][x.cur] &gt; vis[y.time][y.cur]; &#125;&#125;;priority_queue &lt; Que , vector &lt; Que &gt; , cmp &gt; qu;void add (int x,int y,int z)&#123; e[++t].to=y; e[t].data=z; e[t].next=head[x]; head[x]=t; return;&#125;inline void spfa (int x)&#123; memset(vis,0x3f3f3f3f,sizeof(vis)); vis[0][x]=0; inque[0][x]=1; qu.push(Que(0,1)); while (!qu.empty())&#123; Que j=qu.top(); qu.pop(); inque[j.time][j.cur]=0; G(i,j.cur,e)&#123; int k=e[i].to; if (vis[j.time][k]&gt;vis[j.time][j.cur]+e[i].data)&#123; vis[j.time][k]=vis[j.time][j.cur]+e[i].data; if (!inque[j.time][k])&#123; inque[j.time][k]=1; qu.push(Que(j.time,k)); &#125; &#125; &#125; if (j.time&lt;k) G(i,j.cur,e)&#123; int k=e[i].to; if (vis[j.time+1][k]&gt;vis[j.time][j.cur])&#123; vis[j.time+1][k]=vis[j.time][j.cur]; if (!inque[j.time+1][k])&#123; inque[j.time+1][k]=1; qu.push(Que(j.time+1,k)); &#125; &#125; &#125; &#125; F(i,0,k) ans=min(ans,vis[i][n]); return;&#125;int main()&#123; scanf (\"%d%d%d\",&amp;n,&amp;m,&amp;k); F(i,1,m)&#123; int x,y,z; scanf (\"%d%d%d\",&amp;x,&amp;y,&amp;z); add (x,y,z); add (y,x,z); &#125; spfa(1); printf (\"%d\\n\",ans); return 0;&#125; 因为知道了自己是多么的菜,所以才要更加努力去追求那个永远也不可能实现的梦想","categories":[{"name":"OI","slug":"OI","permalink":"http://krrrr.xyz/分类/OI/"}],"tags":[{"name":"图论","slug":"图论","permalink":"http://krrrr.xyz/标签/图论/"},{"name":"DP","slug":"DP","permalink":"http://krrrr.xyz/标签/DP/"},{"name":"最短路","slug":"最短路","permalink":"http://krrrr.xyz/标签/最短路/"},{"name":"分层图","slug":"分层图","permalink":"http://krrrr.xyz/标签/分层图/"}]},{"title":"提高失恋测D3","slug":"提高失恋测D3","date":"2019-09-16T11:00:10.000Z","updated":"2019-09-22T11:49:36.258Z","comments":true,"path":"2019/09/16/提高失恋测D3/","link":"","permalink":"http://krrrr.xyz/2019/09/16/提高失恋测D3/","excerpt":"只有知道密码的人才能看呢","text":"你一定知道密码趴 Incorrect Password! No content to display! ","categories":[{"name":"OI","slug":"OI","permalink":"http://krrrr.xyz/分类/OI/"}],"tags":[{"name":"ZROI","slug":"ZROI","permalink":"http://krrrr.xyz/标签/ZROI/"}]},{"title":"CodeForces round585题解","slug":"round585题解","date":"2019-09-15T10:27:30.000Z","updated":"2019-09-18T02:40:34.240Z","comments":true,"path":"2019/09/15/round585题解/","link":"","permalink":"http://krrrr.xyz/2019/09/15/round585题解/","excerpt":"","text":"A.傻逼题,暴力枚举即可(我也就只会傻逼题了) 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586#include &lt;cstdio&gt;#include &lt;algorithm&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;queue&gt;#include &lt;map&gt;#include &lt;set&gt;#include &lt;cmath&gt;#include &lt;cctype&gt;#include &lt;ctime&gt;#include &lt;vector&gt;#include &lt;cstdlib&gt;#include &lt;stack&gt;#define ll long long#define pll std::pair&lt;int,int&gt;#define MP std::make_pair#define fi first#define se second#define oo 2147483647#define PI 3.141592653590#define rint register int#define F(i,a,b) for(rint i=a;i&lt;=b;i++)#define D(i,a,b) for(rint i=a;i&gt;=b;i--)#define G(i,a,b,c) for(rint a=head[b];a;a=c[a].next)inline int _read () &#123;int s = 0 , w = 1;char ch = getchar ();while ( ch &gt; '9' || ch &lt; '0' ) &#123; if ( ch == '-' ) w = -1; ch = getchar ();&#125;while ( ch &gt;= '0' &amp;&amp; ch &lt;= '9' ) &#123; s = s * 10 + ch - '0'; ch = getchar ();&#125;return s * w;&#125;template &lt; class T &gt; inline void read ( T &amp;x ) &#123;T s = 0 , w = 1;char ch = getchar ();while ( ch &gt; '9' || ch &lt; '0' ) &#123; if ( ch == '-' ) w = -1; ch = getchar ();&#125;while ( ch &gt;= '0' &amp;&amp; ch &lt;= '9' ) &#123; s = s * 10 + ch - '0'; ch = getchar ();&#125;x = s * w;return;&#125;template &lt; class T , typename ...Argc &gt; inline void read ( T &amp;x , Argc &amp;...Args ) &#123;read ( x );read ( Args... );return;&#125; template &lt; class T &gt; inline T max ( T x , T y ) &#123;return x &gt; y ? x : y;&#125;template &lt; class T &gt; inline T min ( T x , T y ) &#123;return x &lt; y ? x : y;&#125;template &lt; class T &gt; inline void abs ( T x ) &#123;return x &gt; 0 ? x : -x;&#125;template &lt; typename T &gt; void write ( T x ) &#123;if ( x &lt; 0 ) x = -x , putchar ( '-' );if ( x &gt; 9 ) write ( x / 10 );putchar ( x % 10 + 48 );return;&#125;template &lt; typename T &gt; void writeln ( T x ) &#123;write ( x ); printf (\"\\n\"); &#125;template &lt; class T &gt; inline T gcd ( T x , T y ) &#123;if ( x &lt; y ) swap ( x , y );if ( !y ) return x;return gcd ( y , x % y );&#125;template &lt; class T &gt; inline T ksm ( T x , T y , T Mod ) &#123;T tmp = 1;while ( y ) &#123;if ( y % 2 == 1 ) tmp = ( tmp * x % Mod );x = ( x * x ) % Mod;y &gt;&gt;= 1;&#125;return tmp;&#125; /**********************************************************************************************************************************************************************************************************************************************************************/const int N = 10005;int n , a1 , a2 , k1 , k2 , idx;int num[N];inline bool cmp1 ( int x , int y ) &#123; return x &gt; y;&#125;inline bool cmp2 ( int x , int y ) &#123; return x &lt; y;&#125;int main ( void ) &#123; read ( a1 , a2 , k1 , k2 , n ); for ( int i = 1 ; i &lt;= a1 ; i++ ) num[++idx] = k1; for ( int i = 1 ; i &lt;= a2 ; i++ ) num[++idx] = k2; std :: sort ( num + 1 , num + 1 + idx , cmp1 ); int ans = 0; int tmp = n; for ( int i = 1 ; i &lt;= idx ; i++ ) if ( tmp &lt; num[i] ) &#123; tmp = 0; break; &#125; else tmp -= num[i] - 1; if ( tmp == 0 ) printf ( \"%d \" , ans ); else printf ( \"%d \" , tmp ); std :: sort ( num + 1 , num + 1 + idx , cmp2 ); ans = 0 , tmp = n; for ( int i = 1 ; i &lt;= idx ; i++ ) if ( tmp &lt; num[i] ) break; else &#123; ans ++; tmp -= num[i]; &#125; printf ( \"%d\\n\" , ans ); return 0;&#125;// Main Code B.分从后往前现在的数的正负性讨论即可,负负得正. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566#include &lt;cstdio&gt;#include &lt;algorithm&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;queue&gt;#include &lt;map&gt;#include &lt;set&gt;#include &lt;cmath&gt;#include &lt;cctype&gt;#include &lt;ctime&gt;#include &lt;vector&gt;#include &lt;cstdlib&gt;#include &lt;stack&gt;#define ll long long#define pll std::pair&lt;int,int&gt;#define MP std::make_pair#define fi first#define se second#define oo 2147483647#define PI 3.141592653590#define rint register int#define F(i,num,b) for(rint i=num;i&lt;=b;i++)#define D(i,num,b) for(rint i=num;i&gt;=b;i--)#define G(i,num,b,c) for(rint num=head[b];num;num=c[num].next)inline int _read () &#123;int s = 0 , w = 1;char ch = getchar ();while ( ch &gt; '9' || ch &lt; '0' ) &#123; if ( ch == '-' ) w = -1; ch = getchar ();&#125;while ( ch &gt;= '0' &amp;&amp; ch &lt;= '9' ) &#123; s = s * 10 + ch - '0'; ch = getchar ();&#125;return s * w;&#125;template &lt; class T &gt; inline void read ( T &amp;x ) &#123;T s = 0 , w = 1;char ch = getchar ();while ( ch &gt; '9' || ch &lt; '0' ) &#123; if ( ch == '-' ) w = -1; ch = getchar ();&#125;while ( ch &gt;= '0' &amp;&amp; ch &lt;= '9' ) &#123; s = s * 10 + ch - '0'; ch = getchar ();&#125;x = s * w;return;&#125;template &lt; class T , typename ...Argc &gt; inline void read ( T &amp;x , Argc &amp;...Args ) &#123;read ( x );read ( Args... );return;&#125; template &lt; class T &gt; inline T max ( T x , T y ) &#123;return x &gt; y ? x : y;&#125;template &lt; class T &gt; inline T min ( T x , T y ) &#123;return x &lt; y ? x : y;&#125;template &lt; class T &gt; inline void abs ( T x ) &#123;return x &gt; 0 ? x : -x;&#125;template &lt; typename T &gt; void write ( T x ) &#123;if ( x &lt; 0 ) x = -x , putchar ( '-' );if ( x &gt; 9 ) write ( x / 10 );putchar ( x % 10 + 48 );return;&#125;template &lt; typename T &gt; void writeln ( T x ) &#123;write ( x ); printf (\"\\n\"); &#125;template &lt; class T &gt; inline T gcd ( T x , T y ) &#123;if ( x &lt; y ) swap ( x , y );if ( !y ) return x;return gcd ( y , x % y );&#125;template &lt; class T &gt; inline T ksm ( T x , T y , T Mod ) &#123;T tmp = 1;while ( y ) &#123;if ( y % 2 == 1 ) tmp = ( tmp * x % Mod );x = ( x * x ) % Mod;y &gt;&gt;= 1;&#125;return tmp;&#125; /**********************************************************************************************************************************************************************************************************************************************************************/const int N = 4e5 + 10;int n;ll num[N] , s[N];ll tai,fro;ll odd,uodd;int main ( void ) &#123; read ( n ); F ( i , 1 , n ) &#123; num[i] = _read (); s[i] = s[i - 1] ^ ( num[i] &lt; 0 ); if ( s[i] == 1 ) &#123; tai += odd; fro += uodd; odd++; fro++; &#125; else &#123; tai += uodd; fro += odd; tai++; uodd++; &#125; &#125; std :: cout &lt;&lt; fro &lt;&lt; \" \" &lt;&lt; tai &lt;&lt; std :: endl; return 0;&#125; C.发现只有$A$和$B$,两种字符,很容易发现规律. 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485#include &lt;cstdio&gt;#include &lt;algorithm&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;queue&gt;#include &lt;map&gt;#include &lt;set&gt;#include &lt;cmath&gt;#include &lt;cctype&gt;#include &lt;ctime&gt;#include &lt;vector&gt;#include &lt;cstdlib&gt;#include &lt;stack&gt;#define ll long long#define pll std::pair&lt;int,int&gt;#define MP std::make_pair#define fi first#define se second#define oo 2147483647#define PI 3.141592653590#define rint register int#define F(i,num,b) for(rint i=num;i&lt;=b;i++)#define D(i,num,b) for(rint i=num;i&gt;=b;i--)#define G(i,num,b,c) for(rint num=head[b];num;num=c[num].next)inline int _read () &#123;int s = 0 , w = 1;char ch = getchar ();while ( ch &gt; '9' || ch &lt; '0' ) &#123; if ( ch == '-' ) w = -1; ch = getchar ();&#125;while ( ch &gt;= '0' &amp;&amp; ch &lt;= '9' ) &#123; s = s * 10 + ch - '0'; ch = getchar ();&#125;return s * w;&#125;template &lt; class T &gt; inline void read ( T &amp;x ) &#123;T s = 0 , w = 1;char ch = getchar ();while ( ch &gt; '9' || ch &lt; '0' ) &#123; if ( ch == '-' ) w = -1; ch = getchar ();&#125;while ( ch &gt;= '0' &amp;&amp; ch &lt;= '9' ) &#123; s = s * 10 + ch - '0'; ch = getchar ();&#125;x = s * w;return;&#125;template &lt; class T , typename ...Argc &gt; inline void read ( T &amp;x , Argc &amp;...Args ) &#123;read ( x );read ( Args... );return;&#125; template &lt; class T &gt; inline T max ( T x , T y ) &#123;return x &gt; y ? x : y;&#125;template &lt; class T &gt; inline T min ( T x , T y ) &#123;return x &lt; y ? x : y;&#125;template &lt; class T &gt; inline void abs ( T x ) &#123;return x &gt; 0 ? x : -x;&#125;template &lt; typename T &gt; void write ( T x ) &#123;if ( x &lt; 0 ) x = -x , putchar ( '-' );if ( x &gt; 9 ) write ( x / 10 );putchar ( x % 10 + 48 );return;&#125;template &lt; typename T &gt; void writeln ( T x ) &#123;write ( x ); printf (\"\\n\"); &#125;template &lt; class T &gt; inline T gcd ( T x , T y ) &#123;if ( x &lt; y ) swap ( x , y );if ( !y ) return x;return gcd ( y , x % y );&#125;template &lt; class T &gt; inline T ksm ( T x , T y , T Mod ) &#123;T tmp = 1;while ( y ) &#123;if ( y % 2 == 1 ) tmp = ( tmp * x % Mod );x = ( x * x ) % Mod;y &gt;&gt;= 1;&#125;return tmp;&#125; /**********************************************************************************************************************************************************************************************************************************************************************/char s[3][200005];int n , sum;int can1,can2,bc;int cnt1[200005],cnt2[200005];int main()&#123; read ( n ); scanf ( \"%s%s\" , s[1] , s[2] ); for(int i=0;i&lt;n;i++)&#123; if(s[1][i]!=s[2][i])&#123; if(s[1][i]=='a')&#123; can1++; cnt1[can1]=i+1; &#125; else&#123; can2++; cnt2[can2]=i+1; &#125; &#125; &#125; if(n%2==1)&#123; puts ( \"-1\" ); return 0; &#125; if(can1%2==1)&#123; sum+=2; sum+=(n-2)/2; writeln ( sum ); printf ( \"%d %d\\n\" , cnt1[1] , cnt1[1] ); printf ( \"%d %d\\n\" , cnt1[1] , cnt2[1] ); for(int i=2;i&lt;=can1;i+=2) printf ( \"%d %d\\n\" , cnt1[i] , cnt1[i + 1] ); for(int i=2;i&lt;=can2;i+=2) printf ( \"%d %d\\n\" , cnt2[i] , cnt2[i + 1] ); return 0; &#125; sum=(can1+can2)/2; writeln ( sum ); for(int i=1;i&lt;=can1;i+=2) printf ( \"%d %d\\n\" , cnt1[i] , cnt1[i + 1] ); for(int i=1;i&lt;=can2;i+=2) printf ( \"%d %d\\n\" , cnt2[i] , cnt2[i + 1] ); return 0;&#125; 因为知道了自己是多么的菜,所以才要更加努力去追求那个永远也不可能实现的梦想","categories":[{"name":"OI","slug":"OI","permalink":"http://krrrr.xyz/分类/OI/"}],"tags":[{"name":"CodeForces题解","slug":"CodeForces题解","permalink":"http://krrrr.xyz/标签/CodeForces题解/"}]},{"title":"普转提七连测D2","slug":"普专提D2","date":"2019-09-15T06:15:02.000Z","updated":"2019-09-22T11:49:13.552Z","comments":true,"path":"2019/09/15/普专提D2/","link":"","permalink":"http://krrrr.xyz/2019/09/15/普专提D2/","excerpt":"只有知道密码的人才能看呢","text":"你一定知道密码趴 Incorrect Password! No content to display! ","categories":[{"name":"OI","slug":"OI","permalink":"http://krrrr.xyz/分类/OI/"}],"tags":[{"name":"ZROI","slug":"ZROI","permalink":"http://krrrr.xyz/标签/ZROI/"}]},{"title":"数据生成","slug":"数据生成","date":"2019-09-14T06:36:05.000Z","updated":"2019-09-14T06:37:45.814Z","comments":true,"path":"2019/09/14/数据生成/","link":"","permalink":"http://krrrr.xyz/2019/09/14/数据生成/","excerpt":"图和树的数据生成器","text":"图和树的数据生成器 图有向图和无向图同样适用的数据生成器,可生成随机图 12345678910111213141516171819202122232425262728293031323334353637383940#include&lt;cstdio&gt;#include&lt;algorithm&gt;#include&lt;cstdlib&gt;#include&lt;cstring&gt;#include&lt;set&gt;#include&lt;ctime&gt;#include&lt;iostream&gt;using namespace std;int n,m,s,T;inline int random() &#123; static int seed = s; return seed = (int)(seed*48271ll%2147483647);&#125;set&lt;int&gt;to[100005];//去重int main() &#123; srand ( time ( NULL ) ) ; cin &gt;&gt; T; cout &lt;&lt; T &lt;&lt; endl; while(T--) &#123; s = rand(); n = 96; m = 102; printf(\"%d %d \\n\",n,m); for(int i = 1 ; i &lt;= m ; i++) &#123; int u = random() % n + 1; int v = random() % n + 1; while(to[u].find(v) != to[u].end() || u == v) &#123; u = random() % n + 1; v = random() % n + 1; &#125; printf(\"%d %d\\n\",u,v); to[u].insert(v); &#125; printf(\"\\n\"); &#125; return 0;&#125; 树保证数据为一棵随机树 1234567891011121314151617181920212223242526272829303132333435363738#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;algorithm&gt;#include&lt;ctime&gt;#include&lt;cstring&gt;#include&lt;cstdlib&gt;using namespace std;int a[10005],e[10005][2];int n = 1000;bool flag[10005];int main() &#123; freopen(\"testdata.in\",\"w\",stdout); printf(\"%d\\n\",n); for(int i = 1 ; i &lt;= n ; i++) &#123; a[i] = rand() % n + 1; while(flag[a[i]]) a[i] = rand() % n + 1; flag[a[i]] = 1; &#125; for(int i = 2 ; i &lt;= n ; i++) &#123; e[i-1][0] = a[i]; e[i-1][1] = a[rand() % (i - 1) + 1]; &#125; memset(flag,0,sizeof(flag)); for(int i = 1 ; i &lt; n ; i++) &#123; int x = rand() % (n - 1) + 1; while(flag[x]) x = rand() % (n - 1) + 1; flag[x] = 1; int f = rand() % 2; if(f) printf(\"%d %d\\n\",e[x][0],e[x][1]); else printf(\"%d %d\\n\",e[x][1],e[x][0]); &#125; return 0;&#125;","categories":[{"name":"知识水平","slug":"知识水平","permalink":"http://krrrr.xyz/分类/知识水平/"}],"tags":[{"name":"数据制造","slug":"数据制造","permalink":"http://krrrr.xyz/标签/数据制造/"}]},{"title":"普及五联测D1","slug":"普及五联测D1","date":"2019-09-14T06:29:43.000Z","updated":"2019-09-22T11:48:49.105Z","comments":true,"path":"2019/09/14/普及五联测D1/","link":"","permalink":"http://krrrr.xyz/2019/09/14/普及五联测D1/","excerpt":"只有知道密码的人才能看呢","text":"你一定知道密码趴 Incorrect Password! No content to display! U2FsdGVkX19SbbjwtRdmSNiXyRK5mdZY2offAhYyLW8AgV6F+78RfaFofuf8YQFFB4N+QvDbOwtQDSdUxa3/4sMsrylkwgDO7WlCaA1Tjs3euj5/Z7hhWCYQ/9uJEc8PK3hQ7uKMewmJojsaRahxh5xgCOHExXpdpi2KbC7384OuMPEtrDIcFH1whNzi4f5eyuweAmdHfplOvD5FK8vZw4IQHGEhR2sYjbQx5vkiPn7ugkSI1ySVr0LqaoFBqgK5wFJ6kNkWdeuVmiOgFoo7NepvTTikRYC2aV3vRk8LUJYPU6tjnOk3eiFGfwKxA8KskdhJ5Qsmr3FvIzjq+bIVbRQRBZRkLZWnRpNrJNnWDLwNA4vbSQyO6ar1n7cIqK6uKeIT3ctAyQ/1lEg3pdIKoAJCJxWvN8uH/m2jrRbjz7B1NDSpRmEAbrTy2qWFrnaHrT9rHWEAVfmhzOxDzBjWJjrLA2sHIzN/CGRQDJXirzOZc9VnM/PaUxt8bvempcDu7AshoqnPEbrMSjTIgLYbidU6y/f1zqsXpVL31lLmdyIC4z6ewtsObCmzHGxSFJh14ll/HfiWW+4VNIEKWosi0NKT7XXfFwfvp1WnolxwbRvL1M+EbYXsUwszG45ex/nLUPzmVZ906bVs3bU5NjzI9dfzuwJdx+E7cnbAp/BB9SSNS7MHkUJuOBqbwM2meTCLeY6scXliplFSJTxgh1rsoYQ6g6WcP3k2L3ELhj8C6AvAQ0ABsB0moNprDRomsSarDzLHdeio4TL1lWvNUusGSYfk54t+tCZY3FIIeF2tCnxLwT+aYTlx9oCVNDdIbuub8nIYi14AyKtj0qpItkcZFSwvkhVZs8ZJYnEjYGZzCvFvB+FlW/Q87lOcJFCjkTewnTlISSuLQl+QPKpIXKhEmeRDzO6v5hyiKtRy+xWL1207XhlauGVL4OEQU80t4cIdHnrSE7WraPW/VtIzc1VcCf+vwOf9CAj0ZscbxXfW76fIixmnPzmzxmy1+vkj0lg0r/ZN78Jz1LCdUpWFlCUxcmmYHie67nfGg15fikGC6kBJGClS2ah8q0XZrCavCggrA/HqCEMK4w/KEOl2mhBHuGSI9zqvrQYiJIphqlXKQCV25Ak2TTKueUmfglpjvbGtG7l8JXYOuk3ZIOY84rXxJG7QdxFk2jli6SOPv6+fsFde4o72EQCzdFHb0wytjyYTo1voKvBFFatau6v7AvuIbeMBq68nykbDpHBTVpIT8O9YqiMdnb9+5kce8XSWHIoBibzQlOfgR4rJF84M0amDTX04g1ueKHKLFw2OYLeXfJGEB3Vlf4WIq9+JYYezFVTTyKZ3LsgYXeBi/EuXirCz8tNYcWRV7LxIJLiizJ9SEWndz2w6Z52iNtHFa3+dP5Xv+ke0t8EniYX+w7otzJ0X1B/KlLb6Vb24fJptzg0bAaRDvOZWmsMfGf6/ASjoA+S7Xa1LUE+/qamMttqDDE+qTQ0eXnAwceP6ha8Yhs6HrKoyGiPodN0Qz7Ee1nu9w4wHjAVfKpfGc2oszJKwAqnqsNLLpI5br0OUr/FhTj0WKjqLfySqzOeAARn0DKyj1/CaEmcs3pkv3ioairvJKFIC78uyIdmRVK2VUJbjMyJcgd2Pf3/Np57sQxdXxa40CoqCvD2+IrqZHqMy3oSiDIeJMvrjNmhLvcHICpn17/KOQLjv8YcApSelFzDAJMhjb7VuT6aTFTxf5eyfNmd9PXQbijJy3GVMbkjPK6WDDOt5RLVoBOzgcQVLkL+o1GndXNUX/VAHbRWH40zE7EbrcYF6ry4hFVjhP6jCthPwV0g2YkvRn6AvDhh5oL/RdxizxQtMFrN+H2igLKYzb0TCg4+CbZ7s4eUu95KCZt+gndowMxY3a/6nL2uowrqUFDPl+/pttg3ZAvhg7pUi/1zOv433euo0QkWlFSg5FelCHTc8JpoqBW/n9pT/toMiQJf4P9Ome3EpAtQFn8aCGRGr+zXtXR6/dtEH2hgowHT5DNKljtbR34RUFDVEZClc5odzSjsk3Dz3oYM05SY+/6n5i7qwEqUNX5cK3wfk+wYomrcucz+AruZ9Nli4qLRNiDcRQ5udbQzhHG5sfBbAUCynsRkapGBDBBfX9DWyCK34V7pjk80YP6Bl7286UGgogyqT8cyAUhcPcuN55CHFU+h/qDvvrstr86oycrxL7OFxqYgPJsLzbuXqfI/1nDIKxOkn06Cw7++RikiFtYKIS1mLgtjzMbTQ0aD2fPUoAQGQhGVdr3QySDf/v6DISw/vJdx1jKm1r7UU9Q95tyrGNNz0aZhrJErmLLRJZbYnYyTn++aYKfzALZrCWGXAEJng1FPXO+lRmjmMjloyUqwXgAlyJdWe4gQXSNPn0cuZ9q+IddCEDi9w5HKPUlZPZfFCYSrKo+3+/n58y6us6gBR/RZOJzayatX8DLaxCHNoMVCkjUZwsQNj4b/J4LNuX0Qgvfmw1GbagqvgqHXM62krRvG2On4FdrHT5Mgv5dArftVSNLmyf5t+7QyR7XJRkg1k3I18YjM7bKG7t42XEEYcrjb7s4OzDK984biVH5J4M/LSg231U3n50+r1Y1Ul09wdGqHRRf6W0NNIs5GxzD1SiM4qnD1ftRGd8qX/r95CjodEvHr5jbqxieGsLbAmwcuqHQRAtBvsoyUVascchCw+42c4zWyPp2t6GXsUHa6hb8O7MOIDGe/mARANqKL5o0gqJxXQamRyUKJOcsvM7mBnrwJZ0RpA5zzv4oeTRndZmzSdxMQu8/JGvyTq28N+9EG/S6N8HGP09mJ/I7jsHuWPBLb6CZh2950TM5uHUTmdK4zhMyRKhEhChoJQa9pev79DROHauGFd8NBPAkzANcrAJ29qTHU07xZxZ59Wr66c1dnc578pcX3n2RI4r4QZn4h1zCjn6SaRpC0MJLSYC/m4A0fKvG2q6IWTqC3BjZhdXXOz/MW7FW79mAs7m0/3mJzAWbznenRdl3mvj9yliEt/zc8Sj0Mls7vqaBhk+qvW/abRyhKB+XI1UBLD0bQMXby1g6kpEt+H6sxVDLrgcG6Afazs2szy+mz1P7y/ssSxqZc2GdhDrUvtaLhTR8aSZeGnszXGq5HqchjseamrAOxvrMJGK8eYoymOnlI4xcLBOCMjRMHqoX4/CnLt+ZGYW/mf50nDXPelvidbTWi7pEKwJi68tWSWxXHoo80EiZm49Ze35DZljfX7T8U+VsnAByKtLWkVTdaiSaDUzZFwp2xqfBdrQCPlwwuol6NV/RmmVH2GLEmKA9BXP3FPLjhKeODE+DruXKNbwcM2Wn8Rsrj199i674Ems320gKQ5Cni/qSxBFLC1uhCDeQQSDBiut+F30InCSPu7JiAkvOzuI1gtBk77rFlnSNnKL6rzgu/yAgvnAKxUYK3KVGvUniK1URjyQh/1XguKCYrur1h23tMGmPnJdmQpiPxcqEoYTxOdZnVSyO37CPBEHUswxCZp/lR7P1F5sC6ZIy/QKr2R6cYfLseJgFnei/X70zF6rlzb6hOJ/w2R3aYcPo+Prlf75cGKJPgZAvRm+cCXbNRrWfJKtYpBXxbPhPHPqTCnNEdTj5uMOhEICnjlwGFq2Q4/wf/EaegRvPACNeUjPdLj23AeMULj/L4LF0sgWhiVVOGA5HaaOa/hR4uUMupbjbWZCSs+k8anEcSdUT9KhwuuTlOqLFK6Ygfec8pWbpE853pzcw7fOVhijr5EocXgg0SUUHuYslUUduK3/p5qD5+fz5LAOIPX0+MSeSM1+UfV72t0fnzQw0V4qDM8QRhwn29D7EL+oLSiHxSu8VTbFcDXhM7gG/akQP1dP+Mqvr9grN4sbRY9ut7Sbt2Mr6NenQPx/y/j5uP5Dmil2O36QAqdZe4wL20pGqT7g6223N0uN93oeHhP2uOPWKzMXT31RNBerhONB4yBr0KH1A+Y9X3iFAPjQghY5M/dmhd2zFZQa3P6HnkMVefMubqicZyJZ7agqN6+FZsMp7OkaCH2mWDe7xl6SJvG+XdsPSdASxcz7O8Xk14I03crZK87j6Mpfp297RsgRHok4fDs7KKtM2MOEzO4dgQMmnI690/xUi996Ts4KasGV3+zyRj1rfCkm+mJrNxBNgBGq9//oxHRxCek1SRDUie3hCLkhyYTW0lcsl26I5ZRWIDyJyH3YP/+JjJOfCQqh86p00SS9fx2Y5j4kXUrTmHmE6ggkRn2Lz2hGXvPaI5c5slvhQ004Hi0dG9WmzQFRfNDrxjoRLLBcSAi3n2SNh0927p2tGzFcQsuHtWOd5sAcVaYv3SG8t6iJIyoPCiZCG7GdGDfAJg7SB06gZxei5sCv3/UL97oofEITRk+qRDvY7VRkccYXdFVjj8Q1UQPoJ/ps1jZ24yvEbVrSYnpFLQoV+lNXqofk3GoJmi8NdZ6z1519clYcc5YY9XUWIH/DtpRxF9kJ8Xa+xwFk++h+uolBzMm4jkEcPJl7bQgud+ix0BUAyslK4/sCDiBtp2El7f1YsK9CIo9F/WrjuVxZmAGhP4exxhpWn0Rj1HcUwkKWOc/+WvOp4TdwF9ZAqv+suYfWclIbIU+T8WwZFRH9QZ/i49oFJFipItWlqVuXHPIU1aTk0RZEAJ7GkosbXpvMiNSK6hEGf50/yiE8JorNt4qQgChDKynr64xQ5bCe7gGHw5mfqH/lr1EGhXWFg6Qz2AVYqoLN7Wi4R3IdRs+HYn3Tfp+VIavMncFkuI9PfD0T4q1OITp6uIur1YcT9s/Mzrd/qSecB+E2YBGKwPxY4YvuitdWbcEnjr8Gwu58gShEAHpFaoS/Yz2vpfqAH6oOZe2PWeYH1sfiXgV18sXUKJZgw5wCgdMMuuNXqfcgupT+x36lMmUU9LVvtQpbdIH1fNTXjZwnBcMD83kObjcHiSetmN0KaICCFJhC7pqgpl+qSYGCBqK4wgMrRSHRF8gHxTrskGE2EwelpjEHroD8C1w4aGzv0KXccR6GFX5LIUX8K+PO9XoPx0+DQtiS1G+z+4gExh560e0ByJfTyt4Fr2afmBs6jChQD0zx1MXO6rPtS27Tni1rGbjuauBNwirpmGjrIufomqXXRh2u9mR39/HI9pDF0Zk0vSXO5cGT59tLOmHeruLqgqC/TXW050laQ+PHwIoeduKrYHXQtaYDVrBbBIbQiFHh8a69/C+AJgSuCckKBZ2e8hHVNMSU7Phzs2Ydld/yHkmjcF+CwpmW52pnb0+HXufqzx/RW/c4ke28CqOM6B/ccPA0UIc/QLpuNOdrIC3MAdxRqwMCTNXLGVLJJ5id1Q6ffLF8ZSBRSZ34kMEEaAC554DDg+fIXfmif5FJ9G4CADESQQ6pNFjkoyp0NrFze3FqjoaWQq9DJP80TDPOtbr0MNTnVwMnbBIkdGZ9B0slrLUkbG1pv+ukXfIEaiwEz5YVJlHMsWvjfw2D9uLDKAWb9DKRHkbovT+2KfGm2f27GkPIKSjmz7c8RQZfS7dTiyJJvqv6VurD4ZJp6KVuieqWHxftwAXIFQKGItvrxByyIhq/Tx4GSIsEJ/vkkhi1ZQLq4PPFF+aRja7w+W7wpygjrQ46l12Ol0BUYwdRLVZju+0S3XhsnaxA0YtFuImkg==","categories":[{"name":"OI","slug":"OI","permalink":"http://krrrr.xyz/分类/OI/"}],"tags":[{"name":"ZROI","slug":"ZROI","permalink":"http://krrrr.xyz/标签/ZROI/"}]},{"title":"题解:树","slug":"题解-树","date":"2019-09-12T02:53:52.000Z","updated":"2019-09-18T02:37:04.624Z","comments":true,"path":"2019/09/12/题解-树/","link":"","permalink":"http://krrrr.xyz/2019/09/12/题解-树/","excerpt":"暴力都不想写的题…","text":"暴力都不想写的题… 考虑到题目中要求的最小的那个东西不太好求所以我们可以找一个最大的符合条件的值,我们记为$tmp$,那么有$ans=tmp+1$ 那我们考虑一下这个$tmp$怎么求.","categories":[{"name":"OI","slug":"OI","permalink":"http://krrrr.xyz/分类/OI/"}],"tags":[{"name":"DP","slug":"DP","permalink":"http://krrrr.xyz/标签/DP/"},{"name":"树的直径","slug":"树的直径","permalink":"http://krrrr.xyz/标签/树的直径/"}]},{"title":"ZROI普转提D1题解","slug":"ZROI题解","date":"2019-09-11T12:52:58.000Z","updated":"2019-09-22T11:48:23.729Z","comments":true,"path":"2019/09/11/ZROI题解/","link":"","permalink":"http://krrrr.xyz/2019/09/11/ZROI题解/","excerpt":"只有知道密码的人才能看呢","text":"你一定知道密码趴 Incorrect Password! No content to display! ","categories":[{"name":"OI","slug":"OI","permalink":"http://krrrr.xyz/分类/OI/"}],"tags":[{"name":"ZROI","slug":"ZROI","permalink":"http://krrrr.xyz/标签/ZROI/"}]},{"title":"散步","slug":"散步题解","date":"2019-09-11T12:36:29.000Z","updated":"2019-09-18T02:41:32.208Z","comments":true,"path":"2019/09/11/散步题解/","link":"","permalink":"http://krrrr.xyz/2019/09/11/散步题解/","excerpt":"这题好难啊","text":"这题好难啊 首先可以发现可以二分答案. 我们可以考虑二分一个最长的路径长度$mid$,然后将每个点看成不能在最多连续走$mid$个相同的路的情况下,从$1$号点到$n$号点是否联通. 然后现在的问题就变成了判断图的连通性的问题.我们发现,每个点只有两条出边.而且每种类型的出边只有一条,那么可以发现同样的类型的路径的走路的路径,可以看作一个集合.我们可以设$dis_{i,siz}$表示$i$这个点一直按照$siz$类型的路径一直走,最后一段$siz$路径的长度,然后我们发现,如果$i$这个点走到$j$这个点时,那么$dis_{j,siz}=dis_{i,siz}+1$,而我们发现这个东西显然可以用带权并查集来维护.在使用了带权并查集之后,我们每次就可以在$O(logn)$的时间复杂度内求出以某个点为起点走到最远能走到那个点了.然后我们可以进行一次$bfs$.在某次更新中,可以发现,如果现在到达这个点的最后的路径是$siz$类型的话,如果现在这个点连向的$siz xor 1$类型的点还没有被入队过,那么就将这个点扔进队里. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113#include &lt;cstdio&gt;#include &lt;algorithm&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;queue&gt;#include &lt;map&gt;#include &lt;set&gt;#include &lt;cmath&gt;#include &lt;cctype&gt;#include &lt;ctime&gt;#include &lt;vector&gt;#include &lt;cstdlib&gt;#include &lt;stack&gt;#define ll long long#define pll std::pair&lt;int,int&gt;#define mp std::make_pair#define oo 2147483647#define PI 3.141592653590#define rint register int#define F(i,a,b) for(rint i=a;i&lt;=b;i++)#define D(i,a,b) for(rint i=a;i&gt;=b;i--)inline int _read () &#123;int s = 0 , w = 1;char ch = getchar ();while ( ch &gt; '9' || ch &lt; '0' ) &#123; if ( ch == '-' ) w = -1; ch = getchar ();&#125;while ( ch &gt;= '0' &amp;&amp; ch &lt;= '9' ) &#123; s = s * 10 + ch - '0'; ch = getchar ();&#125;return s * w;&#125;template &lt; class T &gt; inline void read ( T &amp;x ) &#123;T s = 0 , w = 1;char ch = getchar ();while ( ch &gt; '9' || ch &lt; '0' ) &#123; if ( ch == '-' ) w = -1; ch = getchar ();&#125;while ( ch &gt;= '0' &amp;&amp; ch &lt;= '9' ) &#123; s = s * 10 + ch - '0'; ch = getchar ();&#125;x = s * w;return;&#125;template &lt; class T , typename ...Argc &gt; inline void read ( T &amp;x , Argc &amp;...Args ) &#123;read ( x );read ( Args... );return;&#125; template &lt; class T &gt; inline T max ( T x , T y ) &#123;return x &gt; y ? x : y;&#125;template &lt; class T &gt; inline T min ( T x , T y ) &#123;return x &lt; y ? x : y;&#125;template &lt; class T &gt; inline void abs ( T x ) &#123;return x &gt; 0 ? x : -x;&#125;template &lt; typename T &gt; void write ( T x ) &#123;if ( x &lt; 0 ) x = -x , putchar ( '-' );if ( x &gt; 9 ) write ( x / 10 );putchar ( x % 10 + 48 );return;&#125;template &lt; typename T &gt; void writeln ( T x ) &#123;write ( x ); printf (\"\\n\"); &#125;template &lt; class T &gt; inline T gcd ( T x , T y ) &#123;if ( x &lt; y ) swap ( x , y );if ( !y ) return x;return gcd ( y , x % y );&#125;template &lt; class T &gt; inline T ksm ( T x , T y , T Mod ) &#123;T tmp = 1;while ( y ) &#123;if ( y % 2 == 1 ) tmp = ( tmp * x % Mod );x = ( x * x ) % Mod;y &gt;&gt;= 1;&#125;return tmp;&#125; /**********************************************************************************************************************************************************************************************************************************************************************/const int N = 2e5 + 10; int n;int G[N][2];int father[N][2] , dis[N][2];bool vis[N][2];struct Node &#123; int pos; int kid;&#125;;std :: queue &lt; Node &gt; qu;int find ( int x , int kd ) &#123; if ( father[x][kd] != x ) &#123; int tmp = father[x][kd]; father[x][kd] = find ( father[x][kd] , kd ); dis[x][kd] += dis[tmp][kd]; &#125; return father[x][kd];&#125;inline bool check ( int rdm ) &#123; memset ( vis , false , sizeof ( vis ) ); memset ( dis , 0 , sizeof ( dis ) ); F ( i , 1 , n ) father[i][0] = father[i][1] = i; qu.push ( Node &#123; 1 , 0 &#125; ); qu.push ( Node &#123; 1 , 1 &#125; ); while ( !qu.empty() ) &#123; int j = qu.front().pos; int siz = qu.front().kid; qu.pop(); int now = 0; while ( 1 ) &#123; int root = find ( j , siz ); now = dis[j][siz]; if ( now + 1 &gt; rdm ) break; int kt = G[root][siz]; int kj = find ( kt , siz ); if ( !vis[kt][siz ^ 1] ) &#123; vis[kt][siz ^ 1] = 1; qu.push ( Node &#123; kt , siz ^ 1 &#125; ); &#125; if ( kj == root ) break; father[root][siz] = kt; dis[root][siz] = 1; &#125; &#125; if ( vis[n][0] || vis[n][1] ) return 1; return 0;&#125;int main ( void ) &#123; read ( n ); F ( i , 1 , n ) &#123; G[i][0] = _read(); G[i][1] = _read(); &#125; int l = 0 , r = n + 1; while ( l &lt;= r ) &#123; int mid = ( l + r ) &gt;&gt; 1; if ( check ( mid ) ) r = mid - 1; else l = mid + 1; &#125; if ( l &gt; n ) puts ( \"-1\" ); else writeln ( l ); return 0;&#125;// Main Code","categories":[{"name":"OI","slug":"OI","permalink":"http://krrrr.xyz/分类/OI/"}],"tags":[{"name":"图论","slug":"图论","permalink":"http://krrrr.xyz/标签/图论/"},{"name":"最短路","slug":"最短路","permalink":"http://krrrr.xyz/标签/最短路/"},{"name":"二分","slug":"二分","permalink":"http://krrrr.xyz/标签/二分/"}]},{"title":"Codeforces Round 72 题解报告","slug":"题解报告","date":"2019-09-11T10:49:39.000Z","updated":"2019-09-18T02:40:46.032Z","comments":true,"path":"2019/09/11/题解报告/","link":"","permalink":"http://krrrr.xyz/2019/09/11/题解报告/","excerpt":"qwq","text":"qwq A.第一眼看上去貌似是个找规律$O(1)$题,实际看了一下,确实是找规律$O(1)$题.所以就开始愉快的找规律,于是就有了以下的提交记录: emmm…. QAQ然后我们考虑一下正解. 我们设原来我们有$str in exp$,我们设我们分给$str x$点的$exp$,分给$in y$点的$exp$,那么显然有: x+y=exp \\ and \\ str+x>in+y发现上边的这个方程,通过将$y$用$exp-x$代替之后,我们可以解出$x$的具体范围.而且我们可以发现:所有$x$的取值范围一共只有$exp + 1$种,所以就可以愉快的求出答案了. 最后别忘了判断$exp$为$0$的情况. 1234567891011121314151617181920212223242526272829#include&lt;bits/stdc++.h&gt;#define int long longusing namespace std;signed main()&#123; ios::sync_with_stdio(false); cin.tie(0),cout.tie(0); int T; cin&gt;&gt;T; while(T--)&#123; int str,in,exp; cin&gt;&gt;str&gt;&gt;in&gt;&gt;exp; if (exp==0)&#123; if(str&gt;in) cout&lt;&lt;\"1\"&lt;&lt;endl; else cout&lt;&lt;\"0\"&lt;&lt;endl; continue; &#125; if(in+exp-str&lt;0)&#123; cout&lt;&lt;exp+1&lt;&lt;endl; continue; &#125; int ans=min(exp+1,(exp+1)-max(0ll,((in+exp-str)/2+1))); if ( ans &lt; 0 ) ans = 0; cout&lt;&lt;ans&lt;&lt;endl; &#125; return 0;&#125; B.这么可爱的怪兽我怎么可能忍心去打它呢 我们看到题,首先想到,如果我们砍一刀,这个怪兽不死,那么它如果长出来的头大于我们我们这次砍掉的头.那么我们这次的操作显然没用.所以,在前几刀砍不死怪兽的情况下,我们需要最大化每一次砍头时的$d_i-h_i$,同时我们发现.在某一次砍头中,如果这次的$d_j$非常大,大到一下子可以把怪兽剩下的头砍完.我们就可以不用管这次砍头的副作用$h_j$了. 所以我们维护两个最大值,即$d_i-h_i$的最大值以及$d_i$的最大值,然后直接找题意做即可. 1234567891011121314151617181920212223242526272829303132333435363738#include&lt;bits/stdc++.h&gt;#define int long longusing namespace std;int n,x;signed main()&#123; ios::sync_with_stdio(false); cin.tie(0),cout.tie(0); int T; cin&gt;&gt;T; while(T--)&#123; int maxs=-1e16; int Damage=-1e16; cin&gt;&gt;n&gt;&gt;x; for(int i=1;i&lt;=n;i++) &#123; int tx,ty; cin&gt;&gt;tx&gt;&gt;ty; maxs=max(maxs,tx); Damage=max(Damage,tx-ty); &#125; if ( x &lt;= maxs ) &#123; cout &lt;&lt; \"1\" &lt;&lt; endl; continue; &#125; if(Damage&lt;=0)&#123; cout&lt;&lt;\"-1\"&lt;&lt;endl; continue; &#125; int now = ( x - maxs ) / Damage; if ( now * Damage &lt; x - maxs ) now+=2; else now++; cout&lt;&lt;now&lt;&lt;endl; &#125; return 0;&#125; C.通过读题,我们可以发现一个很重要的东西:$\\sum_{i=1}^t len_i&lt;=2*10^5$. 通过这个性质,我们可以发现,我们在枚举每一次的区间时,这个区间的最长长度为$log_2len$. 然后就做完了?? 我们枚举一下每个区间的左/右端点,然后直接暴力统计答案就好了. 123456789101112131415161718192021222324252627282930#include &lt;iostream&gt;#include &lt;vector&gt;#include &lt;algorithm&gt;#include &lt;cstring&gt;using namespace std;typedef long long LL;const int N = 200000 + 10;int t,nex[N];char s[N];int main() &#123; scanf(\"%d\",&amp;t); while(t--) &#123; scanf(\"%s\",s+1); int n=strlen(s+1); nex[n+1]=n+1; for(int i=n;i&gt;=1;i--) &#123; if(s[i]=='0') nex[i]=nex[i+1]; else nex[i]=i; &#125; int ans=0; for(int i=1;i&lt;=n;i++)&#123; int now=0; for(int j=nex[i];j&lt;=min(n,nex[i]+20);j++)&#123; now=now*2+s[j]-'0'; if(now==j-i+1) ans++; &#125; &#125; printf(\"%d\\n\", ans); &#125;&#125;","categories":[{"name":"OI","slug":"OI","permalink":"http://krrrr.xyz/分类/OI/"}],"tags":[{"name":"CodeForces题解","slug":"CodeForces题解","permalink":"http://krrrr.xyz/标签/CodeForces题解/"}]},{"title":"Round #582解题报告","slug":"Round-2","date":"2019-09-11T10:48:46.000Z","updated":"2019-09-18T02:40:50.144Z","comments":true,"path":"2019/09/11/Round-2/","link":"","permalink":"http://krrrr.xyz/2019/09/11/Round-2/","excerpt":"qwq","text":"qwq A.Chips Moving题意就是给你n个数,你每次可以选择一个数,对他进行免费的加2或者减2.或者花费1的代价,对某个数进行加一或者减一,求让所有的数变成一样的最小代价. 很显然可以发现,奇数和奇数之间可以相互转变,偶数和偶数之间也可以相互转变,那么我们只需要考虑让奇数全部变成偶数或者让偶数变成奇数就好了. 1234567891011121314#include &lt;bits/stdc++.h&gt;using namespace std;int main() &#123; int n; cin &gt;&gt; n; int cnto = 0; for (int i = 0; i &lt; n; ++i) &#123; int x; cin &gt;&gt; x; cnto += x &amp; 1; &#125; cout &lt;&lt; min(cnto, n - cnto) &lt;&lt; endl; return 0;&#125; B.Bad Prices题意就是给你一个序列$A$,让你求出所有$A_i$中,$\\sum_{i=1}^n[A_i&gt;A_{j(i&lt;j&lt;=n)}?0:1]$ 显然可以直接维护一个后缀最小值,然后判断一下当前$A_i$的值和当前后缀最小值的大小关系,如果$A_i&gt;num_i$,那么ans++ 123456789101112131415161718192021222324252627282930#include&lt;bits/stdc++.h&gt;using namespace std; const int N=150005; int n;int num[N];int mins[N]; int main()&#123; int T; scanf(\"%d\",&amp;T); while(T--)&#123; memset(mins,0x3f3f3f3f,sizeof(mins)); scanf(\"%d\",&amp;n); for(int i=1;i&lt;=n;i++) scanf(\"%d\",&amp;num[i]); for(int i=n-1;i&gt;=1;i--) mins[i]=min(mins[i+1],num[i+1]); int ans=0; for(int i=1;i&lt;n;i++) if(num[i]&gt;mins[i]) ans++; printf(\"%d\\n\",ans); &#125; return 0;&#125; // C.Book Reading显然可以发现,题目中要求的个位数字只受要除的数的个位的影响,所以我们在求出来了倍数的个数$num$时,可以发现,个位数字的出现是有周期的,而这个周期和周期中的数字是由要除的数字的个位决定的.而因为要除的数字的个位最多只有10个,所以我们可以先预处理出每个数字的周期以及他们的和,再对多出来的部分直接暴力就可以了. 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253#include&lt;bits/stdc++.h&gt;#define int long long using namespace std; int n,m;int ned[10],idx[10];int sum[10][10]; signed main()&#123; ios::sync_with_stdio(false); cin.tie(0),cout.tie(0); for(int i=1;i&lt;=9;i++)&#123; int now=i; sum[i][++idx[i]]=i; now+=i; while(now!=i)&#123; if(now&gt;=10) now-=10; sum[i][++idx[i]]=now; now+=i; &#125; &#125; for(int i=1;i&lt;=9;i++) for(int j=1;j&lt;=idx[i];j++) ned[i]+=sum[i][j]; int T; cin&gt;&gt;T; while(T--)&#123; int ans=0; cin&gt;&gt;n&gt;&gt;m; int numm=n/m; int tmp = m; tmp%=10; if(tmp==0||numm==0)&#123; cout&lt;&lt;\"0\"&lt;&lt;endl; continue; &#125; int fir = numm/idx[tmp]; ans+=fir*ned[tmp]; // cout&lt;&lt;fir&lt;&lt;\" \"&lt;&lt;tmp&lt;&lt;endl; int sos=0; for(int i=fir*idx[tmp]+1;i&lt;=numm;i++) ans+=sum[tmp][i-fir*idx[tmp]]; cout&lt;&lt;ans&lt;&lt;endl; &#125; return 0;&#125; // D.Equalizing by Division我们可以发现,对于某一个数$i$,他能变成的数的个数为$log_2i+1$个,而且题目中$i$的权值也不大,所以我们可以开一个桶,按照从小到大的顺序处理每一个数字,每次处理的时候将它能变成的$log_2i$个数字在桶中的权值全部+1,同时花费就是从原来的i到目前的数字要除几次二,当发现有桶中的数字大于给定的$k$时,更新答案. 123456789101112131415161718192021222324252627282930313233343536373839404142#include&lt;bits/stdc++.h&gt;using namespace std; const int N = 2e5 + 10; int n,k,ans=2147483647;int num[N];struct Node&#123; int val; int now;&#125;buck[N]; int main()&#123; ios::sync_with_stdio(false); cin.tie(0),cout.tie(0); cin&gt;&gt;n&gt;&gt;k; for(int i=1;i&lt;=n;i++) &#123; cin&gt;&gt;num[i]; buck[num[i]].now++; if(buck[num[i]].now&gt;=k)&#123; cout&lt;&lt;\"0\"&lt;&lt;endl; return 0; &#125; &#125; sort(num+1,num+1+n); for(int i=1;i&lt;=n;i++)&#123; int idx=1,tmp=num[i]/2; while(tmp)&#123; buck[tmp].now++; buck[tmp].val+=idx; if(buck[tmp].now&gt;=k) ans=min(ans,buck[tmp].val); tmp/=2; idx++; &#125; &#125; cout&lt;&lt;ans&lt;&lt;endl; return 0;&#125; //","categories":[{"name":"OI","slug":"OI","permalink":"http://krrrr.xyz/分类/OI/"}],"tags":[{"name":"CodeForces题解","slug":"CodeForces题解","permalink":"http://krrrr.xyz/标签/CodeForces题解/"}]},{"title":"Atcoder Qualification解题报告","slug":"Qualification解题报告","date":"2019-09-11T10:47:57.000Z","updated":"2019-09-18T02:41:02.545Z","comments":true,"path":"2019/09/11/Qualification解题报告/","link":"","permalink":"http://krrrr.xyz/2019/09/11/Qualification解题报告/","excerpt":"qwq","text":"qwq T1:题目中给你一个$D$和一个$M$(一年有$D$个月,一个月有$M$天)让你求出: 的个数.其中$d_1$表示个位,$d_{10}$表示十位. 因为数据范围比较小,所以可以直接暴力枚举解决qwq… 12345678910111213141516#include&lt;bits/stdc++.h&gt;using namespace std;int m,d,ans;int main(void)&#123; scanf(\"%d%d\",&amp;m,&amp;d); for(int i=1;i&lt;=m;i++)&#123; for(int sw=22;sw&lt;=d;sw++)&#123; int g=sw%10; int s=sw/10; if(g&gt;=2&amp;&amp;s&gt;=2&amp;&amp;s*g==i) ans++; &#125; &#125; printf(\"%d\\n\",ans); return 0;&#125; T2:给你一个数列$A$,将这个$A$不断$copy k$次变成数列$B$.最后让你求出数列$B$的逆序对个数.$k&lt;=10^9$ 看到$k$那么大,肯定可以$n^2$暴力了啊qwq 我们考虑这k组中的每一组.如果我们考虑原数列$A$中的每一位$A_i$,如果出现了一个$A_j&lt;A_i$,那么在从第$2$组开始,到第$k$组,这些比$A_i$小的数都会对$A_i$有贡献,而且第$3$组到第$k$组也会对第$2$组有贡献,这样一直递推下去,会发现有$1+(k-1)*(k-1)/2$次贡献,而且最后不要忘了一组中对自己的贡献. 1234567891011121314151617181920212223242526272829303132333435363738#include&lt;bits/stdc++.h&gt;#define int long longusing namespace std;const int N=2004;const int HA=1e9+7;int n,k,ans;int num[N],dd[N];inline int ksm(int x,int y)&#123; int tmp=1; while(y)&#123; if(y&amp;1) tmp=(tmp*x)%HA; x=(x*x)%HA; y&gt;&gt;=1; &#125; return tmp%HA;&#125;signed main()&#123; scanf(\"%lld%lld\",&amp;n,&amp;k); for(int i=1;i&lt;=n;i++) scanf(\"%lld\",&amp;num[i]); for(int i=1;i&lt;=n;i++) for(int j=1;j&lt;=n;j++)&#123; if(num[j]&lt;num[i]) dd[i]++; &#125; for(int i=1;i&lt;=n;i++)&#123; ans=(ans+k*(k-1)%HA*ksm(2,HA-2)%HA*dd[i]%HA)%HA; int tdp = 0; for(int j=i+1;j&lt;=n;j++) if(num[j]&lt;num[i]) tdp++; ans = ( ans + tdp * k ) % HA; &#125; printf(\"%lld\\n\",ans); return 0; &#125; T4:T3我不会欸qwq(捂脸)","categories":[{"name":"OI","slug":"OI","permalink":"http://krrrr.xyz/分类/OI/"}],"tags":[{"name":"Atcoder题解","slug":"Atcoder题解","permalink":"http://krrrr.xyz/标签/Atcoder题解/"}]},{"title":"Round #573 (Div. 2)解题报告","slug":"Round-1","date":"2019-09-11T10:46:57.000Z","updated":"2019-09-18T02:40:55.105Z","comments":true,"path":"2019/09/11/Round-1/","link":"","permalink":"http://krrrr.xyz/2019/09/11/Round-1/","excerpt":"qwq","text":"qwq A:没啥可说的,直接按照$Mod 4$分类然后讨论就好了. B:显然可以发现答案只能是0,1,2,3中的某一个,我们只需要将读入记录下来,然后对于每一种胜利的情况分组枚举一下,记录一个最小的ans就可以了. C:考虑每一次操作中,这一页的最右边能消除几个.我们可以设我们已经消除了$sum$个数字,那么当前的$m_i$在消除之后中的书中的位置就是$m_i-sum$,我们就可以推导出来当前$m_i$的这一页的最右边的一个数字就是$((m_i-sum)/k+1)*k$,我们只需要开一个关于i的指针就可以了,时间复杂度为$O(m)$. D:考虑必胜情况:在另外一个人开始取的时候有$2$个或者以上的重复组.或者在有1个重复组时,取出一个重复组(因为不取就会输)之后回和另外一个元素再组成一个重复组. 我们再考虑完这种情况之后,可以发现,我们在将原来的数组排序之后,如果两边都按照最优方式取石子,那么最后的(在决定胜负之前),石子的序列一定是$B_i=i-1$的这样的一个等差数列.所以我们需要对原数组排序,然后统计一个$\\sum_{i=1}^n A_i-(i-1)$,判断一下这个$sum$的奇偶性就可以了. PS:一定要先判断有没有例外的必胜情况(我就是这么WA了4发qwq….) 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859#include&lt;bits/stdc++.h&gt;#define int long longusing namespace std;const int N=1e5+10;int n,idxx;int num[N],dis[N];map&lt;int,bool&gt;mp;signed main()&#123; ios::sync_with_stdio(false); cin.tie(0),cout.tie(0); cin&gt;&gt;n; for(int i=1;i&lt;=n;i++) cin&gt;&gt;num[i]; sort(num+1,num+1+n); int sum=0,dpp=0; for(int i=1;i&lt;=n;i++)&#123; if(num[i]==num[i-1]&amp;&amp;i&gt;=2)&#123; dpp++; dis[++idxx]=num[i]; &#125; sum+=num[i]-i+1; mp[num[i]]=1; &#125; if(n==1)&#123; if(sum&amp;1) cout&lt;&lt;\"sjfnb\"&lt;&lt;endl; else cout&lt;&lt;\"cslnb\"&lt;&lt;endl; return 0; &#125; if(dpp==1&amp;&amp;num[1]==0&amp;&amp;num[2]==0)&#123; cout&lt;&lt;\"cslnb\"&lt;&lt;endl; return 0; &#125; if(dpp==1&amp;&amp;n==2)&#123; cout&lt;&lt;\"sjfnb\"&lt;&lt;endl; return 0; &#125; if(dpp==1)&#123; if(mp[dis[1]-1]) cout&lt;&lt;\"cslnb\"&lt;&lt;endl; else &#123; if(!(sum&amp;1)) cout&lt;&lt;\"cslnb\"&lt;&lt;endl; else cout&lt;&lt;\"sjfnb\"&lt;&lt;endl; &#125; return 0; &#125; if(dpp&gt;=2)&#123; cout&lt;&lt;\"cslnb\"&lt;&lt;endl; return 0; &#125; if(!(sum&amp;1)) cout&lt;&lt;\"cslnb\"&lt;&lt;endl; else cout&lt;&lt;\"sjfnb\"&lt;&lt;endl; return 0;&#125;","categories":[{"name":"OI","slug":"OI","permalink":"http://krrrr.xyz/分类/OI/"}],"tags":[{"name":"CodeForces题解","slug":"CodeForces题解","permalink":"http://krrrr.xyz/标签/CodeForces题解/"}]},{"title":"Round","slug":"Round","date":"2019-09-11T10:44:02.000Z","updated":"2019-09-18T02:35:48.224Z","comments":true,"path":"2019/09/11/Round/","link":"","permalink":"http://krrrr.xyz/2019/09/11/Round/","excerpt":"qwq","text":"qwq A:这道题能想到二进制转十进制然后判断满足的个数，但是转十进制范围已经超过了$long long$，直接模拟会溢出因为满足条件数值的都是4的次幂，所以二进制首位1后跟的$2k$个$0$即为$4$的$k$次幂直接对$0$的个数分析即可 B:很明显的一道贪心题目,当求最小的$sum$时,显然当$1$最多时,$sum$最小.当求$sum$最大时同理.又因为当$a_i$是一个偶数时,$\\frac{a_i}{2}$肯定存在,而且$a_i$的最小值为1,所以显然$a_i$的值就只能是$2^j$. C:(个人感觉比$D$难$QAQ…$)让你在给定的序列$P$中求一个子序列,使得在图中按照该子序列进行最短路径移动时可以完整经过原序列$P$.乍一看一点思路都没有.但是仔细思考可以发现一点点思路.我们可以从题目中给出的起点(也就是一号点)开始进行移动,然后在原序列$P$中如果需要经过$P_{i}$和$P_{i+1}$,那么我们显然可以得到$P_i$与$P_{i+1}$一定是直接相连的(因为题目中没有给出无解的情况).那么我们可以扩展一下,假设我们现在在$P_j$号点,我们要走到$P_k$号点.那么如果$dis[P_j][P_k]==j-k$,那么在有解的情况下,一定是有$P_j$经过了所有的$j&lt;i&lt;k$的点(可以自己画个图证明一下).在这种情况下,我们就可以选择扩展答案了. (感觉还是放一下代码比较好qwq) 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556#include&lt;bits/stdc++.h&gt;using namespace std;const int oo = 0x3f3f3f3f;const int N = 105;const int M = 1e6 + 10;int n,m,idx;char mp[N][N];int G[N][N],point[M],ans[M];int qu[M&lt;&lt;1];int head=1,tai=0;int main()&#123; memset ( G , 0x3f3f3f3f , sizeof ( G ) ); scanf ( \"%d\" , &amp;n ); for ( int i = 1 ; i &lt;= n ; i++ ) scanf ( \"%s\" , mp[i] + 1 ); for ( int i = 1 ; i &lt;= n ; i++ ) &#123; for ( int j = 1 ; j &lt;= n ; j++ ) if ( mp[i][j] == '1' ) G[i][j] = 1; G[i][i] = 1; &#125; for ( int k = 1 ; k &lt;= n ; k++ ) for ( int i = 1 ; i &lt;= n ; i++ ) for ( int j = 1 ; j &lt;= n ; j++ ) G[i][j] = min ( G[i][j] , G[i][k] + G[k][j] ); scanf(\"%d\",&amp;m); for ( int i = 1 ; i &lt;= m ; i++ ) scanf ( \"%d\" , &amp;point[i] );// for(int i=1;i&lt;=n;i++)&#123;// for(int j=1;j&lt;=n;j++)// printf(\"%d \" ,G[i][j]);// puts(\"\");// &#125; int st=1,now=2; while(now&lt;=m)&#123; int diss=now-st; if(diss==G[point[st]][point[now]])&#123; if(head&lt;=tai) head++; qu[++tai]=now; now++; &#125; else &#123; ans[++idx]=point[st]; if(head&lt;=tai) st=qu[head++]; &#125; &#125; ans[++idx]=point[st]; if(ans[idx]!=point[m]) ans[++idx]=point[m]; printf(\"%d\\n\",idx); for(int i=1;i&lt;=idx;i++) printf (\"%d \",ans[i]); return 0;&#125; D:感觉比$C$简单啊$QAQ$….让你求一个字符串使得这个字符串和给定01字符串的每一个子区间的最长单调不降区间长度一样长.我们自己理解了以后可以发现,一个区间的最长单调不降区间长度只是和每一个$1$后的$0$有关系,而和$0$后的$1$无关.(因为对于两个子串$11$和$01$,它们的最长不降区间是一样的).那么我们就可以考虑把原字符串的一些$1$变成$0$.就可以了. 但是怎么改变呢?我们考虑到,对于某一段连续的$1$,那么这段连续区间中的第一个1很显然是不必要的(而且不是最后一个1),那么我们可以把这些个1变成0.(然后就做完辣qwq) 123456789101112131415161718192021#include&lt;bits/stdc++.h&gt;using namespace std;const int N = 1e5 + 10;int tmpp;char ss[N] , tt[N];int main()&#123; scanf ( \"%s\" , ss + 1 ); int len = strlen ( ss + 1 ); for ( int i = 1 ; i &lt;= len ; i++ ) tt[i] = ss[i]; for ( int i = len ; i &gt;= 1 ; i-- ) &#123; if ( ss[i] == '1' &amp;&amp; tmpp &gt;= 0 ) tt[i] = '0'; int cur=ss[i] == '1' ? 1 : -1; tmpp = min ( tmpp + cur , cur ); &#125; for ( int i = 1 ; i &lt;= len ; i++ ) printf ( \"%c\" , tt[i] ); return 0;&#125;// E:现在还不会qwq","categories":[{"name":"OI","slug":"OI","permalink":"http://krrrr.xyz/分类/OI/"}],"tags":[{"name":"CodeForces题解","slug":"CodeForces题解","permalink":"http://krrrr.xyz/标签/CodeForces题解/"}]},{"title":"20190819模拟赛题解","slug":"20190819模拟赛题解","date":"2019-09-11T10:43:00.000Z","updated":"2019-09-18T02:32:01.404Z","comments":true,"path":"2019/09/11/20190819模拟赛题解/","link":"","permalink":"http://krrrr.xyz/2019/09/11/20190819模拟赛题解/","excerpt":"qwq","text":"qwq 又是爆零的一次比赛欸qwq… T1: 让你在一个矩阵中,找出一条路径,使得经过的路径方差最小. 我就直接放题解了qwq… 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849#include&lt;bits/stdc++.h&gt;template &lt;class T&gt;bool Reduce(T &amp;a,T const &amp;b)&#123; return a&gt;b?a=b,1:0;&#125;const int N=31,inf=1e9+7,S=59*30;int n,m,ans;int a[N][N];int f[N][N];int cnt=0;void init()&#123; std::ios::sync_with_stdio(false); freopen(\"path.in\",\"r\",stdin); freopen(\"path.out\",\"w\",stdout); std::cin&gt;&gt;n&gt;&gt;m; for(int i=1;i&lt;=n;++i) for(int j=1;j&lt;=m;++j) std::cin&gt;&gt;a[i][j];&#125;int calc(const int &amp;sum,const int &amp;i,const int &amp;j)&#123; return (n+m-1)*a[i][j]*a[i][j]-2*sum*a[i][j];&#125;int dp(int sum)&#123; for(int i=0;i&lt;N;++i) for(int j=0;j&lt;N;++j) f[i][j]=inf; f[1][1]=calc(sum,1,1); for(int j=2;j&lt;=m;++j) Reduce(f[1][j],f[1][j-1]+calc(sum,1,j)); for(int i=2;i&lt;=n;++i) Reduce(f[i][1],f[i-1][1]+calc(sum,i,1)); for(int i=2;i&lt;=n;++i) for(int j=2;j&lt;=m;++j)&#123; Reduce(f[i][j],f[i-1][j]+calc(sum,i,j)); Reduce(f[i][j],f[i][j-1]+calc(sum,i,j)); &#125; return sum*sum+f[n][m];&#125;int main()&#123; init(); ans=inf; for(int sum=1;sum&lt;=S;++sum) Reduce(ans,dp(sum)); std::cout&lt;&lt;ans; return 0;&#125; T2:让你每次从一个区间向另一个区间连边,最后求起点到所有点的最短路. 很显然是线段树优化建图,开两颗线段树A,B,第一颗线段树从儿子节点向父亲连边,另外一条线段树从父亲向儿子连边.但是一个点一个点的向区间连边太麻烦了,所以我们需要建一个虚点,每次从区间[l1,r1]向一个虚点连边,然后再用这个虚点向区间[l2,r2]连边,这样就可以了. (但是我被卡常了) 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;#include &lt;queue&gt;inline int read () &#123; int s = 0 , w = 1; char ch = getchar (); while ( ch &gt; '9' || ch &lt; '0' ) &#123; if ( ch == '-' ) w = -1; ch = getchar ();&#125; while ( ch &gt;= '0' &amp;&amp; ch &lt;= '9' ) &#123; s = s * 10 + ch - '0'; ch = getchar ();&#125; return s * w;&#125; const int N = 500010;const int M = 2210000;int n , m , p , tot , cnt , root_f , root_s;struct edge&#123; int to; int next; int date;&#125;e[11000000];struct Node&#123; int lc; int rc;&#125;tree[N&lt;&lt;2];int head[M] , dis[M] , pos[N];bool vis[M];std :: priority_queue &lt; std :: pair &lt; int , int &gt; , std :: vector &lt; std :: pair &lt; int , int &gt; &gt; , std :: greater &lt; std :: pair &lt; int , int &gt; &gt; &gt; q; inline void add(int x,int y,int date)&#123; e[++cnt].to=y; e[cnt].next=head[x]; head[x]=cnt; e[cnt].date=date; return;&#125;void FBuild(int &amp;root,int l,int r)&#123; root=++tot; if ( l == r ) &#123; pos[l]=root; return; &#125; int mid=l+r&gt;&gt;1; FBuild(tree[root].lc,l,mid); FBuild(tree[root].rc,mid+1,r); add(tree[root].lc,root,0); add(tree[root].rc,root,0); return;&#125;void SBuild(int &amp;root,int l,int r)&#123; root=++tot; if(l==r)&#123; add(root,pos[l],0); return; &#125; int mid=l+r&gt;&gt;1; SBuild(tree[root].lc,l,mid); SBuild(tree[root].rc,mid+1,r); add(root,tree[root].lc,0); add(root,tree[root].rc,0); return;&#125;void FAdd(int root,int l,int r,int x,int y)&#123; if(x&lt;=l&amp;&amp;r&lt;=y) &#123; add(root,tot,1); return; &#125; int mid=l+r&gt;&gt;1; if(x&lt;=mid) FAdd(tree[root].lc,l,mid,x,y); if(y&gt;mid) FAdd(tree[root].rc,mid+1,r,x,y);&#125;void SAdd(int root,int l,int r,int x,int y)&#123; if(x&lt;=l&amp;&amp;r&lt;=y) &#123; add(tot,root,1); return; &#125; int mid=l+r&gt;&gt;1; if(x&lt;=mid) SAdd(tree[root].lc,l,mid,x,y); if(y&gt;mid) SAdd(tree[root].rc,mid+1,r,x,y); return;&#125;inline void Dijkstra()&#123; memset(dis,0x3f3f3f3f,sizeof(dis)); q.push(std :: make_pair(0,pos[p])); dis[pos[p]]=0; while(!q.empty())&#123; int x=q.top().second; q.pop(); if(vis[x]) continue; vis[x]=1; for(int i=head[x];i;i=e[i].next)&#123; int y=e[i].to; if(dis[x]+e[i].date&lt;dis[y])&#123; dis[y]=dis[x]+e[i].date; q.push(std ::make_pair(dis[y],y)); &#125; &#125; &#125; return;&#125;int main ( void ) &#123; freopen(\"road.in\",\"r\",stdin); freopen(\"road.out\",\"w\",stdout); n = read(); m = read(); p = read(); FBuild ( root_f , 1 , n ); SBuild ( root_s , 1 , n ); while ( m-- ) &#123; int x1 = read() , y1 = read() , x2 = read() , y2 = read(); tot++; FAdd(root_f,1,n,x1,y1); SAdd(root_s,1,n,x2,y2); tot++; FAdd(root_f,1,n,x2,y2); SAdd(root_s,1,n,x1,y1); &#125; Dijkstra(); for(int i=1;i&lt;=n;++i) printf(\"%d\\n\",dis[pos[i]]/2); return 0;&#125; T3:给你一个矩阵,让你求出这个矩阵中的一个最大的子矩阵,使得这个子矩阵的每一行和每一列都是等差数列 暂时咕咕咕一会,不会","categories":[{"name":"OI","slug":"OI","permalink":"http://krrrr.xyz/分类/OI/"}],"tags":[{"name":"模拟赛题解","slug":"模拟赛题解","permalink":"http://krrrr.xyz/标签/模拟赛题解/"}]},{"title":"邪教算法学习小结","slug":"邪教算法学习小结","date":"2019-09-11T10:41:49.000Z","updated":"2019-09-18T02:36:02.272Z","comments":true,"path":"2019/09/11/邪教算法学习小结/","link":"","permalink":"http://krrrr.xyz/2019/09/11/邪教算法学习小结/","excerpt":"qwq","text":"qwq 事实证明,邪教算法是很有用的qwq(以下材料大多抄袭OI-wiki)qwq Part1:随机函数:但是并找不到什么随机化好题qwq,,,,,先Pass了再说qwq… Part2:爬山算法:个人理解就是一个比较跳的贪心(真的是个贪心)….一般常用于单峰函数的求解,但是单峰函数为啥不写三分呢? 爬山算法的一般流程其实就是:选定一个初始答案,通过某种方法计算出另外一个答案,if 另一个答案更优 then 转移否则不变, 很形象的就是了爬山这种东西. 例题 JSOI2008球形空间产生器 空间模型的爬山就是很正常的模板了,直接给代码了qwq 1234567891011121314151617181920212223242526272829303132333435363738394041#include &lt;bits/stdc++.h&gt;using namespace std;const int N = 10005;int n;double tot , f[1005][1005];double ans[N] , cans[N] , dis[N];inline void check () &#123; tot = 0; for ( int i = 1 ; i &lt;= n + 1 ; i++ ) &#123; cans[i] = 0; dis[i] = 0; for ( int j = 1 ; j &lt;= n ; j++ ) dis[i] += ( f[i][j] - ans[j] ) * ( f[i][j] - ans[j] ); dis[i] = sqrt ( dis[i] ); tot += dis[i]; &#125; tot /= ( n + 1 ); for ( int i = 1 ; i &lt;= n + 1 ; i++ ) for ( int j = 1 ; j &lt;= n ; j++ ) cans[j] += ( dis[i] - tot ) * ( f[i][j] - ans[j] ) / tot; return;&#125;int main() &#123; scanf ( \"%d\" , &amp;n ); for ( int i = 1 ; i &lt;= n + 1 ; i++ ) for ( int j = 1 ; j &lt;= n ; j++ ) &#123; scanf ( \"%lf\" , &amp;f[i][j] ); ans[j] += f[i][j]; &#125; for ( int i = 1 ; i &lt;= n ; i++ ) ans[i] /= ( n + 1 ); for ( double T = 10001 ; T &gt;= 0.0000001 ; T *= 0.99995 ) &#123; check (); for ( int j = 1 ; j &lt;= n ; j++ ) ans[j] += cans[j] * T; &#125; for ( int i = 1 ; i &lt;= n ; i++ ) printf ( \"%.3lf \" , ans[i] ); return 0;&#125; Part3. 模拟退火理解了爬山算法了之后,可以发现爬山算法存在的很显然的一个局限性:只能贪心,而这种在处理一些多峰函数时往往会只找到函数的某个极大值而不是最大值.所以我们就要引入模拟退火这种方法.,那么$What is $模拟退火呢? (以下内容来自WIKI) : 12345模拟退火来自冶金学的专有名词退火。退火是将材料加热后再经特定速率冷却，目的是增大晶粒的体积，并且减少晶格中的缺陷。材料中的原子原来会停留在使内能有局部最小值的位置，加热使能量变大，原子会离开原来位置，而随机在其他位置中移动。退火冷却时速度较慢，使得原子有较多可能可以找到内能比原先更低的位置。模拟退火的原理也和金属退火的原理近似：我们将热力学的理论套用到统计学上，将搜寻空间内每一点想像成空气内的分子；分子的能量，就是它本身的动能；而搜寻空间内的每一点，也像空气分子一样带有“能量”，以表示该点对命题的合适程度。算法先以搜寻空间内一个任意点作起始：每一步先选择一个“邻居”，然后再计算从现有位置到达“邻居”的概率。可以证明，模拟退火算法所得解依概率收敛到全局最优解。 听起来很懵逼是不是qwq..没关系,其实就是如果你通过现在的这个状态,以某种方式得到了另外一个答案时,你不再像爬山算法那样直接转移,而已要像下图: 发生转移之后,随着温度T的不断降低,可以发现$\\frac{-\\Delta E}{T}$是不断减小的(因为在新状态更劣的情况下,$-\\Delta E$一定为负数),那么$e^\\frac{-\\Delta E}{T}$一定也是不断减小的并且趋向于0.即模拟退火算法在温度较低时退化为爬山算法.这时只能寻找当前的函数极大值,所以怎么调参使得温度$T$较大时转移到正确的峰函数区间是解决问题的关键(但是还是只能靠运气qwq) 一般模拟退火的代码大概框架如下: 123456789101112inline void SA () &#123; for ( double T = StartTemplature ; T &gt;= EndTemplature ; T *= Coolingcoefficient ) &#123; Typename Newans = Getans();//此处Getans为某个获得新答案的函数. Typename delta = ans - Newans; if ( Newans &gt; ans ) //这里假设当值大时答案更优 ans = Newans; else if ( exp ( -delta / T ) &lt; ( double ) rand () % RAND_MAX ) ans = Newans; &#125; return;&#125; 其实为了保证答案的正确性,一般都会跑多次模拟退火从而增加求得最优解的概率.(调参也是个非常痛苦的过程,因为模拟退火比爬山算法更为看脸随机,所以每个参数的小差别可能导致答案的天壤之别.) 例题 [TJOI2010]分金币 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758#include &lt;iostream&gt;#include &lt;cstdio&gt;#include &lt;algorithm&gt;#include &lt;cmath&gt;#include &lt;cstring&gt; #include &lt;ctime&gt;#define int long longconst int N = 1005;inline int read () &#123; int s = 0 , w = 1; char ch = getchar (); while ( ch &gt; '9' || ch &lt; '0' ) &#123; if ( ch == '-' ) w = -1; ch = getchar ();&#125; while ( ch &gt;= '0' &amp;&amp; ch &lt;= '9' ) &#123; s = s * 10 + ch - '0'; ch = getchar ();&#125; return s * w;&#125;int n , ans = 2147483647;int num[N];inline int get () &#123; int sum1 = 0 , sum2 = 0; for ( int i = 1 ; i &lt;= ( n + 1 ) / 2 ; i++ ) sum1 += num[i]; for ( int i = ( n + 1 ) / 2 + 1 ; i &lt;= n ; i++ ) sum2 += num[i]; return abs ( sum1 - sum2 );&#125;inline void SA () &#123; double T = 5000; while ( T &gt;= 1e-10 ) &#123; int l = rand () % n + 1 , r = rand () % n + 1; std :: swap ( num[l] , num[r] ); int sum = get (); if ( sum &lt; ans ) ans = sum; else if ( exp ( ( ans - sum ) / T ) &lt; (double(rand())/RAND_MAX) ) std :: swap ( num[l] , num[r] ); T *= 0.98; &#125; return;&#125;signed main ( void ) &#123; srand ( rand() ); int T = read (); while ( T-- ) &#123; n = read (); for ( int i = 1 ; i &lt;= n ; i++ ) num[i] = read (); for ( int i = 1 ; i &lt;= 100 ; i++ ) SA (); printf ( \"%lld\\n\" , ans ); ans = 2147483647; &#125; return 0;&#125;","categories":[{"name":"OI","slug":"OI","permalink":"http://krrrr.xyz/分类/OI/"}],"tags":[{"name":"学习笔记","slug":"学习笔记","permalink":"http://krrrr.xyz/标签/学习笔记/"},{"name":"玄学","slug":"玄学","permalink":"http://krrrr.xyz/标签/玄学/"}]},{"title":"Noip2018游记","slug":"Noip2018游记","date":"2018-11-17T06:36:28.000Z","updated":"2019-09-11T12:45:03.687Z","comments":true,"path":"2018/11/17/Noip2018游记/","link":"","permalink":"http://krrrr.xyz/2018/11/17/Noip2018游记/","excerpt":"真没想到我能活着苟到写游记的一天$qwq$","text":"真没想到我能活着苟到写游记的一天$qwq$ Day-1最近几天有点累，早上就不去学校了（然而事实证明这是很正确的抉择）。早上一觉睡到了$8:20$，早上起来想起来$wucstdio$大佬说过立过的$flag$不拔在$Noip$会掉$rp$然后早睡起来就开始肝猪国杀，一直到$10:40$左右重构完了（历时$3$天终于写完了）下午回到学校，发现早上是信心鼓励赛幸好没去23333然后下午+晚上一直在写模板题。（顺便凑出来了$AC520$） Day 0早上教练居然给我们请假不用早来了哎$qwq….$上午开始走，一开始的时候还想在车上背个板子什么的然后SCP真好看又颓了会知乎然后就发现到了$cyyz$了 住宿安排完成了之后居然才$2:30$多一点，然后在宿舍里不知道该干啥。不过感觉$cyyz$的移动信号貌似比$SDSC$的时候快了一点（大雾）然后$wucstdio$给我打电话说楼下有很多大佬，自己迅速下楼去膜神仙。 终于见到了$rqy$姐姐本人了好兴奋$qwq$，不过$rqy$姐姐好像比自己想的稍微内敛了一点。 但是这并改变不了rqy姐姐是人赢的性质据说看见神仙可以rp++,（但是rp貌似被rqy姐姐吸走了QAQ) 晚上全宿舍都在打板子，但是试机的时候$wyxdrqc$和$zyp$大佬还有很多人（包括我）试机的时候线段树都打错了（大雾）。给自己喜欢的人打了个电话，加油qaq… Day 1早上起来，自己冷静了一下，打开题目一看$T1$，哎我为什么$T1$只会$70$分啊….，然后自己又推了1h还是没有推出来，心态当场爆炸qwq…T2当成数论推了半天，然后自己冷静的写了一个乱搞做法，也不知道能得多少分。T3完全不会，打一个直径分滚粗了。 出考场：啊你们怎么都做过原题吗？啊T2是个裸背包吗？啊T3你们都会写70分吗？心态崩了我要妹子QWQ….. 下午心态一直RE中，在宿舍里颓了一下午。不管怎么说第二天都想翻盘。 Day 2第二天睡了一觉，发现心情稍微好了一点。到了考场之后，看到第一题$m=n$我就感觉药丸…. 为什么$Noip$的$T1$要考基环树啊….. 写了个$60$分的树上贪心，然后开始想环上怎么做。然而我很$zz$的没有看数据范围可以$n^2$过，一直在写$O(n)$的做法。然后我就写挂了，自己补了只有环的做法，$72分滚了$。 T2看的时候：啊？读题读了$10mins$确定我不会，然后就决定打表了。 T3：……为什么$Noip$要考$ddp$啊。。。。 出了考场发现大家都说D2不会做当时甚至有些开心。 然后晚上就回去上晚自习了。 一年半的OI一场空，$D1TI$见祖宗说我是再适合不过的了。本来还以为自己能去$PKUWC$,好吧，我还是太$naive$了，感觉自己要与省一擦肩而过….剩下一年自己就养生好了，再来一年起码要拿一个$1=$啊$qwq…..$ 回家之后心态一直RE,,,,不过幸好$wucstdio$大佬能和我谈了谈人生….瞬间感觉$wucstdio$成了我的人生导师qaq…. 以后的路自己就要自己决定了，不过自己决定那些比赛也是要一起参加的qaq… 那些能进入省选的$OIer$们要加油鸭$qaq…$我会一直陪着你们的$@wyxdrqc @wucstdio @lingyuqing$ 你们的$wqyzstql$也要和你们一起努力了。","categories":[{"name":"吹水","slug":"吹水","permalink":"http://krrrr.xyz/分类/吹水/"}],"tags":[{"name":"游记","slug":"游记","permalink":"http://krrrr.xyz/标签/游记/"}]},{"title":"考前模板整理","slug":"考前模板整理","date":"2018-11-06T23:35:06.000Z","updated":"2019-09-18T02:41:38.927Z","comments":true,"path":"2018/11/07/考前模板整理/","link":"","permalink":"http://krrrr.xyz/2018/11/07/考前模板整理/","excerpt":"$Noip$之前在这里整理一波模板….集成了一下所有的$TG$和$PJ$应该会考的模板","text":"$Noip$之前在这里整理一波模板….集成了一下所有的$TG$和$PJ$应该会考的模板 PS:所有模板纯属现场手搓，不保证正确性（比如手抖打错字母什么的），如果找到错误请及时告知我qwq 快速排序最基本的板子了吧,$C++$选手表示开心$qaq$。1234567891011121314151617#include &lt;algorithm&gt;#include &lt;cstdio&gt;const int N = 1e5 + 10int n;int num[N];int main ( void ) &#123; scanf ( \"%d\" , &amp;n ); for ( int i = 1 ; i &lt;= n ; i++ ) scanf ( \"%d\" , &amp;num[i] ); sort ( num + 1 , num + 1 + n ); for ( int i = 1 ; i &lt;= n ; i++ ) printf ( \"%d%c\" , num[i] , i == n ? '\\n' : ' ' ); return 0;&#125; 并查集12345678910111213141516171819202122232425262728293031323334#include &lt;iostream&gt;#include &lt;cstring&gt;#include &lt;algorithm&gt;#include &lt;cstdio&gt;const int N = 1e5 + 10;int n , m;int find ( int x ) &#123; if ( x != father[x] ) father[x] = find ( father[x] ); return father[x];&#125;int main ( void ) &#123; scanf ( \"%d%d\" , &amp;n , &amp;m ); for ( int i = 1 ; i &lt;= n ; i++ ) father[i] = i; for ( int i = 1 ; i &lt;= m ; i++ ) &#123; int x , y , z; scanf ( \"%d%d%d\" , &amp;z , &amp;x , &amp;y ); if ( z == 1 ) &#123; x = find ( x ) , y = find ( y ); father[x] = y; &#125; else if ( z == 2 ) &#123; x = find ( x ) , y = find ( y ); if ( x == y ) puts ( \"Y\" ); else puts ( \"N\" ); &#125; &#125; return 0;&#125; 快速幂个人感觉这个还是个挺重要的板子了吧…..12345678910111213141516171819202122#include &lt;cstdio&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;#include &lt;cstring&gt;inline int Fast_Power ( int x , int y ) &#123; int sum = 1; while ( y ) &#123; if ( y &amp; 1 ) sum = sum * x; x = x * x; y &gt;&gt;= 1; &#125; return sum;&#125;int main ( void ) &#123; int n , m; scanf ( \"%d%d\" , &amp;n , &amp;m ); printf ( \"%d\\n\" , Fast_Power ( n , m ) ); return 0;&#125; 线性筛素数这个其实只是筛素数的话是挺简单的，但是我决定连$\\phi$一起筛出来（如果用不到的话就把$phi$数组自动忽略掉就好了）12345678910111213141516171819202122232425262728293031323334353637#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;const int N = 5e5 + 10;int n , cnt;int prime[N] , phi[N];bool flag[N];int main ( void ) &#123; flag[1] = 1; phi[1] = 1; scanf ( \"%d\" , &amp;n ); for ( int i = 2 ; i &lt;= n ; i++ ) &#123; if ( !flag[i] ) &#123; flag[i] = 1; prime[++cnt] = i; phi[i] = i - 1; &#125; for ( int j = 1 ; j &lt;= cnt &amp;&amp; i * prime[j] &lt;= n ; j++ ) &#123; flag[i * prime[j]] = 1; if ( i % prime[j] == 0 ) &#123; phi[i * prime[j]] = phi[i] * prime[j]; break; &#125; phi[i * prime[j]] = phi[i] * phi[prime[j]]; &#125; &#125; for ( int i = 1 ; i &lt;= cnt ; i++ ) printf ( \"%d \" , prime[i] ); puts ( \"\" ); for ( int i = 1 ; i &lt;= n ; i++ ) printf ( \"%d \" , phi[i] ); return 0;&#125; 【模板】堆又是一个$C++$党的福利$qwq$,直接用$priority_queue$模拟就好啦123456789101112131415161718192021222324252627#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;using std :: priority_queue;int n;priority_queue &lt; int , std :: vector &lt; int &gt; , std :: greater &lt; int &gt; &gt; qu;int main ( void ) &#123; scanf ( \"%d\" , &amp;n ); for ( int i = 1 ; i &lt;= n ; i++ ) &#123; int opts; scanf ( \"%d\" , &amp;opts ); if ( opts == 1 ) &#123; int x; scanf ( \"%d\" , &amp;x ); qu.push ( x ); &#125; else if ( opts == 2 ) printf ( \"%d\\n\" , qu.top () ); else if ( opts == 3 ) qu.pop (); &#125; return 0;&#125; 字符串蛤希其实我个人比较倾向于写自然溢出或者直接随机一个质数$qwq$12345678910111213141516171819202122232425262728293031#include &lt;cstdio&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;#include &lt;cstring&gt;typedef unsigned long long ull;const ull base = 233;const int N = 1e4;const int M = 1e3;int n;char s[N][M];ull has[N];int main ( void ) &#123; scanf ( \"%d\" , &amp;n ); for ( int i = 1 ; i &lt;= n ; i++ ) scanf ( \"%s\" , s[i] + 1 ); for ( int i = 1 ; i &lt;= n ; i++ ) &#123; int len = strlen ( s[i] + 1 ); for ( int j = 1 ; j &lt;= len ; j++ ) has[i] = has[i] * base + s[i][j]; &#125; std :: sort ( has + 1 , has + 1 + n ); int ans = 0; for ( int i = 1 ; i &lt;= n ; i++ ) if ( has[i] != has[i + 1] ) ans++; printf ( \"%d\\n\" , ans ); return 0;&#125; 最小生成树不会写$prim$的蒟蒻瑟瑟发抖….123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;const int N = 1e4 + 10;const int M = 2e5 + 10;int n , m;struct Edge &#123; int from; int to; int data;&#125;e[M];int father[N];inline int read () &#123; int s = 0 , w = 1; char ch = getchar (); while ( ch &gt; '9' || ch &lt; '0' ) &#123; if ( ch == '-' ) w = -1; ch = getchar ();&#125; while ( ch &gt;= '0' &amp;&amp; ch &lt;= '9' ) &#123; s = s * 10 + ch - '0'; ch = getchar ();&#125; return s * w;&#125;inline bool cmp ( Edge x , Edge y ) &#123; return x.data &lt; y.data;&#125;int find ( int x ) &#123; if ( x != father[x] ) father[x] = find ( father[x] ); return father[x];&#125;void Union ( int x , int y ) &#123; x = find ( x ) , y = find ( y ); father[x] = y; return;&#125;inline bool Judge ( int x , int y ) &#123; x = find ( x ) , y = find ( y ); return ( x == y ) ? true : false;&#125;int main ( void ) &#123; n = read () , m = read (); for ( int i = 1 ; i &lt;= n ; i++ ) father[i] = i; for ( int i = 1 ; i &lt;= m ; i++ ) &#123; int x = read () , y = read () , z = read (); e[i].from = x; e[i].to = y; e[i].data = z; &#125; std :: sort ( e + 1 , e + 1 + m , cmp ); int NowEdge = 0 , NowVal = 0; for ( int i = 1 ; i &lt;= m ; i++ ) &#123; int l = e[i].from , r = e[i].to; if ( Judge ( l ,r ) ) continue; Union ( l , r ); NowEdge++; NowVal += e[i].data; if ( NowEdge == n - 1 ) break; &#125; if ( NowEdge == n - 1 ) printf ( \"%d\\n\" , NowVal ); else puts ( \"orz\" ); return 0;&#125; 单源最短路 （有负权边）这张图有负权边，所以只能写某已经死掉的$SPFA$了123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960#include &lt;cstdio&gt;#include &lt;iostream&gt;#include &lt;cstring&gt;#include &lt;algorithm&gt;#include &lt;queue&gt;const int N = 1e4 + 10;const int M = 1e5 + 10;using std :: queue;int n , m , t;struct Edge &#123; int to; int data; int next;&#125;e[M];int head[N] , dis[N];bool inque[N];inline int read () &#123; int s = 0; bool flag = 0; char ch = getchar (); while ( ch &gt; '9' || ch &lt; '0' ) &#123; if ( ch == '0' ) flag = 1; ch = getchar ();&#125; while ( ch &gt;= '0' &amp;&amp; ch &lt;= '9' ) &#123; s = s * 10 + ch - '0'; ch = getchar ();&#125; return ( flag ) ? -s : s;&#125;void Spfa ( int x ) &#123; memset ( dis , 0x3f3f3f3f , sizeof ( dis ) ); inque[x] = 1;dis[x] = 0; qu.push ( x ); while ( !qu.empty () ) &#123; int j = qu.front (); qu.pop (); inque[j] = 0; for ( int i = head[j] ; i ; i = e[i].next ) &#123; int k = e[i].to; if ( dis[k] &gt; dis[j] + e[i].data ) &#123; dis[k] = dis[j] + e[i].data; if ( !inque[k] ) &#123; inque[k] = 1; qu.push ( k ); &#125; &#125; &#125; &#125; return;&#125;int main ( void ) &#123; n = read () , m = read (); for ( int i = 1 ; i &lt;= m ; i++ ) &#123; int x = read () , y = read () , z = read (); add ( x , y , z ); &#125; Spfa ( 1 ); for ( int i = 1 ; i &lt;= n ; i++ ) printf ( \"%d%c\" , dis[i] == 0x3f3f3f3f ? 2147483647 : dis[i] , i == n ? '\\n' : ' ' ); return 0;&#125; 单源最短路 （无负权边）在题目明确说没有负权边的情况下，跑堆优化的$Dijkstra$一定是最稳的其实代码长得都差不多123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172#include &lt;queue&gt;#include &lt;iostream&gt;#include &lt;cstring&gt;#include &lt;algorithm&gt;#include &lt;cstdio&gt;#define F(i,a,b) for ( int i = a ; i &lt;= b ; i++ )#define MP std::make_pair#define se second#define fi firsttypedef std::pair &lt; int , int &gt; pll;const int N = 1e5 + 10; const int M = 4e5 + 20;std::priority_queue &lt; pll , std::vector &lt; pll &gt; , std::greater &lt; pll &gt; &gt; qu;int n , m , s , t;struct Edge &#123; int to; int data; int next;&#125;e[M];int head[N] , dis[N];bool inque[N];inline int read () &#123; int s = 0 , w = 1; char ch = getchar (); while ( ch &gt; '9' || ch &lt; '0' ) &#123; if ( ch == '-' ) w = -1; ch = getchar ();&#125; while ( ch &gt;= '0' &amp;&amp; ch &lt;= '9' ) &#123; s = s * 10 + ch - '0'; ch = getchar ();&#125; return s * w;&#125;void add ( int x , int y , int z ) &#123; e[++t].to = y; e[t].data = z; e[t].next = head[x]; head[x] = t; return;&#125;inline void Heap_Dijkstra ( int x ) &#123; memset ( dis , 0x3f3f3f3f , sizeof ( dis ) ); dis[x] = 0; qu.push ( MP ( dis[x] , x ) ); while ( !qu.empty () ) &#123; int j = qu.top ().se; qu.pop (); if ( inque[j] ) continue; inque[j] = 1; for ( int i = head[j] ; i ; i = e[i].next ) &#123; int k = e[i].to; if ( dis[k] &gt; dis[j] + e[i].data ) &#123; dis[k] = dis[j] + e[i].data; qu.push ( MP ( dis[k] , k ) ); &#125; &#125; &#125; return;&#125;int main ( void ) &#123; n = read (); m = read (); s = read (); F ( i , 1 , m ) &#123; int x = read () , y = read () , z = read (); add ( x , y , z ); &#125; Heap_Dijkstra ( s ); F ( i , 1 , n ) printf ( \"%d \" , dis[i] ); return 0;&#125; 就先整理这些吧…留个坑等着填….","categories":[{"name":"吹水","slug":"吹水","permalink":"http://krrrr.xyz/分类/吹水/"}],"tags":[{"name":"学习笔记","slug":"学习笔记","permalink":"http://krrrr.xyz/标签/学习笔记/"}]},{"title":"[SDOI2010] 所驼门王的宝藏","slug":"i-t","date":"2018-11-05T02:55:13.000Z","updated":"2019-09-18T02:36:16.288Z","comments":true,"path":"2018/11/05/i-t/","link":"","permalink":"http://krrrr.xyz/2018/11/05/i-t/","excerpt":"一道思维难度很简单，代码实现难度非常$mmp$的毒瘤题…..(这很$SDOI…..$)","text":"一道思维难度很简单，代码实现难度非常$mmp$的毒瘤题…..(这很$SDOI…..$) 题目连接：SDOI2010 所驼门王的宝藏 好，我们直接跳过题目背景。 然后我们会发现，如果这道题能把图建出来，那么直接一遍$DAG$上$DP$就过了。 蒽，这不是$sb$题吗？ 然后让我们看数据范围：$1&lt;=n&lt;=1000000$ 笑容逐渐消失 但是我们考虑一下，既然我们要建一张$DAG$。那么，我们完全没有必要对所有的点进行两两连边。我们只需要对每一行和每一列进行连边，把他们连成一个环，这样的话，建边复杂度就会从$O(n^2)$变成$O(n)$了。 然后对于自由门的情况，对不起，我不知道怎么优化，所以我决定暴力建边。 （分析可以发现即使全是自由门，你暴力建边也不会$TLE$） 代码如下： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197#include &lt;cstdio&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;#include &lt;cstring&gt;#include &lt;stack&gt;#include &lt;map&gt;const int N = 1e6 + 10;const int M = 5e6 + 10;using std :: map;using std :: stack;int ans = -0x3f3f3f3f;int n , r , c , t;int dx[] = &#123; 0 , 0 , 1 , 1 , 1 , -1 , -1 , -1 &#125;;int dy[] = &#123; 1 , -1 , 1 , 0 , -1 , 1 , 0 , -1 &#125;;struct Node &#123; int x; int y; int opts; int id;&#125;p[N];struct Edge &#123; int from; int to; int next; &#125;e[M];int idx , Bcnt;int head[N] , dfn[N] , low[N];int Belong[N] , size[N] , f[N];int degree[N];bool instack[N];map &lt; std :: pair &lt; int , int &gt; , int &gt; mp;map &lt; std :: pair &lt; int , int &gt; , int &gt; mat;stack &lt; int &gt; st;inline int read () &#123; int s = 0 , w = 1; char ch = getchar (); while ( ch &gt; '9' || ch &lt; '0' ) &#123; if ( ch == '-' ) w = -1; ch = getchar ();&#125; while ( ch &gt;= '0' &amp;&amp; ch &lt;= '9' ) &#123; s = s * 10 + ch - '0'; ch = getchar ();&#125; return s * w;&#125;template &lt; class T &gt;inline T min ( T x , T y ) &#123; return x &lt; y ? x : y;&#125;template &lt; class T &gt;inline T max ( T x , T y ) &#123; return x &gt; y ? x : y;&#125;inline void add ( int x , int y ) &#123; e[++t].to = y; e[t].from = x; e[t].next = head[x]; head[x] = t; return;&#125;bool cmp1 ( Node a , Node b ) &#123; if ( a.x != b.x ) return a.x &lt; b.x; if ( a.opts == 1 ) return 1; if ( b .opts == 1 ) return 0; return a.y &lt; b.y;&#125;bool cmp2 ( Node a , Node b ) &#123; if ( a.y != b.y ) return a.y &lt; b.y; if ( a.opts == 2 ) return 1; if ( b.opts == 2 ) return 0; return a.x &lt; b.x;&#125;void Tarjan ( int cur ) &#123; dfn[cur] = low[cur] = ++idx; instack[cur] = 1; st.push ( cur ); for ( int i = head[cur] ; i ; i = e[i].next ) &#123; int j = e[i].to; if ( !dfn[j] ) &#123; Tarjan ( j ); low[cur] = min ( low[cur] , low[j] ); &#125; else if ( instack[j] ) low[cur] = min ( low[cur] , dfn[j] ); &#125; int k; if ( low[cur] == dfn[cur] ) &#123; Bcnt++; do &#123; k = st.top ();; st.pop (); instack[k] = 0; Belong[k] = Bcnt; size[Bcnt]++; &#125; while ( k != cur ); &#125; return;&#125;void dfs ( int cur , int father ) &#123; if ( f[cur] &gt; size[cur] ) return; f[cur] = size[cur]; for ( int i = head[cur] ; i ; i = e[i].next ) &#123; int j = e[i].to; if ( j == father ) continue; dfs ( j , cur ); f[cur] = max ( f[cur] , f[j] + size[cur] ); &#125; return;&#125;int main ( void ) &#123; n = read () , r = read () , c = read (); for ( int i = 1 ; i &lt;= n ; i++ ) &#123; p[i].x = read (); p[i].y = read (); p[i].opts = read (); p[i].id = i; mp[std::make_pair ( p[i].x , p[i].y )] = i; &#125; std :: sort ( p + 1 , p + n + 1 , cmp1 ); int first = 1 , last = 1; for ( int i = 1 ; i &lt;= n ; i++ ) &#123; if ( p[i].x != p[i + 1].x ) &#123; if ( first != last ) add ( p[last].id , p[first].id ); last = first = i + 1; &#125; else &#123; if ( p[last].opts == 1 ) add ( p[last].id , p[i + 1].id ); if ( p[i + 1].opts == 1 ) last = i + 1; if ( p[first].opts != 1 ) last = first = i + 1; &#125; &#125; first = last = 1; std :: sort ( p + 1 , p + 1 + n , cmp2 ); for ( int i = 1 ; i &lt;= n ; i++ ) &#123; if ( p[i].y != p[i + 1].y ) &#123; if ( first != last ) add ( p[last].id , p[first].id ); last = first = i + 1; &#125; else &#123; if ( p[last].opts == 2 ) add ( p[last].id , p[i + 1].id ); if ( p[i + 1].opts == 2 ) last = i + 1; if ( p[first].opts != 2 ) last = first = i + 1; &#125; &#125; //printf ( \"%d\\n\" , t ); for ( int i = 1 ; i &lt;= n ; i++ ) if ( p[i].opts == 3 ) for ( int j = 0 ; j &lt; 8 ; j++ ) &#123; int xx = p[i].x + dx[j]; int yy = p[i].y + dy[j]; if ( mp[std :: pair &lt; int , int &gt; ( xx , yy )] ) add ( p[i].id , mp[std :: pair &lt; int , int &gt; ( xx , yy )] ); &#125; // printf ( \"%d\\n\" , t ); // for ( int i = 1 ; i &lt;= t ; i++ ) // printf ( \"%d %d\\n\" , e[i].from , e[i].to ); for ( int i = 1 ; i &lt;= n ; i++ ) if ( !Belong[i] ) Tarjan ( i ); for ( int i = 1 ; i &lt;= n ; i++ ) for ( int j = head[i] ; j ; j = e[j].next ) &#123; int k = e[j].to; if ( Belong[i] != Belong[k] ) mat[std :: make_pair ( Belong[i] , Belong[k] )] = 1; &#125; t = 0; memset ( head, 0 , sizeof ( head ) ); for ( auto it = mat.begin () ; it != mat.end() ; it++ ) &#123; add ( it -&gt; first.first , it -&gt; first.second ); degree[it -&gt; first.second]++; &#125; // for ( int i = 1 ; i &lt;= Bcnt ; i++ ) // printf ( \"%d \" , degree[i] ); for ( int i = 1 ; i &lt;= Bcnt ; i++ ) if ( degree[i] == 0 ) &#123; dfs ( i , 0 ); ans = max ( ans , f[i] ); &#125; printf ( \"%d\\n\" , ans ); return 0;&#125;","categories":[{"name":"OI","slug":"OI","permalink":"http://krrrr.xyz/分类/OI/"}],"tags":[{"name":"图论","slug":"图论","permalink":"http://krrrr.xyz/标签/图论/"},{"name":"DAG","slug":"DAG","permalink":"http://krrrr.xyz/标签/DAG/"}]},{"title":"qbxt D2T2 Code 题解","slug":"题解","date":"2018-11-04T02:40:29.000Z","updated":"2019-09-18T02:36:11.712Z","comments":true,"path":"2018/11/04/题解/","link":"","permalink":"http://krrrr.xyz/2018/11/04/题解/","excerpt":"看了一眼之后完全就是一脸懵逼的题….","text":"看了一眼之后完全就是一脸懵逼的题…. 首先先读题$qaq$…..题目的大致意思就是给你一个矩阵，然后问你把这个矩阵横竖填成异或值为$1$的矩阵的方案数。 很明显，这道题没有什么枚举上界，所以你想直接枚举的话是不太可能的。那么我们怎么办呢$?$ 我也不知道 既然枚举补星，那么我们就用一个比较常见的正难则反的思想。对于这道题，我们可以容斥的去做 那么，首先，所有的方案是什么呢？ All = 2^{n*m}为什么呢？一共有n+m个校验码，我们按位数考虑，在只有1位的情况下，那么这一位可能是$0$或者$1$。那么就是$(2^n)^m$的方案数了。 然后我们考虑对于每一位删掉不合法的情况：因为异或起来是$1$，那么对于没一行或者每一列，$1$的个数总是奇数。那么我们就可以根据这个东西来进行删除不合法状态的操作了 最后统计出来答案 我们发现，因为有$k$位，而我们是按位考虑的。所以我们最后要取答案的$k$次方。 代码如下：12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152#include &lt;bits/stdc++.h&gt;#define int long longconst int N = 505;const int MOD = 1e9 + 7;int c[N][N];int n , m , k , t , ans;inline int read () &#123; int s = 0 , w = 1; char ch = getchar (); while ( ch &gt; '9' || ch &lt; '0' ) &#123; if ( ch == '-' ) w = -1; ch = getchar ();&#125; while ( ch &gt;= '0' &amp;&amp; ch &lt;= '9' ) &#123; s = s * 10 + ch - '0'; ch = getchar ();&#125; return s * w;&#125;int Fast_Power ( int x , int y ) &#123; int sum = 1; while ( y ) &#123; if ( y &amp; 1 ) sum = sum * x % MOD; x = x * x % MOD; y &gt;&gt;= 1; &#125; return sum;&#125;signed main() &#123; for ( int i = 1 ; i &lt;= 500 ; i++ ) c[i][i] = c[i][0]=1; for ( int i = 2 ; i &lt;= 500 ; i++ ) for ( int j = 1 ; j &lt; i ; j++ ) c[i][j] = ( c[i - 1][j] + c[i - 1][j - 1] ) %MOD; t = read(); while ( t-- ) &#123; n = read () , m = read() , k = read (); int ans = Fast_Power ( 2 , n * m ); for ( int i = 0 ; i &lt;= n ; i++ ) for ( int j = 0 ; j &lt;= m ; j++ ) &#123; if ( i == 0 &amp;&amp; j == 0 ) continue; if ( ( i + j ) &amp; 1 ) ans = ( ans + MOD - Fast_Power ( 2 , ( n - i ) * ( m - j ) ) * c[n][i] % MOD * c[m][j] % MOD ) % MOD; else ans = ( ans + Fast_Power ( 2 , ( n - i ) * ( m - j ) ) * c[n][i] % MOD * c[m][j] % MOD ) % MOD; &#125; ans = Fast_Power ( ans , k ); printf ( \"%lld\\n\" , ans ); &#125; return 0;&#125;","categories":[{"name":"OI","slug":"OI","permalink":"http://krrrr.xyz/分类/OI/"}],"tags":[{"name":"思维","slug":"思维","permalink":"http://krrrr.xyz/标签/思维/"},{"name":"数学","slug":"数学","permalink":"http://krrrr.xyz/标签/数学/"},{"name":"容斥原理","slug":"容斥原理","permalink":"http://krrrr.xyz/标签/容斥原理/"}]},{"title":"[题解] Noip2016D1T3 换教室","slug":"换教室题解","date":"2018-11-02T03:10:17.000Z","updated":"2019-09-18T02:36:22.063Z","comments":true,"path":"2018/11/02/换教室题解/","link":"","permalink":"http://krrrr.xyz/2018/11/02/换教室题解/","excerpt":"一道被天天爱跑步抢尽了风头的最没有排面的$T3…..$","text":"一道被天天爱跑步抢尽了风头的最没有排面的$T3…..$说实话，这道题我刚开始是不会的，然后我看了L_Y_T大爷的$Blog$之后才恍然大悟（$Blog$写的很好，赞一个）先安利完$Blog$再说L_Y_T大爷的Blog 看了$Blog$之后,突然发现，这东西要求的概率知识点我都是会的，只是DP式子想不出来而已$qaq…$(我好菜啊) 因为题目中说，我们最多可以换$m$次，而题目中说的你只能在开始之前选择方案的说法完全没用，毕竟谁会知道你是预测了未来呢（逃 然后，因为有$n$个课程，所以我们设$f[i][j][0/1]$来表示第i个点,第j次换,换不换 然后我们分情况来表示转移：每个教室分为两种情况 1.换2.不换这个是挺平常的然后复杂在换与不换的分情况上了~~~不换:不换是分为这样几种情况:上一个也不换 , 上一个换 且成功,上一个换但失败同理,换也有好多种情况:上一个点不换,这个点失败上一个点不换,这个点成功上一个点换成功,这个点成功上一个点换成功,这个点失败上一个点换失败,这个点成功上一个点换失败,这个点也失败 然后方程好复杂的，是：1234567891011121314151617181920212223242526 上一点不换:f[i-1][j-1][0]这一点换1.失败消耗体力: dis[c[i-1]][c[i]] 分析: 由于上一个点不换,所以上一个点一定是在c[]中的;假定这次失败,那么这次也只能去c[]中的教室;2.成功消耗体力: dis[c[i-1]][d[i]]分析: 由于上一个点不换,所以上一个点一定是在c[]中的;假定这次成功,那么这次能去d[]中的教室;那么,失败的概率是1-k[],成功的概率是k[].综上,这种情况就是:f[i-1][j-1][0]+dis[c[i-1]][d[i]]*k[i]+dis[c[i-1]][c[i]]*(1.0-k[i]) 同理,上一点换,这一点换1.上一点失败,这一点失败(以后省一点哈)消耗体力: dis[c[i-1]][c[i]]概率:都失败这运气也没谁了!!!! 概率:(1.0-k[i-1])*(1.0-k[i])2.失败,成功消耗体力: dis[c[i-1]][d[i]]概率 : (1.0-k[i-1])*k[i]3.成功,失败消耗体力 : dis[d[i-1]][c[i]]概率: k[i-1]*(1.0-k[i])4.成功,成功消耗体力: dis[d[i-1]][d[i]] 概率: k[i-1]*k[i] 然后对于不换的方程：12f[i][j][0] = min(f[i-1][j][0]+dis[c[i-1]][c[i]],f[i-1][j][1]+dis[c[i-1]][c[i]]*(1.0-k[i-1])+dis[d[i-1]][c[i]]*k[i-1]) ; 之前需要Floyd预处理一下，然后就好啦(这道题的确比天天爱跑步简单23333)123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;const int N = 2050;const int M = 350;int n , m , v , e;int c[N] , d[N] ;double G[M][M] , f[N][N][2];double k[N];template &lt; class T &gt;inline T min ( T x , T y ) &#123; return x &lt; y ? x : y;&#125;int main ( void ) &#123; scanf ( \"%d%d%d%d\" , &amp;n , &amp;m , &amp;v , &amp;e ); for ( int i = 1 ; i &lt;= n ; i++ ) scanf ( \"%d\" , &amp;c[i] ); for ( int i = 1 ; i &lt;= n ; i++ ) scanf ( \"%d\" , &amp;d[i] ); for ( int i = 1 ; i &lt;= n ; i++ ) scanf ( \"%lf\" , &amp;k[i] ); for ( int i = 1 ; i &lt;= v ; i++ ) for ( int j = 1 ; j &lt;= v ; j++ ) G[i][j] = 0x3f3f3f3f; for ( int i = 1 ; i &lt;= n ; i++ ) for ( int j = 0 ; j &lt;= m ; j++ ) f[i][j][0] = f[i][j][1] = 0x3f3f3f3f; for ( int i = 1 ; i &lt;= v ; i++ ) G[i][i] = 0 ; for ( int i = 1 ; i &lt;= e ; i++ ) &#123; int x , y; double z; scanf ( \"%d%d%lf\" , &amp;x , &amp;y , &amp;z ); if ( G[x][y] &gt; z ) G[x][y] = G[y][x] = z; &#125; for ( int l = 1 ; l &lt;= v ; l++ ) for ( int i = 1 ; i &lt;= v ; i++ ) for ( int j = 1 ; j &lt;= v ; j++ ) G[i][j] = min ( G[i][j] , G[i][l] + G[l][j] ); f[1][0][0] = f[1][1][1] = 0.0000; for ( int i = 2 ; i &lt;= n ; i++ ) for ( int j = 0 ; j &lt;= min ( i , m ) ; j++ ) &#123; f[i][j][0] = min ( f[i - 1][j][0] + G[c[i - 1]][c[i]] , f[i - 1][j][1] + G[c[i - 1]][c[i]] * ( 1.0 - k[i - 1] ) + G[d[i - 1]][c[i]] * k[i - 1] ); if(j &gt;= 1) &#123; f[i][j][1] = min ( f[i - 1][j - 1][0] + G[c[i - 1]][d[i]] * k[i] + G[c[i - 1]][c[i]] * ( 1.0 - k[i] ) , f[i - 1][j - 1][1] + G[c[i - 1]][c[i]] * ( 1.0 - k[i - 1] ) * ( 1.0 - k[i] ) + G[c[i - 1]][d[i]] *k[i] * ( 1.0 - k[i - 1] ) + G[d[i - 1]][c[i]] * k[i - 1]* ( 1.0 - k[i] ) + G[d[i - 1]][d[i]] * k[i - 1] * k[i] ); &#125; &#125; double ans = 0x7fffffff; for ( int i = 0 ; i &lt;= m ; i++ ) for ( int j = 0 ; j &lt;= 1 ; j++ ) ans = min ( ans , f[n][i][j] ); printf ( \"%.2lf\\n\" , ans ) ; return 0 ;&#125;","categories":[{"name":"OI","slug":"OI","permalink":"http://krrrr.xyz/分类/OI/"}],"tags":[{"name":"概率期望","slug":"概率期望","permalink":"http://krrrr.xyz/标签/概率期望/"},{"name":"DP","slug":"DP","permalink":"http://krrrr.xyz/标签/DP/"}]},{"title":"概率入门","slug":"概率入门","date":"2018-11-02T03:04:29.000Z","updated":"2019-09-18T02:36:29.361Z","comments":true,"path":"2018/11/02/概率入门/","link":"","permalink":"http://krrrr.xyz/2018/11/02/概率入门/","excerpt":"其实这道初赛题是我第一次做的概率题","text":"其实这道初赛题是我第一次做的概率题 我们来看一眼这道毒瘤题： 题面其实已经很清楚了，我们可以发现，当这个青蛙在第$1$块石头时，那么这只青蛙完全可以不用跳，我们设$f(k)$表示这只青蛙在$k$号荷叶上，期望需要$f(k)$次跳到$1$号荷叶，那么我们有： f(1)=0我们接着来考虑当这只青蛙在$2$号荷叶时的情况，它可以跳到$1$号和$2$号荷叶，当它跳到$1$号荷叶时，它完成了任务，跳了一步。当它跳到$2$号时，它还有$f(2)$步，因为每一次跳跃时，跳跃到每一个荷叶上的几率是相等的，所以我们有： f(2)=[1+(1+f(2))]/2同理，我们可以得到： f(3)=[1+(1+f(2))+(1+f(3))]/3推广到一般形式则有: f(k)=[\\sum_{i=1}^k{f(i)+1}]/k我们化简一下，有： f(k)=1+\\frac {1}{k}\\sum_{i=1}^kf(i) 我们看到这个式子：$f(k)=1+\\frac {1}{k}\\sum_{i=1}^kf(i)$ 当$i==k$的时候,我们会发现式子里出现了一个$f(k)$….. 这咋求啊 我们展开这个式子，会发现原来的式子等价于： f(k)=1+\\frac {1}{k}\\sum_{i=1}^{k-1}f(i)+\\frac 1kf(k)这时候如果把$f(k)$看作一个未知数的话，我们可以发现$f(k)$的这一项是可以合并的。但是我们先两边同乘一个$k$，把分母去掉，就会有： k*f(k)=k+\\sum_{i=1}^{k-1}f(i)+f(k)这样答案就很显然了，合并掉等式两边相等的$f(k)$，会得到： (k-1)*f(k)=k+\\sum_{i=1}^{k-1}f(i)最后，两边同除$(k-1)$，有最后答案上的公式： f(k)=\\frac{k}{k-1}(1+\\frac {\\sum_{i=1}^{k-1}f(i)}{k-1})通过这个式子计算可以得到$f(5)=\\frac{37}{12}$,也就是答案 做完了QAQ(写Markdown好累啊qwq…)","categories":[{"name":"OI","slug":"OI","permalink":"http://krrrr.xyz/分类/OI/"}],"tags":[{"name":"学习笔记","slug":"学习笔记","permalink":"http://krrrr.xyz/标签/学习笔记/"},{"name":"概率期望","slug":"概率期望","permalink":"http://krrrr.xyz/标签/概率期望/"}]},{"title":"[POI2015]WIL-Wilcze题解","slug":"POI2015-WIL-Wilcze题解","date":"2018-11-02T02:40:29.000Z","updated":"2019-09-18T02:32:30.728Z","comments":true,"path":"2018/11/02/POI2015-WIL-Wilcze题解/","link":"","permalink":"http://krrrr.xyz/2018/11/02/POI2015-WIL-Wilcze题解/","excerpt":"其实这本来是$QBXT$的$T2$，但是由于毒瘤$zhw$跑得快（雾），导致我们发现这是某$poi$原题。","text":"其实这本来是$QBXT$的$T2$，但是由于毒瘤$zhw$跑得快（雾），导致我们发现这是某$poi$原题。 首先看题面:题目链接 详细读了一遍之后，其实对于这道题，我的第一反应是贪心（也许是因为我太菜了）。然后打了一遍，小样例过了，然后被大样例$hack$。 之后我又用命分析了一下。可以发现，因为题目中保证每个数的值全部$&gt;=0$，即每个数都是正整数。所以我们与其选长度不到$d$的区间删除，不如直接选择长度为$d$的区间删除。 那么在一段长度已知的序列中，长度为$d$的子序列个数是已知的，那么我们就可以预处理出每一段长度为$d$的子序列。然后我们又发现，题目中要求区间的长度不超过p，那么我们很明显的可以想到尺取法。 然后我们就可以用单调队列来维护我们预处理出的这些长度为$d$的子序列。然后对于区间长度取$max$就是答案了。 最后怒斥一波出原题的出题人$qaq$….(虽然$zhw$很帅) 代码： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950#include&lt;cstdio&gt;#include&lt;deque&gt;typedef long long ll;using std::deque;const ll N=2000010;ll n,p,d;ll a[N];ll sum[N];ll hea[N];struct Node&#123; ll pos,val; Node(ll pos,ll val):pos(pos),val(val)&#123;&#125; Node()&#123;&#125;&#125;;inline void read(ll &amp;x)&#123; ll s=0,w=1; char ch=getchar(); while(ch&gt;'9'||ch&lt;'0')&#123;if(ch=='-')w=-1;ch=getchar();&#125; while(ch&gt;='0'&amp;&amp;ch&lt;='9')&#123;s=s*10+ch-'0';ch=getchar();&#125; x=s*w; return;&#125;deque&lt;Node&gt;q;int main()&#123; read(n);read(p);read(d); for(int i=1;i&lt;=n;i++)read(a[i]),sum[i]=sum[i-1]+a[i]; for(int i=1;i&lt;=n-d;i++) hea[i]=sum[i+d]-sum[i]; for(int i=n-d+1;i&lt;=n;i++) hea[i]=sum[n]-sum[i]; ll ans=0; int l=0; for(int i=d+1;i&lt;=n;i++) &#123; while(!q.empty()&amp;&amp;q.back().val&lt;hea[i-d])q.pop_back(); q.push_back(Node(i-d,hea[i-d])); while(l&lt;i-d&amp;&amp;sum[i]-sum[l]-q.front().val&gt;p) &#123; l++; while(l&gt;q.front().pos)q.pop_front(); &#125; ans=std::max(ans,(ll)i-l); &#125; printf(\"%lld\",ans); return 0;&#125;","categories":[{"name":"OI","slug":"OI","permalink":"http://krrrr.xyz/分类/OI/"}],"tags":[{"name":"单调队列","slug":"单调队列","permalink":"http://krrrr.xyz/标签/单调队列/"}]},{"title":"复赛冲刺Day1R1-Color题解","slug":"复赛冲刺Day1R1-Colory题解","date":"2018-11-01T11:28:35.000Z","updated":"2019-09-18T02:30:11.974Z","comments":true,"path":"2018/11/01/复赛冲刺Day1R1-Colory题解/","link":"","permalink":"http://krrrr.xyz/2018/11/01/复赛冲刺Day1R1-Colory题解/","excerpt":"这道题是考试时的$T2$，我感觉这道题出的特别好（虽然当时并不会做","text":"这道题是考试时的$T2$，我感觉这道题出的特别好（虽然当时并不会做 首先看题目:$emmmmm…..$什么鬼啊这个题是$QAQ$ 当时直接一脸懵逼，然后只会写2^n 枚举每一种填充方式，然后再检测的方法…然而这道题这么做只有10分啊$qaq….$ 然后赛后题解告诉我：这题TM是个欧拉回路！！！！当时我就懵逼了….然后当dalao们给我把这道题讲明白了之后，我才发现这道题思路的奇妙。 首先，我们发现，对于一个点，它对应着一个横坐标和一个纵坐标。蒽….一个点对应着两个数值，这个时候我们应该想到什么？二分图？对了，这东西还真的就是要你用二分图的思想来建图….(心态崩了我要妹子$QAQ$) 我们建图，然后我们发现，因为一个点对应着一个横坐标和一个纵坐标，那么我们想到：在二分图中，每一条边也是对应着两种点。那么受到这样的启发，我们就可以建图了：我们把横坐标和纵坐标分别看成一种点，然后将题目中给你的点看成这张图上的边，那么因为题目中要求：黑点和白点的绝对值差不大于1…..，那么我们能想到什么呢？我们要对这些边进行黑白染色，所以我们要一个点出发，一直走一条欧拉回路，这样能走遍所有的边。 但是这样做，我们会发现一个问题：只有$subtask4$的$30$分数据告诉你是偶数。而存在欧拉回路的图的特点是什么呢？每个点的度数都是偶数，那么当点的度数是奇数的时候，我们怎么办呢？ 我在这里选择了度数为奇数的点向一个虚拟节点连边，然后当所有点的度数都是偶数时，这时候没有其他点向这个点连边所以这时候这个虚拟节点对答案没有影响。 然后，我们就直接对边进行染色就可以了。 我只想说，这道题出的真的好，佩服出题人。 代码：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt; const int N = 5e5 + 10; struct Data &#123; int v; int p;&#125;data[N];struct Edge &#123; int to; int next;&#125;e[N &lt;&lt; 1];int n , m , t = 1 , num;int head[N] , d[N];int x[N] , y[N] , ans[N];bool flag[N]; inline int read () &#123; int s = 0 , w = 1; char ch = getchar (); while ( ch &gt; '9' || ch &lt; '0' ) &#123; if ( ch == '-' ) w = -1; ch = getchar ();&#125; while ( ch &gt;= '0' &amp;&amp; ch &lt;= '9' ) &#123; s = s * 10 + ch - '0'; ch = getchar ();&#125; return s * w;&#125;inline void add ( int x , int y ) &#123; e[++t].to = y; e[t].next = head[x]; head[x] = t; return;&#125;inline bool cmp ( Data x , Data y ) &#123; return x.v&lt;y.v;&#125;void lisanhua () &#123; for ( int i = 1 ; i &lt;= n ; i++ ) &#123; data[i].v = x[i]; data[i].p = i; &#125; std :: sort ( data + 1 , data + 1 + n , cmp ); data[0].v = -1; for ( int i = 1 ; i &lt;= n ; i++ ) &#123; if ( data[i].v != data[i - 1].v ) num++; x[data[i].p] = num; &#125; for ( int i = 1 ; i &lt;= n ; i++ ) &#123; data[i].v = y[i]; data[i].p = i; &#125; std :: sort ( data + 1 , data + 1 + n , cmp ); data[0].v = -1; for ( int i = 1 ; i &lt;= n ; i++ ) &#123; if ( data[i].v != data[i - 1].v ) num++; y[data[i].p] = num; &#125; return;&#125;void dfs ( int cur , bool last ) &#123; for ( int i = head[cur] ; i ; i = e[i].next ) &#123; if ( flag[i &gt;&gt; 1] ) continue; int j = e[i].to; flag[i &gt;&gt; 1] = 1; d[cur]--; d[j]--; ans[i &gt;&gt; 1] = !last; dfs ( j , !last ); &#125; return;&#125; int main ( void ) &#123; n = read (); for ( int i = 1 ; i &lt;= n ; i++ ) &#123; x[i] = read (); y[i] = read (); &#125; lisanhua(); for ( int i = 1 ; i &lt;= n ; i++ ) &#123; d[x[i]]++; d[y[i]]++; add ( x[i] , y[i] ); add ( y[i] , x[i] ); &#125; for ( int i = 1 ; i &lt;= num ; i++ ) if ( d[i] &amp; 1 ) &#123; d[i]++; d[num + 1]++; add ( i , num + 1 ); add ( num + 1 , i ); &#125; num++; memset ( ans , -1 , sizeof ( ans ) ); for ( int i = 1 ; i &lt;= num ; i++ ) while ( d[i] ) dfs ( i , 1 ); for ( int i = 1 ; i &lt;= n ; i++ ) printf ( \"%d%c\" , ans[i] , i == n ? '\\n' : ' ' ); return 0;&#125;","categories":[{"name":"OI","slug":"OI","permalink":"http://krrrr.xyz/分类/OI/"}],"tags":[{"name":"模拟赛题解","slug":"模拟赛题解","permalink":"http://krrrr.xyz/标签/模拟赛题解/"}]},{"title":"复赛冲刺Day1R1-Count题解","slug":"qbxtD1T1题解","date":"2018-11-01T03:19:25.000Z","updated":"2019-09-18T02:32:18.434Z","comments":true,"path":"2018/11/01/qbxtD1T1题解/","link":"","permalink":"http://krrrr.xyz/2018/11/01/qbxtD1T1题解/","excerpt":"其实我感觉这道数论题还是挺简单的（虽然我不会）","text":"其实我感觉这道数论题还是挺简单的（虽然我不会） 这道数论题，我初看的时候是挺一脸懵逼的，然后据$wucstdio$大爷提供的思路，我们可以发现：题意求的是$x$,$y$在$mod P$下的逆元，存在解的条件是$gcd(x,p)==1$，即x,p互质。所以由题解有设 1 到 P − 1 中与 P 互质的数有 s 个，考虑这 s 个数与它们的逆元组成的二元组，这些二元组一定符合条件，那么只要考虑去重的问题 所以我们只需要知道从$1$到$n$中和$n$互质的数的个数这个东西是什么呢？这个东西很明显是$phi$函数。所以我们只需要求出$\\phi(p)$，再加上$x^2\\equiv1\\pmod{p}$的数，最后除$2$就好了。 代码：123456789101112131415161718192021222324252627282930313233343536#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;const int N = 1e7 + 10;int n;int tot , prime[N] , phi[N];bool flag[N];int main ( void ) &#123; scanf ( \"%d\" , &amp;n ); flag[1] = 1; phi[1] = 1; for ( int i = 2 ; i &lt;= n ; i++ ) &#123; if ( !flag[i] ) &#123; prime[++tot] = i; phi[i] = i - 1; &#125; for ( int j = 1 ; j &lt;= tot &amp;&amp; i * prime[j] &lt;= n ; j++ ) &#123; flag[i * prime[j]] = 1; if ( i % prime[j] == 0 ) &#123; phi[i * prime[j]] = phi[i] *prime[j]; break; &#125; phi[i * prime[j]] = phi[i] * phi[prime[j]]; &#125; &#125; long long ans = phi[n]; for ( long long i = 1 ; i &lt;= n ; i++ ) if ( i * i % n == 1 ) ans++; printf ( \"%lld\\n\" , ( long long ) ( ans ) / 2 ); return 0;&#125;","categories":[{"name":"OI","slug":"OI","permalink":"http://krrrr.xyz/分类/OI/"}],"tags":[{"name":"模拟赛题解","slug":"模拟赛题解","permalink":"http://krrrr.xyz/标签/模拟赛题解/"}]},{"title":"A*学习笔记","slug":"A-学习笔记","date":"2018-10-19T03:26:25.000Z","updated":"2019-09-18T02:36:37.889Z","comments":true,"path":"2018/10/19/A-学习笔记/","link":"","permalink":"http://krrrr.xyz/2018/10/19/A-学习笔记/","excerpt":"例题：$LuoguP2324$:骑士精神 $A*$嘛，很早时候就听说过，貌似是一种很神奇的算法。听长者讲过一遍，一直都想自己打一遍。但是一直没机会。所以来自己写一遍就好啦。","text":"例题：$LuoguP2324$:骑士精神 $A*$嘛，很早时候就听说过，貌似是一种很神奇的算法。听长者讲过一遍，一直都想自己打一遍。但是一直没机会。所以来自己写一遍就好啦。 $A*$的重点就是一个叫做估价函数的东西，但是这个叫估价函数的东西你必须要好好写，不然你会搜出来$WA$的好成绩对于这道题，我就是将现在的棋盘和目标棋盘不同棋子数的差当作估价函数（其实是正确的)。然后，我们就可以加一个类似于剪枝的东西：如果现在的步数$+$估价函数估计的值$&gt;$现在的$max$，直接$return$就好。剩下的东西就是个大爆搜了， 以下是代码： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990#include &lt;cstdio&gt;#include &lt;iostream&gt;#include &lt;cstring&gt;#include &lt;cstring&gt;#include &lt;algorithm&gt;const int goal[7][7] = &#123; &#123; 0 , 0 , 0 , 0 , 0 , 0 &#125;, &#123; 0 , 1 , 1 , 1 , 1 , 1 &#125;, &#123; 0 , 0 , 1 , 1 , 1 , 1 &#125;, &#123; 0 , 0 , 0 , 2 , 1 , 1 &#125;, &#123; 0 , 0 , 0 , 0 , 0 , 1 &#125;, &#123; 0 , 0 , 0 , 0 , 0 , 0 &#125;&#125;;char mp[6][6];int now[6][6];bool flag;int dx[] = &#123; 0 , 1 , 1 , -1 , -1 , 2 , 2 , -2 , -2 &#125;;int dy[] = &#123; 0 , 2 , -2 , 2 , -2 , 1 , -1 , 1 , -1 &#125;;inline int calcu () &#123; int tmp = 0; for ( int i = 1 ; i &lt;= 5 ; i++ ) for ( int j = 1 ; j &lt;= 5 ; j++ ) &#123; if ( now[i][j] != goal[i][j] ) tmp++; &#125; return tmp;&#125;inline void swap ( int &amp;x , int &amp;y ) &#123; int t = x; x = y; y = t; return;&#125;void A_Star ( int x , int y , int dep , int MaxStep ) &#123; if ( flag ) return; if ( dep == MaxStep ) &#123; if ( calcu () == 0 ) &#123; flag = 1; printf ( \"%d\\n\" , MaxStep ); return; &#125; return; &#125; for ( int i = 1 ; i &lt;= 8 ; i++ ) &#123; int xx = x + dx[i]; int yy = y + dy[i]; if ( xx &gt; 5 || xx &lt; 1 || yy &gt; 5 || yy &lt; 1 ) continue; swap ( now[x][y] , now[xx][yy] ); if ( calcu () + dep &lt;= MaxStep ) A_Star ( xx , yy , dep + 1 , MaxStep ); swap ( now[x][y] , now[xx][yy] ); &#125; return;&#125;int main ( void ) &#123; int ttt; scanf ( \"%d\" , &amp;ttt ); while ( ttt-- ) &#123; flag = 0; for ( int i = 1 ; i &lt;= 5 ; i++ ) scanf ( \"%s\" , mp[i] + 1 ); int st_x , st_y; for ( int i = 1 ; i &lt;= 5 ; i++ ) for ( int j = 1 ; j &lt;= 5 ; j++ ) if ( mp[i][j] == '*' ) &#123; st_x = i; st_y = j; now[i][j] = 2; &#125; else now[i][j] = mp[i][j] - '0'; if ( calcu () == 0 ) &#123; puts ( \"0\" ); return 0; &#125; for ( int i = 1 ; i &lt;= 15 ; i++ ) if ( !flag ) A_Star ( st_x , st_y , 0 , i ); if ( !flag ) puts ( \"-1\" ); &#125; return 0;&#125;","categories":[{"name":"OI","slug":"OI","permalink":"http://krrrr.xyz/分类/OI/"}],"tags":[{"name":"学习笔记","slug":"学习笔记","permalink":"http://krrrr.xyz/标签/学习笔记/"},{"name":"玄学","slug":"玄学","permalink":"http://krrrr.xyz/标签/玄学/"}]},{"title":"wucstdio的毒瘤模拟赛","slug":"wucstdio的毒瘤模拟赛","date":"2018-10-18T09:25:47.000Z","updated":"2019-09-18T02:30:18.519Z","comments":true,"path":"2018/10/18/wucstdio的毒瘤模拟赛/","link":"","permalink":"http://krrrr.xyz/2018/10/18/wucstdio的毒瘤模拟赛/","excerpt":"$wucstdio$大爷的Flag还是没有倒….","text":"$wucstdio$大爷的Flag还是没有倒…. T1: 反正我刚开始对这道题是完全没有什么信心的qaq（才不会告诉你我直接去看的$T2$） 考虑$50$分的情况：一条链。所以就是一个等差数列了qwq 考虑剩余的正解，我们可以把每一步的期望值当成这棵树的权值，然后因为从上向下和从下向上的期望值可能不太一样，所以我们需要两个函数来表示：（相当于两条边）。 我们设$f(x) g(x)$分别表示从下向上和从上向下的情况，所以我们考虑求出$f(x)$时，我们要考虑以下情况： 直接走到这个节点的父节点，所以这种情况下，对这个节点对答案的贡献就是$\\frac {1}{d[x]}了$ 还有一种情况就是这个节点先跳到他的儿子，再跳回这个节点，再跳过去。这个时候，因为我们需要一步来跳过去，所以这种情况对答案的贡献就是:$\\sum_{j=son} \\frac {1}{d[x]}[1 + f(x) + f(j) ]$ 我们综合考虑一下这两种情况对答案的贡献值，将这两个式子加起来，我们就会得到下边的这个式子： f(x) = \\frac{1}{d} + \\sum_{j=son}\\frac{1}{d}\\times[1 +f(x) + f ( j )]我们安置我们做期望的一贯思路（好像我做过多少期望一样QwQ），因为$num[son]=p-1$，所以我们可以得到这样一个式子： d\\times f(x)=1+d-1+(d-1)f(x)+\\sum_{j}f(j)化简一下之后有： f(x)=d+\\sum_{j}f(j)然后我们来考虑一下$g(x)$这个东西怎么求，当我们经过观察之后，我们可以发现这个式子有三种情况： 他的父亲直接跳到他这里，这种情况对答案的贡献就是$\\frac{1}{d[father]}$ 他的父亲先跳到他的爷爷，然后再跳回来，这种情况下，对答案的贡献就是：$\\frac{1}{d[father]}\\times (1 + g(p) +g(x) )$ 他的父亲跳到他的兄弟然后再跳到他自己。 我们把这三种情况加起来，就会有： g(x)=\\dfrac {1}{d[father]} \\times(1+g(p)+g(x))+\\dfrac {1}{d[father]}+\\sum_{pa_j=pa_x\\&\\&j\\not=x}\\dfrac {1}{d[father]} (1+f(j)+g(x))继续化简有： g(x)=g(p)+f(p)-f(x)通过这种方式，我们就可以把$g(x) f(x)$算出来，相当于边长。 算出边长后，这个问题就转化成了：给你一颗树，求树的直径。我选择了DP求直径，就很简单了。 代码：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104#include &lt;cstdio&gt;#include &lt;iostream&gt;#include &lt;cstdio&gt;#include &lt;algorithm&gt;#include &lt;cmath&gt;const int N = 2e5 + 10;int n , m , t;struct Edge &#123; int to; int next;&#125;e[N &lt;&lt; 1];int head[N];int now_ans;int f[N] , g[N] , p[N];int LongDis[N][2] , SecondDis[N][2];inline int read () &#123; int s = 0 , w = 1; char ch = getchar (); while ( ch &gt; '9' || ch &lt; '0' ) &#123; if ( ch == '-' ) w = -1; ch = getchar ();&#125; while ( ch &gt;= '0' &amp;&amp; ch &lt;= '9' ) &#123; s = s * 10 + ch - '0'; ch = getchar ();&#125; return s * w;&#125; inline void add ( int x , int y ) &#123; e[++t].to = y; e[t].next = head[x]; head[x] = t; return;&#125;inline int min ( int x , int y ) &#123; return x &lt; y ? x : y;&#125;inline int max ( int x , int y ) &#123; return x &gt; y ? x : y;&#125;void Find_f ( int root , int fa ) &#123; f[root] = p[root]; for ( int i = head[root] ; i ; i = e[i].next ) &#123; int j = e[i].to; if ( j == fa ) continue; Find_f ( j , root ); f[root] += f[j]; &#125; return;&#125;void Find_g ( int root , int fa ) &#123; for ( int i = head[root] ; i ; i = e[i].next ) &#123; int j = e[i].to; if ( j == fa ) continue; g[j] = f[root] + g[root] - f[j]; Find_g ( j , root ); &#125; return;&#125;void Work ( int root , int fa ) &#123; int Frist = 0 , Second = 0; for ( int i = head[root] ; i ; i = e[i].next ) &#123; int j = e[i].to; if ( j == fa ) continue; Work ( j , root ); if ( LongDis[j][0] + g[j] &gt; LongDis[root][0] ) &#123; SecondDis[root][0] = LongDis[root][0]; LongDis[root][0] = LongDis[j][0] + g[j]; Frist = j; &#125; else if ( LongDis[j][0] + g[j] &gt; SecondDis[root][0] ) SecondDis[root][0] = LongDis[j][0] + g[j]; if ( LongDis[j][1] + f[j] &gt; LongDis[root][1] ) &#123; SecondDis[root][1] = LongDis[root][1]; LongDis[root][1] = LongDis[j][1] + f[j]; Second = j; &#125; else if ( LongDis[j][1] + f[j] &gt; SecondDis[root][1] ) SecondDis[root][1] = LongDis[j][1] + f[j]; &#125; if ( Frist != Second ) now_ans = max ( LongDis[root][0] + LongDis[root][1] , now_ans ); else if ( Frist == Second ) now_ans = max ( now_ans , max ( SecondDis[root][1] + LongDis[root][0] , SecondDis[root][0] + LongDis[root][1] ) ); return;&#125;int main ( void ) &#123; freopen ( \"tree.in\" , \"r\" , stdin ); freopen ( \"tree.out\" , \"w\" , stdout ); n = read (); for ( int i = 1 ; i &lt; n ; i++ ) &#123; int x = read () , y = read (); add ( x , y ); add ( y , x ); p[x]++; p[y]++; &#125; Find_f ( 1 , 0 ); Find_g ( 1 , 0 ); Work ( 1 , 0 ); printf ( \"%d.00000\\n\" , now_ans ); return 0;&#125; T2:其实暴力还是挺显然的","categories":[{"name":"OI","slug":"OI","permalink":"http://krrrr.xyz/分类/OI/"}],"tags":[{"name":"模拟赛题解","slug":"模拟赛题解","permalink":"http://krrrr.xyz/标签/模拟赛题解/"}]},{"title":"前排打出题人的一套题","slug":"前排打出题人的一套题","date":"2018-10-17T12:38:43.000Z","updated":"2019-09-18T02:29:35.248Z","comments":true,"path":"2018/10/17/前排打出题人的一套题/","link":"","permalink":"http://krrrr.xyz/2018/10/17/前排打出题人的一套题/","excerpt":"不管怎么样，先打死出题人再说qaq…","text":"不管怎么样，先打死出题人再说qaq… T1:人贩子$LLFZ$ 题意很显然就是最优贸易啊…. 一眼看出来是缩点+DP….但是为什么我之前是SPFA过的啊QAQ…写SPFA比较稳….然后….就写了…. 上代码吧…. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123#include &lt;cstdio&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;#include &lt;cstring&gt;#include &lt;queue&gt;const int N = 1e5 + 10;const int M = 1e6 + 10;const int INF = 2147483647;#define G(i,a,b,c) for ( int i = b[a] ; i ; i = c[i].next )int n , m , t , cnt;struct Edge &#123; int to; int data; int next;&#125;e[M] , e_[M];int head[N] , head_[N];int maxs[N] , mins[N];int dis[N] , value[N];bool inque[N];std :: queue &lt; int &gt; qu;inline int read () &#123; int s = 0 , w = 1; char ch = getchar (); while ( ch &gt; '9' || ch &lt; '0' ) &#123; if ( ch == '-' ) w = -1; ch = getchar ();&#125; while ( ch &gt;= '0' &amp;&amp; ch &lt;= '9' ) &#123; s = s * 10 + ch - '0'; ch = getchar ();&#125; return s * w;&#125;inline void add ( int x , int y , int z ) &#123; e[++t].to = y; e[t].data = z; e[t].next = head[x]; head[x] = t; return;&#125;inline void add_ ( int x , int y , int z ) &#123; e_[++cnt].to = y; e_[cnt].data = z; e_[cnt].next = head_[x]; head_[x] = cnt; return;&#125;template &lt; class T &gt; inline T min ( T x , T y ) &#123; return x &lt; y ? x : y;&#125;template &lt; class T &gt;inline T max ( T x , T y ) &#123; return x &gt; y ? x : y;&#125;void Heap_Dijkstra () &#123; std :: memset ( dis , 0x3f3f3f3f , sizeof ( dis ) ); inque[1] = 1 , dis[1] = value[1]; qu.push ( 1 ); while ( !qu.empty () ) &#123; int j = qu.front (); inque[j] = 0; qu.pop (); G ( i , j , head , e ) &#123; int k = e[i].to; if ( dis[k] &gt; min ( dis[j] , e[i].data ) ) &#123; dis[k] = min ( dis[j] , e[i].data ); if ( !inque[k] ) &#123; inque[k] = 1; qu.push ( k ); &#125; &#125; &#125; &#125; for ( int i = 1 ; i &lt;= n ; i++ ) mins[i] = dis[i]; std :: memset ( dis , -0x3f3f3f3f , sizeof ( dis ) ); inque[n] = 1 , dis[n] = value[n]; qu.push ( n ); while ( !qu.empty () ) &#123; int j = qu.front (); qu.pop (); inque[j] = 0; G ( i , j , head_ , e_ ) &#123; int k = e_[i].to; if ( dis[k] &lt; max ( dis[j] , e_[i].data ) ) &#123; dis[k] = max ( dis[j] , e_[i].data ); if ( !inque[k] ) &#123; inque[k] = 1; qu.push ( k ); &#125; &#125; &#125; &#125; for ( int i = 1 ; i &lt;= n ; i++ ) maxs[i] = dis[i]; return;&#125; int main ( void ) &#123; freopen ( \"child.in\" , \"r\" , stdin ); freopen ( \"child.out\" , \"w\" , stdout ); n = read (); m = read (); for ( int i = 1 ; i &lt;= n ; i++ ) value[i] = read (); for ( int i = 1 ; i &lt;= m ; i++ ) &#123; int x = read () , y = read () , z = read (); if ( z == 1 ) &#123; add ( x , y , value[y] ); add_ ( y , x , value[x] ); &#125; else if ( z == 2 ) &#123; add ( x , y , value[y] ); add ( y , x , value[x] ); add_ ( y , x , value[x] ); add_ ( x , y , value[y] ); &#125; &#125; Heap_Dijkstra (); int ans = -INF; for ( int i = 1 ; i &lt;= n ; i++ ) ans = max ( ans , maxs[i] - mins[i] ); printf ( \"%d\\n\" , ans ); return 0;&#125; T2 : food 再来拿出题人祭天祭一波… 话说我直接读题读错了然后写了个错误的DP然后还A了是什么鬼啊…. 话说我考虑了前缀和，那么我还过了，说明直接加起来然后除就可以? 123456789101112131415161718192021222324252627282930313233343536373839404142434445#include &lt;cstdio&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;#include &lt;cstring&gt;const int N = 15;int n , ans = -1;int A , B , C;int p1 , p2 , p3;int MaxTime[N];int f[N][105][105][105];inline int read () &#123; int s = 0 , w = 1; char ch = getchar (); while ( ch &gt; '9' || ch &lt; '0' ) &#123; if ( ch == '-' ) w = -1; ch = getchar ();&#125; while ( ch &gt;= '0' &amp;&amp; ch &lt;= '9' ) &#123; s = s * 10 + ch - '0'; ch = getchar ();&#125; return s * w;&#125;inline int max ( int x , int y ) &#123; return x &gt; y ? x : y;&#125;int main ( void ) &#123; freopen ( \"food.in\" , \"r\" , stdin ); freopen ( \"food.out\" , \"w\" , stdout ); A = read () , B = read () , C = read (); p1 = read () , p2 = read () , p3 = read (); n = read (); for ( int i = 1 ; i &lt;= n ; i++ ) &#123; MaxTime[i] = read (); MaxTime[i] = MaxTime[i - 1] + MaxTime[i]; &#125; for ( int i = 1 ; i &lt;= n ; i++ ) for ( int j = A ; j * p1 &lt;= MaxTime[i] &amp;&amp; j&lt;=100 ; j++ ) for ( int k = B; j * p1 + k * p2 &lt;= MaxTime[i] &amp;&amp; k &lt;= 100 ; k++ ) for ( int l = C ; j * p1 + k * p2 + l * p3 &lt;= MaxTime[i] &amp;&amp; l &lt;=100 ; l++ ) &#123; f[i][j][k][l] = max ( f[i][j][k][l] , max ( f[i - 1][j - A][k - B][l - C] + 1 , f[i][j - A][k - B][l - C] + 1 ) ); ans = max ( ans , f[i][j][k][l] ); &#125; printf ( \"%d\\n\" , ans ); return 0;&#125; T3: Happy 再吐槽一波为什么Noip模拟赛会考离散对数（然而我并不会….） 其实应该是一道签到题吧。。。 暴力水过…. 123456789101112131415161718192021222324252627282930313233343536373839#include &lt;cstdio&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;#include &lt;cstring&gt;inline int read () &#123; int s = 0 , w = 1; char ch = getchar (); while ( ch &gt; '9' || ch &lt; '0' ) &#123; if ( ch == '-' ) w = -1; ch = getchar ();&#125; while ( ch &gt;= '0' &amp;&amp; ch &lt;= '9' ) &#123; s = s * 10 + ch - '0'; ch = getchar ();&#125; return s * w;&#125;int P , A , B;bool app[50005];int main ( void ) &#123; freopen ( \"happy.in\" , \"r\" , stdin ); freopen ( \"happy.out\" , \"w\" , stdout ); int T = read (); while ( T-- ) &#123; int now = 1; memset ( app , false , sizeof ( app ) ); P = read () , A = read () , B = read (); for ( int i = 1 ; ; i++ ) &#123; now = ( now * A ) % P; if ( now == B ) &#123; printf ( \"%d\\n\" , i ); break; &#125; if ( app[now] ) &#123; puts ( \"Couldn't Produce!\" ); break; &#125; app[now] = 1; &#125; &#125; return 0;&#125;","categories":[{"name":"OI","slug":"OI","permalink":"http://krrrr.xyz/分类/OI/"}],"tags":[{"name":"模拟赛题解","slug":"模拟赛题解","permalink":"http://krrrr.xyz/标签/模拟赛题解/"}]},{"title":"My_Code_Style","slug":"My_Code_Style","date":"2018-10-13T07:30:16.000Z","updated":"2019-09-18T02:30:58.338Z","comments":true,"path":"2018/10/13/My_Code_Style/","link":"","permalink":"http://krrrr.xyz/2018/10/13/My_Code_Style/","excerpt":"介绍下本蒟蒻的丑死的码风$qwq$…(码风大概是魔改了神犇$Menci$的)","text":"介绍下本蒟蒻的丑死的码风$qwq$…(码风大概是魔改了神犇$Menci$的) 在打CF时并不是这个码风 码风概述： 所有的#include后必须有一个空格,例如#include 无论什么样子的程序，都必须写cstdio cstring algorithm iostream这四个头文件。 在主程序的int main()中要加$void$，即为int main(void) 一般不写using namespace std; 所有的变量必须定义在第一个自定义函数之前，且变量和第一个自定义函数，最后一个自定义函数和$main$之间必须有一个换行 每个函数之后尽可能有$return$， 在一般情况下，在花括号内的内容不加逗号 缩进： 对于每个代码块，使用4空格或者等长的Tab缩进。 括号： 大括号不换行 空格： 个人感觉自己的空格比较的毒瘤。 1.在每个函数声明时，函数名后的括号与函数名之间必须有一个空格,而且括号内如果需要声明变量，则要先有一个空格，且逗号的前后都必须有一个空格。 2.在for循环的声明中，每一个字符（变量名除外），都要用空格隔开。 3.数组内一般不加空格，但是如果有运算符则运算符前后必须有空格。 4.每个可以前后匹配的括号前后必须有空格。 变量： 1.基本所有变量都是全局变量，但有些ans,sum最后统计答案时使用的变量可以定义为局部变量。 2.所有的变量名称都必须与要存储的东西的中文意思有沾边，比如树直接定义为tree而不是T。（极度不能容忍变量名直接为a,b,c,d,e,f,g,的情况。 3.定义N,M等时一般只用N,M为名称而不是MAXN,MAXM. 4.定义的结构体类型在定义变量时必须紧接着声明完成结构体后，并且结构体中变量需要定义一个加一个换行。 5.在变量命名时较长的变量名可以用_来连接，并且大小写交替使用，如Add_Tree_Val 把上边所有毒瘤的码风结合起来之后代码大概长这个样子qwq.. update:还是加上模板舒服qwq 不要吐槽我的丑逼$Splay…..$ 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181#include &lt;cstdio&gt;#include &lt;algorithm&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;queue&gt;#include &lt;map&gt;#include &lt;set&gt;#include &lt;cmath&gt;#include &lt;cctype&gt;#include &lt;ctime&gt;#include &lt;vector&gt;#include &lt;cstdlib&gt;#include &lt;stack&gt;#define ll long long#define pll std::pair&lt;int,int&gt;#define mp std::make_pair#define fi first#define se second#define oo 2147483647#define PI 3.141592653590#define rint register inttemplate &lt; class T &gt; inline void read ( T &amp;x ) &#123;T s = 0 , w = 1;char ch = getchar ();while ( ch &gt; '9' || ch &lt; '0' ) &#123; if ( ch == '-' ) w = -1; ch = getchar ();&#125;while ( ch &gt;= '0' &amp;&amp; ch &lt;= '9' ) &#123; s = s * 10 + ch - '0'; ch = getchar ();&#125;x = s * w;return;&#125;template &lt; class T , typename ...Argc &gt; inline void read ( T &amp;x , Argc &amp;...Args ) &#123;read ( x );read ( Args... );return;&#125; template &lt; class T &gt; inline T max ( T x , T y ) &#123;return x &gt; y ? x : y;&#125;template &lt; class T &gt; inline T min ( T x , T y ) &#123;return x &lt; y ? x : y;&#125;template &lt; class T &gt; inline void abs ( T x ) &#123;return x &gt; 0 ? x : -x;&#125;inline int _read () &#123;int s = 0 , w = 1;char ch = getchar ();while ( ch &gt; '9' || ch &lt; '0' ) &#123; if ( ch == '-' ) w = -1; ch = getchar ();&#125;while ( ch &gt;= '0' &amp;&amp; ch &lt;= '9' ) &#123; s = s * 10 + ch - '0'; ch = getchar ();&#125;return s * w;&#125;template &lt;typename T&gt; void write(T x) &#123;if (x &lt; 0) x = -x, putchar('-');if (x &gt; 9) write(x / 10);putchar(x % 10 + 48);return;&#125;template &lt;typename T&gt; void writeln(T x) &#123; write(x); printf (\"\\n\"); &#125;/**********************************************************************************************************************************************************************************************************************************************************************/const int N = 1e6 + 5;int root , tot , n;struct Tree &#123; int ch[2]; int val; int father; int size; int cnt;&#125;tree[N];void pushup ( int cur ) &#123; tree[cur].size = tree[tree[cur].ch[0]].size + tree[tree[cur].ch[1]].size + tree[cur].cnt; return;&#125;void rotate ( int x ) &#123; int y = tree[x].father; int z = tree[y].father; int k = tree[y].ch[1] == x; tree[z].ch[tree[z].ch[1] == y] = x; tree[x].father = z; tree[y].ch[k] = tree[x].ch[k ^ 1]; tree[tree[x].ch[k ^1]].father = y; tree[x].ch[k ^ 1] = y; tree[y].father = x; pushup ( x ); pushup ( y ); return;&#125;void Splay ( int x , int goal ) &#123; while ( tree[x].father != goal ) &#123; int y = tree[x].father; int z = tree[y].father; if ( z != goal ) ( tree[y].ch[0] == x ) ^ ( tree[z].ch[0] == y ) ? rotate ( x ) : rotate ( y ); rotate ( x ); &#125; if ( goal == 0 ) root = x; return;&#125;void insert ( int x ) &#123; int cur = root , father = 0; while ( cur &amp;&amp; tree[cur].val != x ) &#123; father = cur; cur = tree[cur].ch[x &gt; tree[cur].val]; &#125; if ( cur ) tree[cur].cnt++; else &#123; cur = ++tot; if ( father ) tree[father].ch[x &gt; tree[father].val] = cur; tree[cur].ch[0] = tree[cur].ch[1] = 0; tree[cur].father = father; tree[cur].val = x; tree[cur].cnt = 1; tree[cur].size = 1; &#125; Splay ( cur , 0 ); return;&#125;void Find ( int x ) &#123; int cur = root; if ( !cur ) return; while ( tree[cur].ch[x &gt; tree[cur].val] &amp;&amp; x != tree[cur].val ) cur = tree[cur].ch[ x &gt; tree[cur].val]; Splay ( cur , 0 ); return;&#125;int Next ( int x , int f )&#123; Find ( x ); int cur = root; if ( tree[cur].val &gt; x &amp;&amp; f ) return cur; if ( tree[cur].val &lt; x &amp;&amp; !f ) return cur; cur = tree[cur].ch[f]; while ( tree[cur].ch[f ^ 1] ) cur = tree[cur].ch [f ^ 1]; return cur;&#125;void Delete ( int x ) &#123; int last = Next ( x , 0 ); int next = Next ( x , 1 ); Splay ( last , 0 ); Splay ( next , last ); int del = tree[next].ch[0]; if ( tree[del].cnt &gt; 1 ) &#123; tree[del].cnt--; Splay ( del , 0 ); &#125; else tree[next].ch[0] = 0; return;&#125;int kth ( int x ) &#123; int cur = root; if ( tree[cur].size &lt; x ) return 0; while ( 1 ) &#123; int y = tree[cur].ch[0]; if ( x &gt; tree[y].size + tree[cur].cnt ) &#123; x -= tree[y].size + tree[cur].cnt; cur = tree[cur].ch[1]; &#125; else if ( tree[y].size &gt;= x ) cur = y; else return tree[cur].val; &#125;&#125;int main ( void ) &#123; n = read (); insert ( 2147483647 ); insert ( -2147483647 ); while ( n-- ) &#123; int opt = read (); if ( opt == 1 ) &#123; int x = read (); insert ( x ); &#125; else if ( opt == 2 ) &#123; int x = read (); Delete ( x ); &#125; else if ( opt == 3 ) &#123; int x = read (); Find ( x ); printf ( \"%d\\n\" , tree[tree[root].ch[0]].size ); &#125; else if ( opt == 4 ) &#123; int x = read (); printf ( \"%d\\n\" , kth ( x + 1 ) ); &#125; else if ( opt == 5 ) &#123; int x = read (); printf ( \"%d\\n\" , tree[Next ( x , 0 )].val ); &#125; else if ( opt == 6 ) &#123; int x = read (); printf ( \"%d\\n\" , tree[Next ( x , 1 )].val ); &#125; &#125; return 0;&#125; 因为知道了自己是多么的菜,所以才要更加努力去追求那个永远也不可能实现的梦想","categories":[{"name":"OI","slug":"OI","permalink":"http://krrrr.xyz/分类/OI/"}],"tags":[{"name":"CodeStyle","slug":"CodeStyle","permalink":"http://krrrr.xyz/标签/CodeStyle/"}]}]}