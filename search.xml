<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[CF938D题解]]></title>
    <url>%2F2019%2F10%2F08%2FCF938D%E9%A2%98%E8%A7%A3%2F</url>
    <content type="text"><![CDATA[$ZROI$杂题选讲….. 因为知道了自己是多么的菜,所以才要更加努力去追求那个永远也不可能实现的梦想]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>图论</tag>
        <tag>贪心</tag>
        <tag>最短路</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[HDU4479题解]]></title>
    <url>%2F2019%2F10%2F08%2FHDU4479%E9%A2%98%E8%A7%A3%2F</url>
    <content type="text"><![CDATA[$ZROI$杂题总结… 发现我们需要保证边权递增,但是似乎并没有什么方法.所以我们考虑将边权排个序,然后将边权从小到大开始考虑.这样之后,当我们先默认边权都互不相同时,我们每次以一条边去更新它两端的节点.如果能更新的话,显然在经过的节点上,一定是先经过边权较小的路径,再经过边权较大的路径.这样之后可以保证我们求的就一定是题目中要求的答案.然后发现其实边权并不是互不相同的,所以可以将边权一样的边分成一组,每次操作的过程中去用这组中的一坨边去更新. 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879#include&lt;bits/stdc++.h&gt;#define LL long longusing namespace std;inline int read()&#123; int s=0,w=1; char ch=getchar(); while(ch&gt;'9'||ch&lt;'0')&#123;if(ch=='-')w=-1;ch=getchar();&#125; while(ch&gt;='0'&amp;&amp;ch&lt;='9')&#123;s=s*10+ch-'0';ch=getchar();&#125; return s*w;&#125;const int N=1e4+10;const int M=1e5+10;const LL oo=0x3f;int n,m,t;LL dis[N];bool updated[N];struct Edge&#123; int from; int to; LL date;&#125;lis[M];int v[N];LL vdis[N];inline bool cmp(Edge x,Edge y)&#123; return x.date&lt;y.date;&#125;inline void work(int l,int r)&#123; int cnt=0; for(int i=l;i&lt;=r;i++)&#123; int ll=lis[i].from,rr=lis[i].to; if(updated[ll]&amp;&amp;dis[rr]&gt;lis[i].date+dis[ll])&#123; v[++cnt]=rr; vdis[cnt]=lis[i].date+dis[ll]; &#125; if(updated[rr]&amp;&amp;dis[ll]&gt;lis[i].date+dis[rr])&#123; v[++cnt]=ll; vdis[cnt]=lis[i].date+dis[rr]; &#125; &#125; for(int i=1;i&lt;=cnt;i++)&#123; dis[v[i]]=min(dis[v[i]],vdis[i]); updated[v[i]]=1; &#125; return;&#125;int main(void)&#123; int T=read(); while(T--)&#123; t=0; memset(updated,0,sizeof(updated)); n=read(),m=read(); for(int i=1;i&lt;=n;i++)dis[i]=oo; dis[1]=0; updated[1]=1; for(int i=1;i&lt;=m;i++)&#123; int x=read(),y=read(); LL z=read(); lis[++t].from=x; lis[t].to=y; lis[t].date=z; &#125; sort(lis+1,lis+1+t,cmp); lis[t+1].date=oo; for(int i=1;i&lt;=t;i++)&#123; int l=lis[i].from,r=lis[i].to; int j; for(j=i+1;j&lt;=t+1;j++) if(lis[j].date!=lis[i].date) break; work(i,j-1); i = j-1; &#125; if(dis[n]&gt;=oo) puts("No answer"); else printf("%lld\n",dis[n]); &#125; return 0;&#125; 因为知道了自己是多么的菜,所以才要更加努力去追求那个永远也不可能实现的梦想]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>图论</tag>
        <tag>最短路</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ZROI国庆七天乐D5]]></title>
    <url>%2F2019%2F10%2F07%2FZROI%E5%9B%BD%E5%BA%86%E4%B8%83%E5%A4%A9%E4%B9%90D5%2F</url>
    <content type="text"><![CDATA[你一定知道密码趴 Incorrect Password! No content to display! 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]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>ZROI</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[国庆七天乐D1]]></title>
    <url>%2F2019%2F10%2F01%2F%E5%9B%BD%E5%BA%86%E4%B8%83%E5%A4%A9%E4%B9%90D1%2F</url>
    <content type="text"><![CDATA[你一定知道密码趴 Incorrect Password! No content to display! ]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>ZROI</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Codeforces Round #588 (Div. 2)题解]]></title>
    <url>%2F2019%2F09%2F27%2FCF588%E9%A2%98%E8%A7%A3%2F</url>
    <content type="text"><![CDATA[lyt我对不起你啊/ll Dawid and Bags of Candies其实我们按照大小排序了之后,我们发现可能的答案只有第$1,4$组成或者第$4$个单独组成,判断一下即可.注意精度,不然直接除$2$的时候可能会被卡. Ania and Minimizing发现如果把高位变小了之后,那么答案一定会变得更优.所以我们直接从高位向低位贪心即可.注意判断$k$为$0$的情况. Anadi and Domino$emmmmm….$看题面就非常高大上然后我们认真读了读题发现真的很高大上.看一眼数据范围,$n&lt;=7$,所以我们考虑一下枚举与每个点相连的边的颜色.然后我们直接暴力$check$即可.对不起数据范围小真的可以为所欲为1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162#include &lt;bits/stdc++.h&gt;using namespace std;int n,m;int G[10][10];int col[8],ans;bool used[7],uc[7][7];void Prep()&#123; memset(uc,false,sizeof(uc)); return;&#125;inline void check()&#123; Prep(); int tmp=0; for(int i=1;i&lt;=n;i++)&#123; if(col[i]==0) continue; for(int j=i+1;j&lt;=n;j++)&#123; if(!G[i][j]||!col[j]) continue; if(!uc[col[i]][col[j]])&#123; uc[col[i]][col[j]]=1; uc[col[j]][col[i]]=1; tmp++; &#125; &#125; &#125; ans=max(ans,tmp);// if(tmp==21)&#123;// for(int i=1;i&lt;=n;i++)// cout&lt;&lt;col[i]&lt;&lt;" ";// exit(0); // &#125; return;&#125;void dfs(int x)&#123; if(x==n+1)&#123; check(); return; &#125; for(int i=0;i&lt;=6;i++)&#123; col[x]=i; dfs(x+1); &#125; return;&#125;int main ( void ) &#123; ios::sync_with_stdio(false); cin.tie(0); cout.tie(0); cin&gt;&gt;n&gt;&gt;m; for(int i=1;i&lt;=m;i++)&#123; int x,y; cin&gt;&gt;x&gt;&gt;y; G[x][y]=1; G[y][x]=1; &#125; memset(col,-1,sizeof(col)); dfs(1); cout&lt;&lt;ans&lt;&lt;endl; return 0;&#125;// Main Code Marcin and Training Camp我们考虑到,如果一个人$i$和另一个人$j$能看顺眼的话,只有$j$是$i$的子集才可以.然后如果在某个分组里,$j$已经是某个$i$人的子集了,那么$j$一定是可以被选出的.所以我们的任务就变成了找到所有的$a_k$只出现过一次或者不是其他出现过两次或多次的$a_i$的子集合的$k$.然后从$sum$中将这些不合法的状态删去即可. 因为知道了自己是多么的菜,所以才要更加努力去追求那个永远也不可能实现的梦想]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>CodeForces题解</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数论学习笔记]]></title>
    <url>%2F2019%2F09%2F25%2F%E6%95%B0%E8%AE%BA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[数论果然博大精深,但是我啥都没听懂 因为知道了自己是多么的菜,所以才要更加努力去追求那个永远也不可能实现的梦想]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>数论</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SCP-114514]]></title>
    <url>%2F2019%2F09%2F23%2FSCP1%2F</url>
    <content type="text"><![CDATA[qwq SCP-114514 研究社 等级: Keter 特殊收容措施: 目前SCP-114514无法被收容,目前基金会的目的是使SCP-114514保持不再发生变化. 项目描述: 已知SCP-114514曾经的名称有信息学,OI,国际象棋,围棋,五子棋,羽毛球,篮球,OSU,植物大战僵尸,外卖K歌研究社.已知项目会在随机的时间进行名称上的变化.目前已经证实,在每次项目的名称发生改变时,项目内的人员(称之为$SCP-114514-1919810$)的兴趣爱好会随着研究社的名称发生变化. 经过研究发现,SCP-114514内的人员爱好需要的物件似乎并不需要从外界获取,会有一个被称为$SCP-114514-1$的被称为$Z$主任的人形实体供给,而供给的物品似乎是从内部自然产生的. 在每次项目的名称发生改变时,会强制将项目周边距离不超过$10m$的人员强制转化为$SCP-114514-1919810$,已知这一影响不可逆.而且在普通人员被强制转化后,会在[数据删除]的时间之内丧失对文化课学习的兴趣. 常人暴露在SCP-114514面前是致命的,所以对于SCP-114514的任何接触需要3名及以上四级权限者的允许,且实验者在实验后将被强制隔离$3$天,如果在隔离时间之内实验者表现了明显的兴趣爱好变化,那么实验者将会被处决. 对于SCP-114514的进一步研究报告为致命媒介模因,需要得到O5议会的批准之后访问. 您好,监督者,已取消对机动特遣队的派遣指令.]]></content>
      <categories>
        <category>吹水</category>
      </categories>
      <tags>
        <tag>SCP乱搞</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Codeforces Round #587题解]]></title>
    <url>%2F2019%2F09%2F22%2FCodeforcesRound-587%E9%A2%98%E8%A7%A3%2F</url>
    <content type="text"><![CDATA[LYT我对不起你啊/ll Prefixes经过观察私信找规律之后发现,对于每个偶数的前缀$i$,如果$i&gt;2$且$i$这个前缀满足条件,那么$i/2$也一定会满足条件.所以我们要满足的就是对于每个最小的间隔为$2$的区间,使他们当中有一个$a$和一个$b$ 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970#include &lt;cstdio&gt;#include &lt;algorithm&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;queue&gt;#include &lt;map&gt;#include &lt;set&gt;#include &lt;cmath&gt;#include &lt;cctype&gt;#include &lt;ctime&gt;#include &lt;vector&gt;#include &lt;cstdlib&gt;#include &lt;stack&gt;#define ll long long#define pll std::pair&lt;int,int&gt;#define MP std::make_pair#define fi first#define se second#define oo 2147483647#define PI 3.141592653590#define rint register int#define F(i,num,b) for(rint i=num;i&lt;=b;i++)#define D(i,num,b) for(rint i=num;i&gt;=b;i--)#define G(i,num,b,c) for(rint num=head[b];num;num=c[num].next) inline int _read () &#123;int s = 0 , w = 1;char ch = getchar ();while ( ch &gt; '9' || ch &lt; '0' ) &#123; if ( ch == '-' ) w = -1; ch = getchar ();&#125;while ( ch &gt;= '0' &amp;&amp; ch &lt;= '9' ) &#123; s = s * 10 + ch - '0'; ch = getchar ();&#125;return s * w;&#125;template &lt; class T &gt; inline void read ( T &amp;x ) &#123;T s = 0 , w = 1;char ch = getchar ();while ( ch &gt; '9' || ch &lt; '0' ) &#123; if ( ch == '-' ) w = -1; ch = getchar ();&#125;while ( ch &gt;= '0' &amp;&amp; ch &lt;= '9' ) &#123; s = s * 10 + ch - '0'; ch = getchar ();&#125;x = s * w;return;&#125;template &lt; class T , typename ...Argc &gt; inline void read ( T &amp;x , Argc &amp;...Args ) &#123;read ( x );read ( Args... );return;&#125; template &lt; class T &gt; inline T max ( T x , T y ) &#123;return x &gt; y ? x : y;&#125;template &lt; class T &gt; inline T min ( T x , T y ) &#123;return x &lt; y ? x : y;&#125;template &lt; class T &gt; inline void abs ( T x ) &#123;return x &gt; 0 ? x : -x;&#125;template &lt; typename T &gt; void write ( T x ) &#123;if ( x &lt; 0 ) x = -x , putchar ( '-' );if ( x &gt; 9 ) write ( x / 10 );putchar ( x % 10 + 48 );return;&#125;template &lt; typename T &gt; void writeln ( T x ) &#123;write ( x ); printf ("\n"); &#125;template &lt; class T &gt; inline T gcd ( T x , T y ) &#123;if ( x &lt; y ) swap ( x , y );if ( !y ) return x;return gcd ( y , x % y );&#125;template &lt; class T &gt; inline T ksm ( T x , T y , T Mod ) &#123;T tmp = 1;while ( y ) &#123;if ( y % 2 == 1 ) tmp = ( tmp * x % Mod );x = ( x * x ) % Mod;y &gt;&gt;= 1;&#125;return tmp;&#125; /**********************************************************************************************************************************************************************************************************************************************************************/ const int N = 2e5 + 10; int n , ans;char ss[N]; int main() &#123; read ( n ); scanf ( "%s" , ss + 1 ); int s1 = 0 , s2 = 0; for ( int i = 1 ; i &lt;= n ; i++ ) &#123; if ( ss[i] == 'a' ) s1++; else s2++; if ( i % 2 == 0 ) &#123; if ( s1 == s2 ) continue; ans++; if ( s1 &gt; s2 ) ss[i] = 'b'; else ss[i] = 'a'; s1 = 0; s2 = 0; &#125; &#125; writeln ( ans ); for ( int i = 1 ; i &lt;= n ; i++ ) printf ( "%c" , ss[i] ); return 0; &#125; Shooting通过观察样例可知,从大到小排序即可qwq… 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566#include &lt;cstdio&gt;#include &lt;algorithm&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;queue&gt;#include &lt;map&gt;#include &lt;set&gt;#include &lt;cmath&gt;#include &lt;cctype&gt;#include &lt;ctime&gt;#include &lt;vector&gt;#include &lt;cstdlib&gt;#include &lt;stack&gt;#define ll long long#define pll std::pair&lt;int,int&gt;#define MP std::make_pair#define fi first#define se second#define oo 2147483647#define PI 3.141592653590#define rint register int#define F(i,num,b) for(rint i=num;i&lt;=b;i++)#define D(i,num,b) for(rint i=num;i&gt;=b;i--)#define G(i,num,b,c) for(rint num=head[b];num;num=c[num].next) inline int _read () &#123;int s = 0 , w = 1;char ch = getchar ();while ( ch &gt; '9' || ch &lt; '0' ) &#123; if ( ch == '-' ) w = -1; ch = getchar ();&#125;while ( ch &gt;= '0' &amp;&amp; ch &lt;= '9' ) &#123; s = s * 10 + ch - '0'; ch = getchar ();&#125;return s * w;&#125;template &lt; class T &gt; inline void read ( T &amp;x ) &#123;T s = 0 , w = 1;char ch = getchar ();while ( ch &gt; '9' || ch &lt; '0' ) &#123; if ( ch == '-' ) w = -1; ch = getchar ();&#125;while ( ch &gt;= '0' &amp;&amp; ch &lt;= '9' ) &#123; s = s * 10 + ch - '0'; ch = getchar ();&#125;x = s * w;return;&#125;template &lt; class T , typename ...Argc &gt; inline void read ( T &amp;x , Argc &amp;...Args ) &#123;read ( x );read ( Args... );return;&#125; template &lt; class T &gt; inline T max ( T x , T y ) &#123;return x &gt; y ? x : y;&#125;template &lt; class T &gt; inline T min ( T x , T y ) &#123;return x &lt; y ? x : y;&#125;template &lt; class T &gt; inline void abs ( T x ) &#123;return x &gt; 0 ? x : -x;&#125;template &lt; typename T &gt; void write ( T x ) &#123;if ( x &lt; 0 ) x = -x , putchar ( '-' );if ( x &gt; 9 ) write ( x / 10 );putchar ( x % 10 + 48 );return;&#125;template &lt; typename T &gt; void writeln ( T x ) &#123;write ( x ); printf ("\n"); &#125;template &lt; class T &gt; inline T gcd ( T x , T y ) &#123;if ( x &lt; y ) swap ( x , y );if ( !y ) return x;return gcd ( y , x % y );&#125;template &lt; class T &gt; inline T ksm ( T x , T y , T Mod ) &#123;T tmp = 1;while ( y ) &#123;if ( y % 2 == 1 ) tmp = ( tmp * x % Mod );x = ( x * x ) % Mod;y &gt;&gt;= 1;&#125;return tmp;&#125; /**********************************************************************************************************************************************************************************************************************************************************************/ const int N = 1005; int n;struct Node &#123; int val; int pos;&#125;ls[N]; ll ans; inline bool cmp ( Node x , Node y ) &#123; return x.val &gt; y.val;&#125; int main() &#123; read ( n ); F ( i , 1 , n ) &#123; ls[i].val = _read (); ls[i].pos = i; &#125; std :: sort ( ls + 1 , ls + 1 + n , cmp ); F ( i , 1 , n ) ans += ls[i].val * ( i - 1 ) + 1; writeln ( ans ); F ( i , 1 , n ) printf ( "%d " , ls[i].pos ); return 0; &#125; White Sheet发现如果这个白色矩形的四条边都被覆盖了的话,那么中间一定也被覆盖了.然后暴力枚举判断即可. 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677#include &lt;cstdio&gt;#include &lt;algorithm&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;queue&gt;#include &lt;map&gt;#include &lt;set&gt;#include &lt;cmath&gt;#include &lt;cctype&gt;#include &lt;ctime&gt;#include &lt;vector&gt;#include &lt;cstdlib&gt;#include &lt;stack&gt;#define ll long long#define pll std::pair&lt;int,int&gt;#define MP std::make_pair#define fi first#define se second#define oo 2147483647#define PI 3.141592653590#define rint register int#define F(i,num,b) for(rint i=num;i&lt;=b;i++)#define D(i,num,b) for(rint i=num;i&gt;=b;i--)#define G(i,num,b,c) for(rint num=head[b];num;num=c[num].next) inline int _read () &#123;int s = 0 , w = 1;char ch = getchar ();while ( ch &gt; '9' || ch &lt; '0' ) &#123; if ( ch == '-' ) w = -1; ch = getchar ();&#125;while ( ch &gt;= '0' &amp;&amp; ch &lt;= '9' ) &#123; s = s * 10 + ch - '0'; ch = getchar ();&#125;return s * w;&#125;template &lt; class T &gt; inline void read ( T &amp;x ) &#123;T s = 0 , w = 1;char ch = getchar ();while ( ch &gt; '9' || ch &lt; '0' ) &#123; if ( ch == '-' ) w = -1; ch = getchar ();&#125;while ( ch &gt;= '0' &amp;&amp; ch &lt;= '9' ) &#123; s = s * 10 + ch - '0'; ch = getchar ();&#125;x = s * w;return;&#125;template &lt; class T , typename ...Argc &gt; inline void read ( T &amp;x , Argc &amp;...Args ) &#123;read ( x );read ( Args... );return;&#125; template &lt; class T &gt; inline T max ( T x , T y ) &#123;return x &gt; y ? x : y;&#125;template &lt; class T &gt; inline T min ( T x , T y ) &#123;return x &lt; y ? x : y;&#125;template &lt; class T &gt; inline void abs ( T x ) &#123;return x &gt; 0 ? x : -x;&#125;template &lt; typename T &gt; void write ( T x ) &#123;if ( x &lt; 0 ) x = -x , putchar ( '-' );if ( x &gt; 9 ) write ( x / 10 );putchar ( x % 10 + 48 );return;&#125;template &lt; typename T &gt; void writeln ( T x ) &#123;write ( x ); printf ("\n"); &#125;template &lt; class T &gt; inline T gcd ( T x , T y ) &#123;if ( x &lt; y ) swap ( x , y );if ( !y ) return x;return gcd ( y , x % y );&#125;template &lt; class T &gt; inline T ksm ( T x , T y , T Mod ) &#123;T tmp = 1;while ( y ) &#123;if ( y % 2 == 1 ) tmp = ( tmp * x % Mod );x = ( x * x ) % Mod;y &gt;&gt;= 1;&#125;return tmp;&#125; /**********************************************************************************************************************************************************************************************************************************************************************/ struct Point&#123; int x; int y;&#125;p[7];int main ( void )&#123; for(int i=1;i&lt;=6;i++) scanf("%d%d",&amp;p[i].x,&amp;p[i].y); if(p[3].x&lt;=p[1].x&amp;&amp;p[3].y&lt;=p[1].y&amp;&amp;p[4].x&gt;=p[2].x&amp;&amp;p[4].y&gt;=p[2].y)&#123; printf("NO\n"); return 0; &#125; if(p[5].x&lt;=p[1].x&amp;&amp;p[5].y&lt;=p[1].y&amp;&amp;p[6].x&gt;=p[2].x&amp;&amp;p[6].y&gt;=p[2].y)&#123; printf("NO\n"); return 0; &#125; if(p[3].x&lt;=p[1].x&amp;&amp;p[4].x&gt;=p[2].x&amp;&amp;p[5].x&lt;=p[1].x&amp;&amp;p[6].x&gt;=p[2].x)&#123; if(p[3].y&lt;=p[1].y&amp;&amp;p[4].y&gt;=p[5].y&amp;&amp;p[6].y&gt;=p[2].y)&#123; printf("NO\n"); return 0; &#125; if(p[5].y&lt;=p[1].y&amp;&amp;p[6].y&gt;=p[3].y&amp;&amp;p[4].y&gt;=p[2].y)&#123; printf("NO\n"); return 0; &#125; &#125; if(p[3].y&lt;=p[1].y&amp;&amp;p[4].y&gt;=p[2].y&amp;&amp;p[5].y&lt;=p[1].y&amp;&amp;p[6].y&gt;=p[2].y)&#123; if(p[3].x&lt;=p[1].x&amp;&amp;p[4].x&gt;=p[5].x&amp;&amp;p[6].x&gt;=p[2].x)&#123; printf("NO\n"); return 0; &#125; if(p[5].x&lt;=p[1].x&amp;&amp;p[6].x&gt;=p[3].x&amp;&amp;p[4].x&gt;=p[2].x)&#123; printf("NO\n"); return 0; &#125; &#125; printf("YES\n"); return 0;&#125; Swords发现求个$gcd$就好了 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465#include &lt;cstdio&gt;#include &lt;algorithm&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;queue&gt;#include &lt;map&gt;#include &lt;set&gt;#include &lt;cmath&gt;#include &lt;cctype&gt;#include &lt;ctime&gt;#include &lt;vector&gt;#include &lt;cstdlib&gt;#include &lt;stack&gt;#define ll long long#define pll std::pair&lt;int,int&gt;#define MP std::make_pair#define fi first#define se second#define oo 2147483647#define PI 3.141592653590#define rint register int#define F(i,num,b) for(rint i=num;i&lt;=b;i++)#define D(i,num,b) for(rint i=num;i&gt;=b;i--)#define G(i,num,b,c) for(rint num=head[b];num;num=c[num].next) inline int _read () &#123;int s = 0 , w = 1;char ch = getchar ();while ( ch &gt; '9' || ch &lt; '0' ) &#123; if ( ch == '-' ) w = -1; ch = getchar ();&#125;while ( ch &gt;= '0' &amp;&amp; ch &lt;= '9' ) &#123; s = s * 10 + ch - '0'; ch = getchar ();&#125;return s * w;&#125;template &lt; class T &gt; inline void read ( T &amp;x ) &#123;T s = 0 , w = 1;char ch = getchar ();while ( ch &gt; '9' || ch &lt; '0' ) &#123; if ( ch == '-' ) w = -1; ch = getchar ();&#125;while ( ch &gt;= '0' &amp;&amp; ch &lt;= '9' ) &#123; s = s * 10 + ch - '0'; ch = getchar ();&#125;x = s * w;return;&#125;template &lt; class T , typename ...Argc &gt; inline void read ( T &amp;x , Argc &amp;...Args ) &#123;read ( x );read ( Args... );return;&#125; template &lt; class T &gt; inline T max ( T x , T y ) &#123;return x &gt; y ? x : y;&#125;template &lt; class T &gt; inline T min ( T x , T y ) &#123;return x &lt; y ? x : y;&#125;template &lt; class T &gt; inline void abs ( T x ) &#123;return x &gt; 0 ? x : -x;&#125;template &lt; typename T &gt; void write ( T x ) &#123;if ( x &lt; 0 ) x = -x , putchar ( '-' );if ( x &gt; 9 ) write ( x / 10 );putchar ( x % 10 + 48 );return;&#125;template &lt; typename T &gt; void writeln ( T x ) &#123;write ( x ); printf ("\n"); &#125;template &lt; class T &gt; inline T gcd ( T x , T y ) &#123;if ( x &lt; y ) swap ( x , y );if ( !y ) return x;return gcd ( y , x % y );&#125;template &lt; class T &gt; inline T ksm ( T x , T y , T Mod ) &#123;T tmp = 1;while ( y ) &#123;if ( y % 2 == 1 ) tmp = ( tmp * x % Mod );x = ( x * x ) % Mod;y &gt;&gt;= 1;&#125;return tmp;&#125; /**********************************************************************************************************************************************************************************************************************************************************************/ const int N = 2e5 + 10; int n , maxs;int num[N];ll ans , sum; int main() &#123; read ( n ); F ( i , 1 , n ) &#123; num[i] = _read (); maxs = max ( maxs , num[i] ); &#125; F ( i , 1 , n ) &#123; int res = ( maxs - num[i] ); ans = std :: __gcd ( ans , res * 1ll ); &#125; if ( ans == 0 ) &#123; puts ( "0 0" ); return 0; &#125; else &#123; F ( i , 1 , n ) sum += ( maxs - num[i] ) / ans; printf ( "%I64d %I64d\n" , sum , ans ); &#125; return 0; &#125; Numerical Sequence (easy version)发现$k$只有$10^9$的范围,所以就暴力跳就可以了. 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;cstring&gt;#include&lt;algorithm&gt;#include&lt;cmath&gt; using namespace std; #define LL long long#define N 40010 LL sum[N],T; int judge(int x) &#123; int count = (int)log10((double)x) + 1; return count;&#125;int fun(int x) &#123; int sum = pow(10,x); return sum;&#125;void solve() &#123; int sumn = 0; memset(sum, 0,sizeof(sum)); for(int i = 1 ; i &lt; 40005 ; ++i) &#123; sumn += judge(i); sum[i] = sum[i - 1] +sumn; &#125;&#125;void answer(int x) &#123; int j,ans,summ,i = 1; while(sum[i] &lt; x) i++; ans = x - sum[i -1]; summ = 0; for(j = 1 ; j &lt;= i ; ++j) &#123; summ += judge(j); if(summ &gt;= ans) break; &#125; if(summ == ans) printf("%d\n", j %10); if(summ &gt; ans) printf("%d\n", (j / fun(summ -ans)) % 10);&#125; int main() &#123; scanf("%lld",&amp;T); solve(); while(T--) &#123; int pos; scanf("%d",&amp;pos); answer(pos); &#125; //system("pause"); return 0;&#125; 因为知道了自己是多么的菜,所以才要更加努力去追求那个永远也不可能实现的梦想]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>Codeforces题解</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[普转提七连测D3]]></title>
    <url>%2F2019%2F09%2F22%2FP%E8%BD%ACTD3%2F</url>
    <content type="text"><![CDATA[你一定知道密码趴 Incorrect Password! No content to display! ]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>ZROI</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[提高失联测D4]]></title>
    <url>%2F2019%2F09%2F22%2F%E6%8F%90%E9%AB%98%E5%A4%B1%E8%81%94%E6%B5%8BD4%2F</url>
    <content type="text"><![CDATA[你一定知道密码趴 Incorrect Password! No content to display! ]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>ZROI</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[普及五连测D2]]></title>
    <url>%2F2019%2F09%2F21%2FPJ%E4%BA%94%E8%BF%9E%E6%B5%8BD2%2F</url>
    <content type="text"><![CDATA[你一定知道密码趴 Incorrect Password! No content to display! ]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>ZROI</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Educational Codeforces Round 73题解]]></title>
    <url>%2F2019%2F09%2F20%2FCF%E9%A2%98%E8%A7%A3%E8%A7%A3%2F</url>
    <content type="text"><![CDATA[qwq A.2048 Game我们发现,我们可以忽略掉$2048$以上的数,剩下的数开桶统计然后贪心即可. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566#include &lt;cstdio&gt;#include &lt;algorithm&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;queue&gt;#include &lt;map&gt;#include &lt;set&gt;#include &lt;cmath&gt;#include &lt;cctype&gt;#include &lt;ctime&gt;#include &lt;vector&gt;#include &lt;cstdlib&gt;#include &lt;stack&gt;#define ll long long#define pll std::pair&lt;int,int&gt;#define mp std::make_pair#define fi first#define se second#define oo 2147483647#define PI 3.141592653590#define rint register int#define F(i,a,b) for(rint i=a;i&lt;=b;i++)#define D(i,a,b) for(rint i=a;i&gt;=b;i--)inline int _read () &#123;int s = 0 , w = 1;char ch = getchar ();while ( ch &gt; '9' || ch &lt; '0' ) &#123; if ( ch == '-' ) w = -1; ch = getchar ();&#125;while ( ch &gt;= '0' &amp;&amp; ch &lt;= '9' ) &#123; s = s * 10 + ch - '0'; ch = getchar ();&#125;return s * w;&#125;template &lt; class T &gt; inline void read ( T &amp;x ) &#123;T s = 0 , w = 1;char ch = getchar ();while ( ch &gt; '9' || ch &lt; '0' ) &#123; if ( ch == '-' ) w = -1; ch = getchar ();&#125;while ( ch &gt;= '0' &amp;&amp; ch &lt;= '9' ) &#123; s = s * 10 + ch - '0'; ch = getchar ();&#125;x = s * w;return;&#125;template &lt; class T , typename ...Argc &gt; inline void read ( T &amp;x , Argc &amp;...Args ) &#123;read ( x );read ( Args... );return;&#125; template &lt; class T &gt; inline T max ( T x , T y ) &#123;return x &gt; y ? x : y;&#125;template &lt; class T &gt; inline T min ( T x , T y ) &#123;return x &lt; y ? x : y;&#125;template &lt; class T &gt; inline void abs ( T x ) &#123;return x &gt; 0 ? x : -x;&#125;template &lt; typename T &gt; void write ( T x ) &#123;if ( x &lt; 0 ) x = -x , putchar ( '-' );if ( x &gt; 9 ) write ( x / 10 );putchar ( x % 10 + 48 );return;&#125;template &lt; typename T &gt; void writeln ( T x ) &#123;write ( x ); printf ("\n"); &#125;template &lt; class T &gt; inline T gcd ( T x , T y ) &#123;if ( x &lt; y ) swap ( x , y );if ( !y ) return x;return gcd ( y , x % y );&#125;template &lt; class T &gt; inline T ksm ( T x , T y , T Mod ) &#123;T tmp = 1;while ( y ) &#123;if ( y % 2 == 1 ) tmp = ( tmp * x % Mod );x = ( x * x ) % Mod;y &gt;&gt;= 1;&#125;return tmp;&#125; /**********************************************************************************************************************************************************************************************************************************************************************/const int N = 105;int n; ll num[N];int used[2050];int main ( void ) &#123; int T = _read (); while ( T-- ) &#123; memset ( used , 0 , sizeof ( used ) ); n = _read (); F ( i , 1 , n ) &#123; num[i] = _read (); if ( num[i] &lt;= 2048 ) used[num[i]]++; &#125; if ( used[2048] ) &#123; puts ( "YES" ); continue; &#125; for ( int i = 1 ; i &lt;= 1024 ; i *= 2 ) used[i * 2] += ( used[i] / 2 ); if ( used[2048] ) puts ( "YES" ); else puts ( "NO" ); &#125; return 0;&#125; B.Knights我们贪心的考虑一下,如果我们现在这个位置的骑士,在它能移动的八个方向上,都会碰到其他的骑士,那么这个位置对答案的贡献一定是最优的. 结合样例,我们可以发现这样一种构造方法,我们从点$(1,1)$开始进行一次$bfs$,然后按照骑士的移动方法,每次更新一层,然后把这一层的骑士染色成和现在的骑士颜色不一样的颜色. 对于剩下的,那么可以证明没有任何点能跳到这个点,所以随便什么颜色都可以. 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071#include &lt;cstdio&gt;#include &lt;algorithm&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;queue&gt;#include &lt;map&gt;#include &lt;set&gt;#include &lt;cmath&gt;#include &lt;cctype&gt;#include &lt;ctime&gt;#include &lt;vector&gt;#include &lt;cstdlib&gt;#include &lt;stack&gt;#define ll long long#define pll std::pair&lt;int,int&gt;#define fi first#define se second#define oo 2147483647#define PI 3.141592653590#define rint register int#define F(i,a,b) for(rint i=a;i&lt;=b;i++)#define D(i,a,b) for(rint i=a;i&gt;=b;i--)inline int _read () &#123;int s = 0 , w = 1;char ch = getchar ();while ( ch &gt; '9' || ch &lt; '0' ) &#123; if ( ch == '-' ) w = -1; ch = getchar ();&#125;while ( ch &gt;= '0' &amp;&amp; ch &lt;= '9' ) &#123; s = s * 10 + ch - '0'; ch = getchar ();&#125;return s * w;&#125;template &lt; class T &gt; inline void read ( T &amp;x ) &#123;T s = 0 , w = 1;char ch = getchar ();while ( ch &gt; '9' || ch &lt; '0' ) &#123; if ( ch == '-' ) w = -1; ch = getchar ();&#125;while ( ch &gt;= '0' &amp;&amp; ch &lt;= '9' ) &#123; s = s * 10 + ch - '0'; ch = getchar ();&#125;x = s * w;return;&#125;template &lt; class T , typename ...Argc &gt; inline void read ( T &amp;x , Argc &amp;...Args ) &#123;read ( x );read ( Args... );return;&#125; template &lt; class T &gt; inline T max ( T x , T y ) &#123;return x &gt; y ? x : y;&#125;template &lt; class T &gt; inline T min ( T x , T y ) &#123;return x &lt; y ? x : y;&#125;template &lt; class T &gt; inline void abs ( T x ) &#123;return x &gt; 0 ? x : -x;&#125;template &lt; typename T &gt; void write ( T x ) &#123;if ( x &lt; 0 ) x = -x , putchar ( '-' );if ( x &gt; 9 ) write ( x / 10 );putchar ( x % 10 + 48 );return;&#125;template &lt; typename T &gt; void writeln ( T x ) &#123;write ( x ); printf ("\n"); &#125;template &lt; class T &gt; inline T gcd ( T x , T y ) &#123;if ( x &lt; y ) swap ( x , y );if ( !y ) return x;return gcd ( y , x % y );&#125;template &lt; class T &gt; inline T ksm ( T x , T y , T Mod ) &#123;T tmp = 1;while ( y ) &#123;if ( y % 2 == 1 ) tmp = ( tmp * x % Mod );x = ( x * x ) % Mod;y &gt;&gt;= 1;&#125;return tmp;&#125; /**********************************************************************************************************************************************************************************************************************************************************************/int n;char mp[105][105];const int dx[] = &#123; 0 , 1 , 1 , -1 , -1 , 2 , 2 , -2 , - 2 &#125;;const int dy[] = &#123; 0 , 2 , -2 , 2 , -2 , 1 , -1 , 1 , -1 &#125;;void dfs ( int x , int y , char col ) &#123; mp[x][y] = col; for ( int i = 1 ; i &lt;= 8 ; i++ ) &#123; int xx = x + dx[i]; int yy = y + dy[i]; if ( xx &gt;= 1 &amp;&amp; xx &lt;= n &amp;&amp; yy &gt;= 1 &amp;&amp; yy &lt;= n &amp;&amp; mp[xx][yy] != 'W' &amp;&amp; mp[xx][yy] != 'B' ) dfs ( xx , yy , col == 'W' ? 'B' : 'W' ); &#125; return;&#125;int main ( void ) &#123; n = _read (); dfs ( 1 , 1 , 'W' ); bool flag = 1; for ( int i = 1 ; i &lt;= n ; i++ ) &#123; for ( int j = 1 ; j &lt;= n ; j++ ) &#123; if ( mp[i][j] == 'W' || mp[i][j] == 'B' ) printf ("%c",mp[i][j]); else &#123; printf ("%c" , flag?'B':'W'); flag ^= 1; &#125; &#125; puts(""); &#125; return 0;&#125;// Main Code C.Perfect Team一个直观的感觉就是你从$c,m$中取一个$Min$,然后我们会发现可能人数凑不够$Min*3$,所以我们判断一下$min(Min,sum/3)$就是答案了. 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152#include &lt;cstdio&gt;#include &lt;algorithm&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;queue&gt;#include &lt;map&gt;#include &lt;set&gt;#include &lt;cmath&gt;#include &lt;cctype&gt;#include &lt;ctime&gt;#include &lt;vector&gt;#include &lt;cstdlib&gt;#include &lt;stack&gt;#define ll long long#define pll std::pair&lt;int,int&gt;#define mp std::make_pair#define fi first#define se second#define oo 2147483647#define PI 3.141592653590#define rint register int#define F(i,a,b) for(rint i=a;i&lt;=b;i++)#define D(i,a,b) for(rint i=a;i&gt;=b;i--)inline int _read () &#123;int s = 0 , w = 1;char ch = getchar ();while ( ch &gt; '9' || ch &lt; '0' ) &#123; if ( ch == '-' ) w = -1; ch = getchar ();&#125;while ( ch &gt;= '0' &amp;&amp; ch &lt;= '9' ) &#123; s = s * 10 + ch - '0'; ch = getchar ();&#125;return s * w;&#125;template &lt; class T &gt; inline void read ( T &amp;x ) &#123;T s = 0 , w = 1;char ch = getchar ();while ( ch &gt; '9' || ch &lt; '0' ) &#123; if ( ch == '-' ) w = -1; ch = getchar ();&#125;while ( ch &gt;= '0' &amp;&amp; ch &lt;= '9' ) &#123; s = s * 10 + ch - '0'; ch = getchar ();&#125;x = s * w;return;&#125;template &lt; class T , typename ...Argc &gt; inline void read ( T &amp;x , Argc &amp;...Args ) &#123;read ( x );read ( Args... );return;&#125; template &lt; class T &gt; inline T max ( T x , T y ) &#123;return x &gt; y ? x : y;&#125;template &lt; class T &gt; inline T min ( T x , T y ) &#123;return x &lt; y ? x : y;&#125;template &lt; class T &gt; inline void abs ( T x ) &#123;return x &gt; 0 ? x : -x;&#125;template &lt; typename T &gt; void write ( T x ) &#123;if ( x &lt; 0 ) x = -x , putchar ( '-' );if ( x &gt; 9 ) write ( x / 10 );putchar ( x % 10 + 48 );return;&#125;template &lt; typename T &gt; void writeln ( T x ) &#123;write ( x ); printf ("\n"); &#125;template &lt; class T &gt; inline T gcd ( T x , T y ) &#123;if ( x &lt; y ) swap ( x , y );if ( !y ) return x;return gcd ( y , x % y );&#125;template &lt; class T &gt; inline T ksm ( T x , T y , T Mod ) &#123;T tmp = 1;while ( y ) &#123;if ( y % 2 == 1 ) tmp = ( tmp * x % Mod );x = ( x * x ) % Mod;y &gt;&gt;= 1;&#125;return tmp;&#125; /**********************************************************************************************************************************************************************************************************************************************************************/int n;int c , m , x;int main ( void ) &#123; int T = _read (); while ( T-- ) &#123; read ( c , m , x ); int mins = min ( c , m ); int sums = c + m + x; printf ( "%d\n" , min ( mins , sums / 3 ) ); &#125; return 0;&#125;// Main Code D.Make The Fence Great Again毒瘤出题人一个DP数据范围开3e5 看到$3e5$的数据范围,第一反应就是贪心,但是发现貌似不怎么可做?然后开始考虑$DP$,发现如果$i$这个点被升高了的话,貌似对后边的点是有影响的,有后效性,怎么办?我们经过观察可知,如果一个点要升高,那么它最多升高两次,所以我们可以设$f_{i,j}$表示现在是第$i$个位置,其中$i$这个位置升高了$j$次. 转移的话很显然,我们枚举一个最小的$f_{i-1,k}$并且要保证$fence_{i-1}.high+k$不等于$fence_i.high+j$然后转移就好了. 时间复杂度的话是$O(n*16)$硬核O(nlogn) 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475#include &lt;cstdio&gt;#include &lt;algorithm&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;queue&gt;#include &lt;map&gt;#include &lt;set&gt;#include &lt;cmath&gt;#include &lt;cctype&gt;#include &lt;ctime&gt;#include &lt;vector&gt;#include &lt;cstdlib&gt;#include &lt;stack&gt;#define int long long#define pll std::pair&lt;int,int&gt;#define mp std::make_pair#define fi first#define se second#define oo 2147483647#define PI 3.141592653590#define rint register int#define F(i,a,b) for(rint i=a;i&lt;=b;i++)#define D(i,a,b) for(rint i=a;i&gt;=b;i--)inline int _read () &#123;int s = 0 , w = 1;char ch = getchar ();while ( ch &gt; '9' || ch &lt; '0' ) &#123; if ( ch == '-' ) w = -1; ch = getchar ();&#125;while ( ch &gt;= '0' &amp;&amp; ch &lt;= '9' ) &#123; s = s * 10 + ch - '0'; ch = getchar ();&#125;return s * w;&#125;template &lt; class T &gt; inline void read ( T &amp;x ) &#123;T s = 0 , w = 1;char ch = getchar ();while ( ch &gt; '9' || ch &lt; '0' ) &#123; if ( ch == '-' ) w = -1; ch = getchar ();&#125;while ( ch &gt;= '0' &amp;&amp; ch &lt;= '9' ) &#123; s = s * 10 + ch - '0'; ch = getchar ();&#125;x = s * w;return;&#125;template &lt; class T , typename ...Argc &gt; inline void read ( T &amp;x , Argc &amp;...Args ) &#123;read ( x );read ( Args... );return;&#125; template &lt; class T &gt; inline T max ( T x , T y ) &#123;return x &gt; y ? x : y;&#125;template &lt; class T &gt; inline T min ( T x , T y ) &#123;return x &lt; y ? x : y;&#125;template &lt; class T &gt; inline void abs ( T x ) &#123;return x &gt; 0 ? x : -x;&#125;template &lt; typename T &gt; void write ( T x ) &#123;if ( x &lt; 0 ) x = -x , putchar ( '-' );if ( x &gt; 9 ) write ( x / 10 );putchar ( x % 10 + 48 );return;&#125;template &lt; typename T &gt; void writeln ( T x ) &#123;write ( x ); printf ("\n"); &#125;template &lt; class T &gt; inline T gcd ( T x , T y ) &#123;if ( x &lt; y ) swap ( x , y );if ( !y ) return x;return gcd ( y , x % y );&#125;template &lt; class T &gt; inline T ksm ( T x , T y , T Mod ) &#123;T tmp = 1;while ( y ) &#123;if ( y % 2 == 1 ) tmp = ( tmp * x % Mod );x = ( x * x ) % Mod;y &gt;&gt;= 1;&#125;return tmp;&#125; /**********************************************************************************************************************************************************************************************************************************************************************/const int N = 3e5 + 10;int n , idx;struct Node &#123; int hi; int vi;&#125;fence[N];int f[N][5];signed main ( void ) &#123; int T = _read (); while ( T-- ) &#123; n = _read (); for ( int i = 1 ; i &lt;= n ; i++ ) &#123; read ( fence[i].hi , fence[i].vi ); for ( int j = 0 ; j &lt;= 4 ; j++ ) f[i][j] = 1e17; &#125; for ( int i = 1 ; i &lt;= n ; i++ ) &#123; for ( int j = 0 ; j &lt;= 4 ; j++ ) &#123; for ( int k = 0 ; k &lt;= 4 ; k++ ) &#123; if ( fence[i].hi + j == fence[i - 1].hi + k ) continue; f[i][j] = min ( f[i][j] , f[i - 1][k] ); &#125; if ( f[i][j] == 1e17 ) continue; f[i][j] += 1ll * j * fence[i].vi; &#125; &#125; int ans = 1e17; for ( int i = 0 ; i &lt;= 4 ; i++ ) ans = min ( ans , f[n][i] ); writeln ( ans ); &#125; return 0;&#125;// Main Code 因为知道了自己是多么的菜,所以才要更加努力去追求那个永远也不可能实现的梦想]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>CodeForces题解</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[[USACO09FEB]改造路Revamping Trails题解]]></title>
    <url>%2F2019%2F09%2F18%2F%E6%94%B9%E9%80%A0%E8%B7%AF%E9%A2%98%E8%A7%A3%2F</url>
    <content type="text"><![CDATA[复习了一波分层图…. 可以发现这道题就是分层图裸题.我们可以设$dis_{time,i}$表示现在已经用了$time$次免费机会,到达了$i$这个点的时候的最短路径.那么我们在进行堆优化$Dijkstra$时($SPFA$跑分层图一般会死的很惨),我们对于每次转移时,判断一下是否使用一次免费机会即可. 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;#include &lt;queue&gt;#define K 25#define N 10005#define M 4200005#define F(i,a,b) for(int i=a;i&lt;=b;i++)#define G(i,a,b) for(int i=head[a];i;i=b[i].next)using namespace std;int n,m,k,t,start,end;struct Edge&#123; int to; int data; int next;&#125;e[M];struct Que&#123; int time,cur; Que(int a,int b):time(a),cur(b)&#123;&#125;&#125;;int head[N],vis[K][N];bool inque[K][N];int ans=2147483647;struct cmp &#123; bool operator () ( Que x , Que y ) &#123; return vis[x.time][x.cur] &gt; vis[y.time][y.cur]; &#125;&#125;;priority_queue &lt; Que , vector &lt; Que &gt; , cmp &gt; qu;void add (int x,int y,int z)&#123; e[++t].to=y; e[t].data=z; e[t].next=head[x]; head[x]=t; return;&#125;inline void spfa (int x)&#123; memset(vis,0x3f3f3f3f,sizeof(vis)); vis[0][x]=0; inque[0][x]=1; qu.push(Que(0,1)); while (!qu.empty())&#123; Que j=qu.top(); qu.pop(); inque[j.time][j.cur]=0; G(i,j.cur,e)&#123; int k=e[i].to; if (vis[j.time][k]&gt;vis[j.time][j.cur]+e[i].data)&#123; vis[j.time][k]=vis[j.time][j.cur]+e[i].data; if (!inque[j.time][k])&#123; inque[j.time][k]=1; qu.push(Que(j.time,k)); &#125; &#125; &#125; if (j.time&lt;k) G(i,j.cur,e)&#123; int k=e[i].to; if (vis[j.time+1][k]&gt;vis[j.time][j.cur])&#123; vis[j.time+1][k]=vis[j.time][j.cur]; if (!inque[j.time+1][k])&#123; inque[j.time+1][k]=1; qu.push(Que(j.time+1,k)); &#125; &#125; &#125; &#125; F(i,0,k) ans=min(ans,vis[i][n]); return;&#125;int main()&#123; scanf ("%d%d%d",&amp;n,&amp;m,&amp;k); F(i,1,m)&#123; int x,y,z; scanf ("%d%d%d",&amp;x,&amp;y,&amp;z); add (x,y,z); add (y,x,z); &#125; spfa(1); printf ("%d\n",ans); return 0;&#125; 因为知道了自己是多么的菜,所以才要更加努力去追求那个永远也不可能实现的梦想]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>图论</tag>
        <tag>最短路</tag>
        <tag>DP</tag>
        <tag>分层图</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[提高失恋测D3]]></title>
    <url>%2F2019%2F09%2F16%2F%E6%8F%90%E9%AB%98%E5%A4%B1%E6%81%8B%E6%B5%8BD3%2F</url>
    <content type="text"><![CDATA[你一定知道密码趴 Incorrect Password! No content to display! ]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>ZROI</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CodeForces round585题解]]></title>
    <url>%2F2019%2F09%2F15%2Fround585%E9%A2%98%E8%A7%A3%2F</url>
    <content type="text"><![CDATA[A.傻逼题,暴力枚举即可(我也就只会傻逼题了) 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586#include &lt;cstdio&gt;#include &lt;algorithm&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;queue&gt;#include &lt;map&gt;#include &lt;set&gt;#include &lt;cmath&gt;#include &lt;cctype&gt;#include &lt;ctime&gt;#include &lt;vector&gt;#include &lt;cstdlib&gt;#include &lt;stack&gt;#define ll long long#define pll std::pair&lt;int,int&gt;#define MP std::make_pair#define fi first#define se second#define oo 2147483647#define PI 3.141592653590#define rint register int#define F(i,a,b) for(rint i=a;i&lt;=b;i++)#define D(i,a,b) for(rint i=a;i&gt;=b;i--)#define G(i,a,b,c) for(rint a=head[b];a;a=c[a].next)inline int _read () &#123;int s = 0 , w = 1;char ch = getchar ();while ( ch &gt; '9' || ch &lt; '0' ) &#123; if ( ch == '-' ) w = -1; ch = getchar ();&#125;while ( ch &gt;= '0' &amp;&amp; ch &lt;= '9' ) &#123; s = s * 10 + ch - '0'; ch = getchar ();&#125;return s * w;&#125;template &lt; class T &gt; inline void read ( T &amp;x ) &#123;T s = 0 , w = 1;char ch = getchar ();while ( ch &gt; '9' || ch &lt; '0' ) &#123; if ( ch == '-' ) w = -1; ch = getchar ();&#125;while ( ch &gt;= '0' &amp;&amp; ch &lt;= '9' ) &#123; s = s * 10 + ch - '0'; ch = getchar ();&#125;x = s * w;return;&#125;template &lt; class T , typename ...Argc &gt; inline void read ( T &amp;x , Argc &amp;...Args ) &#123;read ( x );read ( Args... );return;&#125; template &lt; class T &gt; inline T max ( T x , T y ) &#123;return x &gt; y ? x : y;&#125;template &lt; class T &gt; inline T min ( T x , T y ) &#123;return x &lt; y ? x : y;&#125;template &lt; class T &gt; inline void abs ( T x ) &#123;return x &gt; 0 ? x : -x;&#125;template &lt; typename T &gt; void write ( T x ) &#123;if ( x &lt; 0 ) x = -x , putchar ( '-' );if ( x &gt; 9 ) write ( x / 10 );putchar ( x % 10 + 48 );return;&#125;template &lt; typename T &gt; void writeln ( T x ) &#123;write ( x ); printf ("\n"); &#125;template &lt; class T &gt; inline T gcd ( T x , T y ) &#123;if ( x &lt; y ) swap ( x , y );if ( !y ) return x;return gcd ( y , x % y );&#125;template &lt; class T &gt; inline T ksm ( T x , T y , T Mod ) &#123;T tmp = 1;while ( y ) &#123;if ( y % 2 == 1 ) tmp = ( tmp * x % Mod );x = ( x * x ) % Mod;y &gt;&gt;= 1;&#125;return tmp;&#125; /**********************************************************************************************************************************************************************************************************************************************************************/const int N = 10005;int n , a1 , a2 , k1 , k2 , idx;int num[N];inline bool cmp1 ( int x , int y ) &#123; return x &gt; y;&#125;inline bool cmp2 ( int x , int y ) &#123; return x &lt; y;&#125;int main ( void ) &#123; read ( a1 , a2 , k1 , k2 , n ); for ( int i = 1 ; i &lt;= a1 ; i++ ) num[++idx] = k1; for ( int i = 1 ; i &lt;= a2 ; i++ ) num[++idx] = k2; std :: sort ( num + 1 , num + 1 + idx , cmp1 ); int ans = 0; int tmp = n; for ( int i = 1 ; i &lt;= idx ; i++ ) if ( tmp &lt; num[i] ) &#123; tmp = 0; break; &#125; else tmp -= num[i] - 1; if ( tmp == 0 ) printf ( "%d " , ans ); else printf ( "%d " , tmp ); std :: sort ( num + 1 , num + 1 + idx , cmp2 ); ans = 0 , tmp = n; for ( int i = 1 ; i &lt;= idx ; i++ ) if ( tmp &lt; num[i] ) break; else &#123; ans ++; tmp -= num[i]; &#125; printf ( "%d\n" , ans ); return 0;&#125;// Main Code B.分从后往前现在的数的正负性讨论即可,负负得正. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566#include &lt;cstdio&gt;#include &lt;algorithm&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;queue&gt;#include &lt;map&gt;#include &lt;set&gt;#include &lt;cmath&gt;#include &lt;cctype&gt;#include &lt;ctime&gt;#include &lt;vector&gt;#include &lt;cstdlib&gt;#include &lt;stack&gt;#define ll long long#define pll std::pair&lt;int,int&gt;#define MP std::make_pair#define fi first#define se second#define oo 2147483647#define PI 3.141592653590#define rint register int#define F(i,num,b) for(rint i=num;i&lt;=b;i++)#define D(i,num,b) for(rint i=num;i&gt;=b;i--)#define G(i,num,b,c) for(rint num=head[b];num;num=c[num].next)inline int _read () &#123;int s = 0 , w = 1;char ch = getchar ();while ( ch &gt; '9' || ch &lt; '0' ) &#123; if ( ch == '-' ) w = -1; ch = getchar ();&#125;while ( ch &gt;= '0' &amp;&amp; ch &lt;= '9' ) &#123; s = s * 10 + ch - '0'; ch = getchar ();&#125;return s * w;&#125;template &lt; class T &gt; inline void read ( T &amp;x ) &#123;T s = 0 , w = 1;char ch = getchar ();while ( ch &gt; '9' || ch &lt; '0' ) &#123; if ( ch == '-' ) w = -1; ch = getchar ();&#125;while ( ch &gt;= '0' &amp;&amp; ch &lt;= '9' ) &#123; s = s * 10 + ch - '0'; ch = getchar ();&#125;x = s * w;return;&#125;template &lt; class T , typename ...Argc &gt; inline void read ( T &amp;x , Argc &amp;...Args ) &#123;read ( x );read ( Args... );return;&#125; template &lt; class T &gt; inline T max ( T x , T y ) &#123;return x &gt; y ? x : y;&#125;template &lt; class T &gt; inline T min ( T x , T y ) &#123;return x &lt; y ? x : y;&#125;template &lt; class T &gt; inline void abs ( T x ) &#123;return x &gt; 0 ? x : -x;&#125;template &lt; typename T &gt; void write ( T x ) &#123;if ( x &lt; 0 ) x = -x , putchar ( '-' );if ( x &gt; 9 ) write ( x / 10 );putchar ( x % 10 + 48 );return;&#125;template &lt; typename T &gt; void writeln ( T x ) &#123;write ( x ); printf ("\n"); &#125;template &lt; class T &gt; inline T gcd ( T x , T y ) &#123;if ( x &lt; y ) swap ( x , y );if ( !y ) return x;return gcd ( y , x % y );&#125;template &lt; class T &gt; inline T ksm ( T x , T y , T Mod ) &#123;T tmp = 1;while ( y ) &#123;if ( y % 2 == 1 ) tmp = ( tmp * x % Mod );x = ( x * x ) % Mod;y &gt;&gt;= 1;&#125;return tmp;&#125; /**********************************************************************************************************************************************************************************************************************************************************************/const int N = 4e5 + 10;int n;ll num[N] , s[N];ll tai,fro;ll odd,uodd;int main ( void ) &#123; read ( n ); F ( i , 1 , n ) &#123; num[i] = _read (); s[i] = s[i - 1] ^ ( num[i] &lt; 0 ); if ( s[i] == 1 ) &#123; tai += odd; fro += uodd; odd++; fro++; &#125; else &#123; tai += uodd; fro += odd; tai++; uodd++; &#125; &#125; std :: cout &lt;&lt; fro &lt;&lt; " " &lt;&lt; tai &lt;&lt; std :: endl; return 0;&#125; C.发现只有$A$和$B$,两种字符,很容易发现规律. 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485#include &lt;cstdio&gt;#include &lt;algorithm&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;queue&gt;#include &lt;map&gt;#include &lt;set&gt;#include &lt;cmath&gt;#include &lt;cctype&gt;#include &lt;ctime&gt;#include &lt;vector&gt;#include &lt;cstdlib&gt;#include &lt;stack&gt;#define ll long long#define pll std::pair&lt;int,int&gt;#define MP std::make_pair#define fi first#define se second#define oo 2147483647#define PI 3.141592653590#define rint register int#define F(i,num,b) for(rint i=num;i&lt;=b;i++)#define D(i,num,b) for(rint i=num;i&gt;=b;i--)#define G(i,num,b,c) for(rint num=head[b];num;num=c[num].next)inline int _read () &#123;int s = 0 , w = 1;char ch = getchar ();while ( ch &gt; '9' || ch &lt; '0' ) &#123; if ( ch == '-' ) w = -1; ch = getchar ();&#125;while ( ch &gt;= '0' &amp;&amp; ch &lt;= '9' ) &#123; s = s * 10 + ch - '0'; ch = getchar ();&#125;return s * w;&#125;template &lt; class T &gt; inline void read ( T &amp;x ) &#123;T s = 0 , w = 1;char ch = getchar ();while ( ch &gt; '9' || ch &lt; '0' ) &#123; if ( ch == '-' ) w = -1; ch = getchar ();&#125;while ( ch &gt;= '0' &amp;&amp; ch &lt;= '9' ) &#123; s = s * 10 + ch - '0'; ch = getchar ();&#125;x = s * w;return;&#125;template &lt; class T , typename ...Argc &gt; inline void read ( T &amp;x , Argc &amp;...Args ) &#123;read ( x );read ( Args... );return;&#125; template &lt; class T &gt; inline T max ( T x , T y ) &#123;return x &gt; y ? x : y;&#125;template &lt; class T &gt; inline T min ( T x , T y ) &#123;return x &lt; y ? x : y;&#125;template &lt; class T &gt; inline void abs ( T x ) &#123;return x &gt; 0 ? x : -x;&#125;template &lt; typename T &gt; void write ( T x ) &#123;if ( x &lt; 0 ) x = -x , putchar ( '-' );if ( x &gt; 9 ) write ( x / 10 );putchar ( x % 10 + 48 );return;&#125;template &lt; typename T &gt; void writeln ( T x ) &#123;write ( x ); printf ("\n"); &#125;template &lt; class T &gt; inline T gcd ( T x , T y ) &#123;if ( x &lt; y ) swap ( x , y );if ( !y ) return x;return gcd ( y , x % y );&#125;template &lt; class T &gt; inline T ksm ( T x , T y , T Mod ) &#123;T tmp = 1;while ( y ) &#123;if ( y % 2 == 1 ) tmp = ( tmp * x % Mod );x = ( x * x ) % Mod;y &gt;&gt;= 1;&#125;return tmp;&#125; /**********************************************************************************************************************************************************************************************************************************************************************/char s[3][200005];int n , sum;int can1,can2,bc;int cnt1[200005],cnt2[200005];int main()&#123; read ( n ); scanf ( "%s%s" , s[1] , s[2] ); for(int i=0;i&lt;n;i++)&#123; if(s[1][i]!=s[2][i])&#123; if(s[1][i]=='a')&#123; can1++; cnt1[can1]=i+1; &#125; else&#123; can2++; cnt2[can2]=i+1; &#125; &#125; &#125; if(n%2==1)&#123; puts ( "-1" ); return 0; &#125; if(can1%2==1)&#123; sum+=2; sum+=(n-2)/2; writeln ( sum ); printf ( "%d %d\n" , cnt1[1] , cnt1[1] ); printf ( "%d %d\n" , cnt1[1] , cnt2[1] ); for(int i=2;i&lt;=can1;i+=2) printf ( "%d %d\n" , cnt1[i] , cnt1[i + 1] ); for(int i=2;i&lt;=can2;i+=2) printf ( "%d %d\n" , cnt2[i] , cnt2[i + 1] ); return 0; &#125; sum=(can1+can2)/2; writeln ( sum ); for(int i=1;i&lt;=can1;i+=2) printf ( "%d %d\n" , cnt1[i] , cnt1[i + 1] ); for(int i=1;i&lt;=can2;i+=2) printf ( "%d %d\n" , cnt2[i] , cnt2[i + 1] ); return 0;&#125; 因为知道了自己是多么的菜,所以才要更加努力去追求那个永远也不可能实现的梦想]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>CodeForces题解</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[普转提七连测D2]]></title>
    <url>%2F2019%2F09%2F15%2F%E6%99%AE%E4%B8%93%E6%8F%90D2%2F</url>
    <content type="text"><![CDATA[你一定知道密码趴 Incorrect Password! No content to display! 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]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>ZROI</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据生成]]></title>
    <url>%2F2019%2F09%2F14%2F%E6%95%B0%E6%8D%AE%E7%94%9F%E6%88%90%2F</url>
    <content type="text"><![CDATA[图和树的数据生成器 图有向图和无向图同样适用的数据生成器,可生成随机图 12345678910111213141516171819202122232425262728293031323334353637383940#include&lt;cstdio&gt;#include&lt;algorithm&gt;#include&lt;cstdlib&gt;#include&lt;cstring&gt;#include&lt;set&gt;#include&lt;ctime&gt;#include&lt;iostream&gt;using namespace std;int n,m,s,T;inline int random() &#123; static int seed = s; return seed = (int)(seed*48271ll%2147483647);&#125;set&lt;int&gt;to[100005];//去重int main() &#123; srand ( time ( NULL ) ) ; cin &gt;&gt; T; cout &lt;&lt; T &lt;&lt; endl; while(T--) &#123; s = rand(); n = 96; m = 102; printf("%d %d \n",n,m); for(int i = 1 ; i &lt;= m ; i++) &#123; int u = random() % n + 1; int v = random() % n + 1; while(to[u].find(v) != to[u].end() || u == v) &#123; u = random() % n + 1; v = random() % n + 1; &#125; printf("%d %d\n",u,v); to[u].insert(v); &#125; printf("\n"); &#125; return 0;&#125; 树保证数据为一棵随机树 1234567891011121314151617181920212223242526272829303132333435363738#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;algorithm&gt;#include&lt;ctime&gt;#include&lt;cstring&gt;#include&lt;cstdlib&gt;using namespace std;int a[10005],e[10005][2];int n = 1000;bool flag[10005];int main() &#123; freopen("testdata.in","w",stdout); printf("%d\n",n); for(int i = 1 ; i &lt;= n ; i++) &#123; a[i] = rand() % n + 1; while(flag[a[i]]) a[i] = rand() % n + 1; flag[a[i]] = 1; &#125; for(int i = 2 ; i &lt;= n ; i++) &#123; e[i-1][0] = a[i]; e[i-1][1] = a[rand() % (i - 1) + 1]; &#125; memset(flag,0,sizeof(flag)); for(int i = 1 ; i &lt; n ; i++) &#123; int x = rand() % (n - 1) + 1; while(flag[x]) x = rand() % (n - 1) + 1; flag[x] = 1; int f = rand() % 2; if(f) printf("%d %d\n",e[x][0],e[x][1]); else printf("%d %d\n",e[x][1],e[x][0]); &#125; return 0;&#125;]]></content>
      <categories>
        <category>知识水平</category>
      </categories>
      <tags>
        <tag>数据制造</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[普及五联测D1]]></title>
    <url>%2F2019%2F09%2F14%2F%E6%99%AE%E5%8F%8A%E4%BA%94%E8%81%94%E6%B5%8BD1%2F</url>
    <content type="text"><![CDATA[你一定知道密码趴 Incorrect Password! No content to display! U2FsdGVkX1/MgBQ2Y7ETX/CkL5y6Ep5X8canr0Vk9k1r0PhLxKfDMQOSvkbW4KhhWjtVwz0ewLwDid4OilTa4EhMDCcgEYKVoagLK/cu8jO5BDo9d1TkOEsvm2Ikwjifg54YF+TB+5iVsZhGoRGUo3K6xtsdJYS/pn/hBfiFXxxmy+LvcOaIFObY7OfphYWxVPoDhE2UuH8NYLFkgcaZDLS1aPHPUdSc//KI/lyuf0GZyRDkrk5diYJt5225SEdkeMrJvxRKtWHUtwHy/JDfUPY8P5jA3r3CiSc//zMjgFbFpllKGN31/grbDMjBlXvmX8yTQlFRpIRoBlKCtHI7P7susZ/TBtZ97TOHp9vYSmmxP7vxRRpoDG63XotesiOlSeUh4/h2yaqdF9zrpurx0h16e9Xct2uO6nng3Q3qJGcL9VnZIW050niAl8jfBuT2+zJoj1VXRvx3jCV69N1hHBDGUgJC0UgWjBrut9JLwO3/UXAgrM6FOHcuTpqTSV0ndZ9Rwk19MN67lN8k1cfiagAnwJPC8Gp3ZDIN6FhCvlSmToJ9KPublJ3Y9LTnxjCs78w6KsALpbV1Whf5d/IiVZPedR5xypQwZmRFtxnlLvKrDqTDZ4N8Q7TlzzysJ7FdKtWhVWEAtocZRFHt1Mh75FtiRd+Ivq6RYO9hvX7pcVett+GX1aFlSnLVN7JkSbrga3+P+wlCiSrTV+tzKCNq/JfkxLwhrLkusRsZULENfD2aJDJGYAAgOCbhcqgP78v1N2v8DB6DOnh+Mp8jtYStvEy3FCqVlBol7rFVOMlrTVqoSM5AXR0I2qiO9fi2PRIGB8SlzHwgudXAk/Usjc1y3rYlbwBegm8oIbEY7ajcW+ew8e7Nqk/LQMd5BLkUXxm5FC4M5vPcXHniIGgEVpZ9d3sP7JjpIzlOH8uCz4h+DHS+HHwU7Zurr94oUAbK1asShKzIC6eXZXlhcwK+7eFSxERyQbLL2vNu+fkMOPMuMB3HU43oQwUx6XrJpApTQFmCKihikYM/biRuP3rQVCbQSBDOeJFAwvGXL53rwWiueSRyezBAKwS9IKKYidOwqqtiu83lpsLqZew/cOm0lSlhDY68G4FeQmu+Z1OoPdUX5tEAVFEt10rtrANRCP0gwlzkpMhZzUaI3DZLt2PwermGuGHiDTDNZd7bnKIDRDNop714jX72IhsUixBc5lAEDHD9+QU+ZvbH3EwprrRJ89qo1kctdu3va2gQYAGn+poX9wnRGUg/D0/UwDqN36KCLPf6l8Xl1FjYzYX+kiX5ASLvxBsGYGN3oNAzlGn1JU2pexQfXNhvxc0kNZUFlcZIyMMlekCFtn84eZioz6i4TsTkEUUPGxjhxczsTr4aXd4d3EZfWAqru1dx4WidDvwpudi28xm4jYU5POojIP5AQr5fsxmxbtkzdEMY/VZy5mVdwa5XCb5jAvUtzrmHmQFZTBNycnXFgStMx0w76ZXmyd2BD+YFPscVGhoLPQVdR5kAgkroVIyVbWHe3i4FJKNPjCHnxMepVpGetuHcM+yLEV44DLkrcd8cAMQzHYE4w54ZGSuSQi+9nxqK0tejYFHyuFBge1BZJrmrhsR+n5OoYGmSi1fXrD7MOFIXULZoabTAVog4mAgRAWy5k3A/SN2qflGpjlRYtK7tjC4wOG4xnaSMrKLWG7yjHKzM1rLiS9YmEWGApp+uSrhCXAtgBdEKoLqj8sF/BHL4RZMHFoZJLcQqntKZbxmw3IpUV8qOb/4GvRtGSxPzuwKJBF8LI4Q6/cdsEHBQ3vNBHsltwr/kVrXF5sgH9zN5wXQkTZkDzk7ezKNsoEvFK8+qK/WWSslUSWoGmJTGI/EEewro2EVCO0qIeM0scyvabn2wdZkCoD3v4Sus3IpJTKZ54hVUY9i9gLOyGpOcLVlkLX8Rt4X71BYsFydhhWqbQIkvpkK1TOcce5KcKBlwIokLBJ7rnBO8l4623srquCWKJEzDgfucgOcO/09mTlVVWstdOFAioP0dbKxUmJ4ysf3k3HCsBbwmdrRGKn9AFDqowEFuWxkNUKUZ2hKRbbnZ05YSQdAAReJGQdcvTiGBmQPcKzeed8GmEkMnPfwzac+JGirsDHihvhGB7pxvI70BbXkyHW5KQFPgwGE2B3KRey3PtAPJ9fd3LUv1meduKlrXeLkSQLsnYGNQbWZjXrSbTx3QF4vtmBvh3UKD+eHMR+mXpMS8DVrtx3pNqf3+2IWsMurxJFW6FFFpyWLvNdRbChVJEgul4BZhb1PdIW7E1TRwB4ndK3cb71QjzKdfTziEF/9rC31z66xITVLLRqgpnDUikHafOVZ/PDdylIPj/OQy4+SZAy6jZj33brmH3S5bz0KOVaFIUFrazhHq4qLnIeQHH4OlnOYP6a0NotfrbB2P9sN16IQ6oPF/vXZ3/bf9Z/raWb5heHAKBgLlNRWpSg9jGrqno3O/tbob0DT3WZEqDlDB1Hvuqzch3jm2eyW7w/Xx2mW16B1MuaLbX/0tFRdYDIyxtZ9yDox2/ya+SUBfjCUuD0uhLsWxm7Ht+K7PYujYZjWkeJi08y8ObyANv5S/Ud02uefZVmAZXVP8UyybYv++jom56dRFOi4PkoTJqxi+imKPIsSusO5viNF35aoYjhLOgx4ZqwuLv6IZ40Zv+XgSsqhVAX+ktGoIepmEtqYx3ihOCFUG7HMPqeWfMwRlIfqaAigc439uOqOsSPfLSqzh4EH00R/iu3jzYeUBUCEbmeeB3K3bXV8kKcmEEdDDxSTfCX5Wm75tzmmSJBoom/qyeNJU6rqNfmwCQ4yru+6PSZABh7eWYY+AJnrFeF68Kg55JJKExuR+P7XgHcKrtytr1W+s5MqgO5zx660SDIMfjZMqc6JwQt1ibU4Qdj6Ysqr+T5QpvgCI6ruoA29qZXgw3UZf+Kte0mV3286vpxAQk6uhN98ZT5AyvehudQGQP6FerRpXKjxxxAlx3A3Z25jRgrPfoQZRyHglwHdi3hWq9f5pL0f9jFbbojQc/Um7KzzHHNj0LMpaBpC5BkznhLICneEKS4jwzm4Cxiowac76sSJ1L9i6i5cc+vm3OA0rDc+0Mww1VTKPF2qkQbiI1R4qYS90ndBUuwMs7jVshgZ+s8yZyVHWORxd3aHTE7sWxhlkT4J0/o0sowGra4NHTtT7t1m7V6Tn7+LGats8Fx//B+fEtHp4dPcnrcTUykU6OZCfTxUGGjKpOqtsY/YWks638/e3X0PKzhKul74KgD57CQrYHND1+8YaTL3I6M0iReV3PEl+xYZEaLNnhd0hGe6MI2k/n+Yk+2Ht6I31U3uvr5zvs4Dqf5DXw9ifXI7yrSRbpcAO+NUF++xQA9Fn53LBQWx5ITncI2dTpkupArIgI11TPrdJ6+QRPV4v0ktLDqKPJWeIrNuprdmjubmqNlUclAtYa87Dqz/7O7gbkAZ+labsVNhI2dNHcUrJC7aOCsoIGUC4AOekBsh+3Jj/EZk6HrZMF9h0G2MCvJC5xoedItpwCquoKj0kEK1+3GBC0ZXXZToPmc3MDOpEwJWwa9KSUieNto+bfFCzW5BNnzEcn3ejYTsltkivflL8DGtHotbKJ5K+o0XGtk/JHbh5GJQq7offHhNvkiXm68p5xCiAiLXqkb53langKBO8zVSq0f3qVJ5nT2bcOBsxfdhhi2BkW1guYZBEUuGcyp6G/x1shY/gfu7cyG0eAarn0c8KwAnO9yumw6hHSg67Z075OTGp1lETZmFB1LSSAPmphkruD8nTXIqRxDNaWygBX39Juaci2wd0V9aPX3MvuOUYFEGsj9rceJkiVSPGXvGVUQcgQ0kbUqstev/Anfsg3uKoNWEeZ8uiz457q0ofzgei4YR17YscogiorxSOY1cfcLMaqVZee0St5LgnWP4ak7XmyIA4CHK3MhzU/G8aj7XHkpNF56cRNkFWoq/rGp/bjpLRvMycRCPXkiYwNAxT0mHzwomMh3Z4Qf9syN9zm0/UefpT2mbbGIwQaQQ4ICmD66yAU3Uul6Vf2smE69i1tIG6BabUk6qNQJiI4jXUyYTjv6Mk+16CNXGAvbnDf7eGKfuG/V1AgxNtRcmvd65MPSoSqnA3IWgCkgqTJkpuUOYDCXGhGUamiqSxZJt/tP+UB/4mSMmjPCM4ma+6/XfEgEhy0KFJxpFa91vYnvgKGFDOvAVBVWgV6fEQVX8Qdn+Ph465O6swGdRXWSAfrjF4bEncaFR/O9s2d4K7/N1oo+97n+IjiP6VlUyz1G+mKFP0X7EH2AdKJD8FjKKMA427CktquiZnjdrcNWVb9e2yiBjdz9hcfFH5SvB/gOGC2CC0siuu0X8/IHQzcO70ObwBz7Jbm5XwYM26QulDKWvmQhrkN22SXy30sf1/HNQr4VVrkHZp4b6cDFS0Oj/67wknrqLQO+Wrpb/0Te2VxZzny5nDjIFR2dACroQErNavkWR1t4bq1n6jNvxvyUIEujf9XDsOzTNm2gKmtC29rUk+Nlu8gXxQa8xpJa3X0CgDG4Xu+vvRlV8IEDl5zD1BCgUkcMV0/aJ9JJ6syx2sUE8UyEFR2csl9Dt7V3FoOMCjuFv6nr6GsG+sgorGMVf+zjOzynDXybcNc1YOce2jpIrRN0RgjeZIMfIAzQdXCD5i8EsDsc5A6PYqPxVRA7rlcQFmK7hqBwhp+T0PX1UWzAJdciBX5QFvumTo9CtpN6bDvA02TQlPGpC9oQLjWb7uB08Yx4zDMyM9zXqHNH9RgtHyOAHtdQCpaSnChd4rWNCy1FtIp1UJeycFsoP0KuTAq+1ALixtHxpx4vY7f9c9Su7YxPHTWAIDafYyyEphKpQaAlWJ3JfKrF88qrD/5kxlQ1AZ5K1fmakk/uPFP9rSFG5TreWWKsreEzNY/0EDOHCV9CNBmmjROo7WzAD+Iey+IGKs7bLND9tzXZnHZHO184dhhENwcWTPc4XADXRph7gvHz3AgsOzwhMSh/XcsG30DpNfaaRQCN+YfmXT/odBpUcOTrgpnqYTYZSfL5ogD0hH30T641YOhi5amjAY4YbEAR4rDcpxxtjrfOYnMSMXbDN92PGesbx7K40Jp375EznT/qmEtG/SRBce4QbM44XmoZxhu8jLMiAzB69r3zIW6WlnI6jq5Thq+Q6Yct1eZtmTPONKJrMg5pLv3KNfYaAY1fOqy5UB6WCHZ5PZh023e6wvsO/PolR4g2FPM/pJMiPZJ4H18X6+kJa6R0FoBPzhEG7ALGMcFhpe7+WEIyjyRObQR3UZBkAV3l07Sq/TLlIV4XUCTZmGhOb1K/LOSlNWpibq1wYX2FF9ymuRGSebi9aPJ5XXJ5NFpIXngGHWLpk43Kv5wjKYbRn77cDqi3v3oAb6OM886Z6VTmX61rMn69jceAmhX0XlAMQiMNoIR7EOXxbkwqwd7vtCHAkjfcUDqtlKEK2QYfvbsIAO7ZCNlJiNLt7Q6rH/cI09nRIUjF1iWFOoTnGETpSOQleUna1bDF/G4z8txl4yMrL0rr+fR9F5TpxhSIP1+68FTYADfvVyz0nwJz3tW11ZDRFZuSeb1GM5H/hSn5JS2Ipkv8vK8+f5Jm3hSiWn40wYlNpxbmmeVypvyFgPjttjY7mJ/w==]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>ZROI</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[题解:树]]></title>
    <url>%2F2019%2F09%2F12%2F%E9%A2%98%E8%A7%A3-%E6%A0%91%2F</url>
    <content type="text"><![CDATA[暴力都不想写的题… 考虑到题目中要求的最小的那个东西不太好求所以我们可以找一个最大的符合条件的值,我们记为$tmp$,那么有$ans=tmp+1$ 那我们考虑一下这个$tmp$怎么求.]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>树的直径</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ZROI普转提D1题解]]></title>
    <url>%2F2019%2F09%2F11%2FZROI%E9%A2%98%E8%A7%A3%2F</url>
    <content type="text"><![CDATA[你一定知道密码趴 Incorrect Password! No content to display! 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]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>ZROI</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[散步]]></title>
    <url>%2F2019%2F09%2F11%2F%E6%95%A3%E6%AD%A5%E9%A2%98%E8%A7%A3%2F</url>
    <content type="text"><![CDATA[这题好难啊 首先可以发现可以二分答案. 我们可以考虑二分一个最长的路径长度$mid$,然后将每个点看成不能在最多连续走$mid$个相同的路的情况下,从$1$号点到$n$号点是否联通. 然后现在的问题就变成了判断图的连通性的问题.我们发现,每个点只有两条出边.而且每种类型的出边只有一条,那么可以发现同样的类型的路径的走路的路径,可以看作一个集合.我们可以设$dis_{i,siz}$表示$i$这个点一直按照$siz$类型的路径一直走,最后一段$siz$路径的长度,然后我们发现,如果$i$这个点走到$j$这个点时,那么$dis_{j,siz}=dis_{i,siz}+1$,而我们发现这个东西显然可以用带权并查集来维护.在使用了带权并查集之后,我们每次就可以在$O(logn)$的时间复杂度内求出以某个点为起点走到最远能走到那个点了.然后我们可以进行一次$bfs$.在某次更新中,可以发现,如果现在到达这个点的最后的路径是$siz$类型的话,如果现在这个点连向的$siz xor 1$类型的点还没有被入队过,那么就将这个点扔进队里. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113#include &lt;cstdio&gt;#include &lt;algorithm&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;queue&gt;#include &lt;map&gt;#include &lt;set&gt;#include &lt;cmath&gt;#include &lt;cctype&gt;#include &lt;ctime&gt;#include &lt;vector&gt;#include &lt;cstdlib&gt;#include &lt;stack&gt;#define ll long long#define pll std::pair&lt;int,int&gt;#define mp std::make_pair#define oo 2147483647#define PI 3.141592653590#define rint register int#define F(i,a,b) for(rint i=a;i&lt;=b;i++)#define D(i,a,b) for(rint i=a;i&gt;=b;i--)inline int _read () &#123;int s = 0 , w = 1;char ch = getchar ();while ( ch &gt; '9' || ch &lt; '0' ) &#123; if ( ch == '-' ) w = -1; ch = getchar ();&#125;while ( ch &gt;= '0' &amp;&amp; ch &lt;= '9' ) &#123; s = s * 10 + ch - '0'; ch = getchar ();&#125;return s * w;&#125;template &lt; class T &gt; inline void read ( T &amp;x ) &#123;T s = 0 , w = 1;char ch = getchar ();while ( ch &gt; '9' || ch &lt; '0' ) &#123; if ( ch == '-' ) w = -1; ch = getchar ();&#125;while ( ch &gt;= '0' &amp;&amp; ch &lt;= '9' ) &#123; s = s * 10 + ch - '0'; ch = getchar ();&#125;x = s * w;return;&#125;template &lt; class T , typename ...Argc &gt; inline void read ( T &amp;x , Argc &amp;...Args ) &#123;read ( x );read ( Args... );return;&#125; template &lt; class T &gt; inline T max ( T x , T y ) &#123;return x &gt; y ? x : y;&#125;template &lt; class T &gt; inline T min ( T x , T y ) &#123;return x &lt; y ? x : y;&#125;template &lt; class T &gt; inline void abs ( T x ) &#123;return x &gt; 0 ? x : -x;&#125;template &lt; typename T &gt; void write ( T x ) &#123;if ( x &lt; 0 ) x = -x , putchar ( '-' );if ( x &gt; 9 ) write ( x / 10 );putchar ( x % 10 + 48 );return;&#125;template &lt; typename T &gt; void writeln ( T x ) &#123;write ( x ); printf ("\n"); &#125;template &lt; class T &gt; inline T gcd ( T x , T y ) &#123;if ( x &lt; y ) swap ( x , y );if ( !y ) return x;return gcd ( y , x % y );&#125;template &lt; class T &gt; inline T ksm ( T x , T y , T Mod ) &#123;T tmp = 1;while ( y ) &#123;if ( y % 2 == 1 ) tmp = ( tmp * x % Mod );x = ( x * x ) % Mod;y &gt;&gt;= 1;&#125;return tmp;&#125; /**********************************************************************************************************************************************************************************************************************************************************************/const int N = 2e5 + 10; int n;int G[N][2];int father[N][2] , dis[N][2];bool vis[N][2];struct Node &#123; int pos; int kid;&#125;;std :: queue &lt; Node &gt; qu;int find ( int x , int kd ) &#123; if ( father[x][kd] != x ) &#123; int tmp = father[x][kd]; father[x][kd] = find ( father[x][kd] , kd ); dis[x][kd] += dis[tmp][kd]; &#125; return father[x][kd];&#125;inline bool check ( int rdm ) &#123; memset ( vis , false , sizeof ( vis ) ); memset ( dis , 0 , sizeof ( dis ) ); F ( i , 1 , n ) father[i][0] = father[i][1] = i; qu.push ( Node &#123; 1 , 0 &#125; ); qu.push ( Node &#123; 1 , 1 &#125; ); while ( !qu.empty() ) &#123; int j = qu.front().pos; int siz = qu.front().kid; qu.pop(); int now = 0; while ( 1 ) &#123; int root = find ( j , siz ); now = dis[j][siz]; if ( now + 1 &gt; rdm ) break; int kt = G[root][siz]; int kj = find ( kt , siz ); if ( !vis[kt][siz ^ 1] ) &#123; vis[kt][siz ^ 1] = 1; qu.push ( Node &#123; kt , siz ^ 1 &#125; ); &#125; if ( kj == root ) break; father[root][siz] = kt; dis[root][siz] = 1; &#125; &#125; if ( vis[n][0] || vis[n][1] ) return 1; return 0;&#125;int main ( void ) &#123; read ( n ); F ( i , 1 , n ) &#123; G[i][0] = _read(); G[i][1] = _read(); &#125; int l = 0 , r = n + 1; while ( l &lt;= r ) &#123; int mid = ( l + r ) &gt;&gt; 1; if ( check ( mid ) ) r = mid - 1; else l = mid + 1; &#125; if ( l &gt; n ) puts ( "-1" ); else writeln ( l ); return 0;&#125;// Main Code]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>图论</tag>
        <tag>最短路</tag>
        <tag>二分</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Codeforces Round 72 题解报告]]></title>
    <url>%2F2019%2F09%2F11%2F%E9%A2%98%E8%A7%A3%E6%8A%A5%E5%91%8A%2F</url>
    <content type="text"><![CDATA[qwq A.第一眼看上去貌似是个找规律$O(1)$题,实际看了一下,确实是找规律$O(1)$题.所以就开始愉快的找规律,于是就有了以下的提交记录: emmm…. QAQ然后我们考虑一下正解. 我们设原来我们有$str in exp$,我们设我们分给$str x$点的$exp$,分给$in y$点的$exp$,那么显然有: x+y=exp \ and \ str+x>in+y发现上边的这个方程,通过将$y$用$exp-x$代替之后,我们可以解出$x$的具体范围.而且我们可以发现:所有$x$的取值范围一共只有$exp + 1$种,所以就可以愉快的求出答案了. 最后别忘了判断$exp$为$0$的情况. 1234567891011121314151617181920212223242526272829#include&lt;bits/stdc++.h&gt;#define int long longusing namespace std;signed main()&#123; ios::sync_with_stdio(false); cin.tie(0),cout.tie(0); int T; cin&gt;&gt;T; while(T--)&#123; int str,in,exp; cin&gt;&gt;str&gt;&gt;in&gt;&gt;exp; if (exp==0)&#123; if(str&gt;in) cout&lt;&lt;"1"&lt;&lt;endl; else cout&lt;&lt;"0"&lt;&lt;endl; continue; &#125; if(in+exp-str&lt;0)&#123; cout&lt;&lt;exp+1&lt;&lt;endl; continue; &#125; int ans=min(exp+1,(exp+1)-max(0ll,((in+exp-str)/2+1))); if ( ans &lt; 0 ) ans = 0; cout&lt;&lt;ans&lt;&lt;endl; &#125; return 0;&#125; B.这么可爱的怪兽我怎么可能忍心去打它呢 我们看到题,首先想到,如果我们砍一刀,这个怪兽不死,那么它如果长出来的头大于我们我们这次砍掉的头.那么我们这次的操作显然没用.所以,在前几刀砍不死怪兽的情况下,我们需要最大化每一次砍头时的$d_i-h_i$,同时我们发现.在某一次砍头中,如果这次的$d_j$非常大,大到一下子可以把怪兽剩下的头砍完.我们就可以不用管这次砍头的副作用$h_j$了. 所以我们维护两个最大值,即$d_i-h_i$的最大值以及$d_i$的最大值,然后直接找题意做即可. 1234567891011121314151617181920212223242526272829303132333435363738#include&lt;bits/stdc++.h&gt;#define int long longusing namespace std;int n,x;signed main()&#123; ios::sync_with_stdio(false); cin.tie(0),cout.tie(0); int T; cin&gt;&gt;T; while(T--)&#123; int maxs=-1e16; int Damage=-1e16; cin&gt;&gt;n&gt;&gt;x; for(int i=1;i&lt;=n;i++) &#123; int tx,ty; cin&gt;&gt;tx&gt;&gt;ty; maxs=max(maxs,tx); Damage=max(Damage,tx-ty); &#125; if ( x &lt;= maxs ) &#123; cout &lt;&lt; "1" &lt;&lt; endl; continue; &#125; if(Damage&lt;=0)&#123; cout&lt;&lt;"-1"&lt;&lt;endl; continue; &#125; int now = ( x - maxs ) / Damage; if ( now * Damage &lt; x - maxs ) now+=2; else now++; cout&lt;&lt;now&lt;&lt;endl; &#125; return 0;&#125; C.通过读题,我们可以发现一个很重要的东西:$\sum_{i=1}^t len_i&lt;=2*10^5$. 通过这个性质,我们可以发现,我们在枚举每一次的区间时,这个区间的最长长度为$log_2len$. 然后就做完了?? 我们枚举一下每个区间的左/右端点,然后直接暴力统计答案就好了. 123456789101112131415161718192021222324252627282930#include &lt;iostream&gt;#include &lt;vector&gt;#include &lt;algorithm&gt;#include &lt;cstring&gt;using namespace std;typedef long long LL;const int N = 200000 + 10;int t,nex[N];char s[N];int main() &#123; scanf("%d",&amp;t); while(t--) &#123; scanf("%s",s+1); int n=strlen(s+1); nex[n+1]=n+1; for(int i=n;i&gt;=1;i--) &#123; if(s[i]=='0') nex[i]=nex[i+1]; else nex[i]=i; &#125; int ans=0; for(int i=1;i&lt;=n;i++)&#123; int now=0; for(int j=nex[i];j&lt;=min(n,nex[i]+20);j++)&#123; now=now*2+s[j]-'0'; if(now==j-i+1) ans++; &#125; &#125; printf("%d\n", ans); &#125;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>CodeForces题解</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Round #582解题报告]]></title>
    <url>%2F2019%2F09%2F11%2FRound-2%2F</url>
    <content type="text"><![CDATA[qwq A.Chips Moving题意就是给你n个数,你每次可以选择一个数,对他进行免费的加2或者减2.或者花费1的代价,对某个数进行加一或者减一,求让所有的数变成一样的最小代价. 很显然可以发现,奇数和奇数之间可以相互转变,偶数和偶数之间也可以相互转变,那么我们只需要考虑让奇数全部变成偶数或者让偶数变成奇数就好了. 1234567891011121314#include &lt;bits/stdc++.h&gt;using namespace std;int main() &#123; int n; cin &gt;&gt; n; int cnto = 0; for (int i = 0; i &lt; n; ++i) &#123; int x; cin &gt;&gt; x; cnto += x &amp; 1; &#125; cout &lt;&lt; min(cnto, n - cnto) &lt;&lt; endl; return 0;&#125; B.Bad Prices题意就是给你一个序列$A$,让你求出所有$A_i$中,$\sum_{i=1}^n[A_i&gt;A_{j(i&lt;j&lt;=n)}?0:1]$ 显然可以直接维护一个后缀最小值,然后判断一下当前$A_i$的值和当前后缀最小值的大小关系,如果$A_i&gt;num_i$,那么ans++ 123456789101112131415161718192021222324252627282930#include&lt;bits/stdc++.h&gt;using namespace std; const int N=150005; int n;int num[N];int mins[N]; int main()&#123; int T; scanf("%d",&amp;T); while(T--)&#123; memset(mins,0x3f3f3f3f,sizeof(mins)); scanf("%d",&amp;n); for(int i=1;i&lt;=n;i++) scanf("%d",&amp;num[i]); for(int i=n-1;i&gt;=1;i--) mins[i]=min(mins[i+1],num[i+1]); int ans=0; for(int i=1;i&lt;n;i++) if(num[i]&gt;mins[i]) ans++; printf("%d\n",ans); &#125; return 0;&#125; // C.Book Reading显然可以发现,题目中要求的个位数字只受要除的数的个位的影响,所以我们在求出来了倍数的个数$num$时,可以发现,个位数字的出现是有周期的,而这个周期和周期中的数字是由要除的数字的个位决定的.而因为要除的数字的个位最多只有10个,所以我们可以先预处理出每个数字的周期以及他们的和,再对多出来的部分直接暴力就可以了. 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253#include&lt;bits/stdc++.h&gt;#define int long long using namespace std; int n,m;int ned[10],idx[10];int sum[10][10]; signed main()&#123; ios::sync_with_stdio(false); cin.tie(0),cout.tie(0); for(int i=1;i&lt;=9;i++)&#123; int now=i; sum[i][++idx[i]]=i; now+=i; while(now!=i)&#123; if(now&gt;=10) now-=10; sum[i][++idx[i]]=now; now+=i; &#125; &#125; for(int i=1;i&lt;=9;i++) for(int j=1;j&lt;=idx[i];j++) ned[i]+=sum[i][j]; int T; cin&gt;&gt;T; while(T--)&#123; int ans=0; cin&gt;&gt;n&gt;&gt;m; int numm=n/m; int tmp = m; tmp%=10; if(tmp==0||numm==0)&#123; cout&lt;&lt;"0"&lt;&lt;endl; continue; &#125; int fir = numm/idx[tmp]; ans+=fir*ned[tmp]; // cout&lt;&lt;fir&lt;&lt;" "&lt;&lt;tmp&lt;&lt;endl; int sos=0; for(int i=fir*idx[tmp]+1;i&lt;=numm;i++) ans+=sum[tmp][i-fir*idx[tmp]]; cout&lt;&lt;ans&lt;&lt;endl; &#125; return 0;&#125; // D.Equalizing by Division我们可以发现,对于某一个数$i$,他能变成的数的个数为$log_2i+1$个,而且题目中$i$的权值也不大,所以我们可以开一个桶,按照从小到大的顺序处理每一个数字,每次处理的时候将它能变成的$log_2i$个数字在桶中的权值全部+1,同时花费就是从原来的i到目前的数字要除几次二,当发现有桶中的数字大于给定的$k$时,更新答案. 123456789101112131415161718192021222324252627282930313233343536373839404142#include&lt;bits/stdc++.h&gt;using namespace std; const int N = 2e5 + 10; int n,k,ans=2147483647;int num[N];struct Node&#123; int val; int now;&#125;buck[N]; int main()&#123; ios::sync_with_stdio(false); cin.tie(0),cout.tie(0); cin&gt;&gt;n&gt;&gt;k; for(int i=1;i&lt;=n;i++) &#123; cin&gt;&gt;num[i]; buck[num[i]].now++; if(buck[num[i]].now&gt;=k)&#123; cout&lt;&lt;"0"&lt;&lt;endl; return 0; &#125; &#125; sort(num+1,num+1+n); for(int i=1;i&lt;=n;i++)&#123; int idx=1,tmp=num[i]/2; while(tmp)&#123; buck[tmp].now++; buck[tmp].val+=idx; if(buck[tmp].now&gt;=k) ans=min(ans,buck[tmp].val); tmp/=2; idx++; &#125; &#125; cout&lt;&lt;ans&lt;&lt;endl; return 0;&#125; //]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>CodeForces题解</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Atcoder Qualification解题报告]]></title>
    <url>%2F2019%2F09%2F11%2FQualification%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A%2F</url>
    <content type="text"><![CDATA[qwq T1:题目中给你一个$D$和一个$M$(一年有$D$个月,一个月有$M$天)让你求出: 的个数.其中$d_1$表示个位,$d_{10}$表示十位. 因为数据范围比较小,所以可以直接暴力枚举解决qwq… 12345678910111213141516#include&lt;bits/stdc++.h&gt;using namespace std;int m,d,ans;int main(void)&#123; scanf("%d%d",&amp;m,&amp;d); for(int i=1;i&lt;=m;i++)&#123; for(int sw=22;sw&lt;=d;sw++)&#123; int g=sw%10; int s=sw/10; if(g&gt;=2&amp;&amp;s&gt;=2&amp;&amp;s*g==i) ans++; &#125; &#125; printf("%d\n",ans); return 0;&#125; T2:给你一个数列$A$,将这个$A$不断$copy k$次变成数列$B$.最后让你求出数列$B$的逆序对个数.$k&lt;=10^9$ 看到$k$那么大,肯定可以$n^2$暴力了啊qwq 我们考虑这k组中的每一组.如果我们考虑原数列$A$中的每一位$A_i$,如果出现了一个$A_j&lt;A_i$,那么在从第$2$组开始,到第$k$组,这些比$A_i$小的数都会对$A_i$有贡献,而且第$3$组到第$k$组也会对第$2$组有贡献,这样一直递推下去,会发现有$1+(k-1)*(k-1)/2$次贡献,而且最后不要忘了一组中对自己的贡献. 1234567891011121314151617181920212223242526272829303132333435363738#include&lt;bits/stdc++.h&gt;#define int long longusing namespace std;const int N=2004;const int HA=1e9+7;int n,k,ans;int num[N],dd[N];inline int ksm(int x,int y)&#123; int tmp=1; while(y)&#123; if(y&amp;1) tmp=(tmp*x)%HA; x=(x*x)%HA; y&gt;&gt;=1; &#125; return tmp%HA;&#125;signed main()&#123; scanf("%lld%lld",&amp;n,&amp;k); for(int i=1;i&lt;=n;i++) scanf("%lld",&amp;num[i]); for(int i=1;i&lt;=n;i++) for(int j=1;j&lt;=n;j++)&#123; if(num[j]&lt;num[i]) dd[i]++; &#125; for(int i=1;i&lt;=n;i++)&#123; ans=(ans+k*(k-1)%HA*ksm(2,HA-2)%HA*dd[i]%HA)%HA; int tdp = 0; for(int j=i+1;j&lt;=n;j++) if(num[j]&lt;num[i]) tdp++; ans = ( ans + tdp * k ) % HA; &#125; printf("%lld\n",ans); return 0; &#125; T4:T3我不会欸qwq(捂脸)]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>Atcoder题解</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Round #573 (Div. 2)解题报告]]></title>
    <url>%2F2019%2F09%2F11%2FRound-1%2F</url>
    <content type="text"><![CDATA[qwq A:没啥可说的,直接按照$Mod 4$分类然后讨论就好了. B:显然可以发现答案只能是0,1,2,3中的某一个,我们只需要将读入记录下来,然后对于每一种胜利的情况分组枚举一下,记录一个最小的ans就可以了. C:考虑每一次操作中,这一页的最右边能消除几个.我们可以设我们已经消除了$sum$个数字,那么当前的$m_i$在消除之后中的书中的位置就是$m_i-sum$,我们就可以推导出来当前$m_i$的这一页的最右边的一个数字就是$((m_i-sum)/k+1)*k$,我们只需要开一个关于i的指针就可以了,时间复杂度为$O(m)$. D:考虑必胜情况:在另外一个人开始取的时候有$2$个或者以上的重复组.或者在有1个重复组时,取出一个重复组(因为不取就会输)之后回和另外一个元素再组成一个重复组. 我们再考虑完这种情况之后,可以发现,我们在将原来的数组排序之后,如果两边都按照最优方式取石子,那么最后的(在决定胜负之前),石子的序列一定是$B_i=i-1$的这样的一个等差数列.所以我们需要对原数组排序,然后统计一个$\sum_{i=1}^n A_i-(i-1)$,判断一下这个$sum$的奇偶性就可以了. PS:一定要先判断有没有例外的必胜情况(我就是这么WA了4发qwq….) 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859#include&lt;bits/stdc++.h&gt;#define int long longusing namespace std;const int N=1e5+10;int n,idxx;int num[N],dis[N];map&lt;int,bool&gt;mp;signed main()&#123; ios::sync_with_stdio(false); cin.tie(0),cout.tie(0); cin&gt;&gt;n; for(int i=1;i&lt;=n;i++) cin&gt;&gt;num[i]; sort(num+1,num+1+n); int sum=0,dpp=0; for(int i=1;i&lt;=n;i++)&#123; if(num[i]==num[i-1]&amp;&amp;i&gt;=2)&#123; dpp++; dis[++idxx]=num[i]; &#125; sum+=num[i]-i+1; mp[num[i]]=1; &#125; if(n==1)&#123; if(sum&amp;1) cout&lt;&lt;"sjfnb"&lt;&lt;endl; else cout&lt;&lt;"cslnb"&lt;&lt;endl; return 0; &#125; if(dpp==1&amp;&amp;num[1]==0&amp;&amp;num[2]==0)&#123; cout&lt;&lt;"cslnb"&lt;&lt;endl; return 0; &#125; if(dpp==1&amp;&amp;n==2)&#123; cout&lt;&lt;"sjfnb"&lt;&lt;endl; return 0; &#125; if(dpp==1)&#123; if(mp[dis[1]-1]) cout&lt;&lt;"cslnb"&lt;&lt;endl; else &#123; if(!(sum&amp;1)) cout&lt;&lt;"cslnb"&lt;&lt;endl; else cout&lt;&lt;"sjfnb"&lt;&lt;endl; &#125; return 0; &#125; if(dpp&gt;=2)&#123; cout&lt;&lt;"cslnb"&lt;&lt;endl; return 0; &#125; if(!(sum&amp;1)) cout&lt;&lt;"cslnb"&lt;&lt;endl; else cout&lt;&lt;"sjfnb"&lt;&lt;endl; return 0;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>CodeForces题解</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Round]]></title>
    <url>%2F2019%2F09%2F11%2FRound%2F</url>
    <content type="text"><![CDATA[qwq A:这道题能想到二进制转十进制然后判断满足的个数，但是转十进制范围已经超过了$long long$，直接模拟会溢出因为满足条件数值的都是4的次幂，所以二进制首位1后跟的$2k$个$0$即为$4$的$k$次幂直接对$0$的个数分析即可 B:很明显的一道贪心题目,当求最小的$sum$时,显然当$1$最多时,$sum$最小.当求$sum$最大时同理.又因为当$a_i$是一个偶数时,$\frac{a_i}{2}$肯定存在,而且$a_i$的最小值为1,所以显然$a_i$的值就只能是$2^j$. C:(个人感觉比$D$难$QAQ…$)让你在给定的序列$P$中求一个子序列,使得在图中按照该子序列进行最短路径移动时可以完整经过原序列$P$.乍一看一点思路都没有.但是仔细思考可以发现一点点思路.我们可以从题目中给出的起点(也就是一号点)开始进行移动,然后在原序列$P$中如果需要经过$P_{i}$和$P_{i+1}$,那么我们显然可以得到$P_i$与$P_{i+1}$一定是直接相连的(因为题目中没有给出无解的情况).那么我们可以扩展一下,假设我们现在在$P_j$号点,我们要走到$P_k$号点.那么如果$dis[P_j][P_k]==j-k$,那么在有解的情况下,一定是有$P_j$经过了所有的$j&lt;i&lt;k$的点(可以自己画个图证明一下).在这种情况下,我们就可以选择扩展答案了. (感觉还是放一下代码比较好qwq) 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556#include&lt;bits/stdc++.h&gt;using namespace std;const int oo = 0x3f3f3f3f;const int N = 105;const int M = 1e6 + 10;int n,m,idx;char mp[N][N];int G[N][N],point[M],ans[M];int qu[M&lt;&lt;1];int head=1,tai=0;int main()&#123; memset ( G , 0x3f3f3f3f , sizeof ( G ) ); scanf ( "%d" , &amp;n ); for ( int i = 1 ; i &lt;= n ; i++ ) scanf ( "%s" , mp[i] + 1 ); for ( int i = 1 ; i &lt;= n ; i++ ) &#123; for ( int j = 1 ; j &lt;= n ; j++ ) if ( mp[i][j] == '1' ) G[i][j] = 1; G[i][i] = 1; &#125; for ( int k = 1 ; k &lt;= n ; k++ ) for ( int i = 1 ; i &lt;= n ; i++ ) for ( int j = 1 ; j &lt;= n ; j++ ) G[i][j] = min ( G[i][j] , G[i][k] + G[k][j] ); scanf("%d",&amp;m); for ( int i = 1 ; i &lt;= m ; i++ ) scanf ( "%d" , &amp;point[i] );// for(int i=1;i&lt;=n;i++)&#123;// for(int j=1;j&lt;=n;j++)// printf("%d " ,G[i][j]);// puts("");// &#125; int st=1,now=2; while(now&lt;=m)&#123; int diss=now-st; if(diss==G[point[st]][point[now]])&#123; if(head&lt;=tai) head++; qu[++tai]=now; now++; &#125; else &#123; ans[++idx]=point[st]; if(head&lt;=tai) st=qu[head++]; &#125; &#125; ans[++idx]=point[st]; if(ans[idx]!=point[m]) ans[++idx]=point[m]; printf("%d\n",idx); for(int i=1;i&lt;=idx;i++) printf ("%d ",ans[i]); return 0;&#125; D:感觉比$C$简单啊$QAQ$….让你求一个字符串使得这个字符串和给定01字符串的每一个子区间的最长单调不降区间长度一样长.我们自己理解了以后可以发现,一个区间的最长单调不降区间长度只是和每一个$1$后的$0$有关系,而和$0$后的$1$无关.(因为对于两个子串$11$和$01$,它们的最长不降区间是一样的).那么我们就可以考虑把原字符串的一些$1$变成$0$.就可以了. 但是怎么改变呢?我们考虑到,对于某一段连续的$1$,那么这段连续区间中的第一个1很显然是不必要的(而且不是最后一个1),那么我们可以把这些个1变成0.(然后就做完辣qwq) 123456789101112131415161718192021#include&lt;bits/stdc++.h&gt;using namespace std;const int N = 1e5 + 10;int tmpp;char ss[N] , tt[N];int main()&#123; scanf ( "%s" , ss + 1 ); int len = strlen ( ss + 1 ); for ( int i = 1 ; i &lt;= len ; i++ ) tt[i] = ss[i]; for ( int i = len ; i &gt;= 1 ; i-- ) &#123; if ( ss[i] == '1' &amp;&amp; tmpp &gt;= 0 ) tt[i] = '0'; int cur=ss[i] == '1' ? 1 : -1; tmpp = min ( tmpp + cur , cur ); &#125; for ( int i = 1 ; i &lt;= len ; i++ ) printf ( "%c" , tt[i] ); return 0;&#125;// E:现在还不会qwq]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>CodeForces题解</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[20190819模拟赛题解]]></title>
    <url>%2F2019%2F09%2F11%2F20190819%E6%A8%A1%E6%8B%9F%E8%B5%9B%E9%A2%98%E8%A7%A3%2F</url>
    <content type="text"><![CDATA[qwq 又是爆零的一次比赛欸qwq… T1: 让你在一个矩阵中,找出一条路径,使得经过的路径方差最小. 我就直接放题解了qwq… 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849#include&lt;bits/stdc++.h&gt;template &lt;class T&gt;bool Reduce(T &amp;a,T const &amp;b)&#123; return a&gt;b?a=b,1:0;&#125;const int N=31,inf=1e9+7,S=59*30;int n,m,ans;int a[N][N];int f[N][N];int cnt=0;void init()&#123; std::ios::sync_with_stdio(false); freopen("path.in","r",stdin); freopen("path.out","w",stdout); std::cin&gt;&gt;n&gt;&gt;m; for(int i=1;i&lt;=n;++i) for(int j=1;j&lt;=m;++j) std::cin&gt;&gt;a[i][j];&#125;int calc(const int &amp;sum,const int &amp;i,const int &amp;j)&#123; return (n+m-1)*a[i][j]*a[i][j]-2*sum*a[i][j];&#125;int dp(int sum)&#123; for(int i=0;i&lt;N;++i) for(int j=0;j&lt;N;++j) f[i][j]=inf; f[1][1]=calc(sum,1,1); for(int j=2;j&lt;=m;++j) Reduce(f[1][j],f[1][j-1]+calc(sum,1,j)); for(int i=2;i&lt;=n;++i) Reduce(f[i][1],f[i-1][1]+calc(sum,i,1)); for(int i=2;i&lt;=n;++i) for(int j=2;j&lt;=m;++j)&#123; Reduce(f[i][j],f[i-1][j]+calc(sum,i,j)); Reduce(f[i][j],f[i][j-1]+calc(sum,i,j)); &#125; return sum*sum+f[n][m];&#125;int main()&#123; init(); ans=inf; for(int sum=1;sum&lt;=S;++sum) Reduce(ans,dp(sum)); std::cout&lt;&lt;ans; return 0;&#125; T2:让你每次从一个区间向另一个区间连边,最后求起点到所有点的最短路. 很显然是线段树优化建图,开两颗线段树A,B,第一颗线段树从儿子节点向父亲连边,另外一条线段树从父亲向儿子连边.但是一个点一个点的向区间连边太麻烦了,所以我们需要建一个虚点,每次从区间[l1,r1]向一个虚点连边,然后再用这个虚点向区间[l2,r2]连边,这样就可以了. (但是我被卡常了) 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;#include &lt;queue&gt;inline int read () &#123; int s = 0 , w = 1; char ch = getchar (); while ( ch &gt; '9' || ch &lt; '0' ) &#123; if ( ch == '-' ) w = -1; ch = getchar ();&#125; while ( ch &gt;= '0' &amp;&amp; ch &lt;= '9' ) &#123; s = s * 10 + ch - '0'; ch = getchar ();&#125; return s * w;&#125; const int N = 500010;const int M = 2210000;int n , m , p , tot , cnt , root_f , root_s;struct edge&#123; int to; int next; int date;&#125;e[11000000];struct Node&#123; int lc; int rc;&#125;tree[N&lt;&lt;2];int head[M] , dis[M] , pos[N];bool vis[M];std :: priority_queue &lt; std :: pair &lt; int , int &gt; , std :: vector &lt; std :: pair &lt; int , int &gt; &gt; , std :: greater &lt; std :: pair &lt; int , int &gt; &gt; &gt; q; inline void add(int x,int y,int date)&#123; e[++cnt].to=y; e[cnt].next=head[x]; head[x]=cnt; e[cnt].date=date; return;&#125;void FBuild(int &amp;root,int l,int r)&#123; root=++tot; if ( l == r ) &#123; pos[l]=root; return; &#125; int mid=l+r&gt;&gt;1; FBuild(tree[root].lc,l,mid); FBuild(tree[root].rc,mid+1,r); add(tree[root].lc,root,0); add(tree[root].rc,root,0); return;&#125;void SBuild(int &amp;root,int l,int r)&#123; root=++tot; if(l==r)&#123; add(root,pos[l],0); return; &#125; int mid=l+r&gt;&gt;1; SBuild(tree[root].lc,l,mid); SBuild(tree[root].rc,mid+1,r); add(root,tree[root].lc,0); add(root,tree[root].rc,0); return;&#125;void FAdd(int root,int l,int r,int x,int y)&#123; if(x&lt;=l&amp;&amp;r&lt;=y) &#123; add(root,tot,1); return; &#125; int mid=l+r&gt;&gt;1; if(x&lt;=mid) FAdd(tree[root].lc,l,mid,x,y); if(y&gt;mid) FAdd(tree[root].rc,mid+1,r,x,y);&#125;void SAdd(int root,int l,int r,int x,int y)&#123; if(x&lt;=l&amp;&amp;r&lt;=y) &#123; add(tot,root,1); return; &#125; int mid=l+r&gt;&gt;1; if(x&lt;=mid) SAdd(tree[root].lc,l,mid,x,y); if(y&gt;mid) SAdd(tree[root].rc,mid+1,r,x,y); return;&#125;inline void Dijkstra()&#123; memset(dis,0x3f3f3f3f,sizeof(dis)); q.push(std :: make_pair(0,pos[p])); dis[pos[p]]=0; while(!q.empty())&#123; int x=q.top().second; q.pop(); if(vis[x]) continue; vis[x]=1; for(int i=head[x];i;i=e[i].next)&#123; int y=e[i].to; if(dis[x]+e[i].date&lt;dis[y])&#123; dis[y]=dis[x]+e[i].date; q.push(std ::make_pair(dis[y],y)); &#125; &#125; &#125; return;&#125;int main ( void ) &#123; freopen("road.in","r",stdin); freopen("road.out","w",stdout); n = read(); m = read(); p = read(); FBuild ( root_f , 1 , n ); SBuild ( root_s , 1 , n ); while ( m-- ) &#123; int x1 = read() , y1 = read() , x2 = read() , y2 = read(); tot++; FAdd(root_f,1,n,x1,y1); SAdd(root_s,1,n,x2,y2); tot++; FAdd(root_f,1,n,x2,y2); SAdd(root_s,1,n,x1,y1); &#125; Dijkstra(); for(int i=1;i&lt;=n;++i) printf("%d\n",dis[pos[i]]/2); return 0;&#125; T3:给你一个矩阵,让你求出这个矩阵中的一个最大的子矩阵,使得这个子矩阵的每一行和每一列都是等差数列 暂时咕咕咕一会,不会]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>模拟赛题解</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[邪教算法学习小结]]></title>
    <url>%2F2019%2F09%2F11%2F%E9%82%AA%E6%95%99%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E5%B0%8F%E7%BB%93%2F</url>
    <content type="text"><![CDATA[qwq 事实证明,邪教算法是很有用的qwq(以下材料大多抄袭OI-wiki)qwq Part1:随机函数:但是并找不到什么随机化好题qwq,,,,,先Pass了再说qwq… Part2:爬山算法:个人理解就是一个比较跳的贪心(真的是个贪心)….一般常用于单峰函数的求解,但是单峰函数为啥不写三分呢? 爬山算法的一般流程其实就是:选定一个初始答案,通过某种方法计算出另外一个答案,if 另一个答案更优 then 转移否则不变, 很形象的就是了爬山这种东西. 例题 JSOI2008球形空间产生器 空间模型的爬山就是很正常的模板了,直接给代码了qwq 1234567891011121314151617181920212223242526272829303132333435363738394041#include &lt;bits/stdc++.h&gt;using namespace std;const int N = 10005;int n;double tot , f[1005][1005];double ans[N] , cans[N] , dis[N];inline void check () &#123; tot = 0; for ( int i = 1 ; i &lt;= n + 1 ; i++ ) &#123; cans[i] = 0; dis[i] = 0; for ( int j = 1 ; j &lt;= n ; j++ ) dis[i] += ( f[i][j] - ans[j] ) * ( f[i][j] - ans[j] ); dis[i] = sqrt ( dis[i] ); tot += dis[i]; &#125; tot /= ( n + 1 ); for ( int i = 1 ; i &lt;= n + 1 ; i++ ) for ( int j = 1 ; j &lt;= n ; j++ ) cans[j] += ( dis[i] - tot ) * ( f[i][j] - ans[j] ) / tot; return;&#125;int main() &#123; scanf ( "%d" , &amp;n ); for ( int i = 1 ; i &lt;= n + 1 ; i++ ) for ( int j = 1 ; j &lt;= n ; j++ ) &#123; scanf ( "%lf" , &amp;f[i][j] ); ans[j] += f[i][j]; &#125; for ( int i = 1 ; i &lt;= n ; i++ ) ans[i] /= ( n + 1 ); for ( double T = 10001 ; T &gt;= 0.0000001 ; T *= 0.99995 ) &#123; check (); for ( int j = 1 ; j &lt;= n ; j++ ) ans[j] += cans[j] * T; &#125; for ( int i = 1 ; i &lt;= n ; i++ ) printf ( "%.3lf " , ans[i] ); return 0;&#125; Part3. 模拟退火理解了爬山算法了之后,可以发现爬山算法存在的很显然的一个局限性:只能贪心,而这种在处理一些多峰函数时往往会只找到函数的某个极大值而不是最大值.所以我们就要引入模拟退火这种方法.,那么$What is $模拟退火呢? (以下内容来自WIKI) : 12345模拟退火来自冶金学的专有名词退火。退火是将材料加热后再经特定速率冷却，目的是增大晶粒的体积，并且减少晶格中的缺陷。材料中的原子原来会停留在使内能有局部最小值的位置，加热使能量变大，原子会离开原来位置，而随机在其他位置中移动。退火冷却时速度较慢，使得原子有较多可能可以找到内能比原先更低的位置。模拟退火的原理也和金属退火的原理近似：我们将热力学的理论套用到统计学上，将搜寻空间内每一点想像成空气内的分子；分子的能量，就是它本身的动能；而搜寻空间内的每一点，也像空气分子一样带有“能量”，以表示该点对命题的合适程度。算法先以搜寻空间内一个任意点作起始：每一步先选择一个“邻居”，然后再计算从现有位置到达“邻居”的概率。可以证明，模拟退火算法所得解依概率收敛到全局最优解。 听起来很懵逼是不是qwq..没关系,其实就是如果你通过现在的这个状态,以某种方式得到了另外一个答案时,你不再像爬山算法那样直接转移,而已要像下图: 发生转移之后,随着温度T的不断降低,可以发现$\frac{-\Delta E}{T}$是不断减小的(因为在新状态更劣的情况下,$-\Delta E$一定为负数),那么$e^\frac{-\Delta E}{T}$一定也是不断减小的并且趋向于0.即模拟退火算法在温度较低时退化为爬山算法.这时只能寻找当前的函数极大值,所以怎么调参使得温度$T$较大时转移到正确的峰函数区间是解决问题的关键(但是还是只能靠运气qwq) 一般模拟退火的代码大概框架如下: 123456789101112inline void SA () &#123; for ( double T = StartTemplature ; T &gt;= EndTemplature ; T *= Coolingcoefficient ) &#123; Typename Newans = Getans();//此处Getans为某个获得新答案的函数. Typename delta = ans - Newans; if ( Newans &gt; ans ) //这里假设当值大时答案更优 ans = Newans; else if ( exp ( -delta / T ) &lt; ( double ) rand () % RAND_MAX ) ans = Newans; &#125; return;&#125; 其实为了保证答案的正确性,一般都会跑多次模拟退火从而增加求得最优解的概率.(调参也是个非常痛苦的过程,因为模拟退火比爬山算法更为看脸随机,所以每个参数的小差别可能导致答案的天壤之别.) 例题 [TJOI2010]分金币 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758#include &lt;iostream&gt;#include &lt;cstdio&gt;#include &lt;algorithm&gt;#include &lt;cmath&gt;#include &lt;cstring&gt; #include &lt;ctime&gt;#define int long longconst int N = 1005;inline int read () &#123; int s = 0 , w = 1; char ch = getchar (); while ( ch &gt; '9' || ch &lt; '0' ) &#123; if ( ch == '-' ) w = -1; ch = getchar ();&#125; while ( ch &gt;= '0' &amp;&amp; ch &lt;= '9' ) &#123; s = s * 10 + ch - '0'; ch = getchar ();&#125; return s * w;&#125;int n , ans = 2147483647;int num[N];inline int get () &#123; int sum1 = 0 , sum2 = 0; for ( int i = 1 ; i &lt;= ( n + 1 ) / 2 ; i++ ) sum1 += num[i]; for ( int i = ( n + 1 ) / 2 + 1 ; i &lt;= n ; i++ ) sum2 += num[i]; return abs ( sum1 - sum2 );&#125;inline void SA () &#123; double T = 5000; while ( T &gt;= 1e-10 ) &#123; int l = rand () % n + 1 , r = rand () % n + 1; std :: swap ( num[l] , num[r] ); int sum = get (); if ( sum &lt; ans ) ans = sum; else if ( exp ( ( ans - sum ) / T ) &lt; (double(rand())/RAND_MAX) ) std :: swap ( num[l] , num[r] ); T *= 0.98; &#125; return;&#125;signed main ( void ) &#123; srand ( rand() ); int T = read (); while ( T-- ) &#123; n = read (); for ( int i = 1 ; i &lt;= n ; i++ ) num[i] = read (); for ( int i = 1 ; i &lt;= 100 ; i++ ) SA (); printf ( "%lld\n" , ans ); ans = 2147483647; &#125; return 0;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>玄学</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Noip2018游记]]></title>
    <url>%2F2018%2F11%2F17%2FNoip2018%E6%B8%B8%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[真没想到我能活着苟到写游记的一天$qwq$ Day-1最近几天有点累，早上就不去学校了（然而事实证明这是很正确的抉择）。早上一觉睡到了$8:20$，早上起来想起来$wucstdio$大佬说过立过的$flag$不拔在$Noip$会掉$rp$然后早睡起来就开始肝猪国杀，一直到$10:40$左右重构完了（历时$3$天终于写完了）下午回到学校，发现早上是信心鼓励赛幸好没去23333然后下午+晚上一直在写模板题。（顺便凑出来了$AC520$） Day 0早上教练居然给我们请假不用早来了哎$qwq….$上午开始走，一开始的时候还想在车上背个板子什么的然后SCP真好看又颓了会知乎然后就发现到了$cyyz$了 住宿安排完成了之后居然才$2:30$多一点，然后在宿舍里不知道该干啥。不过感觉$cyyz$的移动信号貌似比$SDSC$的时候快了一点（大雾）然后$wucstdio$给我打电话说楼下有很多大佬，自己迅速下楼去膜神仙。 终于见到了$rqy$姐姐本人了好兴奋$qwq$，不过$rqy$姐姐好像比自己想的稍微内敛了一点。 但是这并改变不了rqy姐姐是人赢的性质据说看见神仙可以rp++,（但是rp貌似被rqy姐姐吸走了QAQ) 晚上全宿舍都在打板子，但是试机的时候$wyxdrqc$和$zyp$大佬还有很多人（包括我）试机的时候线段树都打错了（大雾）。给自己喜欢的人打了个电话，加油qaq… Day 1早上起来，自己冷静了一下，打开题目一看$T1$，哎我为什么$T1$只会$70$分啊….，然后自己又推了1h还是没有推出来，心态当场爆炸qwq…T2当成数论推了半天，然后自己冷静的写了一个乱搞做法，也不知道能得多少分。T3完全不会，打一个直径分滚粗了。 出考场：啊你们怎么都做过原题吗？啊T2是个裸背包吗？啊T3你们都会写70分吗？心态崩了我要妹子QWQ….. 下午心态一直RE中，在宿舍里颓了一下午。不管怎么说第二天都想翻盘。 Day 2第二天睡了一觉，发现心情稍微好了一点。到了考场之后，看到第一题$m=n$我就感觉药丸…. 为什么$Noip$的$T1$要考基环树啊….. 写了个$60$分的树上贪心，然后开始想环上怎么做。然而我很$zz$的没有看数据范围可以$n^2$过，一直在写$O(n)$的做法。然后我就写挂了，自己补了只有环的做法，$72分滚了$。 T2看的时候：啊？读题读了$10mins$确定我不会，然后就决定打表了。 T3：……为什么$Noip$要考$ddp$啊。。。。 出了考场发现大家都说D2不会做当时甚至有些开心。 然后晚上就回去上晚自习了。 一年半的OI一场空，$D1TI$见祖宗说我是再适合不过的了。本来还以为自己能去$PKUWC$,好吧，我还是太$naive$了，感觉自己要与省一擦肩而过….剩下一年自己就养生好了，再来一年起码要拿一个$1=$啊$qwq…..$ 回家之后心态一直RE,,,,不过幸好$wucstdio$大佬能和我谈了谈人生….瞬间感觉$wucstdio$成了我的人生导师qaq…. 以后的路自己就要自己决定了，不过自己决定那些比赛也是要一起参加的qaq… 那些能进入省选的$OIer$们要加油鸭$qaq…$我会一直陪着你们的$@wyxdrqc @wucstdio @lingyuqing$ 你们的$wqyzstql$也要和你们一起努力了。]]></content>
      <categories>
        <category>吹水</category>
      </categories>
      <tags>
        <tag>游记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[考前模板整理]]></title>
    <url>%2F2018%2F11%2F07%2F%E8%80%83%E5%89%8D%E6%A8%A1%E6%9D%BF%E6%95%B4%E7%90%86%2F</url>
    <content type="text"><![CDATA[$Noip$之前在这里整理一波模板….集成了一下所有的$TG$和$PJ$应该会考的模板 PS:所有模板纯属现场手搓，不保证正确性（比如手抖打错字母什么的），如果找到错误请及时告知我qwq 快速排序最基本的板子了吧,$C++$选手表示开心$qaq$。1234567891011121314151617#include &lt;algorithm&gt;#include &lt;cstdio&gt;const int N = 1e5 + 10int n;int num[N];int main ( void ) &#123; scanf ( "%d" , &amp;n ); for ( int i = 1 ; i &lt;= n ; i++ ) scanf ( "%d" , &amp;num[i] ); sort ( num + 1 , num + 1 + n ); for ( int i = 1 ; i &lt;= n ; i++ ) printf ( "%d%c" , num[i] , i == n ? '\n' : ' ' ); return 0;&#125; 并查集12345678910111213141516171819202122232425262728293031323334#include &lt;iostream&gt;#include &lt;cstring&gt;#include &lt;algorithm&gt;#include &lt;cstdio&gt;const int N = 1e5 + 10;int n , m;int find ( int x ) &#123; if ( x != father[x] ) father[x] = find ( father[x] ); return father[x];&#125;int main ( void ) &#123; scanf ( "%d%d" , &amp;n , &amp;m ); for ( int i = 1 ; i &lt;= n ; i++ ) father[i] = i; for ( int i = 1 ; i &lt;= m ; i++ ) &#123; int x , y , z; scanf ( "%d%d%d" , &amp;z , &amp;x , &amp;y ); if ( z == 1 ) &#123; x = find ( x ) , y = find ( y ); father[x] = y; &#125; else if ( z == 2 ) &#123; x = find ( x ) , y = find ( y ); if ( x == y ) puts ( "Y" ); else puts ( "N" ); &#125; &#125; return 0;&#125; 快速幂个人感觉这个还是个挺重要的板子了吧…..12345678910111213141516171819202122#include &lt;cstdio&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;#include &lt;cstring&gt;inline int Fast_Power ( int x , int y ) &#123; int sum = 1; while ( y ) &#123; if ( y &amp; 1 ) sum = sum * x; x = x * x; y &gt;&gt;= 1; &#125; return sum;&#125;int main ( void ) &#123; int n , m; scanf ( "%d%d" , &amp;n , &amp;m ); printf ( "%d\n" , Fast_Power ( n , m ) ); return 0;&#125; 线性筛素数这个其实只是筛素数的话是挺简单的，但是我决定连$\phi$一起筛出来（如果用不到的话就把$phi$数组自动忽略掉就好了）12345678910111213141516171819202122232425262728293031323334353637#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;const int N = 5e5 + 10;int n , cnt;int prime[N] , phi[N];bool flag[N];int main ( void ) &#123; flag[1] = 1; phi[1] = 1; scanf ( "%d" , &amp;n ); for ( int i = 2 ; i &lt;= n ; i++ ) &#123; if ( !flag[i] ) &#123; flag[i] = 1; prime[++cnt] = i; phi[i] = i - 1; &#125; for ( int j = 1 ; j &lt;= cnt &amp;&amp; i * prime[j] &lt;= n ; j++ ) &#123; flag[i * prime[j]] = 1; if ( i % prime[j] == 0 ) &#123; phi[i * prime[j]] = phi[i] * prime[j]; break; &#125; phi[i * prime[j]] = phi[i] * phi[prime[j]]; &#125; &#125; for ( int i = 1 ; i &lt;= cnt ; i++ ) printf ( "%d " , prime[i] ); puts ( "" ); for ( int i = 1 ; i &lt;= n ; i++ ) printf ( "%d " , phi[i] ); return 0;&#125; 【模板】堆又是一个$C++$党的福利$qwq$,直接用$priority_queue$模拟就好啦123456789101112131415161718192021222324252627#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;using std :: priority_queue;int n;priority_queue &lt; int , std :: vector &lt; int &gt; , std :: greater &lt; int &gt; &gt; qu;int main ( void ) &#123; scanf ( "%d" , &amp;n ); for ( int i = 1 ; i &lt;= n ; i++ ) &#123; int opts; scanf ( "%d" , &amp;opts ); if ( opts == 1 ) &#123; int x; scanf ( "%d" , &amp;x ); qu.push ( x ); &#125; else if ( opts == 2 ) printf ( "%d\n" , qu.top () ); else if ( opts == 3 ) qu.pop (); &#125; return 0;&#125; 字符串蛤希其实我个人比较倾向于写自然溢出或者直接随机一个质数$qwq$12345678910111213141516171819202122232425262728293031#include &lt;cstdio&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;#include &lt;cstring&gt;typedef unsigned long long ull;const ull base = 233;const int N = 1e4;const int M = 1e3;int n;char s[N][M];ull has[N];int main ( void ) &#123; scanf ( "%d" , &amp;n ); for ( int i = 1 ; i &lt;= n ; i++ ) scanf ( "%s" , s[i] + 1 ); for ( int i = 1 ; i &lt;= n ; i++ ) &#123; int len = strlen ( s[i] + 1 ); for ( int j = 1 ; j &lt;= len ; j++ ) has[i] = has[i] * base + s[i][j]; &#125; std :: sort ( has + 1 , has + 1 + n ); int ans = 0; for ( int i = 1 ; i &lt;= n ; i++ ) if ( has[i] != has[i + 1] ) ans++; printf ( "%d\n" , ans ); return 0;&#125; 最小生成树不会写$prim$的蒟蒻瑟瑟发抖….123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;const int N = 1e4 + 10;const int M = 2e5 + 10;int n , m;struct Edge &#123; int from; int to; int data;&#125;e[M];int father[N];inline int read () &#123; int s = 0 , w = 1; char ch = getchar (); while ( ch &gt; '9' || ch &lt; '0' ) &#123; if ( ch == '-' ) w = -1; ch = getchar ();&#125; while ( ch &gt;= '0' &amp;&amp; ch &lt;= '9' ) &#123; s = s * 10 + ch - '0'; ch = getchar ();&#125; return s * w;&#125;inline bool cmp ( Edge x , Edge y ) &#123; return x.data &lt; y.data;&#125;int find ( int x ) &#123; if ( x != father[x] ) father[x] = find ( father[x] ); return father[x];&#125;void Union ( int x , int y ) &#123; x = find ( x ) , y = find ( y ); father[x] = y; return;&#125;inline bool Judge ( int x , int y ) &#123; x = find ( x ) , y = find ( y ); return ( x == y ) ? true : false;&#125;int main ( void ) &#123; n = read () , m = read (); for ( int i = 1 ; i &lt;= n ; i++ ) father[i] = i; for ( int i = 1 ; i &lt;= m ; i++ ) &#123; int x = read () , y = read () , z = read (); e[i].from = x; e[i].to = y; e[i].data = z; &#125; std :: sort ( e + 1 , e + 1 + m , cmp ); int NowEdge = 0 , NowVal = 0; for ( int i = 1 ; i &lt;= m ; i++ ) &#123; int l = e[i].from , r = e[i].to; if ( Judge ( l ,r ) ) continue; Union ( l , r ); NowEdge++; NowVal += e[i].data; if ( NowEdge == n - 1 ) break; &#125; if ( NowEdge == n - 1 ) printf ( "%d\n" , NowVal ); else puts ( "orz" ); return 0;&#125; 单源最短路 （有负权边）这张图有负权边，所以只能写某已经死掉的$SPFA$了123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960#include &lt;cstdio&gt;#include &lt;iostream&gt;#include &lt;cstring&gt;#include &lt;algorithm&gt;#include &lt;queue&gt;const int N = 1e4 + 10;const int M = 1e5 + 10;using std :: queue;int n , m , t;struct Edge &#123; int to; int data; int next;&#125;e[M];int head[N] , dis[N];bool inque[N];inline int read () &#123; int s = 0; bool flag = 0; char ch = getchar (); while ( ch &gt; '9' || ch &lt; '0' ) &#123; if ( ch == '0' ) flag = 1; ch = getchar ();&#125; while ( ch &gt;= '0' &amp;&amp; ch &lt;= '9' ) &#123; s = s * 10 + ch - '0'; ch = getchar ();&#125; return ( flag ) ? -s : s;&#125;void Spfa ( int x ) &#123; memset ( dis , 0x3f3f3f3f , sizeof ( dis ) ); inque[x] = 1;dis[x] = 0; qu.push ( x ); while ( !qu.empty () ) &#123; int j = qu.front (); qu.pop (); inque[j] = 0; for ( int i = head[j] ; i ; i = e[i].next ) &#123; int k = e[i].to; if ( dis[k] &gt; dis[j] + e[i].data ) &#123; dis[k] = dis[j] + e[i].data; if ( !inque[k] ) &#123; inque[k] = 1; qu.push ( k ); &#125; &#125; &#125; &#125; return;&#125;int main ( void ) &#123; n = read () , m = read (); for ( int i = 1 ; i &lt;= m ; i++ ) &#123; int x = read () , y = read () , z = read (); add ( x , y , z ); &#125; Spfa ( 1 ); for ( int i = 1 ; i &lt;= n ; i++ ) printf ( "%d%c" , dis[i] == 0x3f3f3f3f ? 2147483647 : dis[i] , i == n ? '\n' : ' ' ); return 0;&#125; 单源最短路 （无负权边）在题目明确说没有负权边的情况下，跑堆优化的$Dijkstra$一定是最稳的其实代码长得都差不多123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172#include &lt;queue&gt;#include &lt;iostream&gt;#include &lt;cstring&gt;#include &lt;algorithm&gt;#include &lt;cstdio&gt;#define F(i,a,b) for ( int i = a ; i &lt;= b ; i++ )#define MP std::make_pair#define se second#define fi firsttypedef std::pair &lt; int , int &gt; pll;const int N = 1e5 + 10; const int M = 4e5 + 20;std::priority_queue &lt; pll , std::vector &lt; pll &gt; , std::greater &lt; pll &gt; &gt; qu;int n , m , s , t;struct Edge &#123; int to; int data; int next;&#125;e[M];int head[N] , dis[N];bool inque[N];inline int read () &#123; int s = 0 , w = 1; char ch = getchar (); while ( ch &gt; '9' || ch &lt; '0' ) &#123; if ( ch == '-' ) w = -1; ch = getchar ();&#125; while ( ch &gt;= '0' &amp;&amp; ch &lt;= '9' ) &#123; s = s * 10 + ch - '0'; ch = getchar ();&#125; return s * w;&#125;void add ( int x , int y , int z ) &#123; e[++t].to = y; e[t].data = z; e[t].next = head[x]; head[x] = t; return;&#125;inline void Heap_Dijkstra ( int x ) &#123; memset ( dis , 0x3f3f3f3f , sizeof ( dis ) ); dis[x] = 0; qu.push ( MP ( dis[x] , x ) ); while ( !qu.empty () ) &#123; int j = qu.top ().se; qu.pop (); if ( inque[j] ) continue; inque[j] = 1; for ( int i = head[j] ; i ; i = e[i].next ) &#123; int k = e[i].to; if ( dis[k] &gt; dis[j] + e[i].data ) &#123; dis[k] = dis[j] + e[i].data; qu.push ( MP ( dis[k] , k ) ); &#125; &#125; &#125; return;&#125;int main ( void ) &#123; n = read (); m = read (); s = read (); F ( i , 1 , m ) &#123; int x = read () , y = read () , z = read (); add ( x , y , z ); &#125; Heap_Dijkstra ( s ); F ( i , 1 , n ) printf ( "%d " , dis[i] ); return 0;&#125; 就先整理这些吧…留个坑等着填….]]></content>
      <categories>
        <category>吹水</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[[SDOI2010] 所驼门王的宝藏]]></title>
    <url>%2F2018%2F11%2F05%2Fi-t%2F</url>
    <content type="text"><![CDATA[一道思维难度很简单，代码实现难度非常$mmp$的毒瘤题…..(这很$SDOI…..$) 题目连接：SDOI2010 所驼门王的宝藏 好，我们直接跳过题目背景。 然后我们会发现，如果这道题能把图建出来，那么直接一遍$DAG$上$DP$就过了。 蒽，这不是$sb$题吗？ 然后让我们看数据范围：$1&lt;=n&lt;=1000000$ 笑容逐渐消失 但是我们考虑一下，既然我们要建一张$DAG$。那么，我们完全没有必要对所有的点进行两两连边。我们只需要对每一行和每一列进行连边，把他们连成一个环，这样的话，建边复杂度就会从$O(n^2)$变成$O(n)$了。 然后对于自由门的情况，对不起，我不知道怎么优化，所以我决定暴力建边。 （分析可以发现即使全是自由门，你暴力建边也不会$TLE$） 代码如下： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197#include &lt;cstdio&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;#include &lt;cstring&gt;#include &lt;stack&gt;#include &lt;map&gt;const int N = 1e6 + 10;const int M = 5e6 + 10;using std :: map;using std :: stack;int ans = -0x3f3f3f3f;int n , r , c , t;int dx[] = &#123; 0 , 0 , 1 , 1 , 1 , -1 , -1 , -1 &#125;;int dy[] = &#123; 1 , -1 , 1 , 0 , -1 , 1 , 0 , -1 &#125;;struct Node &#123; int x; int y; int opts; int id;&#125;p[N];struct Edge &#123; int from; int to; int next; &#125;e[M];int idx , Bcnt;int head[N] , dfn[N] , low[N];int Belong[N] , size[N] , f[N];int degree[N];bool instack[N];map &lt; std :: pair &lt; int , int &gt; , int &gt; mp;map &lt; std :: pair &lt; int , int &gt; , int &gt; mat;stack &lt; int &gt; st;inline int read () &#123; int s = 0 , w = 1; char ch = getchar (); while ( ch &gt; '9' || ch &lt; '0' ) &#123; if ( ch == '-' ) w = -1; ch = getchar ();&#125; while ( ch &gt;= '0' &amp;&amp; ch &lt;= '9' ) &#123; s = s * 10 + ch - '0'; ch = getchar ();&#125; return s * w;&#125;template &lt; class T &gt;inline T min ( T x , T y ) &#123; return x &lt; y ? x : y;&#125;template &lt; class T &gt;inline T max ( T x , T y ) &#123; return x &gt; y ? x : y;&#125;inline void add ( int x , int y ) &#123; e[++t].to = y; e[t].from = x; e[t].next = head[x]; head[x] = t; return;&#125;bool cmp1 ( Node a , Node b ) &#123; if ( a.x != b.x ) return a.x &lt; b.x; if ( a.opts == 1 ) return 1; if ( b .opts == 1 ) return 0; return a.y &lt; b.y;&#125;bool cmp2 ( Node a , Node b ) &#123; if ( a.y != b.y ) return a.y &lt; b.y; if ( a.opts == 2 ) return 1; if ( b.opts == 2 ) return 0; return a.x &lt; b.x;&#125;void Tarjan ( int cur ) &#123; dfn[cur] = low[cur] = ++idx; instack[cur] = 1; st.push ( cur ); for ( int i = head[cur] ; i ; i = e[i].next ) &#123; int j = e[i].to; if ( !dfn[j] ) &#123; Tarjan ( j ); low[cur] = min ( low[cur] , low[j] ); &#125; else if ( instack[j] ) low[cur] = min ( low[cur] , dfn[j] ); &#125; int k; if ( low[cur] == dfn[cur] ) &#123; Bcnt++; do &#123; k = st.top ();; st.pop (); instack[k] = 0; Belong[k] = Bcnt; size[Bcnt]++; &#125; while ( k != cur ); &#125; return;&#125;void dfs ( int cur , int father ) &#123; if ( f[cur] &gt; size[cur] ) return; f[cur] = size[cur]; for ( int i = head[cur] ; i ; i = e[i].next ) &#123; int j = e[i].to; if ( j == father ) continue; dfs ( j , cur ); f[cur] = max ( f[cur] , f[j] + size[cur] ); &#125; return;&#125;int main ( void ) &#123; n = read () , r = read () , c = read (); for ( int i = 1 ; i &lt;= n ; i++ ) &#123; p[i].x = read (); p[i].y = read (); p[i].opts = read (); p[i].id = i; mp[std::make_pair ( p[i].x , p[i].y )] = i; &#125; std :: sort ( p + 1 , p + n + 1 , cmp1 ); int first = 1 , last = 1; for ( int i = 1 ; i &lt;= n ; i++ ) &#123; if ( p[i].x != p[i + 1].x ) &#123; if ( first != last ) add ( p[last].id , p[first].id ); last = first = i + 1; &#125; else &#123; if ( p[last].opts == 1 ) add ( p[last].id , p[i + 1].id ); if ( p[i + 1].opts == 1 ) last = i + 1; if ( p[first].opts != 1 ) last = first = i + 1; &#125; &#125; first = last = 1; std :: sort ( p + 1 , p + 1 + n , cmp2 ); for ( int i = 1 ; i &lt;= n ; i++ ) &#123; if ( p[i].y != p[i + 1].y ) &#123; if ( first != last ) add ( p[last].id , p[first].id ); last = first = i + 1; &#125; else &#123; if ( p[last].opts == 2 ) add ( p[last].id , p[i + 1].id ); if ( p[i + 1].opts == 2 ) last = i + 1; if ( p[first].opts != 2 ) last = first = i + 1; &#125; &#125; //printf ( "%d\n" , t ); for ( int i = 1 ; i &lt;= n ; i++ ) if ( p[i].opts == 3 ) for ( int j = 0 ; j &lt; 8 ; j++ ) &#123; int xx = p[i].x + dx[j]; int yy = p[i].y + dy[j]; if ( mp[std :: pair &lt; int , int &gt; ( xx , yy )] ) add ( p[i].id , mp[std :: pair &lt; int , int &gt; ( xx , yy )] ); &#125; // printf ( "%d\n" , t ); // for ( int i = 1 ; i &lt;= t ; i++ ) // printf ( "%d %d\n" , e[i].from , e[i].to ); for ( int i = 1 ; i &lt;= n ; i++ ) if ( !Belong[i] ) Tarjan ( i ); for ( int i = 1 ; i &lt;= n ; i++ ) for ( int j = head[i] ; j ; j = e[j].next ) &#123; int k = e[j].to; if ( Belong[i] != Belong[k] ) mat[std :: make_pair ( Belong[i] , Belong[k] )] = 1; &#125; t = 0; memset ( head, 0 , sizeof ( head ) ); for ( auto it = mat.begin () ; it != mat.end() ; it++ ) &#123; add ( it -&gt; first.first , it -&gt; first.second ); degree[it -&gt; first.second]++; &#125; // for ( int i = 1 ; i &lt;= Bcnt ; i++ ) // printf ( "%d " , degree[i] ); for ( int i = 1 ; i &lt;= Bcnt ; i++ ) if ( degree[i] == 0 ) &#123; dfs ( i , 0 ); ans = max ( ans , f[i] ); &#125; printf ( "%d\n" , ans ); return 0;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>图论</tag>
        <tag>DAG</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[qbxt D2T2 Code 题解]]></title>
    <url>%2F2018%2F11%2F04%2F%E9%A2%98%E8%A7%A3%2F</url>
    <content type="text"><![CDATA[看了一眼之后完全就是一脸懵逼的题…. 首先先读题$qaq$…..题目的大致意思就是给你一个矩阵，然后问你把这个矩阵横竖填成异或值为$1$的矩阵的方案数。 很明显，这道题没有什么枚举上界，所以你想直接枚举的话是不太可能的。那么我们怎么办呢$?$ 我也不知道 既然枚举补星，那么我们就用一个比较常见的正难则反的思想。对于这道题，我们可以容斥的去做 那么，首先，所有的方案是什么呢？ All = 2^{n*m}为什么呢？一共有n+m个校验码，我们按位数考虑，在只有1位的情况下，那么这一位可能是$0$或者$1$。那么就是$(2^n)^m$的方案数了。 然后我们考虑对于每一位删掉不合法的情况：因为异或起来是$1$，那么对于没一行或者每一列，$1$的个数总是奇数。那么我们就可以根据这个东西来进行删除不合法状态的操作了 最后统计出来答案 我们发现，因为有$k$位，而我们是按位考虑的。所以我们最后要取答案的$k$次方。 代码如下：12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152#include &lt;bits/stdc++.h&gt;#define int long longconst int N = 505;const int MOD = 1e9 + 7;int c[N][N];int n , m , k , t , ans;inline int read () &#123; int s = 0 , w = 1; char ch = getchar (); while ( ch &gt; '9' || ch &lt; '0' ) &#123; if ( ch == '-' ) w = -1; ch = getchar ();&#125; while ( ch &gt;= '0' &amp;&amp; ch &lt;= '9' ) &#123; s = s * 10 + ch - '0'; ch = getchar ();&#125; return s * w;&#125;int Fast_Power ( int x , int y ) &#123; int sum = 1; while ( y ) &#123; if ( y &amp; 1 ) sum = sum * x % MOD; x = x * x % MOD; y &gt;&gt;= 1; &#125; return sum;&#125;signed main() &#123; for ( int i = 1 ; i &lt;= 500 ; i++ ) c[i][i] = c[i][0]=1; for ( int i = 2 ; i &lt;= 500 ; i++ ) for ( int j = 1 ; j &lt; i ; j++ ) c[i][j] = ( c[i - 1][j] + c[i - 1][j - 1] ) %MOD; t = read(); while ( t-- ) &#123; n = read () , m = read() , k = read (); int ans = Fast_Power ( 2 , n * m ); for ( int i = 0 ; i &lt;= n ; i++ ) for ( int j = 0 ; j &lt;= m ; j++ ) &#123; if ( i == 0 &amp;&amp; j == 0 ) continue; if ( ( i + j ) &amp; 1 ) ans = ( ans + MOD - Fast_Power ( 2 , ( n - i ) * ( m - j ) ) * c[n][i] % MOD * c[m][j] % MOD ) % MOD; else ans = ( ans + Fast_Power ( 2 , ( n - i ) * ( m - j ) ) * c[n][i] % MOD * c[m][j] % MOD ) % MOD; &#125; ans = Fast_Power ( ans , k ); printf ( "%lld\n" , ans ); &#125; return 0;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>思维</tag>
        <tag>数学</tag>
        <tag>容斥原理</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[[题解] Noip2016D1T3 换教室]]></title>
    <url>%2F2018%2F11%2F02%2F%E6%8D%A2%E6%95%99%E5%AE%A4%E9%A2%98%E8%A7%A3%2F</url>
    <content type="text"><![CDATA[一道被天天爱跑步抢尽了风头的最没有排面的$T3…..$说实话，这道题我刚开始是不会的，然后我看了L_Y_T大爷的$Blog$之后才恍然大悟（$Blog$写的很好，赞一个）先安利完$Blog$再说L_Y_T大爷的Blog 看了$Blog$之后,突然发现，这东西要求的概率知识点我都是会的，只是DP式子想不出来而已$qaq…$(我好菜啊) 因为题目中说，我们最多可以换$m$次，而题目中说的你只能在开始之前选择方案的说法完全没用，毕竟谁会知道你是预测了未来呢（逃 然后，因为有$n$个课程，所以我们设$f[i][j][0/1]$来表示第i个点,第j次换,换不换 然后我们分情况来表示转移：每个教室分为两种情况 1.换2.不换这个是挺平常的然后复杂在换与不换的分情况上了~~~不换:不换是分为这样几种情况:上一个也不换 , 上一个换 且成功,上一个换但失败同理,换也有好多种情况:上一个点不换,这个点失败上一个点不换,这个点成功上一个点换成功,这个点成功上一个点换成功,这个点失败上一个点换失败,这个点成功上一个点换失败,这个点也失败 然后方程好复杂的，是：1234567891011121314151617181920212223242526 上一点不换:f[i-1][j-1][0]这一点换1.失败消耗体力: dis[c[i-1]][c[i]] 分析: 由于上一个点不换,所以上一个点一定是在c[]中的;假定这次失败,那么这次也只能去c[]中的教室;2.成功消耗体力: dis[c[i-1]][d[i]]分析: 由于上一个点不换,所以上一个点一定是在c[]中的;假定这次成功,那么这次能去d[]中的教室;那么,失败的概率是1-k[],成功的概率是k[].综上,这种情况就是:f[i-1][j-1][0]+dis[c[i-1]][d[i]]*k[i]+dis[c[i-1]][c[i]]*(1.0-k[i]) 同理,上一点换,这一点换1.上一点失败,这一点失败(以后省一点哈)消耗体力: dis[c[i-1]][c[i]]概率:都失败这运气也没谁了!!!! 概率:(1.0-k[i-1])*(1.0-k[i])2.失败,成功消耗体力: dis[c[i-1]][d[i]]概率 : (1.0-k[i-1])*k[i]3.成功,失败消耗体力 : dis[d[i-1]][c[i]]概率: k[i-1]*(1.0-k[i])4.成功,成功消耗体力: dis[d[i-1]][d[i]] 概率: k[i-1]*k[i] 然后对于不换的方程：12f[i][j][0] = min(f[i-1][j][0]+dis[c[i-1]][c[i]],f[i-1][j][1]+dis[c[i-1]][c[i]]*(1.0-k[i-1])+dis[d[i-1]][c[i]]*k[i-1]) ; 之前需要Floyd预处理一下，然后就好啦(这道题的确比天天爱跑步简单23333)123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;const int N = 2050;const int M = 350;int n , m , v , e;int c[N] , d[N] ;double G[M][M] , f[N][N][2];double k[N];template &lt; class T &gt;inline T min ( T x , T y ) &#123; return x &lt; y ? x : y;&#125;int main ( void ) &#123; scanf ( "%d%d%d%d" , &amp;n , &amp;m , &amp;v , &amp;e ); for ( int i = 1 ; i &lt;= n ; i++ ) scanf ( "%d" , &amp;c[i] ); for ( int i = 1 ; i &lt;= n ; i++ ) scanf ( "%d" , &amp;d[i] ); for ( int i = 1 ; i &lt;= n ; i++ ) scanf ( "%lf" , &amp;k[i] ); for ( int i = 1 ; i &lt;= v ; i++ ) for ( int j = 1 ; j &lt;= v ; j++ ) G[i][j] = 0x3f3f3f3f; for ( int i = 1 ; i &lt;= n ; i++ ) for ( int j = 0 ; j &lt;= m ; j++ ) f[i][j][0] = f[i][j][1] = 0x3f3f3f3f; for ( int i = 1 ; i &lt;= v ; i++ ) G[i][i] = 0 ; for ( int i = 1 ; i &lt;= e ; i++ ) &#123; int x , y; double z; scanf ( "%d%d%lf" , &amp;x , &amp;y , &amp;z ); if ( G[x][y] &gt; z ) G[x][y] = G[y][x] = z; &#125; for ( int l = 1 ; l &lt;= v ; l++ ) for ( int i = 1 ; i &lt;= v ; i++ ) for ( int j = 1 ; j &lt;= v ; j++ ) G[i][j] = min ( G[i][j] , G[i][l] + G[l][j] ); f[1][0][0] = f[1][1][1] = 0.0000; for ( int i = 2 ; i &lt;= n ; i++ ) for ( int j = 0 ; j &lt;= min ( i , m ) ; j++ ) &#123; f[i][j][0] = min ( f[i - 1][j][0] + G[c[i - 1]][c[i]] , f[i - 1][j][1] + G[c[i - 1]][c[i]] * ( 1.0 - k[i - 1] ) + G[d[i - 1]][c[i]] * k[i - 1] ); if(j &gt;= 1) &#123; f[i][j][1] = min ( f[i - 1][j - 1][0] + G[c[i - 1]][d[i]] * k[i] + G[c[i - 1]][c[i]] * ( 1.0 - k[i] ) , f[i - 1][j - 1][1] + G[c[i - 1]][c[i]] * ( 1.0 - k[i - 1] ) * ( 1.0 - k[i] ) + G[c[i - 1]][d[i]] *k[i] * ( 1.0 - k[i - 1] ) + G[d[i - 1]][c[i]] * k[i - 1]* ( 1.0 - k[i] ) + G[d[i - 1]][d[i]] * k[i - 1] * k[i] ); &#125; &#125; double ans = 0x7fffffff; for ( int i = 0 ; i &lt;= m ; i++ ) for ( int j = 0 ; j &lt;= 1 ; j++ ) ans = min ( ans , f[n][i][j] ); printf ( "%.2lf\n" , ans ) ; return 0 ;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>概率期望</tag>
        <tag>DP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[概率入门]]></title>
    <url>%2F2018%2F11%2F02%2F%E6%A6%82%E7%8E%87%E5%85%A5%E9%97%A8%2F</url>
    <content type="text"><![CDATA[其实这道初赛题是我第一次做的概率题 我们来看一眼这道毒瘤题： 题面其实已经很清楚了，我们可以发现，当这个青蛙在第$1$块石头时，那么这只青蛙完全可以不用跳，我们设$f(k)$表示这只青蛙在$k$号荷叶上，期望需要$f(k)$次跳到$1$号荷叶，那么我们有： f(1)=0我们接着来考虑当这只青蛙在$2$号荷叶时的情况，它可以跳到$1$号和$2$号荷叶，当它跳到$1$号荷叶时，它完成了任务，跳了一步。当它跳到$2$号时，它还有$f(2)$步，因为每一次跳跃时，跳跃到每一个荷叶上的几率是相等的，所以我们有： f(2)=[1+(1+f(2))]/2同理，我们可以得到： f(3)=[1+(1+f(2))+(1+f(3))]/3推广到一般形式则有: f(k)=[\sum_{i=1}^k{f(i)+1}]/k我们化简一下，有： f(k)=1+\frac {1}{k}\sum_{i=1}^kf(i) 我们看到这个式子：$f(k)=1+\frac {1}{k}\sum_{i=1}^kf(i)$ 当$i==k$的时候,我们会发现式子里出现了一个$f(k)$….. 这咋求啊 我们展开这个式子，会发现原来的式子等价于： f(k)=1+\frac {1}{k}\sum_{i=1}^{k-1}f(i)+\frac 1kf(k)这时候如果把$f(k)$看作一个未知数的话，我们可以发现$f(k)$的这一项是可以合并的。但是我们先两边同乘一个$k$，把分母去掉，就会有： k*f(k)=k+\sum_{i=1}^{k-1}f(i)+f(k)这样答案就很显然了，合并掉等式两边相等的$f(k)$，会得到： (k-1)*f(k)=k+\sum_{i=1}^{k-1}f(i)最后，两边同除$(k-1)$，有最后答案上的公式： f(k)=\frac{k}{k-1}(1+\frac {\sum_{i=1}^{k-1}f(i)}{k-1})通过这个式子计算可以得到$f(5)=\frac{37}{12}$,也就是答案 做完了QAQ(写Markdown好累啊qwq…)]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>概率期望</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[[POI2015]WIL-Wilcze题解]]></title>
    <url>%2F2018%2F11%2F02%2FPOI2015-WIL-Wilcze%E9%A2%98%E8%A7%A3%2F</url>
    <content type="text"><![CDATA[其实这本来是$QBXT$的$T2$，但是由于毒瘤$zhw$跑得快（雾），导致我们发现这是某$poi$原题。 首先看题面:题目链接 详细读了一遍之后，其实对于这道题，我的第一反应是贪心（也许是因为我太菜了）。然后打了一遍，小样例过了，然后被大样例$hack$。 之后我又用命分析了一下。可以发现，因为题目中保证每个数的值全部$&gt;=0$，即每个数都是正整数。所以我们与其选长度不到$d$的区间删除，不如直接选择长度为$d$的区间删除。 那么在一段长度已知的序列中，长度为$d$的子序列个数是已知的，那么我们就可以预处理出每一段长度为$d$的子序列。然后我们又发现，题目中要求区间的长度不超过p，那么我们很明显的可以想到尺取法。 然后我们就可以用单调队列来维护我们预处理出的这些长度为$d$的子序列。然后对于区间长度取$max$就是答案了。 最后怒斥一波出原题的出题人$qaq$….(虽然$zhw$很帅) 代码： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950#include&lt;cstdio&gt;#include&lt;deque&gt;typedef long long ll;using std::deque;const ll N=2000010;ll n,p,d;ll a[N];ll sum[N];ll hea[N];struct Node&#123; ll pos,val; Node(ll pos,ll val):pos(pos),val(val)&#123;&#125; Node()&#123;&#125;&#125;;inline void read(ll &amp;x)&#123; ll s=0,w=1; char ch=getchar(); while(ch&gt;'9'||ch&lt;'0')&#123;if(ch=='-')w=-1;ch=getchar();&#125; while(ch&gt;='0'&amp;&amp;ch&lt;='9')&#123;s=s*10+ch-'0';ch=getchar();&#125; x=s*w; return;&#125;deque&lt;Node&gt;q;int main()&#123; read(n);read(p);read(d); for(int i=1;i&lt;=n;i++)read(a[i]),sum[i]=sum[i-1]+a[i]; for(int i=1;i&lt;=n-d;i++) hea[i]=sum[i+d]-sum[i]; for(int i=n-d+1;i&lt;=n;i++) hea[i]=sum[n]-sum[i]; ll ans=0; int l=0; for(int i=d+1;i&lt;=n;i++) &#123; while(!q.empty()&amp;&amp;q.back().val&lt;hea[i-d])q.pop_back(); q.push_back(Node(i-d,hea[i-d])); while(l&lt;i-d&amp;&amp;sum[i]-sum[l]-q.front().val&gt;p) &#123; l++; while(l&gt;q.front().pos)q.pop_front(); &#125; ans=std::max(ans,(ll)i-l); &#125; printf("%lld",ans); return 0;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>单调队列</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[复赛冲刺Day1R1-Color题解]]></title>
    <url>%2F2018%2F11%2F01%2F%E5%A4%8D%E8%B5%9B%E5%86%B2%E5%88%BADay1R1-Colory%E9%A2%98%E8%A7%A3%2F</url>
    <content type="text"><![CDATA[这道题是考试时的$T2$，我感觉这道题出的特别好（虽然当时并不会做 首先看题目:$emmmmm…..$什么鬼啊这个题是$QAQ$ 当时直接一脸懵逼，然后只会写2^n 枚举每一种填充方式，然后再检测的方法…然而这道题这么做只有10分啊$qaq….$ 然后赛后题解告诉我：这题TM是个欧拉回路！！！！当时我就懵逼了….然后当dalao们给我把这道题讲明白了之后，我才发现这道题思路的奇妙。 首先，我们发现，对于一个点，它对应着一个横坐标和一个纵坐标。蒽….一个点对应着两个数值，这个时候我们应该想到什么？二分图？对了，这东西还真的就是要你用二分图的思想来建图….(心态崩了我要妹子$QAQ$) 我们建图，然后我们发现，因为一个点对应着一个横坐标和一个纵坐标，那么我们想到：在二分图中，每一条边也是对应着两种点。那么受到这样的启发，我们就可以建图了：我们把横坐标和纵坐标分别看成一种点，然后将题目中给你的点看成这张图上的边，那么因为题目中要求：黑点和白点的绝对值差不大于1…..，那么我们能想到什么呢？我们要对这些边进行黑白染色，所以我们要一个点出发，一直走一条欧拉回路，这样能走遍所有的边。 但是这样做，我们会发现一个问题：只有$subtask4$的$30$分数据告诉你是偶数。而存在欧拉回路的图的特点是什么呢？每个点的度数都是偶数，那么当点的度数是奇数的时候，我们怎么办呢？ 我在这里选择了度数为奇数的点向一个虚拟节点连边，然后当所有点的度数都是偶数时，这时候没有其他点向这个点连边所以这时候这个虚拟节点对答案没有影响。 然后，我们就直接对边进行染色就可以了。 我只想说，这道题出的真的好，佩服出题人。 代码：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt; const int N = 5e5 + 10; struct Data &#123; int v; int p;&#125;data[N];struct Edge &#123; int to; int next;&#125;e[N &lt;&lt; 1];int n , m , t = 1 , num;int head[N] , d[N];int x[N] , y[N] , ans[N];bool flag[N]; inline int read () &#123; int s = 0 , w = 1; char ch = getchar (); while ( ch &gt; '9' || ch &lt; '0' ) &#123; if ( ch == '-' ) w = -1; ch = getchar ();&#125; while ( ch &gt;= '0' &amp;&amp; ch &lt;= '9' ) &#123; s = s * 10 + ch - '0'; ch = getchar ();&#125; return s * w;&#125;inline void add ( int x , int y ) &#123; e[++t].to = y; e[t].next = head[x]; head[x] = t; return;&#125;inline bool cmp ( Data x , Data y ) &#123; return x.v&lt;y.v;&#125;void lisanhua () &#123; for ( int i = 1 ; i &lt;= n ; i++ ) &#123; data[i].v = x[i]; data[i].p = i; &#125; std :: sort ( data + 1 , data + 1 + n , cmp ); data[0].v = -1; for ( int i = 1 ; i &lt;= n ; i++ ) &#123; if ( data[i].v != data[i - 1].v ) num++; x[data[i].p] = num; &#125; for ( int i = 1 ; i &lt;= n ; i++ ) &#123; data[i].v = y[i]; data[i].p = i; &#125; std :: sort ( data + 1 , data + 1 + n , cmp ); data[0].v = -1; for ( int i = 1 ; i &lt;= n ; i++ ) &#123; if ( data[i].v != data[i - 1].v ) num++; y[data[i].p] = num; &#125; return;&#125;void dfs ( int cur , bool last ) &#123; for ( int i = head[cur] ; i ; i = e[i].next ) &#123; if ( flag[i &gt;&gt; 1] ) continue; int j = e[i].to; flag[i &gt;&gt; 1] = 1; d[cur]--; d[j]--; ans[i &gt;&gt; 1] = !last; dfs ( j , !last ); &#125; return;&#125; int main ( void ) &#123; n = read (); for ( int i = 1 ; i &lt;= n ; i++ ) &#123; x[i] = read (); y[i] = read (); &#125; lisanhua(); for ( int i = 1 ; i &lt;= n ; i++ ) &#123; d[x[i]]++; d[y[i]]++; add ( x[i] , y[i] ); add ( y[i] , x[i] ); &#125; for ( int i = 1 ; i &lt;= num ; i++ ) if ( d[i] &amp; 1 ) &#123; d[i]++; d[num + 1]++; add ( i , num + 1 ); add ( num + 1 , i ); &#125; num++; memset ( ans , -1 , sizeof ( ans ) ); for ( int i = 1 ; i &lt;= num ; i++ ) while ( d[i] ) dfs ( i , 1 ); for ( int i = 1 ; i &lt;= n ; i++ ) printf ( "%d%c" , ans[i] , i == n ? '\n' : ' ' ); return 0;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>模拟赛题解</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[复赛冲刺Day1R1-Count题解]]></title>
    <url>%2F2018%2F11%2F01%2FqbxtD1T1%E9%A2%98%E8%A7%A3%2F</url>
    <content type="text"><![CDATA[其实我感觉这道数论题还是挺简单的（虽然我不会） 这道数论题，我初看的时候是挺一脸懵逼的，然后据$wucstdio$大爷提供的思路，我们可以发现：题意求的是$x$,$y$在$mod P$下的逆元，存在解的条件是$gcd(x,p)==1$，即x,p互质。所以由题解有设 1 到 P − 1 中与 P 互质的数有 s 个，考虑这 s 个数与它们的逆元组成的二元组，这些二元组一定符合条件，那么只要考虑去重的问题 所以我们只需要知道从$1$到$n$中和$n$互质的数的个数这个东西是什么呢？这个东西很明显是$phi$函数。所以我们只需要求出$\phi(p)$，再加上$x^2\equiv1\pmod{p}$的数，最后除$2$就好了。 代码：123456789101112131415161718192021222324252627282930313233343536#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;const int N = 1e7 + 10;int n;int tot , prime[N] , phi[N];bool flag[N];int main ( void ) &#123; scanf ( "%d" , &amp;n ); flag[1] = 1; phi[1] = 1; for ( int i = 2 ; i &lt;= n ; i++ ) &#123; if ( !flag[i] ) &#123; prime[++tot] = i; phi[i] = i - 1; &#125; for ( int j = 1 ; j &lt;= tot &amp;&amp; i * prime[j] &lt;= n ; j++ ) &#123; flag[i * prime[j]] = 1; if ( i % prime[j] == 0 ) &#123; phi[i * prime[j]] = phi[i] *prime[j]; break; &#125; phi[i * prime[j]] = phi[i] * phi[prime[j]]; &#125; &#125; long long ans = phi[n]; for ( long long i = 1 ; i &lt;= n ; i++ ) if ( i * i % n == 1 ) ans++; printf ( "%lld\n" , ( long long ) ( ans ) / 2 ); return 0;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>模拟赛题解</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[A*学习笔记]]></title>
    <url>%2F2018%2F10%2F19%2FA-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[例题：$LuoguP2324$:骑士精神 $A*$嘛，很早时候就听说过，貌似是一种很神奇的算法。听长者讲过一遍，一直都想自己打一遍。但是一直没机会。所以来自己写一遍就好啦。 $A*$的重点就是一个叫做估价函数的东西，但是这个叫估价函数的东西你必须要好好写，不然你会搜出来$WA$的好成绩对于这道题，我就是将现在的棋盘和目标棋盘不同棋子数的差当作估价函数（其实是正确的)。然后，我们就可以加一个类似于剪枝的东西：如果现在的步数$+$估价函数估计的值$&gt;$现在的$max$，直接$return$就好。剩下的东西就是个大爆搜了， 以下是代码： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990#include &lt;cstdio&gt;#include &lt;iostream&gt;#include &lt;cstring&gt;#include &lt;cstring&gt;#include &lt;algorithm&gt;const int goal[7][7] = &#123; &#123; 0 , 0 , 0 , 0 , 0 , 0 &#125;, &#123; 0 , 1 , 1 , 1 , 1 , 1 &#125;, &#123; 0 , 0 , 1 , 1 , 1 , 1 &#125;, &#123; 0 , 0 , 0 , 2 , 1 , 1 &#125;, &#123; 0 , 0 , 0 , 0 , 0 , 1 &#125;, &#123; 0 , 0 , 0 , 0 , 0 , 0 &#125;&#125;;char mp[6][6];int now[6][6];bool flag;int dx[] = &#123; 0 , 1 , 1 , -1 , -1 , 2 , 2 , -2 , -2 &#125;;int dy[] = &#123; 0 , 2 , -2 , 2 , -2 , 1 , -1 , 1 , -1 &#125;;inline int calcu () &#123; int tmp = 0; for ( int i = 1 ; i &lt;= 5 ; i++ ) for ( int j = 1 ; j &lt;= 5 ; j++ ) &#123; if ( now[i][j] != goal[i][j] ) tmp++; &#125; return tmp;&#125;inline void swap ( int &amp;x , int &amp;y ) &#123; int t = x; x = y; y = t; return;&#125;void A_Star ( int x , int y , int dep , int MaxStep ) &#123; if ( flag ) return; if ( dep == MaxStep ) &#123; if ( calcu () == 0 ) &#123; flag = 1; printf ( "%d\n" , MaxStep ); return; &#125; return; &#125; for ( int i = 1 ; i &lt;= 8 ; i++ ) &#123; int xx = x + dx[i]; int yy = y + dy[i]; if ( xx &gt; 5 || xx &lt; 1 || yy &gt; 5 || yy &lt; 1 ) continue; swap ( now[x][y] , now[xx][yy] ); if ( calcu () + dep &lt;= MaxStep ) A_Star ( xx , yy , dep + 1 , MaxStep ); swap ( now[x][y] , now[xx][yy] ); &#125; return;&#125;int main ( void ) &#123; int ttt; scanf ( "%d" , &amp;ttt ); while ( ttt-- ) &#123; flag = 0; for ( int i = 1 ; i &lt;= 5 ; i++ ) scanf ( "%s" , mp[i] + 1 ); int st_x , st_y; for ( int i = 1 ; i &lt;= 5 ; i++ ) for ( int j = 1 ; j &lt;= 5 ; j++ ) if ( mp[i][j] == '*' ) &#123; st_x = i; st_y = j; now[i][j] = 2; &#125; else now[i][j] = mp[i][j] - '0'; if ( calcu () == 0 ) &#123; puts ( "0" ); return 0; &#125; for ( int i = 1 ; i &lt;= 15 ; i++ ) if ( !flag ) A_Star ( st_x , st_y , 0 , i ); if ( !flag ) puts ( "-1" ); &#125; return 0;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>玄学</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[wucstdio的毒瘤模拟赛]]></title>
    <url>%2F2018%2F10%2F18%2Fwucstdio%E7%9A%84%E6%AF%92%E7%98%A4%E6%A8%A1%E6%8B%9F%E8%B5%9B%2F</url>
    <content type="text"><![CDATA[$wucstdio$大爷的Flag还是没有倒…. T1: 反正我刚开始对这道题是完全没有什么信心的qaq（才不会告诉你我直接去看的$T2$） 考虑$50$分的情况：一条链。所以就是一个等差数列了qwq 考虑剩余的正解，我们可以把每一步的期望值当成这棵树的权值，然后因为从上向下和从下向上的期望值可能不太一样，所以我们需要两个函数来表示：（相当于两条边）。 我们设$f(x) g(x)$分别表示从下向上和从上向下的情况，所以我们考虑求出$f(x)$时，我们要考虑以下情况： 直接走到这个节点的父节点，所以这种情况下，对这个节点对答案的贡献就是$\frac {1}{d[x]}了$ 还有一种情况就是这个节点先跳到他的儿子，再跳回这个节点，再跳过去。这个时候，因为我们需要一步来跳过去，所以这种情况对答案的贡献就是:$\sum_{j=son} \frac {1}{d[x]}[1 + f(x) + f(j) ]$ 我们综合考虑一下这两种情况对答案的贡献值，将这两个式子加起来，我们就会得到下边的这个式子： f(x) = \frac{1}{d} + \sum_{j=son}\frac{1}{d}\times[1 +f(x) + f ( j )]我们安置我们做期望的一贯思路（好像我做过多少期望一样QwQ），因为$num[son]=p-1$，所以我们可以得到这样一个式子： d\times f(x)=1+d-1+(d-1)f(x)+\sum_{j}f(j)化简一下之后有： f(x)=d+\sum_{j}f(j)然后我们来考虑一下$g(x)$这个东西怎么求，当我们经过观察之后，我们可以发现这个式子有三种情况： 他的父亲直接跳到他这里，这种情况对答案的贡献就是$\frac{1}{d[father]}$ 他的父亲先跳到他的爷爷，然后再跳回来，这种情况下，对答案的贡献就是：$\frac{1}{d[father]}\times (1 + g(p) +g(x) )$ 他的父亲跳到他的兄弟然后再跳到他自己。 我们把这三种情况加起来，就会有： g(x)=\dfrac {1}{d[father]} \times(1+g(p)+g(x))+\dfrac {1}{d[father]}+\sum_{pa_j=pa_x\&\&j\not=x}\dfrac {1}{d[father]} (1+f(j)+g(x))继续化简有： g(x)=g(p)+f(p)-f(x)通过这种方式，我们就可以把$g(x) f(x)$算出来，相当于边长。 算出边长后，这个问题就转化成了：给你一颗树，求树的直径。我选择了DP求直径，就很简单了。 代码：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104#include &lt;cstdio&gt;#include &lt;iostream&gt;#include &lt;cstdio&gt;#include &lt;algorithm&gt;#include &lt;cmath&gt;const int N = 2e5 + 10;int n , m , t;struct Edge &#123; int to; int next;&#125;e[N &lt;&lt; 1];int head[N];int now_ans;int f[N] , g[N] , p[N];int LongDis[N][2] , SecondDis[N][2];inline int read () &#123; int s = 0 , w = 1; char ch = getchar (); while ( ch &gt; '9' || ch &lt; '0' ) &#123; if ( ch == '-' ) w = -1; ch = getchar ();&#125; while ( ch &gt;= '0' &amp;&amp; ch &lt;= '9' ) &#123; s = s * 10 + ch - '0'; ch = getchar ();&#125; return s * w;&#125; inline void add ( int x , int y ) &#123; e[++t].to = y; e[t].next = head[x]; head[x] = t; return;&#125;inline int min ( int x , int y ) &#123; return x &lt; y ? x : y;&#125;inline int max ( int x , int y ) &#123; return x &gt; y ? x : y;&#125;void Find_f ( int root , int fa ) &#123; f[root] = p[root]; for ( int i = head[root] ; i ; i = e[i].next ) &#123; int j = e[i].to; if ( j == fa ) continue; Find_f ( j , root ); f[root] += f[j]; &#125; return;&#125;void Find_g ( int root , int fa ) &#123; for ( int i = head[root] ; i ; i = e[i].next ) &#123; int j = e[i].to; if ( j == fa ) continue; g[j] = f[root] + g[root] - f[j]; Find_g ( j , root ); &#125; return;&#125;void Work ( int root , int fa ) &#123; int Frist = 0 , Second = 0; for ( int i = head[root] ; i ; i = e[i].next ) &#123; int j = e[i].to; if ( j == fa ) continue; Work ( j , root ); if ( LongDis[j][0] + g[j] &gt; LongDis[root][0] ) &#123; SecondDis[root][0] = LongDis[root][0]; LongDis[root][0] = LongDis[j][0] + g[j]; Frist = j; &#125; else if ( LongDis[j][0] + g[j] &gt; SecondDis[root][0] ) SecondDis[root][0] = LongDis[j][0] + g[j]; if ( LongDis[j][1] + f[j] &gt; LongDis[root][1] ) &#123; SecondDis[root][1] = LongDis[root][1]; LongDis[root][1] = LongDis[j][1] + f[j]; Second = j; &#125; else if ( LongDis[j][1] + f[j] &gt; SecondDis[root][1] ) SecondDis[root][1] = LongDis[j][1] + f[j]; &#125; if ( Frist != Second ) now_ans = max ( LongDis[root][0] + LongDis[root][1] , now_ans ); else if ( Frist == Second ) now_ans = max ( now_ans , max ( SecondDis[root][1] + LongDis[root][0] , SecondDis[root][0] + LongDis[root][1] ) ); return;&#125;int main ( void ) &#123; freopen ( "tree.in" , "r" , stdin ); freopen ( "tree.out" , "w" , stdout ); n = read (); for ( int i = 1 ; i &lt; n ; i++ ) &#123; int x = read () , y = read (); add ( x , y ); add ( y , x ); p[x]++; p[y]++; &#125; Find_f ( 1 , 0 ); Find_g ( 1 , 0 ); Work ( 1 , 0 ); printf ( "%d.00000\n" , now_ans ); return 0;&#125; T2:其实暴力还是挺显然的]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>模拟赛题解</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[前排打出题人的一套题]]></title>
    <url>%2F2018%2F10%2F17%2F%E5%89%8D%E6%8E%92%E6%89%93%E5%87%BA%E9%A2%98%E4%BA%BA%E7%9A%84%E4%B8%80%E5%A5%97%E9%A2%98%2F</url>
    <content type="text"><![CDATA[不管怎么样，先打死出题人再说qaq… T1:人贩子$LLFZ$ 题意很显然就是最优贸易啊…. 一眼看出来是缩点+DP….但是为什么我之前是SPFA过的啊QAQ…写SPFA比较稳….然后….就写了…. 上代码吧…. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123#include &lt;cstdio&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;#include &lt;cstring&gt;#include &lt;queue&gt;const int N = 1e5 + 10;const int M = 1e6 + 10;const int INF = 2147483647;#define G(i,a,b,c) for ( int i = b[a] ; i ; i = c[i].next )int n , m , t , cnt;struct Edge &#123; int to; int data; int next;&#125;e[M] , e_[M];int head[N] , head_[N];int maxs[N] , mins[N];int dis[N] , value[N];bool inque[N];std :: queue &lt; int &gt; qu;inline int read () &#123; int s = 0 , w = 1; char ch = getchar (); while ( ch &gt; '9' || ch &lt; '0' ) &#123; if ( ch == '-' ) w = -1; ch = getchar ();&#125; while ( ch &gt;= '0' &amp;&amp; ch &lt;= '9' ) &#123; s = s * 10 + ch - '0'; ch = getchar ();&#125; return s * w;&#125;inline void add ( int x , int y , int z ) &#123; e[++t].to = y; e[t].data = z; e[t].next = head[x]; head[x] = t; return;&#125;inline void add_ ( int x , int y , int z ) &#123; e_[++cnt].to = y; e_[cnt].data = z; e_[cnt].next = head_[x]; head_[x] = cnt; return;&#125;template &lt; class T &gt; inline T min ( T x , T y ) &#123; return x &lt; y ? x : y;&#125;template &lt; class T &gt;inline T max ( T x , T y ) &#123; return x &gt; y ? x : y;&#125;void Heap_Dijkstra () &#123; std :: memset ( dis , 0x3f3f3f3f , sizeof ( dis ) ); inque[1] = 1 , dis[1] = value[1]; qu.push ( 1 ); while ( !qu.empty () ) &#123; int j = qu.front (); inque[j] = 0; qu.pop (); G ( i , j , head , e ) &#123; int k = e[i].to; if ( dis[k] &gt; min ( dis[j] , e[i].data ) ) &#123; dis[k] = min ( dis[j] , e[i].data ); if ( !inque[k] ) &#123; inque[k] = 1; qu.push ( k ); &#125; &#125; &#125; &#125; for ( int i = 1 ; i &lt;= n ; i++ ) mins[i] = dis[i]; std :: memset ( dis , -0x3f3f3f3f , sizeof ( dis ) ); inque[n] = 1 , dis[n] = value[n]; qu.push ( n ); while ( !qu.empty () ) &#123; int j = qu.front (); qu.pop (); inque[j] = 0; G ( i , j , head_ , e_ ) &#123; int k = e_[i].to; if ( dis[k] &lt; max ( dis[j] , e_[i].data ) ) &#123; dis[k] = max ( dis[j] , e_[i].data ); if ( !inque[k] ) &#123; inque[k] = 1; qu.push ( k ); &#125; &#125; &#125; &#125; for ( int i = 1 ; i &lt;= n ; i++ ) maxs[i] = dis[i]; return;&#125; int main ( void ) &#123; freopen ( "child.in" , "r" , stdin ); freopen ( "child.out" , "w" , stdout ); n = read (); m = read (); for ( int i = 1 ; i &lt;= n ; i++ ) value[i] = read (); for ( int i = 1 ; i &lt;= m ; i++ ) &#123; int x = read () , y = read () , z = read (); if ( z == 1 ) &#123; add ( x , y , value[y] ); add_ ( y , x , value[x] ); &#125; else if ( z == 2 ) &#123; add ( x , y , value[y] ); add ( y , x , value[x] ); add_ ( y , x , value[x] ); add_ ( x , y , value[y] ); &#125; &#125; Heap_Dijkstra (); int ans = -INF; for ( int i = 1 ; i &lt;= n ; i++ ) ans = max ( ans , maxs[i] - mins[i] ); printf ( "%d\n" , ans ); return 0;&#125; T2 : food 再来拿出题人祭天祭一波… 话说我直接读题读错了然后写了个错误的DP然后还A了是什么鬼啊…. 话说我考虑了前缀和，那么我还过了，说明直接加起来然后除就可以? 123456789101112131415161718192021222324252627282930313233343536373839404142434445#include &lt;cstdio&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;#include &lt;cstring&gt;const int N = 15;int n , ans = -1;int A , B , C;int p1 , p2 , p3;int MaxTime[N];int f[N][105][105][105];inline int read () &#123; int s = 0 , w = 1; char ch = getchar (); while ( ch &gt; '9' || ch &lt; '0' ) &#123; if ( ch == '-' ) w = -1; ch = getchar ();&#125; while ( ch &gt;= '0' &amp;&amp; ch &lt;= '9' ) &#123; s = s * 10 + ch - '0'; ch = getchar ();&#125; return s * w;&#125;inline int max ( int x , int y ) &#123; return x &gt; y ? x : y;&#125;int main ( void ) &#123; freopen ( "food.in" , "r" , stdin ); freopen ( "food.out" , "w" , stdout ); A = read () , B = read () , C = read (); p1 = read () , p2 = read () , p3 = read (); n = read (); for ( int i = 1 ; i &lt;= n ; i++ ) &#123; MaxTime[i] = read (); MaxTime[i] = MaxTime[i - 1] + MaxTime[i]; &#125; for ( int i = 1 ; i &lt;= n ; i++ ) for ( int j = A ; j * p1 &lt;= MaxTime[i] &amp;&amp; j&lt;=100 ; j++ ) for ( int k = B; j * p1 + k * p2 &lt;= MaxTime[i] &amp;&amp; k &lt;= 100 ; k++ ) for ( int l = C ; j * p1 + k * p2 + l * p3 &lt;= MaxTime[i] &amp;&amp; l &lt;=100 ; l++ ) &#123; f[i][j][k][l] = max ( f[i][j][k][l] , max ( f[i - 1][j - A][k - B][l - C] + 1 , f[i][j - A][k - B][l - C] + 1 ) ); ans = max ( ans , f[i][j][k][l] ); &#125; printf ( "%d\n" , ans ); return 0;&#125; T3: Happy 再吐槽一波为什么Noip模拟赛会考离散对数（然而我并不会….） 其实应该是一道签到题吧。。。 暴力水过…. 123456789101112131415161718192021222324252627282930313233343536373839#include &lt;cstdio&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;#include &lt;cstring&gt;inline int read () &#123; int s = 0 , w = 1; char ch = getchar (); while ( ch &gt; '9' || ch &lt; '0' ) &#123; if ( ch == '-' ) w = -1; ch = getchar ();&#125; while ( ch &gt;= '0' &amp;&amp; ch &lt;= '9' ) &#123; s = s * 10 + ch - '0'; ch = getchar ();&#125; return s * w;&#125;int P , A , B;bool app[50005];int main ( void ) &#123; freopen ( "happy.in" , "r" , stdin ); freopen ( "happy.out" , "w" , stdout ); int T = read (); while ( T-- ) &#123; int now = 1; memset ( app , false , sizeof ( app ) ); P = read () , A = read () , B = read (); for ( int i = 1 ; ; i++ ) &#123; now = ( now * A ) % P; if ( now == B ) &#123; printf ( "%d\n" , i ); break; &#125; if ( app[now] ) &#123; puts ( "Couldn't Produce!" ); break; &#125; app[now] = 1; &#125; &#125; return 0;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>模拟赛题解</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[My_Code_Style]]></title>
    <url>%2F2018%2F10%2F13%2FMy_Code_Style%2F</url>
    <content type="text"><![CDATA[介绍下本蒟蒻的丑死的码风$qwq$…(码风大概是魔改了神犇$Menci$的) 在打CF时并不是这个码风 码风概述： 所有的#include后必须有一个空格,例如#include 无论什么样子的程序，都必须写cstdio cstring algorithm iostream这四个头文件。 在主程序的int main()中要加$void$，即为int main(void) 一般不写using namespace std; 所有的变量必须定义在第一个自定义函数之前，且变量和第一个自定义函数，最后一个自定义函数和$main$之间必须有一个换行 每个函数之后尽可能有$return$， 在一般情况下，在花括号内的内容不加逗号 缩进： 对于每个代码块，使用4空格或者等长的Tab缩进。 括号： 大括号不换行 空格： 个人感觉自己的空格比较的毒瘤。 1.在每个函数声明时，函数名后的括号与函数名之间必须有一个空格,而且括号内如果需要声明变量，则要先有一个空格，且逗号的前后都必须有一个空格。 2.在for循环的声明中，每一个字符（变量名除外），都要用空格隔开。 3.数组内一般不加空格，但是如果有运算符则运算符前后必须有空格。 4.每个可以前后匹配的括号前后必须有空格。 变量： 1.基本所有变量都是全局变量，但有些ans,sum最后统计答案时使用的变量可以定义为局部变量。 2.所有的变量名称都必须与要存储的东西的中文意思有沾边，比如树直接定义为tree而不是T。（极度不能容忍变量名直接为a,b,c,d,e,f,g,的情况。 3.定义N,M等时一般只用N,M为名称而不是MAXN,MAXM. 4.定义的结构体类型在定义变量时必须紧接着声明完成结构体后，并且结构体中变量需要定义一个加一个换行。 5.在变量命名时较长的变量名可以用_来连接，并且大小写交替使用，如Add_Tree_Val 把上边所有毒瘤的码风结合起来之后代码大概长这个样子qwq.. update:还是加上模板舒服qwq 不要吐槽我的丑逼$Splay…..$ 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181#include &lt;cstdio&gt;#include &lt;algorithm&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;queue&gt;#include &lt;map&gt;#include &lt;set&gt;#include &lt;cmath&gt;#include &lt;cctype&gt;#include &lt;ctime&gt;#include &lt;vector&gt;#include &lt;cstdlib&gt;#include &lt;stack&gt;#define ll long long#define pll std::pair&lt;int,int&gt;#define mp std::make_pair#define fi first#define se second#define oo 2147483647#define PI 3.141592653590#define rint register inttemplate &lt; class T &gt; inline void read ( T &amp;x ) &#123;T s = 0 , w = 1;char ch = getchar ();while ( ch &gt; '9' || ch &lt; '0' ) &#123; if ( ch == '-' ) w = -1; ch = getchar ();&#125;while ( ch &gt;= '0' &amp;&amp; ch &lt;= '9' ) &#123; s = s * 10 + ch - '0'; ch = getchar ();&#125;x = s * w;return;&#125;template &lt; class T , typename ...Argc &gt; inline void read ( T &amp;x , Argc &amp;...Args ) &#123;read ( x );read ( Args... );return;&#125; template &lt; class T &gt; inline T max ( T x , T y ) &#123;return x &gt; y ? x : y;&#125;template &lt; class T &gt; inline T min ( T x , T y ) &#123;return x &lt; y ? x : y;&#125;template &lt; class T &gt; inline void abs ( T x ) &#123;return x &gt; 0 ? x : -x;&#125;inline int _read () &#123;int s = 0 , w = 1;char ch = getchar ();while ( ch &gt; '9' || ch &lt; '0' ) &#123; if ( ch == '-' ) w = -1; ch = getchar ();&#125;while ( ch &gt;= '0' &amp;&amp; ch &lt;= '9' ) &#123; s = s * 10 + ch - '0'; ch = getchar ();&#125;return s * w;&#125;template &lt;typename T&gt; void write(T x) &#123;if (x &lt; 0) x = -x, putchar('-');if (x &gt; 9) write(x / 10);putchar(x % 10 + 48);return;&#125;template &lt;typename T&gt; void writeln(T x) &#123; write(x); printf ("\n"); &#125;/**********************************************************************************************************************************************************************************************************************************************************************/const int N = 1e6 + 5;int root , tot , n;struct Tree &#123; int ch[2]; int val; int father; int size; int cnt;&#125;tree[N];void pushup ( int cur ) &#123; tree[cur].size = tree[tree[cur].ch[0]].size + tree[tree[cur].ch[1]].size + tree[cur].cnt; return;&#125;void rotate ( int x ) &#123; int y = tree[x].father; int z = tree[y].father; int k = tree[y].ch[1] == x; tree[z].ch[tree[z].ch[1] == y] = x; tree[x].father = z; tree[y].ch[k] = tree[x].ch[k ^ 1]; tree[tree[x].ch[k ^1]].father = y; tree[x].ch[k ^ 1] = y; tree[y].father = x; pushup ( x ); pushup ( y ); return;&#125;void Splay ( int x , int goal ) &#123; while ( tree[x].father != goal ) &#123; int y = tree[x].father; int z = tree[y].father; if ( z != goal ) ( tree[y].ch[0] == x ) ^ ( tree[z].ch[0] == y ) ? rotate ( x ) : rotate ( y ); rotate ( x ); &#125; if ( goal == 0 ) root = x; return;&#125;void insert ( int x ) &#123; int cur = root , father = 0; while ( cur &amp;&amp; tree[cur].val != x ) &#123; father = cur; cur = tree[cur].ch[x &gt; tree[cur].val]; &#125; if ( cur ) tree[cur].cnt++; else &#123; cur = ++tot; if ( father ) tree[father].ch[x &gt; tree[father].val] = cur; tree[cur].ch[0] = tree[cur].ch[1] = 0; tree[cur].father = father; tree[cur].val = x; tree[cur].cnt = 1; tree[cur].size = 1; &#125; Splay ( cur , 0 ); return;&#125;void Find ( int x ) &#123; int cur = root; if ( !cur ) return; while ( tree[cur].ch[x &gt; tree[cur].val] &amp;&amp; x != tree[cur].val ) cur = tree[cur].ch[ x &gt; tree[cur].val]; Splay ( cur , 0 ); return;&#125;int Next ( int x , int f )&#123; Find ( x ); int cur = root; if ( tree[cur].val &gt; x &amp;&amp; f ) return cur; if ( tree[cur].val &lt; x &amp;&amp; !f ) return cur; cur = tree[cur].ch[f]; while ( tree[cur].ch[f ^ 1] ) cur = tree[cur].ch [f ^ 1]; return cur;&#125;void Delete ( int x ) &#123; int last = Next ( x , 0 ); int next = Next ( x , 1 ); Splay ( last , 0 ); Splay ( next , last ); int del = tree[next].ch[0]; if ( tree[del].cnt &gt; 1 ) &#123; tree[del].cnt--; Splay ( del , 0 ); &#125; else tree[next].ch[0] = 0; return;&#125;int kth ( int x ) &#123; int cur = root; if ( tree[cur].size &lt; x ) return 0; while ( 1 ) &#123; int y = tree[cur].ch[0]; if ( x &gt; tree[y].size + tree[cur].cnt ) &#123; x -= tree[y].size + tree[cur].cnt; cur = tree[cur].ch[1]; &#125; else if ( tree[y].size &gt;= x ) cur = y; else return tree[cur].val; &#125;&#125;int main ( void ) &#123; n = read (); insert ( 2147483647 ); insert ( -2147483647 ); while ( n-- ) &#123; int opt = read (); if ( opt == 1 ) &#123; int x = read (); insert ( x ); &#125; else if ( opt == 2 ) &#123; int x = read (); Delete ( x ); &#125; else if ( opt == 3 ) &#123; int x = read (); Find ( x ); printf ( "%d\n" , tree[tree[root].ch[0]].size ); &#125; else if ( opt == 4 ) &#123; int x = read (); printf ( "%d\n" , kth ( x + 1 ) ); &#125; else if ( opt == 5 ) &#123; int x = read (); printf ( "%d\n" , tree[Next ( x , 0 )].val ); &#125; else if ( opt == 6 ) &#123; int x = read (); printf ( "%d\n" , tree[Next ( x , 1 )].val ); &#125; &#125; return 0;&#125; 因为知道了自己是多么的菜,所以才要更加努力去追求那个永远也不可能实现的梦想]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>CodeStyle</tag>
      </tags>
  </entry>
</search>
