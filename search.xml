<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[ZROI普及五联测D3]]></title>
    <url>%2F2019%2F10%2F12%2FZROI%E6%99%AE%E5%8F%8A%E4%BA%94%E8%81%94%E6%B5%8BD3%2F</url>
    <content type="text"><![CDATA[你一定知道密码趴 Incorrect Password! No content to display! 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]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>ZROI</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Educational Codeforces Round74题解]]></title>
    <url>%2F2019%2F10%2F10%2FRound74%2F</url>
    <content type="text"><![CDATA[又安排了队友一手….. Prime Subtraction可以发现,如果只是用质数的话,那么除了$1$之外的数都是可以由质数凑出来的.所以只需要判断一波是不是相差为$1$即可.123456789101112131415#include&lt;bits/stdc++.h&gt;using namespace std;int main()&#123; long long a,b; int T; cin&gt;&gt;T; while(T--)&#123; cin&gt;&gt;a&gt;&gt;b; if(a-b==1) puts("NO"); else puts("YES"); &#125; return 0;&#125; Kill ‘Em All发现如果我们打了一个按照坐标排序之后中间的数,那么对于右边的数字来说一定是劣的.所以我们发现,如果我们排序之后,从右往左开始打的话,那么对于答案的贡献一定不会更劣.所以直接排序之后从右往左打然后判断即可. 123456789101112131415161718192021222324252627282930313233343536373839#include&lt;bits/stdc++.h&gt;#define int long longusing namespace std;inline int read()&#123; int s=0,w=1; char ch=getchar(); while(ch&gt;'9'||ch&lt;'0')&#123;if(ch=='-')w=-1;ch=getchar();&#125; while(ch&gt;='0'&amp;&amp;ch&lt;='9')&#123;s=s*10+ch-'0';ch=getchar();&#125; return s*w;&#125; const int N=1e5+10;int n,r;int pos[N];bool dis[N];inline bool cmp(int x,int y)&#123; return x&gt;y;&#125;signed main()&#123; int T=read(); while(T--)&#123; memset(dis,0,sizeof(dis)); n=read(),r=read(); for(int i=1;i&lt;=n;i++) pos[i]=read(); sort(pos+1,pos+1+n,cmp); int tag=0,ans=0; for(int i=1;i&lt;=n;i++)&#123; if(dis[pos[i]]) continue; if(pos[i]-tag*r&lt;=0) break; dis[pos[i]]=1; ans++; tag++; &#125; printf("%lld\n",ans); &#125; return 0;&#125; Standard Free2play 因为知道了自己是多么的菜,所以才要更加努力去追求那个永远也不可能实现的梦想]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>Codeforces题解</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Kruscal重构树学习笔记]]></title>
    <url>%2F2019%2F10%2F09%2FKruskal%E9%87%8D%E6%9E%84%E6%A0%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[学不会啊…. 以上就是性质,讲完了 你们不要打我QAQ… 一道例题(货车运输)我们看一下第五条性质,哎妈呀这道题不是裸题吗.我们跑一遍$Kruscal$重构树,然后询问的时候每两个点的答案,就是这两个在重构树上$LCA$的点权.然后就没了. 另一道例题(有没有大佬知道是哪个OJ上的题话告诉我谢谢) 第一反应是考虑每条边在作为权值最小的边的时候的贡献,但是发现这样也并不好统计最终贡献.所以根据这篇博客的标题,我们来考虑$Kruscal$重构树的做法.我们发现$Kruscal$重构树满足大根堆的性质,那么我们考虑某一个边权节点,他有贡献的路径很显然是它连接的叶子节点的路径一直到某个不在它子树内而且父亲节点大于它的节点.但是发现这样也并不好统计最终贡献.发现,如果重构树满足小根堆的性质的话,那么我们发现两点间路径边权的最小值就是他们的$LCA$,这样就方便统计答案了.所以我们考虑把所有的边权同乘$-1$,这样之后再建重构树.然后就可以统计答案了. 还有一道例题(有没有大佬知道是哪个OJ上的题话告诉我谢谢)也是$Kruscal$重构树的套路题…对于边权最大值的限制， 完全可以等价地转化到它们在最小瓶颈生成树上路径边权最大值的限制。考虑$Kruskal$重构树上一个点在只允许走边权$&lt;=k$的边的情况下能够到的点的集合,发现它们是一棵子树,且根为$s$的某个祖先.具体来说,是$s$到根路径上深度最小的点权$&lt;=k$的祖先我们可以倍增地找到这个祖先,接下来问题就转化为了经典问题:求一个子树当中的权值第k大.使用主席树可以轻松解决. 最后一道例题(归程)题面就不放了….因为每天开始的时候车的位置都会被重置一次,所以我们对于每次询问都可以在起点进行一次$bfs$,然后答案就是这些点中到$1$号点距离最小的点.但是这样…显然过不了…发现每次进行询问的时候都去$bfs$一遍显然太慢了,而且这道题为强制在线,也不能按照这些询问的海拔排序.那么我们怎么办呢?根据标题,我们可以选择$Kruscal$重构树来解决掉这道题.首先我们发现,$Kruscal$重构树满足大根堆的性质,那么满足海拔大于水位线的边组成的点一定是某一颗子树.然后我们可以进行一次堆优化的$Dijkstra$进行预处理,然后把$1$号点到每个点的最短路的长度记为重构树上新的点的点权.然后对于每次查询,我们的任务就变成了查询某颗子树中的叶子的权值最小值,而且是静态的.显然可以$log$的复杂度随便搞一搞. 因为知道了自己是多么的菜,所以才要更加努力去追求那个永远也不可能实现的梦想]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>图论</tag>
        <tag>最小生成树</tag>
        <tag>Kruscal重构树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CF416E]]></title>
    <url>%2F2019%2F10%2F09%2FCF416E%2F</url>
    <content type="text"><![CDATA[$ZROI$杂题选讲…. 看到这道题之后,我们第一反应肯定是一遍$Floyd$.然后考虑一下怎么判断某条边是不是被最短路覆盖.朴素的想法是我们每次枚举边,然后以这条边两条边的端点$u,v$再枚举这两个端点的所有最短路.即判断 dis(s,u)+w+dis(v,t)==dis(s,t)或者 dis(s,v)+w+dis(u,t)==dis(s,t)但是这样统计答案的话,由于边的条数为$n^2$的,所以这种算法的总复杂度为$O(n^4)$的.显然过不了所以我们考虑一下怎么优化.我们考虑上一个算法的时间复杂度的瓶颈,显然在我们枚举了$s,t$之后,因为还需要枚举每一条边,所以枚举边显然会超时.所以我们考虑一下枚举完$s,t$之后不再枚举每一条边,而是去枚举每一个中转点$p$.然后如果我们发现 dis(s,p)+dis(p,t)==dis(s,t)那么显然在$dis(s,p)$上以$p$结尾的边都是可以被加入的.所以我们现在的问题就只剩下了怎么求在$dis(s,p)$上的点了.发现我们就算暴力枚举每条边然后验证也并不会超时.所以直接这样做就可以了 因为知道了自己是多么的菜,所以才要更加努力去追求那个永远也不可能实现的梦想]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>图论</tag>
        <tag>最短路</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[[GXOI/GZOI2019]旅行者]]></title>
    <url>%2F2019%2F10%2F08%2FSNOI2017-%E7%A4%BC%E7%89%A9%2F</url>
    <content type="text"><![CDATA[$ZROI$杂题选讲…..多点最短路?floyd直接莽啊我知道你很勇,但是这道题$10^5$真的没法直接莽啊… 考虑那$K$组特殊的点,我们发现如果我们把它们分成两组,然后由一组向另一种跑最短路,很明显可以得到答案.但是很显然不能只是分组分一次.我们考虑优化分组的过程.发现在考虑二进制之后,每两个互不相同的值一定最少会有一个不同的地方.所以我们如果对于每个点的编号,按照$1&lt;&lt;i$进行分类的话.一定可以保证在某一次分类的过程中,有任意两个点被分到了不同的集合内部.所以我们对这$K$组关键点进行二进制分组,然后建一个超级源点和一个超级汇点分别连接入集合和出集合.然后查询这个超级源和超级汇之间的最短路即可. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116#include &lt;bits/stdc++.h&gt;#define LL long longusing namespace std;inline LL read()&#123; LL x = 0,f = 1; char c = getchar(); while (c != EOF &amp;&amp; !isdigit(c)) &#123;if (c == '-') f = -1;c = getchar();&#125; while (isdigit(c)) &#123;x = x * 10 + c - '0';c = getchar();&#125; return x * f;&#125;inline void write(LL x)&#123; if (x &lt; 0) putchar('-'),x = -x; if (x &gt; 9) write(x/10); putchar(x%10+'0');&#125;inline void writeln(LL x)&#123; write(x),putchar('\n'); &#125;const int N = 100005,M = 500005;int Fr[M&lt;&lt;2],To[M&lt;&lt;2],Ne[M&lt;&lt;2],Dis[M&lt;&lt;2],He1[N],He2[N],_k;inline void add(int *He,int x,int y,int z)&#123; ++_k,Fr[_k] = x,To[_k] = y,Dis[_k] = z,Ne[_k] = He[x],He[x] = _k;&#125;int T,n,m,k,p[N];const LL INF = 1ll&lt;&lt;60;int f1[N],f2[N];LL dis1[N],dis2[N];LL ans;struct Node&#123; int x; LL d; Node (int xx = 0,LL dd = 0)&#123; x = xx,d = dd; &#125; inline bool operator &lt; (Node x) const&#123; return d &gt; x.d; &#125;&#125;t;priority_queue&lt;Node&gt;Heap;void Dij_1()&#123; int i; while (!Heap.empty()) Heap.pop(); for (i = 1; i &lt;= n; ++i) &#123; dis1[i] = INF; f1[i] = -1; &#125; for (i = 1; i &lt;= k; ++i) &#123; dis1[p[i]] = 0; f1[p[i]] = p[i]; Heap.push(Node(p[i],0)); &#125; int p,x; while (!Heap.empty())&#123; t = Heap.top(); Heap.pop(); if (t.d == dis1[t.x]) for (p = He1[t.x]; p ; p = Ne[p]) if (dis1[To[p]] &gt; dis1[t.x] + Dis[p])&#123; dis1[To[p]] = dis1[t.x] + Dis[p]; f1[To[p]] = f1[t.x]; Heap.push(Node(To[p],dis1[To[p]])); &#125; &#125; return;&#125;void Dij_2()&#123; int i; for (i = 1; i &lt;= n; ++i) &#123; dis2[i] = INF; f2[i] = -1; &#125; for (i = 1; i &lt;= k; ++i) &#123; dis2[p[i]] = 0; f2[p[i]] = p[i]; Heap.push(Node(p[i],0)); &#125; int p,x; while (!Heap.empty())&#123; t = Heap.top(); Heap.pop(); if (t.d == dis2[t.x]) for (p = He2[t.x]; p ; p = Ne[p]) if (dis2[To[p]] &gt; dis2[t.x] + Dis[p])&#123; dis2[To[p]] = dis2[t.x] + Dis[p]; f2[To[p]] = f2[t.x]; Heap.push(Node(To[p],dis2[To[p]])); &#125; &#125; return;&#125;int main(void)&#123; int i,u,v,w; T = read(); while (T--)&#123; _k = 0; memset(He1,0,sizeof(He1)); memset(He2,0,sizeof(He2)); n = read(),m = read(),k = read(); while (m--)&#123; u = read(); v = read(); w = read(); if (u^v) &#123; add(He1,u,v,w); add(He2,v,u,w); &#125; &#125; for (i = 1; i &lt;= k; ++i) p[i] = read(); Dij_1(); Dij_2(); ans = INF; for (i = 1; i &lt;= n; ++i) if (f1[i] ^ f2[i]) ans = min(ans,dis1[i] + dis2[i]); for (i = 1; i &lt;= _k; i += 2) if (f1[Fr[i]]^f2[To[i]]) ans = min(ans,dis1[Fr[i]] + dis2[To[i]] + Dis[i]); writeln(ans); &#125; return 0;&#125; 因为知道了自己是多么的菜,所以才要更加努力去追求那个永远也不可能实现的梦想]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>图论</tag>
        <tag>最短路</tag>
        <tag>二进制</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CF938D题解]]></title>
    <url>%2F2019%2F10%2F08%2FCF938D%E9%A2%98%E8%A7%A3%2F</url>
    <content type="text"><![CDATA[$ZROI$杂题选讲…..刚开始的时候看见题目中要求的这个式子貌似不知道从何开始想….首先发现$2 \times d(i,j)$这个东西可以直接在存边的时候把边权变成两倍即可.但是剩下的那个加$a_j$貌似很难处理,每次暴力枚举么?显然不行.我们考虑一下,对于这个数据范围来说,显然只能跑一遍最短路,所以我们考虑怎么在一遍最短路的过程中求出每个点的答案.但是这样做的话,显然要把所有的$a_i$联系起来,怎么办呢?建虚点√我们新建一个虚点,然后由这个虚点向每个点$i$连一条边权为$a_i$的边.然后我们考虑一下原来的那个式子,发现这样的话原来的式子就变成了求$min(2\times d(i,j)+d(new,j))$.再考虑一下最短路的松弛操作,是不是发现了啥.我们直接从新建的虚点开始跑一遍最短路,然后对于每个点,$dis_i$就是答案了.1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192#include &lt;cstdio&gt;#include &lt;algorithm&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;queue&gt;#include &lt;map&gt;#include &lt;set&gt;#include &lt;cmath&gt;#include &lt;cctype&gt;#include &lt;ctime&gt;#include &lt;vector&gt;#include &lt;cstdlib&gt;#include &lt;stack&gt;#define int long long#define MP std::make_pair#define fi first#define se second#define oo 2147483647#define PI 3.141592653590#define rint register int#define F(i,num,b) for(rint i=num;i&lt;=b;i++)#define D(i,num,b) for(rint i=num;i&gt;=b;i--)#define G(i,num,b,c) for(rint num=head[b];num;num=c[num].next)inline int _read () &#123;int s = 0 , date = 1;char ch = getchar ();while ( ch &gt; '9' || ch &lt; '0' ) &#123; if ( ch == '-' ) date = -1; ch = getchar ();&#125;while ( ch &gt;= '0' &amp;&amp; ch &lt;= '9' ) &#123; s = s * 10 + ch - '0'; ch = getchar ();&#125;return s * date;&#125;template &lt; class T &gt; inline void read ( T &amp;x ) &#123;T s = 0 , date = 1;char ch = getchar ();while ( ch &gt; '9' || ch &lt; '0' ) &#123; if ( ch == '-' ) date = -1; ch = getchar ();&#125;while ( ch &gt;= '0' &amp;&amp; ch &lt;= '9' ) &#123; s = s * 10 + ch - '0'; ch = getchar ();&#125;x = s * date;return;&#125;template &lt; class T , typename ...Argc &gt; inline void read ( T &amp;x , Argc &amp;...Args ) &#123;read ( x );read ( Args... );return;&#125; template &lt; class T &gt; inline T max ( T x , T y ) &#123;return x &gt; y ? x : y;&#125;template &lt; class T &gt; inline T min ( T x , T y ) &#123;return x &lt; y ? x : y;&#125;template &lt; class T &gt; inline void abs ( T x ) &#123;return x &gt; 0 ? x : -x;&#125;template &lt; typename T &gt; void write ( T x ) &#123;if ( x &lt; 0 ) x = -x , putchar ( '-' );if ( x &gt; 9 ) write ( x / 10 );putchar ( x % 10 + 48 );return;&#125;template &lt; typename T &gt; void writeln ( T x ) &#123;write ( x ); printf ("\n"); &#125;template &lt; class T &gt; inline T gcd ( T x , T y ) &#123;if ( x &lt; y ) swap ( x , y );if ( !y ) return x;return gcd ( y , x % y );&#125;template &lt; class T &gt; inline T ksm ( T x , T y , T Mod ) &#123;T tmp = 1;while ( y ) &#123;if ( y % 2 == 1 ) tmp = ( tmp * x % Mod );x = ( x * x ) % Mod;y &gt;&gt;= 1;&#125;return tmp;&#125; /**********************************************************************************************************************************************************************************************************************************************************************/const int N = 1e6 + 10;int n , m , t;int head[N];struct Edge&#123; int to; int date; int next;&#125;e[N];int dis[N];bool vis[N];std :: priority_queue &lt; std :: pair &lt; int , int &gt; , std :: vector &lt; std :: pair &lt; int , int &gt; &gt; , std :: greater &lt; std :: pair &lt; int , int &gt; &gt; &gt;qu;inline void add ( int x , int y , int z ) &#123; e[++t].to = y; e[t].date = z; e[t].next = head[x]; head[x] = t; return;&#125;signed main ( void ) &#123; read ( n , m ); for(int i=1;i&lt;=m;i++)&#123; int x,y,z; read(x,y,z); add(x,y,2*z); add(y,x,2*z); &#125; for(int i=1;i&lt;=n;i++)&#123; int x=_read(); add(n+1,i,x); &#125; memset(dis,0x3f,sizeof(dis)); dis[n+1]=0; qu.push(MP(0,n+1)); while ( !qu.empty () ) &#123; int j = qu.top().se; qu.pop (); if ( vis[j] ) continue; vis[j] = 1; for ( int i = head[j] ; i ; i = e[i].next ) &#123; int k = e[i].to; if ( dis[k] &gt; dis[j] + e[i].date ) &#123; dis[k] = dis[j] + e[i].date; if ( !vis[k] ) qu.push ( MP ( dis[k] , k ) ); &#125; &#125; &#125; F ( i , 1 , n ) printf ( "%lld%c" , dis[i] , i == n ? '\n' : ' ' ); return 0;&#125; 因为知道了自己是多么的菜,所以才要更加努力去追求那个永远也不可能实现的梦想]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>图论</tag>
        <tag>最短路</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[HDU4479题解]]></title>
    <url>%2F2019%2F10%2F08%2FHDU4479%E9%A2%98%E8%A7%A3%2F</url>
    <content type="text"><![CDATA[$ZROI$杂题总结… 发现我们需要保证边权递增,但是似乎并没有什么方法.所以我们考虑将边权排个序,然后将边权从小到大开始考虑.这样之后,当我们先默认边权都互不相同时,我们每次以一条边去更新它两端的节点.如果能更新的话,显然在经过的节点上,一定是先经过边权较小的路径,再经过边权较大的路径.这样之后可以保证我们求的就一定是题目中要求的答案.然后发现其实边权并不是互不相同的,所以可以将边权一样的边分成一组,每次操作的过程中去用这组中的一坨边去更新. 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879#include&lt;bits/stdc++.h&gt;#define LL long longusing namespace std;inline int read()&#123; int s=0,w=1; char ch=getchar(); while(ch&gt;'9'||ch&lt;'0')&#123;if(ch=='-')w=-1;ch=getchar();&#125; while(ch&gt;='0'&amp;&amp;ch&lt;='9')&#123;s=s*10+ch-'0';ch=getchar();&#125; return s*w;&#125;const int N=1e4+10;const int M=1e5+10;const LL oo=0x3f;int n,m,t;LL dis[N];bool updated[N];struct Edge&#123; int from; int to; LL date;&#125;lis[M];int v[N];LL vdis[N];inline bool cmp(Edge x,Edge y)&#123; return x.date&lt;y.date;&#125;inline void work(int l,int r)&#123; int cnt=0; for(int i=l;i&lt;=r;i++)&#123; int ll=lis[i].from,rr=lis[i].to; if(updated[ll]&amp;&amp;dis[rr]&gt;lis[i].date+dis[ll])&#123; v[++cnt]=rr; vdis[cnt]=lis[i].date+dis[ll]; &#125; if(updated[rr]&amp;&amp;dis[ll]&gt;lis[i].date+dis[rr])&#123; v[++cnt]=ll; vdis[cnt]=lis[i].date+dis[rr]; &#125; &#125; for(int i=1;i&lt;=cnt;i++)&#123; dis[v[i]]=min(dis[v[i]],vdis[i]); updated[v[i]]=1; &#125; return;&#125;int main(void)&#123; int T=read(); while(T--)&#123; t=0; memset(updated,0,sizeof(updated)); n=read(),m=read(); for(int i=1;i&lt;=n;i++)dis[i]=oo; dis[1]=0; updated[1]=1; for(int i=1;i&lt;=m;i++)&#123; int x=read(),y=read(); LL z=read(); lis[++t].from=x; lis[t].to=y; lis[t].date=z; &#125; sort(lis+1,lis+1+t,cmp); lis[t+1].date=oo; for(int i=1;i&lt;=t;i++)&#123; int l=lis[i].from,r=lis[i].to; int j; for(j=i+1;j&lt;=t+1;j++) if(lis[j].date!=lis[i].date) break; work(i,j-1); i = j-1; &#125; if(dis[n]&gt;=oo) puts("No answer"); else printf("%lld\n",dis[n]); &#125; return 0;&#125; 因为知道了自己是多么的菜,所以才要更加努力去追求那个永远也不可能实现的梦想]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>图论</tag>
        <tag>最短路</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ZROI国庆七天乐D5]]></title>
    <url>%2F2019%2F10%2F07%2FZROI%E5%9B%BD%E5%BA%86%E4%B8%83%E5%A4%A9%E4%B9%90D5%2F</url>
    <content type="text"><![CDATA[你一定知道密码趴 Incorrect Password! No content to display! U2FsdGVkX19ZoKdql5MheJX0Y4VOyAtJyeE+/dRI0HyQ2urBQTQlk2zMR//ltQWhmyA4uPSBL6/G3Hqa1PDzIG+Dc5PlswebunJx4+Nz/WStmcsxhhorK2ZG5DRpyXe/XYULUoVEtkX+cO0IcqhlglJtTcL9vbY6K+iTOcHBSy8xn9sVkRM3Mt44l5yYw6e5mXT+YLJIrK179cqTaXOpsgnappI4C5rlSW1M+vMlYA1G9YFLbOuUTkEeU9NrKZj5NWGVtBAnWeenocIo1ByHPmlmJ5cuPddtSr5WFp0ihr3VXANCsM1JiO/WV97CzBVLp0tWZJMItOLvUemPmGLNAybcGzuxtxNO/ebzKYYuHxsov1p1wG/Fy5esOVsQU6UudVtD6P3kqZ9FYKSjpU7pqYOgMxqIQDJNeSgsiHY/nmakbh1fX9JOq74liN8zGJGg9iZch7x4vVEmbWfgoQcEcsYIC/HlX1k4S3yj+qsR4arTnHam0g0yN0/EJY/2y6JYk5KEdm3rCVoyCZkyWseid+FDk0Gysp00eJDRAjluOTGkWsAENZg0AtvKF8IYqvw0YBzH2Muc7ceqvR7f7CAulouLJPPe7sFZM2PnfLw6+MF7I4B42Y/kGxF/jYYxDkA4pUcPwQigssy1VT8KkCtZH6TndJTUeyvRXgWdckl46O3SmRwlTeu5v0RLcdJ7JWhxyt4+tl0UHJEoOaX9U6XAub+x1UdZkdpKiSpRnwON5T/bX9moAsGACp1VAVDHdKOVozcIvU3BaX0bV0THRfMkxSI7aHclfN8r5zCFvqOiOJXh8GzFJc+5MolvEHb4yETcJ61aXkZMyOv4yakj0gfn8u/DlahMzGHjyF1Lv34fVvkzGLHu8odwJ+hux7+H3go2rUz4Sz9Fff/lyyUc7ncqjK/lSQB6w3XK3GrAuA917m1eTjz5jJ/aiMB40sdbsYhaSpUVVGL4IFGZBpSuPDI/s7EOK21y7hcwnEEb/5uN8Mz6Go5qzlhRf/lfPQBA4vy9y4LbqHqgZX6b5UmgH2MdC4/gQotNf8zlWUJHbmomLeINFGiGOwJV6LLt5DEMGXW9WXms3xhfoMsbh3zRPSIPCfc4lzUtlx+TFM+0zZg3bqPzSndXUZK6HDstPiHB9QBqEItZaxEUN+bat9kzBlQakZ4iiHI4LUQ1KjywA3tmFfK+eh6N4p7r46CbIdMytORbcpAav/jlMvVPW82f0P4cFPXxx6llDGS9BlbL7j9dWx8Ol78NyRY25dJGhBIhSnYxzPbdNydMkYZX1XeeU20ijKf46lUvG3OoGxuomqe7D9ja2ZFGUqHO+xHP5jcUOSZB/V93UkJNkJxhhrmuilm/zn7pKhhm3mpc1vt5au9G4YtpDUD1YD67UVwVEc1H00+DXyDBbzV8dZKhOFnlaK8cAIwuBhXWkfApZFgUzchVNGrOdHaR5YiWq4qK8z0ggsgS5fxRsvIlpj8HnVlG3F8yg6+gg/TsAw15EhAQuHxIqZyJLYH6+HOdgrcvUKSN7fm29VhLcRO3TpygjhZQ53QMQwOmZa53hvGQuPs83GTFlBzd74fQ8sgRJB/m+iIP4HtmYekuPZIquIDHUL4TcK/L8ytO4B+QnsEli4Fc786+7/MBcrl1dXY19HIUlnmzRm0A2ko06L275PyWclae4MFYpRhBrPfcjjS7PLE0todckLV8kf8UvNuKGIP8KjvF1iYfoHcyGsxI+7iCJeBcPNdS9MGpsvChZqt1oevH0UNTj4LTTFJJ4Ma/WsukTR2VFG8kH+LIWm+fwDIeYaealIxeH8YrNdaVTunnB13ozINBrw3XjN9+RtHpFPGzP+ttRHhCVZbdb17ioovPNhNh7CC1h/yuRewZEVAPxGzxXWajmM+qmDD8dr2qqp641qha8L14cn/GqmxmMfWEQkSpnueaQqZdSiT+wnnuUsvCZI3zfu9Wzy0SODBGgjLSHIwGUPlrIjQozd8jrKaLghRMLqhp4D0Z6bYIZKXoEPoQ1QseK9s05E/qad6CziUbK3Y5lAW5Vw8Tek2GVjbNDnrSAqnABXfTOiiPKeaZ8GEFYomYZQ4rqR3vTtLuP+U+gf9p4JmFjlgp0KwUIVj9541D+0iYUnfmbSNkFbDqDH2nNm9gVL1h0J/qFAHmDgL1K+Idk6GDhFY0r+4sNReD7JvNV16TBivpNso2dlrD/djvHM6vQT5B2Z5iNgFUFYGDHkBT034p9VAMKGR1EGtxnQhVo5i166QheqpTsQDevX3eRFNi6f2mC/lS8nfVs/TzAGcCKS11Rn1yp82itzuoQmpuXV/xKK8mqE9zMJ23k/Xd7M/BQrCLcbwPIZJrZgNgVrkFeXoAK26Bw6rGTx3A6KojcklNeVxK5ktFnw7VIhRlzk0cF8gLWbGIeTl0EeQQu/DPlwLlwuOmYIQxQw/4mrYlzKKoi3XdTTLMA4Z43b8OoaSi38Ov8C5ejq7MUAXpB2J3xC8gtvXP7o0Pewg0sfRRv1zOWRws5Q/2yqhJqIrC4oaJ81QzVP/9YgDslhNvM4tf7cjlfQ5aoAuz2Cy8PIFuiHOKCPqMvxP+aFDSAEkwzPFVw3Y0S6Iypo+L6sUQbS+ySCmpxXw4sySBRHiNH0+rkXFMFstmFsaSIa6m3r4c4v0rOS99y9+ZdNtADKeVpJy4lpEa3MX7c0CdaW9bWsNkBj8rtF8wTqtIYOD1YAUPCrAzB+Smpf0mCoDKyV3UdGUhxjvMY3iAjhBPzYm5xh+Jn96KHGtxnB+XfqVmrG5Kc2dfwpblrHPou+g553MhkhDUuNAEcMzDT5rKbE7GT/ENzZ/5mPyZeQWhMZfNyTdRSjYaMv6Fy9dROi/n5Gp1rA+0yy8ik34jhMpWyD9uItDvfSkrR40IBcgZX3Y9ry9+YlsyEIIUrMdO+Cvv7MWpAPz8RsFOUkt7Rp1z7YgisEndiTbHqbXXHsHhVIolYIuroD4uRP5xhcEptcNanQi0R88vECSgeV9wDjEir6y93jfVeZKjccuIsGBY1vkpYN0Y3S2GcgtuvRR5mGj2Wah1p89N4VkoUHG9Biz2N9g203/kswgneawn3Oh6ZBMuj91ayMF6OCIMlXAHouxCOE8bYVjyU5+JnQnZt7NLBX+5rpKIHiIJY+kGhaJhJ5xyYoGfsLFl22IyjgG2CvFppR8KSR8QnkcvhYRoW+l0opE6MxDSaeR/4EZUwA5RsvwXrf3TKClyYf4l+cbEt36l09Hvb5zMB4dc8rOyw7aWNVkMklJCRd35d+bidEqt+6aNyZJh820C+5t4dY5veRSmegMpWK+puuHoHIrAYXwjkaJGxRsDRhkjwUe/7ya9G+LPfNbDRrQaTelFMjuz77XfZroIkw0jb8c0xELelOqIetAMM6CCW/NVMBolNjkwUzlE1CcxFS5RgS+RZMa6TJ9CqHqm4vM2C6nvIrK7X26Inyet0PC/mD6VxUydMcbFmuNwO2lBweSegW5cayVtN875z1nyMSFcoXLvbHgLGYjso2oZPaRdU2yw94XZAA5mIfuF/Mn1F9xoqkJEYi0sPSeCt4vItjCdSTZ9oUwrT5SGjp/lXw3sSecgCg2LYkxcGKXkV+F/CAVJvLjSmNu40gQDIgE6XJ048R/vBkCq507WX+kk8AjYPJdqoLNLc0KY4I3UxUBSDDtcMIs7qbTqs+TlVoCCB4U2CwkR7N3SWQzXtqoxjEWnsrwGtb7mxYOfPaRSQZ/nAh6/qu9/oxF6Ed0Hnh1Czp/WnxQaRcpLVUm0UhiudlHBevFf2A3+YOed0nw/AToNmUPl4hdPu+jsTLl/yAxeWnB3QISvTJ3OyIAaLwEhDRcLtuclbX4uwiNf94dfgOA/GFK6MwDoppvHBCqqUtohzkxhdU+r+YMEFINVSOTNWJOVtb3Jr35oFd2IUOL06eVMfCY9hyU6d0iFL0eV3TOsxYRKOSaQ7ZJZs8cm6qnS0iKf71DPdL8YS3cy53/uYa28TBgztCH09OAE98qWpljarDJM6mGfAUXFqQkCXeLHopcky5Ur910qfaw57CMCkTK4ok2PkaWdu3JjPWwXAyMEDjvsLHmZmfvu7iNmL3ou1xSnREtOQQvq2Xu1YPSVuXAz93IIH43LIIajhfAy3SLY7ApAQmFOGXQVrteo+w36R0p2N541xi6KHVpwCRs5TxpIIHP13yf3dIZb9Z4QBi4g9dYvCkukpIr4bQShxZ+JYUPKrp8sH2cyPgrJYnCQiLh4cYQi2Ewz8h0ss4aPLF92bQffCN3fDCv6tweikIPgT4LOuMmPcg65Opnlr3OD+avP3Af9eeDOou9XAfe9eJBpMFADB6NcraH914SEGTJltsCbGwi3KXACTlY7suOoHDXUzFMQN4DpLfqqOasJ3PQQr6H+/R/HZ14I5zsk1uh+kPduWi6SpemDmd3U9d0roVH9VXtHtftgKN4qiooNBRgxG3w/AYNdtt6TDspvcxSliovvMF1KBrGPfEhdy+g7MgfazRYIg9gnF4h6kdzFgladTJnXEhMwpEp6u8D+OAkxBMH5cs56it1bwhLXcoCr0qwwX195dG28y8AUg1S1RRkBQ+tb85h/gUzGvckAWCCjrolUIQyjzWupJYuWoOrxQFJL8P9OwIa5EsvMO86aCCOK438Fe8kQDGK46gBdDPCJ3INnxB7AGYjH4heRbQWHn5b+2tPNzaqvpwjYGhe50xEzJn45ljzSovgAvYRc0K6MzPWK+uWeeI3Rk+6YzX5V7Y7JQbbKPY+Ycxh7sXGNIWwUsevM790xSYCeC2FLb/dnh1G0anGMsK5YMw8pHD8kE42t6GjsqXdy9r93UAPtDLaD8e0DA2n/HqbQZ2r/UceiVuLFfWenqsKEREMbGm8puFD5IZjZsp+tNagBaGiBKToC+PCS1tkalSk4eqn3vvTMES/GJHioqCEKgDr8AYzA3DzJENu029Ut45UTR9frmhkG0AcEOSeWhonZYhjAGHzGfRv5pW6gkS1TVKvK2xW3FHQVRrP8sYn+ZDfIXjHgj3H4esng9s/qGl2xck5pxcjFjZVXaapKsfgMO6hxfowjdd3o6qynTgZp6r+61xmsKx78vt4eS+lcP1P7vHGJ7MsrnLNeZiG3ltfPy/OiZmj9ggnQRzl8NeAWsEul7TPify6NYy3Q5hcuWl74TJ5gKVKsLkAENKwkrkju5ozteHojfEfMCEshcFOYJX2GFKM1DnYWrRTFFWDAqAf8X2AwcUSefcAH/5BxLPvvynr296jvUQ6lByWOMTF7ci9szOH7wzP5f8JKQL0bNhXgaXmAWA3XVF0pXLEHennpQhC0UmmfEQ8ErZOpI6lnsFuN4pwpEpMNnEMYerdglEf+TISafUGay6okVdBgWRBZ/Wr/xgZKrhZqx4sRcpbv3UdNlfkf7UrBLg9NBC63mctBZogMmzT9nPcwDpv34+mAaXVOuPl13MwPjN4c95XBwMZBPZFZ/4SCE82w9ObKYVzuQeKEVHe7tM5YkzZqwlV/m921hoJ5b6/9UY8RQde8SYHPYEC4Oi49h9lwCAj2l6QtoEhKZXualCUgR301RFUxngaljwxaVCqZ2l0L2PkBlt6EIDI1uVgyje/ty7Mq0thiL4Mpb1fsh9dZwo3YphZ14B+xzq7pJeRbDReYlSZObaUmqWvYzbkIZFBMjhPa4ewBKimM5HjF2nqdohTgqyq4r/3ZCA/yA1IisZkDZRzdzWl9r+SVGwSCU5a9IXcXrsk2uin6DeHDnQiAf0KMTQnk+Rp08suVOzG8pM625EXKI3S1pwgBwlc+3blvhaEqAcC9HM+6EF6xdLjVhRtcNwvVXgVchUmQ0P0QdvijMELkjTR9dqejCymZAdFSj3Qavud1MmluV+pyhWaYy1N8aUjHNN8IDRphBI7+58MDaQVSt2ZAMEalgwOlM2f8ZAobrJv1uBz6VoO8IBPcarpPSKn4aSs1G/9wo2xbUl20LDnxQvx6I85HgPOG2J6mtT/R1fHJEcjQRppJehNslhFAQfP9gTiChVo77QDMXyhCjBkA6Vn+LslCiOJ9mfPvbwgvAt6wqxHMFMvZw7kkGex6KMmc3wqHwnUNpn4+4nH7ZS6GtbIwFTx0w8oM67BYu6RSZ3HUtbxdwwA36T/GHYntnS9XF03bgqEgl8F+cHDEUKFaiY3gn9MCufGNlQsm3S2It62jqWoOFyzjS/4QnyYCVFqSjgpKvWhjWhycoZKnDqUzsD7jjh1OpgDq6kuSILSeeFK/Pd0nbLdNK49EWcwCPqmA+wDLdUK4m96QgEafrK0mOmI2bqBicOi1rMa5KT2WlGmDspivRjGcehKqvwUpVDnWhCJ8yJbh/sxM8wX2aorSAYZ0rvNid2mhWVKwldPzOMoWruvVaxH2KS4GdvsB82Ua1lx8S3TaTTkMrXEucW/MpktoxvOCI3LkGg4zl3XKg4Vb61jSbRBROUtqenu5Ced7dO6icHuL/ho3rcn8bqlhlyTvoWhURUuRNLJHaCm4aYxa+lRADl86EI8eQ296mSoX443HtO4XMjoz7PjXGHuacFQRvGsGY69B3H28N58KcqPqjxMLKdiJakXHWJalfF7uKvzsgotl0Qq/hGKaSAYX6/dJLDkNtiri37s3+LfdokxoJ/6V0DNTD0YxbVmln9j2hqE49DQwqlGMZ6eBe1banalg61p7w+Z8+7c3WBDiEauX/ZAWAIIzV2ytLrrTRnvILI4wMUfPleaVkbjTBeMfNtHpxKHg+VxfYmkyMp1cDmrni60lBm86WB53VOR3rMMeNh6dpou8knRkI+QHFXfjPv/VRF2As9oq5+K8mfQUqNdsx5sg/SOBFZ4JX6lJTiY6vmAdaMDbKSEGV0JzPFeW/RFHxD9qxita84z0jdPWUD7UkLM7NG55zGbbFxJD0sUffxPDvdtRKqfzJOpcs+5xUaP1Y/9EGEh4Z1c0rWIkJKCIiLQYt7xyNx5GdNBOmPloMdciqE/iH+BETXgff6JnOUwT2T8X+HF2WgYGUN6Y0Ug0WuvnL/6B0RBIa0kiGCIJu3jRtnCSXGGBFecorVxVfrxU5J9ehgGxedp/bgkq7IzcXOXhEgYE1VaQ4CSi5xVOxw17H4WqMpEf6uu8YIAb/AXE1jN6FgDasrltoA5Uq0yn+Z1Yko/4jQcxOmEZkgVqsyMtN23fYLxA1HM1akPO10nUKVFmmU0Adgacrjns/yzyuIcCJYwM11LHVAEbvzvdK3lURrgiodNbH+VTx4AItgi37fxQqfzqMQPlVUfAcgUQPDHeAJyP8HtqTmGhVA3+cnfJEEY1flxVzXLfhX9JweDY9HjNUGBqQcuvdmLhDfx0uDgvOv3Btn5XK+rwAshLrbt5RTSg/JuT5CFEFkU6FmDl2sY2EJJHahXGo9LeBRerz3TAIm6DcCVsxEPha060TE7d8vlm5QWVeWDdTjmV1oKDIFuABgtgAGgSFm94AafCHsq35x3k3sJdyrlOE5ASuK3ZvJUQO9Ln0hsaoyBTf/h8poJ/vVTYQQcHoK8z3amY3ucBztJ9TEPKq+UuP0nWLLI7prVwGOLIyjATDtDXdZ3KcaKEmrQezrPog/F53nBRQGt6wuA9Io37CLYElrQVcXQlqZKEl7K9ldxWFJw=]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>ZROI</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[国庆七天乐D1]]></title>
    <url>%2F2019%2F10%2F01%2F%E5%9B%BD%E5%BA%86%E4%B8%83%E5%A4%A9%E4%B9%90D1%2F</url>
    <content type="text"><![CDATA[你一定知道密码趴 Incorrect Password! No content to display! U2FsdGVkX18t1g84tjW1++TraunMstuB/T1pU3qNSCIb9fbh3enfcCTgsPiCXokpELXTMZvm7DPNFZhLIE6gXFSiaQAPZL45W1anxstkDgnOVBFfc6VdQ29BzHTFUYmLJMmVgZpcpF9vo6IW2AUp/P9DaW5mBmJ1bzNZ9jyvELbDhY0jT1CwWReCVGzyXL78MVQXD7meS69qDQUj8NStjZ3pM8bqV8QCj3okjk0TOtrqKwaiKiNtr8TnhFvaEIxC3r4Ldx0oSYwqFdotY6HCQfKJ/61DThZmw3L12IqOcF6kSuROMsNpCtoFTacW3/kRNb19pkaMdLfyDxsqSoybP6thxY3N9wc801D89A9VaueJl+nidC8Nf0/aLTzGImDRKbmS9qSp7Ug2FNRzWhwplu8qrGaxpSZyaqvdMxdBvEUp0v4/97QXNvSLpwmtE/ie2Dg/8j4VXn4MyCXi/W6L6WP0bNo9lBg/d9fAbCKWWmLxN/6sPcGj9GpMWhR0mreVJElovyXYUNoAktxbpzozC/vbzgKuwWcq3XXeZAuloz4b+st8+sfwdQJcgp9gVBiTiEQqzJSGrqNU01kETlytT+l6InSMX7JRCujQkLJhZkttrSBmEzOYNUk1FGw9jcGWgb4fbhoIQHDOHZI07lzgIRNo9L06H5oBbTcOKMjvS0e1EEVY2fT/h+FPHKvAeg4HSzKf5gk7J284p9WjfVMn1IZfsMubnXXojLP3b+giBhiKD/FeelcNb+jVOlkxq+V7f3r+flK6YDLZ/2iIiawoCBPAMK6x5KVJYgf+Th4uoxoWR6eAQAGnhA5LVEOLXRfC6anZgIcNsOxHfIsZO9UJOtexTBloEZM1CtNjpiIkObMF7fzsuAmktIvHRUBK5hftXDelAh5Ha1syFgID+6CBjKiXHVPfTCu1R6JNykNBO/oqvGQKovFZwlqonKtsY3mC3P7OpO47q1jukt2lbVnLiVfn5mSABcIb7FP64KaIu/w520/Len2dZhGzIqM985lhgXTRGqG7Utyml1ENwW9Oqplu5/i3GXv4b/h0cXaNA1hEECH3xiF9wdX0AnoBajQ0R/Ex6natIPM0xLpc5hmmhvEU6+F1X8pqMNIRV7h805uo7QUDZfmZFpcXEdBqf9edBlOh1mV6haO/pkZGEglAPwLv65s33BPBWhWPfxE51aYAbpbHXtF8LVO3aNhOIXo/X8V1TcBhk7FZd2y5cIcZncj4H6rzHadCHkmw8r5OKhwLwNsszbKtxkp9VUgZjxrJrm1r2pW5+CXCkPUte2O+UzCWEZpihMFxUppUeAiIhdL7XWBlHsPbkdwXNC6sLAhBvPOVdY+3S0T02xbBUIz9o4yivVp8y88jCshXctthdDFPMHOTpJz8k5OAAWe8TpFJeD68A6orpeke99MwboElgKOKLhCcrFPsv9IkCF+bEjSfVrsQ9GTZRWBgW5AVSWTsZosPgju4X6xrG6Dpyoj/BaamqOksWtDJrsscZGxCv4QCD4LIL45OnxiR2uc3nOfIWCWNb4cmw3AT//NL1SIIXqSxSYJNjUEqdAXv+VQ4dvyYsUwlAHok97Bvd43NpzWTlbizsLZd7n7C2BafRrUSLaWxpb8+qFVFxLZEXBIFZPQQzJ5omC2Nwvz1dgLLcRF//CxBErmIMUuNeQRvzNudXjynnLXr1ZvhGk11cPWEzUxF6JtsIIn6BdGngVGbVBTmaR2dJ/QJO9X82TUCZM2k06PajFpVtVqWUba4a4TZBVwIe0ePzBTdAB6a7uN810apf0HEd79XBYlGd6Z1k0l9lVyN97FX2VfkzocJfjq/RD/M+fAAKqNwm3nd0UovJR8K2Lq6XgBoWzIc1UhmuYn6f5O1X+7k9uLsVmetng23vzTJ66oiXU2784I9giPQ6TJmzq+gbxiSjKw5zCqoBZlplLkqPg17qJ89zfP9m7qcsg2iQ59vpIVVEd3JjBZledClcIzncd/S2ZELG5RxTAx3jOBLBbBdFZ243Ik10UJ0MEUFa5S0acROrDL6p6YVYbKANIFnMTnB3Zzg8WKmgpzsR8d0kSfNrDRtfp5O/zJlFhstABY0jGc97+/kSW+3U/hHhhyAKNUKExzpNBHZaWbJSpIwOfrFVqUWXe3bM8rKki+KSr4U4K59mRSq8D6ZOuFSxnG61vLaILaThxSlkoYBF3uAXR0z/7dgzndzg+D1moLjxKOcG7ufjHx7d8ygeHtD02gB/dzlVCFce2vGrR+hW22g2BXIQrwp+fD2H1X0Ssv/FDL38LTlQP70/lpG5+ZCU4714m881/WYSbNv9CDqnJ29IbrgnAV1uMRpNNCifnHjtqYWdojXMHxFLqeM0BK7r8aVx+MhzK6hcKkEtEJFJOue81yh1EIAkrWszaTaU0zEtZn2BR/0y2Qo+RJPEyNxaNexCW+RDV5rx9CJreleYMNA5Hzw0L03eX4xXixXWZxhxj5RuXyCw1e6jDIhAqePMK0uf1OSWEfLcI6IioyylgmrRPWsa4uCDJjapxN76MW/pmnA4TQTci4pfuFUbFYye9qL46NO7H/XR+OgHnnLGSyyegdxDkOMMVMa1Zao2G+QwthmNU7UIVTepqPpV4Ee4GW1XwDzde2h6WaTju0ysRHObXjAKLWEAZe1+ab9OG5DJiQNBMgKrZfXLmDhYsWLgpR7ddOGoFB/mbl0rIckAy+75egAwsNLLljPtkn2cJhdXGE62WMF7/QVmN8OGyw9sAZZjH9ZMehbTPNoUfgyGvS5HCXS0Lg8HkyNmD+b17ynwxxjrQEvRRXqRtDL8xeaPsbvRp5dMVtvY9ziXx9TBfwh96bP0wyXDfOE85V576HYAABrMF85tmOVloVzK2nwbcyHRK7fgPfMVrQPVH27YY9syLGFmUjHwe6ee1N96grYoVEldVsApqrJPlE4tEhJUWe+b3gU1nEm0obQhfd1cHz9puNlNLfRUr0mNLyN7nu8wu8br9xmelGXf/NyKxTl3mqDRVAD1nCBrlrPwvVD4aI3qQMDtLxCud/etv5kNQL0HMyBXGwgD2KUgGM1VJ9BOaLgrQG4gBaFfkFC4IPMuU2HdISPtXrnndz2HREdiU03m2TzNaePNTi27YM9FN/3wEaZBXS3pgYhq/Ej9TGhrrAjStv5RI/VUsg49f32v0mWNcDKG13Y46M4RYV5VkxVqq6RgS4zc3PyfDmkSM2auPTBK/msSi1PwCdK+Ftji7j9DYH6hYAMZjT13Nzguzr9Zgn6nztraFeWM7GWIH245/4l6TOaihX28nj9aF0lqTyk4KQ2C8NvNV4H5wR310gr0WCaHOq2eug+YplfP+Fr1DbVNvru+Ncv6iENQryehsY8d4mwoguWhI8GPU2WbwJM/0h66XgchPbYUgYAEGSYcVzcEa2gZN31t7yBDfmDtsUCrYBPXrEa4aZBNgYGPd2umN6ZVOP3Q6AoHrBurJCtkLYm8XLW0YvrCQVd1tINWTHmAQ8IUElHCT5nZKjzrZ2givX2H1GhaoDR7lz32MmWA/swpZzrvJTO6ZWWLE6CbljelIMKpovtNUhZeVurVY4OBUFU+CN5YTMg/fsSEkqb5udklKZbYarXmcY7tBPg7pbnPU6RFHFVIzad+fyl/b6pPF7gM7J9Nqm3VfQy2gtFN6B7scvbOKcVI5WkgOQhRFmDL0GCJAHZJie+m8QOpqZPfUov8PH/mGOtkicA1+/l6epzSU1ukONpHXRXQUL0pjAC1yrXZlTNJ4VE5h0mAESo3WQUQeSE1HFpWBG4auE+CVKrKpkXa3vRO7qp2IqOqR+XW5J5Y2Vqrx77gU48BMXbHe3nb+t/znxeh1/uqB1Xv2nOh4xguE1KgK44YmFwCl6pWx4TZmCn+9jhAGsFZfbvWf85zSBHD5mdEqZ4M+hYimuIyaNCTy9AIHJ8IvyBxU8+a110l72z+v1mRNSHlqxgQqAVCb2wYBjSd63wFk45btdg2NuYmWnwZu2L12/s07BQ8/rjG69CRmspq4Yqiv4HsGkV9MqQSQKjaudzYGFw6R8YK18t4qGBFoLkTwdVA7y1UgAezyA11xpoZvgl+qpOIIPnIHVRjU1Kaw/vqaBGo1yKofoDQ+RfK1ZaLKr/JCfa5OluyPLgZl0a4G5JQv0uHm+z1s00x4QuoR7sxjknX5dQdQ1mpr1GqxzmTI6YtN1Fq04N4bMelGCF9JHWxm5XeSrP9fwVONOTosFCIo68W9bXDYsIunlXJ6mv7XSSikAdL9a8mvr14Ysa7IL3U+eePmFQ58IQu6tXgzXM7SRy1S1LtL/6a4+odJBW+jdc8B9f/p8gj0Shri62e4ea9ZgkMDUDRR+PgjqXArhBAMB53emOic0lNh+ts0X6uCkpMZE415iCKtL+Ev/zlYDiYm2yFpg8CzyEUkT9QbHPCVJImK+Uv6SpOYeJ6Jz1dhVs+QWirRa0oyiZeoXzhn/dUqb/Rir1AeOAqb1e3ekJCK/wIh/7/eUmq2SX0cr8QdR2WNgc8XHRKT76o1esRePX1Keg9/+HX80eTCj+WbmO0Y//PO4q1EUwuD1eCY6E2F3ynePu84qdONfLFHkMi3XMnSFoWM98D/rFi28hMWX/V+k+o34r7JRTjwHOMIsz7Y1+IIqPBel/mBvKueFxYACcUsRDzmd+gtT3pvFLJaCP+8Q3FnJPFSjE8uvreuoflDhyYesn42SfxKSj1K9gqUtQZ4BQLUS5Psa9CHlrnHISq1L/f2J9MSLcbvHc7/j49+WqcUG0YsXi1XbIR0KjS0kgUQWWGkeXT37zbRuw3lYUEz/EfZIx7SvfZ+lrFhA16jWDTrbigSuOpr6AAAWL4nM5vQJTLNRIHVPufrxlvhStQt6XOOJGnfpzGVQG0XBQBQcECpHa6mOHUWLzvgdTtCw4nycPp01o/qHQ5Lg2/dDrkEL2M4xayIVUXOoRYPdV2r7gVtxjTTydr36Mq3zuzm5dUA2Ip/ITYfjnVBYZTIM9l1cBGt2ipcV2AbhTQ4Kcn94IxsW4VGaQhwoV/zLOQyFor6g31jByovUylUNzInDJSGCJtMMVF+jRJYV2jLiW/1w5Ee8474ShWSBj5zHAMsGsHO+UmoaDLOdPwg5EZLV+SGZvWk8LnkvxXZLJVQE9DdsQGC9UViIRbvUE6L1K6xfcc4OZfmIrUaXxfGB3BHl9Qynq/D+6sBrJVUwN3GMK83MQopwqyqvY+Fd2yGK/UIZxheWCkVK7igdANFOHsuKNO/wJc53ozmg2B3WM3kB+yILMYSVlVVqZi8hJgGRlDSdAqeJeiSIUdW9UnfSjFjs4u2AYdtk4a2K8sK+FEEwat8YQ+SNvDXvkIWFaZksuq0+dRbafTTGUOZeEEm37EPX2QJfV3avwsVV+WT0WsItNllm8RhEmh7NOl8ESILlimYEIWEQuptkouAYnpQbCWYjL6/UHxgp+Qcu91SIK1l2M73n5MQNDx++vQ70DrC8UoketkepamCYSvtA9D4Qo1Vp+NK3G0ANIUFTFugOF2mt9AbhfjJCo3bIAlHYZN+DYaw5ybXyFDKyl1lxgEaBmA4rgeXyo02px9/2KwAulu0eCcb7JCb8LrZNTA/vHnnJcoexwJenceLi94iW0cwQo01Pu9OndQlt0dMVZrb0xKTn2N5QDZDWLZ9kseAoYgDnyQGX9SmnkJva8a4DOyCrJC4ECCnHvJHWHth1ax7QZa60Rb2z+VolrxYrxlSl+xHpv+hUY/9nSQo01IxjXDWzHpwTsWTv2E/OvV7IqfywsISzeopoDn/51rAEPLFIcL36F0OKFipdVRwvcUpxUQ7YTE11AVw+rfHimdRrKHiiaYjvtLQQMDXI4aZ5lUhK+/5fMU1H210awUi+EOi1ULpBNPq7vPEqgZThdu97jhzHLs41nDS+XF2aWSKCJP93NXlpgDGjtYUjA9HbhsXrb0WZTZfwJ88yndekk9Xf7Bkx/bcQGAxtGqXVD6MKDnaIF5kiqQaOhjmXTdY5fAy1L/uiBeAlAOitLNr460Uo4FzIY8TsYw3JYEDS7RXbJHtmQb6kkH3muY/xucH1oMcpu2J0SAsyMMOKhif+4wgi4oMegC/cQ/C+BPnBzdfZRgtOs0GSWtSrkNBx5LZmzbB7uGqtO8X1la73g7mscYmb9+RaOQ3cpV1amFS0n8A9uzQXidCt7ggvt02OGa1+zpJ8bWye9ELBjVx9gYdJkbn3F833sMBtdSJgu7Agmx4wNsus9YQh6IjzpuYflOC3Lw0wUnZ9lD6HN9QZ7nRK47wirJnVP7Tnd55qjTl/Zj5/8I56qfGJP92oS8dRz6GqCu6uIDrN82p1WKGhU0DCd6qL/6IMJW9zAE3QbVPT+cj0kJiz0dfGeyN7kFr90JiaCQdQ8fhZdCEizvIHB3OWn7IeLNVqTgqsnu0GNDyvRXXIqLPxXxF12+EK/AaS0blu+hqja7wAGrD5DtpoLjG6BcUFM+GajHmoMhyj61G4btI5MQxvYaSM/lrAV4l3qray2710HAzX4XGwQ2cwS/CkRR00VOukiKBExJlFsuKOyixUd8+kGEDNukBg+58f1/H3J8JqcPG8O44OyBrh4jZ5/W/LGAymcNCCORa586sLlsltTRWF+0asA85avg48kOfkNr8W29/g40XtlDehUZDR99iWu1ehw+aIE4FLFfT4uqTceIj5MXxomne1tsM4pSEYJUfToyoF2WOrpbP3iiQjgv0gw9DPiGKmHquLXd6aR9U9NJ8bVvh8XHQUNElpsMAgSEOcWjc0J3L4li4AJCORZ4TCJHXt95UYzCOTbtPl90bOQ6o8SR6WwTJLEmLrbRABUhbpey02xjC1VlbuILKDTLFkLijlFyl0gxVXvu5x42FxHNgBJGr1Hq2dkhKS4qEAJNGRoxbPHVY5eGWyxGdy0O9467K5xM6QqWqBCASk5eIgbLcd1Icn+ngKl2MMDiLb1O/VPEtp48K/+h8iuhu5B6XlQBXcUdnFgSvlVKSFlR0hp3K3+IFEOpRxRRmXM10dGN1IuXFiBQiLmeGJ+Fc7bprTXoye8gIPfK5JvFj1BKU/6CKDm21UfVXymuclea0Xc7E2PmJCbqhe6UpAPMBvP+TRAUowLIX9m0TVcumqIiIPKgQ5QYPgy3q7IZwUTX3F4VpUZttIi75XJG72epPcIPbRWwLntvusOSBHG/Gh4NP7FJvaEC4jqzWMTrbif1hnpXk7W3Ik0q92fKrH9vK1tAJHem9+0wiSWNZcPSBB9KkCVdQ/HUqOGBcmeijekMdkVagmAktSMRQQ9HG9BGXsE0RUizicacTPG6mc7UX+ge6fzu1rzr9oDPHMRwV+YGO8dD9+KfqZPTl0wjSa3l8YriitJ1ieevQTK7b3eBQRexV9jCFekfoCaXYrlqZjLhkxI4roSCc8M+fB909Qy7cPlqYNzvPIQaacnxQLzgqtyCwjbzkcA4n+FnSHy/brkH4n6Jdfs0W1HTXhN/KfDijN8YjdyeCr6t90RDRy2a/WemWUdOszd9mkBqmqOZtRAagyE1VwCLNMsMhPz294Dfwfuki74d1e3nJBPCtsNycfwMoFN0EZt97p3q+t+t4mre0kJPJEGljFB8vEcfYYuprMqmF3xcWcQi+OvMtCtf4YAmrFOvvqTASG/HqmMR0IVzJ7uP/I8Wr6lG1bM32w22JR7sahzs+PjSOTZPTq4vF/0a72s542CjQlsZEuMLBoKXEUtTzYCFnmWp4OJmG2LMj9t+6I2fH6eAkk8Z4GmKgZfO4XsRRcAybTWN6zwTDnph/2lfpGHj7k4au78CnvHxBhE1JfnGOudEDJNBcEZMGBK9xX2bci/a1PGTsSkDkUCBQOt7qRr4fjKc1NrtRAm9qH5RrXEVKArDvp5tte6zQR6/mZ6Gcyfpo7qqrxd0WN+jJfQeDBjcAEEGYdWEpAIVlLeDCvo+3DuPJEdI0Cs6Y5QMnd1NMxz9tdnlgcu2defreVgP+X03zHVhS3Wf1teI8vjO4WJ0qT5nrjpN3zjhss90nOudPFX0ifYj1eocoLZ/4z6fxdsCkjhiergsBa93v6RLZQSACJV44OHLPTcD8lho8d56usvCB2OZ/J/NyO9F1hsmDOUax4+gNvXnv9UkRgGTk0D7J2g4IWZZqJ/vlwCVMVxcYMaqF3FvDVeb4Bf8DJlILjsipioGEEay6oZ6jmvq+Y9SMLPqBlJi260kFcKemNqwBDkYTBkJdPpliZ15uZy/0H/xe/CrwxJ4xrW46DP9aOveW+ruyfTUgmfR4Unmt/1S7edG1FH4RKqD4T76MrNgLOX8ZltwP4/tZqZmdUUzadmnDRdLsFbD2KwNoAaj/4cdlNyZOyJKsoxw8z3KvuFEE7Ezp+7yPSaHLJbTQe2xnuRnP2C7W4kbAhTpmEov3aUXJ1qwkxD8Zlqn1jfOkcplLMLiYULVbTlH5ktEBNsGBatDTtZyQE99rvz8rzP/0lkvNn/T2Cg83QuihdyH/q2+q+cAs/Bqyx2VzMmN8lBCUU9xqdqep3fIwFMOud/I+cRp1SQvLQuLLaDLLBeem47mTbNdTMN07ZdXMa2j1sg6g8Ny3f+sMI1irEh9A8o/ZyhQYlYhd7d0yQWePfSVK9ZbnGCee1QXNbEHSBi4cVhXntp9XHDWbcEskdIyNad5yD9CmTn4uB4NH8MkGdhs9d2MQSKxPB8QVTpS19jLP07OmnG6N1+sFQ8DNsOkXvkviLeyDOGhA+0d8xECvm+qTBWtz7ojnTG0B+Pv55E6UPTlmkGXfFWSyxicfWi3eciCNbxs3Q6XDHNUZ41MIqG4FUEg1zbUkJe5bA/XN1YzBRYxL+R09tDenLrpcDce2PS132M8hUDqlknXdVUW0t8tuJvObULQAkqu7t+qWPS2UQOFc/C/2/0E55WWBwKlExRY+TUqCNbcRwg4E7t6fVyAjrPaSqt9FTTaNZzqxQHmCzJAVPoT0Izqq4pdVnjWzrTXIGz9+trnaMtBneqxSoOMCZJtULFhHyMwrDEXMpdirWCnZq5VyuqX+P4NcLyFVc8Bj/p11pPlcU7UFcLRGjHDsSt+1hzWvOXwjdJbZcVf1AvUYLVvV8KG198+VV6S9z1+7C8+HHalqnPjHkfymsl2qodXjVRFx1EfJQECZ3QANOyUDVcUKuSqNyr9HU97VhIYcQTCIFP/WIujz1duxbAc7tFZAVlCISmz6j33PFqHG5JR3uv0sbPEcoENmtweO1ywHPuN4mv2LGXyDe6p3Wic8HoX9S70+Cpr5fke+1AAjhqDc0yRcISa8OeGhnVfBNbVYptFPQ0Bavq11pvd/rmWyQ36b+752ldAWffuiKEa5DDNW55E4g7UKDmCecESodx/gK+sCln4bMWG9PRg/okjXXrfaTWO6Bd5DJVdUGVtD9v7HDbythUuh83lWzfp+D0ShMZXlhy60TjSHknf3DQYmkl+dNBV7EYUfp7MztAfJCTCGtdMqfA9nJol5P01uRLiC6pihYBq0LWZ4Nf/ShHm7pbFbyPT13uX8I039yOHY7uV/9qZ6q6v29sqfDAXmbY0tBTmUkOTyU67SbRwP/8yu4yi9FDohbXne8173QQ9ZyUozcELOS0PTwU1tum1XYsRQquuP23Ccsw4MfaH0gcsEUgmix5cgvPyeqkKdHJZztzsu2gf5kbQDisLH0ytChJr34tAD316FDyMT38aUF2XbnOVRVK/HQuOflJ/TRDGf1D8U2iFsjkYV+CaiqZiNsEToXYiqUzOjAMzfrXAN+80xc74HNVbZ4Zm5j2x3z6/IYjvnoIjQP2yw9yaMIBlPIsBK0Hzsp7mupKCZdghktltyMQHgBIuKU/ePDdUQlWqh79fMPSzcjrOd6D+dZEgBbu6postDUdTtdPu9pgobSoVRcxwpuZOdWEV8pj8OK5/zh3UQKe76kZCxQ2GH6mnFFGjFxSLGJ8bnERTXmrgr5tjb8mhDOMg6yMmT8c8MmiNUyG/pz7lVzd5nvyGWoocYnezcDdJLP2OEeHpXTcRTCmxOICQ/DoUwAaNhIhSUw5yrBZkfiM6/RSHBhifYqiKIg3HvdQd/nhrUfh6l6Uveo3nKio4uo9GINyJTWNMUaW1Fhxt1Yr5EGAgNaVVnk7F1QVZ50Nw+iQJRq96Nlu/oRHPnlwzvevWLpYzuRxWUQoQ7Tw2/vo2oGFHyNuYKaPcGqvfl5NCEUR2+9ny4is5OawZGpo5qEQ9LCHT8ocOs+FCxOMui+s6fIpD030mSCkpo5pAn13NkAXaOgKfkNMS1RsiM4+7k+X2KoTD5kzWonzsFkz87I4I8WOli3PjSTKbe/KN4NqmCJB4cA8QU+fQD7Wq31izW9PtF5PXieZ2x/OfwVPT3uw+ICMHOdkRKn1vqIVSxLPE/u1X30GLL4qK9dJnmbb8bVKcgY52PJ1IiJJHb11SnTybbqjyh9uu6PVWgzi0lHYSXeAtp9mez0TrpkUAoBVX4hKYNn4L0eukLUWJPFBB+o9VVzsivdBnLvUMFUHqHrJNeGrbyJxffA6Qe9EMQQbqv+q2B1eDQSLnESKEUXae5B9Ia0U0FCq4fut9UVwRLKE9PrilGfNIeU1uWkGhYBxB5toMpglwTwjewbbklAZRUHE4vzmZMdOM0CttuYYSBue7ywLxFpZ8jtkSrwendQ6rQsssjz6ZUoo6+zz8zx/EVPy7f79/lnOVutZXVjFSlHLYYJFUq0sU2xg/DOC6zmH7WO3CehrBB6/mzOST5wBlChTCLLHxE1aEk7h8hyBt3Zta6HGt/5GfR6et0Or86/NYrdylz72KkfJmhvcaRzTstwKiJiNarBK3CKlqNocMyIIV6dZur8FJWXU2w26+CcY334d76KvAbpg4JMFWyrIaOoOsJskyB8A7gmprnM6FbqArvr69LEobzNo3wL9xTkJkEBz5NexE17Lg54SmOsnA3Ni8xzQNEs4Ifxj5uoQHh1QDEELSRl+qDxJ+qUfHmgJcFe0KsxJY2GzXBDsnfbXKbiND0le9j/eqgUpGW/LGe9BWzy903OZCha6Yal19GFHRHT2UX1yULb/+y/JVnTLYJ5mU5DHEuiAtA6yM2RVm3BV2QXg/C+Z4b8F8Rw5b84VzZVzGBTSgHrw4D6LTtH7+0/CuROXo5UV/UX0beVrvUJ+4s8PE7CJz48ddysV9stH19rlmWgvgSyVLosijO3n9InGY8DVNxbGc8Mjdixuh5kZJBQA5ucBFwDDvfZS6upefqwosHQBeY3r/UFEZlob5GULfAG1l4vZIJg4DIp3m5cV7yvA7vvUGsiSPADbns+beylfvEn62P9sQxpO041nOFU7TgnBq3bwQa5yvoeLDs3jayShJmytpgYsc6BtTijtEHGvD2TZaztLCISu+N4IKf+Jex2NkPtxHY7vJ4PgzHRWE4HcEqoblfS+bA8diiIaSObRL5Il5LHCw4p4EGhBPzO8a5AIQiakm/rRTSTACQhQRV63ZS6oWIjXzrm+DJN8ArDaEO3/8D48U5DGPwtGDWSqdnOZtPPCfcvUOU9q19oXl4apgvv944GfsaeW4Trr0VcSzx39xZK9Z0W/hFCATlwFsV4UGXyVHqm23MFnY2nRn0MJesHm1Y4kWSDTH3aNVyYP7OVeOvSEsiI5Kfql+8PfG64zN8/T6b8xncj3nQvVmU1eYgUeKWjGo2iU1Gcz/+ayUeH3KQ412I2Hf4mfdr1ANqiZHcTmRL054nEFLPeUsbqUa9MflDVEu9/hcWd0Gw3XBuryzbheZqT17sx+uLie8K5C3CVeSIrSbLU623MIFhPXIC5MzRLETkybDXcr0mJiRR6QAObFCemv2j2Yc0xNCeK3VZWERP8NFVWOPklWzI7WcNalbgz65vrsU4au4qUSu6YCLKjnoRUl9cKRJSvgWlOtu5nq5T13FYAUoAoaxUzZssg50ZR0Bh1/6GRCfjo8LhB8Z3iHUT6CB0EkUKGJz4e9IlxVg2fJhXO/SnyyMrql12s9gl9RitlosW9DOHAjW1U15D4EexaOSdl2EtOUquDoiLtbqGcO7n3hzgHOLo7ZPwvU8YPnenjRupc0h1jb2P95vtQ4/5b5meilsdnJfZWBDuss4rGr9cnfEWKJtk9nnvjt2N15Y4i6Edit+6eXKKz9ez5hKGbo753oU1iDoFxf6lBVcYSW3Uj+LiLAJPG5YhqquwxYyGSnBEKc363vgp/1uwlIgSUXWvA+Mz9ytbHQUPVYjfky2KO0il4CJHTJJBy3XeBaPWGi64f3h262UDaW6q+tgGvoEADtXg7izFWejqYVQGIufOXDa66/6lmUoE+/B0ai1b6xv+dPRH4QNDu+FH/qxx31qiXKhIFGGHV4Xby+hrgGu3/CKGD5fE37Ymp9fAwodXQPwF2Hx6GziWSIW+1yVz6MrCGd775JyU+Jz2yoYkXWqI1u0bi+k408sr0fPrMkl2sVsdn+141wN7v7/VpSXPie20WYiFcPWtBBcTVlkK43Bus8o7sJFlhHslRd6D5ikJg5dr2tWbrRHLi6tnCpS7J7nX2cZ0yr7PQ/7oNkfKZvM7S2Mlzz2gE48GRXxw6SBb0oj0R2hBLvxVlrsZ8soff8qC1HQfwfA8AHIJr5xucV+2iqXegcgWOgw+rXuUrki0fEHl6rZaK3vsvxj0nVXAuDEkcSxbDaniKwNnK0SMqoN0rOPG/qU4gDRWji+DI1BOiefHG4Hf7ITGbJKfd52x/4MTSGhP4HVfyfuOwLa9CBhkpcMximk5Td+ZTWy7z/xCb2drqn7xAtIwQuMewiwYMiowZZMDpRrri1DLOCWoBJ7YTUQcLfrMqWqM+E4CpDtqKuIFQ15ovbDIPtGxpqTMCC+opmKXdrmXSUsQM5/LUbME2yWA6WDJSDQwbuGMyQsyFnk1W3V+NJRXPvDfWqLozIVoPqq5RKArubzo3ml8xoRWr440amAKBGnll6IlYpYdqHvRD2MH/5JJh0jUwxIZykOMceU1aL21ozm8+lB8sWNfhSf2u9esbyTZHgVgrZPwnGDRh2QrW9qXr24mNy9V/NTYJsD+wxARlzL3Ka2a4e17+mYoRakaJmwqkoMg1LexGQ+QQpeJJVqMdj2OjJd2l8iNy6Ys0KZ63UPEFB4KywP3A5t0DsMDoiBKDYcYklyCZ+H1ODU1OzvEMt5AZCsHbHAtcbBturhglboYGEqW1CluXjJQfwnRpqaMJlFkFWyhiR//vChgXX4TimWm8jT+Wx3+M+hiVTRo7Ep1MEuotSD0fNnLDNboKl5ymARZ0GC2vcCI7BVehJDgGepFl/P/5ewtyNbuvY9Pl1WywTk2IdkIK4s698e1Y4d98Zp2c2MYAjUbN4OnNfFColyjBSA5WmgWtbGcZ70a2nrdC4tpr6YIEsFEYymkZCt52A2zmnxEBwlWzsAQMwiHGA547xzub2SMC7Zj0wcPOgwVxdbeeviDyNyVhpVxb3LxhBgGgyBxBTZukar02duzzS5GDKBDOoi02rX1nv1sV3vAKjcyvt+vb8j/fPcu9/IevJrwKAYT7o4EF1vZNkMHaDjZLImQoxI55NRnFZRLwR+fElqDtEmNt7Ig6ebkaCtGmPmtTHY59AA/tevbSVvcB6fP45LmUtv7vw+yeiHd0sbyA5ePsFuH/h7QoHbqfhOtdUxEHNriu9jKNLkxJ/EBLhtYb1pngjCmHpd8Pwb4plmgXKQjVTrbUiyggddUQ5BPlh/5h3+a7M2H9kjYJPH9TDGw7xLKob6IRff/seF4EMzbIy/whlOX6ddnkaWRuPcOJWWnIGur7fNGP7Cx7mdqd5mrBZRGK/Diuph+E/K7yg7V7YrkG5o8qJJtPHMLQq74Bl1DnLuHdFEBKq23Qa+cFdJV+uz4oPnBa8JHddEWT37e+meALIIWekSBD2HI+W8ac3vpoCBESy]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>ZROI</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Codeforces Round #588 (Div. 2)题解]]></title>
    <url>%2F2019%2F09%2F27%2FCF588%E9%A2%98%E8%A7%A3%2F</url>
    <content type="text"><![CDATA[lyt我对不起你啊/ll Dawid and Bags of Candies其实我们按照大小排序了之后,我们发现可能的答案只有第$1,4$组成或者第$4$个单独组成,判断一下即可.注意精度,不然直接除$2$的时候可能会被卡. Ania and Minimizing发现如果把高位变小了之后,那么答案一定会变得更优.所以我们直接从高位向低位贪心即可.注意判断$k$为$0$的情况. Anadi and Domino$emmmmm….$看题面就非常高大上然后我们认真读了读题发现真的很高大上.看一眼数据范围,$n&lt;=7$,所以我们考虑一下枚举与每个点相连的边的颜色.然后我们直接暴力$check$即可.对不起数据范围小真的可以为所欲为1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162#include &lt;bits/stdc++.h&gt;using namespace std;int n,m;int G[10][10];int col[8],ans;bool used[7],uc[7][7];void Prep()&#123; memset(uc,false,sizeof(uc)); return;&#125;inline void check()&#123; Prep(); int tmp=0; for(int i=1;i&lt;=n;i++)&#123; if(col[i]==0) continue; for(int j=i+1;j&lt;=n;j++)&#123; if(!G[i][j]||!col[j]) continue; if(!uc[col[i]][col[j]])&#123; uc[col[i]][col[j]]=1; uc[col[j]][col[i]]=1; tmp++; &#125; &#125; &#125; ans=max(ans,tmp);// if(tmp==21)&#123;// for(int i=1;i&lt;=n;i++)// cout&lt;&lt;col[i]&lt;&lt;" ";// exit(0); // &#125; return;&#125;void dfs(int x)&#123; if(x==n+1)&#123; check(); return; &#125; for(int i=0;i&lt;=6;i++)&#123; col[x]=i; dfs(x+1); &#125; return;&#125;int main ( void ) &#123; ios::sync_with_stdio(false); cin.tie(0); cout.tie(0); cin&gt;&gt;n&gt;&gt;m; for(int i=1;i&lt;=m;i++)&#123; int x,y; cin&gt;&gt;x&gt;&gt;y; G[x][y]=1; G[y][x]=1; &#125; memset(col,-1,sizeof(col)); dfs(1); cout&lt;&lt;ans&lt;&lt;endl; return 0;&#125;// Main Code Marcin and Training Camp我们考虑到,如果一个人$i$和另一个人$j$能看顺眼的话,只有$j$是$i$的子集才可以.然后如果在某个分组里,$j$已经是某个$i$人的子集了,那么$j$一定是可以被选出的.所以我们的任务就变成了找到所有的$a_k$只出现过一次或者不是其他出现过两次或多次的$a_i$的子集合的$k$.然后从$sum$中将这些不合法的状态删去即可. 因为知道了自己是多么的菜,所以才要更加努力去追求那个永远也不可能实现的梦想]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>CodeForces题解</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数论学习笔记]]></title>
    <url>%2F2019%2F09%2F25%2F%E6%95%B0%E8%AE%BA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[数论果然博大精深,但是我啥都没听懂 因为知道了自己是多么的菜,所以才要更加努力去追求那个永远也不可能实现的梦想]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>数论</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SCP-114514]]></title>
    <url>%2F2019%2F09%2F23%2FSCP1%2F</url>
    <content type="text"><![CDATA[qwq SCP-114514 研究社 等级: Keter 特殊收容措施: 目前SCP-114514无法被收容,目前基金会的目的是使SCP-114514保持不再发生变化. 项目描述: 已知SCP-114514曾经的名称有信息学,OI,国际象棋,围棋,五子棋,羽毛球,篮球,OSU,植物大战僵尸,外卖K歌研究社.已知项目会在随机的时间进行名称上的变化.目前已经证实,在每次项目的名称发生改变时,项目内的人员(称之为$SCP-114514-1919810$)的兴趣爱好会随着研究社的名称发生变化. 经过研究发现,SCP-114514内的人员爱好需要的物件似乎并不需要从外界获取,会有一个被称为$SCP-114514-1$的被称为$Z$主任的人形实体供给,而供给的物品似乎是从内部自然产生的. 在每次项目的名称发生改变时,会强制将项目周边距离不超过$10m$的人员强制转化为$SCP-114514-1919810$,已知这一影响不可逆.而且在普通人员被强制转化后,会在[数据删除]的时间之内丧失对文化课学习的兴趣. 常人暴露在SCP-114514面前是致命的,所以对于SCP-114514的任何接触需要3名及以上四级权限者的允许,且实验者在实验后将被强制隔离$3$天,如果在隔离时间之内实验者表现了明显的兴趣爱好变化,那么实验者将会被处决. 对于SCP-114514的进一步研究报告为致命媒介模因,需要得到O5议会的批准之后访问. 您好,监督者,已取消对机动特遣队的派遣指令.]]></content>
      <categories>
        <category>吹水</category>
      </categories>
      <tags>
        <tag>SCP乱搞</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Codeforces Round #587题解]]></title>
    <url>%2F2019%2F09%2F22%2FCodeforcesRound-587%E9%A2%98%E8%A7%A3%2F</url>
    <content type="text"><![CDATA[LYT我对不起你啊/ll Prefixes经过观察私信找规律之后发现,对于每个偶数的前缀$i$,如果$i&gt;2$且$i$这个前缀满足条件,那么$i/2$也一定会满足条件.所以我们要满足的就是对于每个最小的间隔为$2$的区间,使他们当中有一个$a$和一个$b$ 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970#include &lt;cstdio&gt;#include &lt;algorithm&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;queue&gt;#include &lt;map&gt;#include &lt;set&gt;#include &lt;cmath&gt;#include &lt;cctype&gt;#include &lt;ctime&gt;#include &lt;vector&gt;#include &lt;cstdlib&gt;#include &lt;stack&gt;#define ll long long#define pll std::pair&lt;int,int&gt;#define MP std::make_pair#define fi first#define se second#define oo 2147483647#define PI 3.141592653590#define rint register int#define F(i,num,b) for(rint i=num;i&lt;=b;i++)#define D(i,num,b) for(rint i=num;i&gt;=b;i--)#define G(i,num,b,c) for(rint num=head[b];num;num=c[num].next) inline int _read () &#123;int s = 0 , w = 1;char ch = getchar ();while ( ch &gt; '9' || ch &lt; '0' ) &#123; if ( ch == '-' ) w = -1; ch = getchar ();&#125;while ( ch &gt;= '0' &amp;&amp; ch &lt;= '9' ) &#123; s = s * 10 + ch - '0'; ch = getchar ();&#125;return s * w;&#125;template &lt; class T &gt; inline void read ( T &amp;x ) &#123;T s = 0 , w = 1;char ch = getchar ();while ( ch &gt; '9' || ch &lt; '0' ) &#123; if ( ch == '-' ) w = -1; ch = getchar ();&#125;while ( ch &gt;= '0' &amp;&amp; ch &lt;= '9' ) &#123; s = s * 10 + ch - '0'; ch = getchar ();&#125;x = s * w;return;&#125;template &lt; class T , typename ...Argc &gt; inline void read ( T &amp;x , Argc &amp;...Args ) &#123;read ( x );read ( Args... );return;&#125; template &lt; class T &gt; inline T max ( T x , T y ) &#123;return x &gt; y ? x : y;&#125;template &lt; class T &gt; inline T min ( T x , T y ) &#123;return x &lt; y ? x : y;&#125;template &lt; class T &gt; inline void abs ( T x ) &#123;return x &gt; 0 ? x : -x;&#125;template &lt; typename T &gt; void write ( T x ) &#123;if ( x &lt; 0 ) x = -x , putchar ( '-' );if ( x &gt; 9 ) write ( x / 10 );putchar ( x % 10 + 48 );return;&#125;template &lt; typename T &gt; void writeln ( T x ) &#123;write ( x ); printf ("\n"); &#125;template &lt; class T &gt; inline T gcd ( T x , T y ) &#123;if ( x &lt; y ) swap ( x , y );if ( !y ) return x;return gcd ( y , x % y );&#125;template &lt; class T &gt; inline T ksm ( T x , T y , T Mod ) &#123;T tmp = 1;while ( y ) &#123;if ( y % 2 == 1 ) tmp = ( tmp * x % Mod );x = ( x * x ) % Mod;y &gt;&gt;= 1;&#125;return tmp;&#125; /**********************************************************************************************************************************************************************************************************************************************************************/ const int N = 2e5 + 10; int n , ans;char ss[N]; int main() &#123; read ( n ); scanf ( "%s" , ss + 1 ); int s1 = 0 , s2 = 0; for ( int i = 1 ; i &lt;= n ; i++ ) &#123; if ( ss[i] == 'a' ) s1++; else s2++; if ( i % 2 == 0 ) &#123; if ( s1 == s2 ) continue; ans++; if ( s1 &gt; s2 ) ss[i] = 'b'; else ss[i] = 'a'; s1 = 0; s2 = 0; &#125; &#125; writeln ( ans ); for ( int i = 1 ; i &lt;= n ; i++ ) printf ( "%c" , ss[i] ); return 0; &#125; Shooting通过观察样例可知,从大到小排序即可qwq… 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566#include &lt;cstdio&gt;#include &lt;algorithm&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;queue&gt;#include &lt;map&gt;#include &lt;set&gt;#include &lt;cmath&gt;#include &lt;cctype&gt;#include &lt;ctime&gt;#include &lt;vector&gt;#include &lt;cstdlib&gt;#include &lt;stack&gt;#define ll long long#define pll std::pair&lt;int,int&gt;#define MP std::make_pair#define fi first#define se second#define oo 2147483647#define PI 3.141592653590#define rint register int#define F(i,num,b) for(rint i=num;i&lt;=b;i++)#define D(i,num,b) for(rint i=num;i&gt;=b;i--)#define G(i,num,b,c) for(rint num=head[b];num;num=c[num].next) inline int _read () &#123;int s = 0 , w = 1;char ch = getchar ();while ( ch &gt; '9' || ch &lt; '0' ) &#123; if ( ch == '-' ) w = -1; ch = getchar ();&#125;while ( ch &gt;= '0' &amp;&amp; ch &lt;= '9' ) &#123; s = s * 10 + ch - '0'; ch = getchar ();&#125;return s * w;&#125;template &lt; class T &gt; inline void read ( T &amp;x ) &#123;T s = 0 , w = 1;char ch = getchar ();while ( ch &gt; '9' || ch &lt; '0' ) &#123; if ( ch == '-' ) w = -1; ch = getchar ();&#125;while ( ch &gt;= '0' &amp;&amp; ch &lt;= '9' ) &#123; s = s * 10 + ch - '0'; ch = getchar ();&#125;x = s * w;return;&#125;template &lt; class T , typename ...Argc &gt; inline void read ( T &amp;x , Argc &amp;...Args ) &#123;read ( x );read ( Args... );return;&#125; template &lt; class T &gt; inline T max ( T x , T y ) &#123;return x &gt; y ? x : y;&#125;template &lt; class T &gt; inline T min ( T x , T y ) &#123;return x &lt; y ? x : y;&#125;template &lt; class T &gt; inline void abs ( T x ) &#123;return x &gt; 0 ? x : -x;&#125;template &lt; typename T &gt; void write ( T x ) &#123;if ( x &lt; 0 ) x = -x , putchar ( '-' );if ( x &gt; 9 ) write ( x / 10 );putchar ( x % 10 + 48 );return;&#125;template &lt; typename T &gt; void writeln ( T x ) &#123;write ( x ); printf ("\n"); &#125;template &lt; class T &gt; inline T gcd ( T x , T y ) &#123;if ( x &lt; y ) swap ( x , y );if ( !y ) return x;return gcd ( y , x % y );&#125;template &lt; class T &gt; inline T ksm ( T x , T y , T Mod ) &#123;T tmp = 1;while ( y ) &#123;if ( y % 2 == 1 ) tmp = ( tmp * x % Mod );x = ( x * x ) % Mod;y &gt;&gt;= 1;&#125;return tmp;&#125; /**********************************************************************************************************************************************************************************************************************************************************************/ const int N = 1005; int n;struct Node &#123; int val; int pos;&#125;ls[N]; ll ans; inline bool cmp ( Node x , Node y ) &#123; return x.val &gt; y.val;&#125; int main() &#123; read ( n ); F ( i , 1 , n ) &#123; ls[i].val = _read (); ls[i].pos = i; &#125; std :: sort ( ls + 1 , ls + 1 + n , cmp ); F ( i , 1 , n ) ans += ls[i].val * ( i - 1 ) + 1; writeln ( ans ); F ( i , 1 , n ) printf ( "%d " , ls[i].pos ); return 0; &#125; White Sheet发现如果这个白色矩形的四条边都被覆盖了的话,那么中间一定也被覆盖了.然后暴力枚举判断即可. 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677#include &lt;cstdio&gt;#include &lt;algorithm&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;queue&gt;#include &lt;map&gt;#include &lt;set&gt;#include &lt;cmath&gt;#include &lt;cctype&gt;#include &lt;ctime&gt;#include &lt;vector&gt;#include &lt;cstdlib&gt;#include &lt;stack&gt;#define ll long long#define pll std::pair&lt;int,int&gt;#define MP std::make_pair#define fi first#define se second#define oo 2147483647#define PI 3.141592653590#define rint register int#define F(i,num,b) for(rint i=num;i&lt;=b;i++)#define D(i,num,b) for(rint i=num;i&gt;=b;i--)#define G(i,num,b,c) for(rint num=head[b];num;num=c[num].next) inline int _read () &#123;int s = 0 , w = 1;char ch = getchar ();while ( ch &gt; '9' || ch &lt; '0' ) &#123; if ( ch == '-' ) w = -1; ch = getchar ();&#125;while ( ch &gt;= '0' &amp;&amp; ch &lt;= '9' ) &#123; s = s * 10 + ch - '0'; ch = getchar ();&#125;return s * w;&#125;template &lt; class T &gt; inline void read ( T &amp;x ) &#123;T s = 0 , w = 1;char ch = getchar ();while ( ch &gt; '9' || ch &lt; '0' ) &#123; if ( ch == '-' ) w = -1; ch = getchar ();&#125;while ( ch &gt;= '0' &amp;&amp; ch &lt;= '9' ) &#123; s = s * 10 + ch - '0'; ch = getchar ();&#125;x = s * w;return;&#125;template &lt; class T , typename ...Argc &gt; inline void read ( T &amp;x , Argc &amp;...Args ) &#123;read ( x );read ( Args... );return;&#125; template &lt; class T &gt; inline T max ( T x , T y ) &#123;return x &gt; y ? x : y;&#125;template &lt; class T &gt; inline T min ( T x , T y ) &#123;return x &lt; y ? x : y;&#125;template &lt; class T &gt; inline void abs ( T x ) &#123;return x &gt; 0 ? x : -x;&#125;template &lt; typename T &gt; void write ( T x ) &#123;if ( x &lt; 0 ) x = -x , putchar ( '-' );if ( x &gt; 9 ) write ( x / 10 );putchar ( x % 10 + 48 );return;&#125;template &lt; typename T &gt; void writeln ( T x ) &#123;write ( x ); printf ("\n"); &#125;template &lt; class T &gt; inline T gcd ( T x , T y ) &#123;if ( x &lt; y ) swap ( x , y );if ( !y ) return x;return gcd ( y , x % y );&#125;template &lt; class T &gt; inline T ksm ( T x , T y , T Mod ) &#123;T tmp = 1;while ( y ) &#123;if ( y % 2 == 1 ) tmp = ( tmp * x % Mod );x = ( x * x ) % Mod;y &gt;&gt;= 1;&#125;return tmp;&#125; /**********************************************************************************************************************************************************************************************************************************************************************/ struct Point&#123; int x; int y;&#125;p[7];int main ( void )&#123; for(int i=1;i&lt;=6;i++) scanf("%d%d",&amp;p[i].x,&amp;p[i].y); if(p[3].x&lt;=p[1].x&amp;&amp;p[3].y&lt;=p[1].y&amp;&amp;p[4].x&gt;=p[2].x&amp;&amp;p[4].y&gt;=p[2].y)&#123; printf("NO\n"); return 0; &#125; if(p[5].x&lt;=p[1].x&amp;&amp;p[5].y&lt;=p[1].y&amp;&amp;p[6].x&gt;=p[2].x&amp;&amp;p[6].y&gt;=p[2].y)&#123; printf("NO\n"); return 0; &#125; if(p[3].x&lt;=p[1].x&amp;&amp;p[4].x&gt;=p[2].x&amp;&amp;p[5].x&lt;=p[1].x&amp;&amp;p[6].x&gt;=p[2].x)&#123; if(p[3].y&lt;=p[1].y&amp;&amp;p[4].y&gt;=p[5].y&amp;&amp;p[6].y&gt;=p[2].y)&#123; printf("NO\n"); return 0; &#125; if(p[5].y&lt;=p[1].y&amp;&amp;p[6].y&gt;=p[3].y&amp;&amp;p[4].y&gt;=p[2].y)&#123; printf("NO\n"); return 0; &#125; &#125; if(p[3].y&lt;=p[1].y&amp;&amp;p[4].y&gt;=p[2].y&amp;&amp;p[5].y&lt;=p[1].y&amp;&amp;p[6].y&gt;=p[2].y)&#123; if(p[3].x&lt;=p[1].x&amp;&amp;p[4].x&gt;=p[5].x&amp;&amp;p[6].x&gt;=p[2].x)&#123; printf("NO\n"); return 0; &#125; if(p[5].x&lt;=p[1].x&amp;&amp;p[6].x&gt;=p[3].x&amp;&amp;p[4].x&gt;=p[2].x)&#123; printf("NO\n"); return 0; &#125; &#125; printf("YES\n"); return 0;&#125; Swords发现求个$gcd$就好了 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465#include &lt;cstdio&gt;#include &lt;algorithm&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;queue&gt;#include &lt;map&gt;#include &lt;set&gt;#include &lt;cmath&gt;#include &lt;cctype&gt;#include &lt;ctime&gt;#include &lt;vector&gt;#include &lt;cstdlib&gt;#include &lt;stack&gt;#define ll long long#define pll std::pair&lt;int,int&gt;#define MP std::make_pair#define fi first#define se second#define oo 2147483647#define PI 3.141592653590#define rint register int#define F(i,num,b) for(rint i=num;i&lt;=b;i++)#define D(i,num,b) for(rint i=num;i&gt;=b;i--)#define G(i,num,b,c) for(rint num=head[b];num;num=c[num].next) inline int _read () &#123;int s = 0 , w = 1;char ch = getchar ();while ( ch &gt; '9' || ch &lt; '0' ) &#123; if ( ch == '-' ) w = -1; ch = getchar ();&#125;while ( ch &gt;= '0' &amp;&amp; ch &lt;= '9' ) &#123; s = s * 10 + ch - '0'; ch = getchar ();&#125;return s * w;&#125;template &lt; class T &gt; inline void read ( T &amp;x ) &#123;T s = 0 , w = 1;char ch = getchar ();while ( ch &gt; '9' || ch &lt; '0' ) &#123; if ( ch == '-' ) w = -1; ch = getchar ();&#125;while ( ch &gt;= '0' &amp;&amp; ch &lt;= '9' ) &#123; s = s * 10 + ch - '0'; ch = getchar ();&#125;x = s * w;return;&#125;template &lt; class T , typename ...Argc &gt; inline void read ( T &amp;x , Argc &amp;...Args ) &#123;read ( x );read ( Args... );return;&#125; template &lt; class T &gt; inline T max ( T x , T y ) &#123;return x &gt; y ? x : y;&#125;template &lt; class T &gt; inline T min ( T x , T y ) &#123;return x &lt; y ? x : y;&#125;template &lt; class T &gt; inline void abs ( T x ) &#123;return x &gt; 0 ? x : -x;&#125;template &lt; typename T &gt; void write ( T x ) &#123;if ( x &lt; 0 ) x = -x , putchar ( '-' );if ( x &gt; 9 ) write ( x / 10 );putchar ( x % 10 + 48 );return;&#125;template &lt; typename T &gt; void writeln ( T x ) &#123;write ( x ); printf ("\n"); &#125;template &lt; class T &gt; inline T gcd ( T x , T y ) &#123;if ( x &lt; y ) swap ( x , y );if ( !y ) return x;return gcd ( y , x % y );&#125;template &lt; class T &gt; inline T ksm ( T x , T y , T Mod ) &#123;T tmp = 1;while ( y ) &#123;if ( y % 2 == 1 ) tmp = ( tmp * x % Mod );x = ( x * x ) % Mod;y &gt;&gt;= 1;&#125;return tmp;&#125; /**********************************************************************************************************************************************************************************************************************************************************************/ const int N = 2e5 + 10; int n , maxs;int num[N];ll ans , sum; int main() &#123; read ( n ); F ( i , 1 , n ) &#123; num[i] = _read (); maxs = max ( maxs , num[i] ); &#125; F ( i , 1 , n ) &#123; int res = ( maxs - num[i] ); ans = std :: __gcd ( ans , res * 1ll ); &#125; if ( ans == 0 ) &#123; puts ( "0 0" ); return 0; &#125; else &#123; F ( i , 1 , n ) sum += ( maxs - num[i] ) / ans; printf ( "%I64d %I64d\n" , sum , ans ); &#125; return 0; &#125; Numerical Sequence (easy version)发现$k$只有$10^9$的范围,所以就暴力跳就可以了. 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;cstring&gt;#include&lt;algorithm&gt;#include&lt;cmath&gt; using namespace std; #define LL long long#define N 40010 LL sum[N],T; int judge(int x) &#123; int count = (int)log10((double)x) + 1; return count;&#125;int fun(int x) &#123; int sum = pow(10,x); return sum;&#125;void solve() &#123; int sumn = 0; memset(sum, 0,sizeof(sum)); for(int i = 1 ; i &lt; 40005 ; ++i) &#123; sumn += judge(i); sum[i] = sum[i - 1] +sumn; &#125;&#125;void answer(int x) &#123; int j,ans,summ,i = 1; while(sum[i] &lt; x) i++; ans = x - sum[i -1]; summ = 0; for(j = 1 ; j &lt;= i ; ++j) &#123; summ += judge(j); if(summ &gt;= ans) break; &#125; if(summ == ans) printf("%d\n", j %10); if(summ &gt; ans) printf("%d\n", (j / fun(summ -ans)) % 10);&#125; int main() &#123; scanf("%lld",&amp;T); solve(); while(T--) &#123; int pos; scanf("%d",&amp;pos); answer(pos); &#125; //system("pause"); return 0;&#125; 因为知道了自己是多么的菜,所以才要更加努力去追求那个永远也不可能实现的梦想]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>Codeforces题解</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[普转提七连测D3]]></title>
    <url>%2F2019%2F09%2F22%2FP%E8%BD%ACTD3%2F</url>
    <content type="text"><![CDATA[你一定知道密码趴 Incorrect Password! No content to display! ]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>ZROI</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[提高失联测D4]]></title>
    <url>%2F2019%2F09%2F22%2F%E6%8F%90%E9%AB%98%E5%A4%B1%E8%81%94%E6%B5%8BD4%2F</url>
    <content type="text"><![CDATA[你一定知道密码趴 Incorrect Password! No content to display! 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]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>ZROI</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[普及五连测D2]]></title>
    <url>%2F2019%2F09%2F21%2FPJ%E4%BA%94%E8%BF%9E%E6%B5%8BD2%2F</url>
    <content type="text"><![CDATA[你一定知道密码趴 Incorrect Password! No content to display! ]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>ZROI</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Educational Codeforces Round 73题解]]></title>
    <url>%2F2019%2F09%2F20%2FCF%E9%A2%98%E8%A7%A3%E8%A7%A3%2F</url>
    <content type="text"><![CDATA[qwq A.2048 Game我们发现,我们可以忽略掉$2048$以上的数,剩下的数开桶统计然后贪心即可. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566#include &lt;cstdio&gt;#include &lt;algorithm&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;queue&gt;#include &lt;map&gt;#include &lt;set&gt;#include &lt;cmath&gt;#include &lt;cctype&gt;#include &lt;ctime&gt;#include &lt;vector&gt;#include &lt;cstdlib&gt;#include &lt;stack&gt;#define ll long long#define pll std::pair&lt;int,int&gt;#define mp std::make_pair#define fi first#define se second#define oo 2147483647#define PI 3.141592653590#define rint register int#define F(i,a,b) for(rint i=a;i&lt;=b;i++)#define D(i,a,b) for(rint i=a;i&gt;=b;i--)inline int _read () &#123;int s = 0 , w = 1;char ch = getchar ();while ( ch &gt; '9' || ch &lt; '0' ) &#123; if ( ch == '-' ) w = -1; ch = getchar ();&#125;while ( ch &gt;= '0' &amp;&amp; ch &lt;= '9' ) &#123; s = s * 10 + ch - '0'; ch = getchar ();&#125;return s * w;&#125;template &lt; class T &gt; inline void read ( T &amp;x ) &#123;T s = 0 , w = 1;char ch = getchar ();while ( ch &gt; '9' || ch &lt; '0' ) &#123; if ( ch == '-' ) w = -1; ch = getchar ();&#125;while ( ch &gt;= '0' &amp;&amp; ch &lt;= '9' ) &#123; s = s * 10 + ch - '0'; ch = getchar ();&#125;x = s * w;return;&#125;template &lt; class T , typename ...Argc &gt; inline void read ( T &amp;x , Argc &amp;...Args ) &#123;read ( x );read ( Args... );return;&#125; template &lt; class T &gt; inline T max ( T x , T y ) &#123;return x &gt; y ? x : y;&#125;template &lt; class T &gt; inline T min ( T x , T y ) &#123;return x &lt; y ? x : y;&#125;template &lt; class T &gt; inline void abs ( T x ) &#123;return x &gt; 0 ? x : -x;&#125;template &lt; typename T &gt; void write ( T x ) &#123;if ( x &lt; 0 ) x = -x , putchar ( '-' );if ( x &gt; 9 ) write ( x / 10 );putchar ( x % 10 + 48 );return;&#125;template &lt; typename T &gt; void writeln ( T x ) &#123;write ( x ); printf ("\n"); &#125;template &lt; class T &gt; inline T gcd ( T x , T y ) &#123;if ( x &lt; y ) swap ( x , y );if ( !y ) return x;return gcd ( y , x % y );&#125;template &lt; class T &gt; inline T ksm ( T x , T y , T Mod ) &#123;T tmp = 1;while ( y ) &#123;if ( y % 2 == 1 ) tmp = ( tmp * x % Mod );x = ( x * x ) % Mod;y &gt;&gt;= 1;&#125;return tmp;&#125; /**********************************************************************************************************************************************************************************************************************************************************************/const int N = 105;int n; ll num[N];int used[2050];int main ( void ) &#123; int T = _read (); while ( T-- ) &#123; memset ( used , 0 , sizeof ( used ) ); n = _read (); F ( i , 1 , n ) &#123; num[i] = _read (); if ( num[i] &lt;= 2048 ) used[num[i]]++; &#125; if ( used[2048] ) &#123; puts ( "YES" ); continue; &#125; for ( int i = 1 ; i &lt;= 1024 ; i *= 2 ) used[i * 2] += ( used[i] / 2 ); if ( used[2048] ) puts ( "YES" ); else puts ( "NO" ); &#125; return 0;&#125; B.Knights我们贪心的考虑一下,如果我们现在这个位置的骑士,在它能移动的八个方向上,都会碰到其他的骑士,那么这个位置对答案的贡献一定是最优的. 结合样例,我们可以发现这样一种构造方法,我们从点$(1,1)$开始进行一次$bfs$,然后按照骑士的移动方法,每次更新一层,然后把这一层的骑士染色成和现在的骑士颜色不一样的颜色. 对于剩下的,那么可以证明没有任何点能跳到这个点,所以随便什么颜色都可以. 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071#include &lt;cstdio&gt;#include &lt;algorithm&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;queue&gt;#include &lt;map&gt;#include &lt;set&gt;#include &lt;cmath&gt;#include &lt;cctype&gt;#include &lt;ctime&gt;#include &lt;vector&gt;#include &lt;cstdlib&gt;#include &lt;stack&gt;#define ll long long#define pll std::pair&lt;int,int&gt;#define fi first#define se second#define oo 2147483647#define PI 3.141592653590#define rint register int#define F(i,a,b) for(rint i=a;i&lt;=b;i++)#define D(i,a,b) for(rint i=a;i&gt;=b;i--)inline int _read () &#123;int s = 0 , w = 1;char ch = getchar ();while ( ch &gt; '9' || ch &lt; '0' ) &#123; if ( ch == '-' ) w = -1; ch = getchar ();&#125;while ( ch &gt;= '0' &amp;&amp; ch &lt;= '9' ) &#123; s = s * 10 + ch - '0'; ch = getchar ();&#125;return s * w;&#125;template &lt; class T &gt; inline void read ( T &amp;x ) &#123;T s = 0 , w = 1;char ch = getchar ();while ( ch &gt; '9' || ch &lt; '0' ) &#123; if ( ch == '-' ) w = -1; ch = getchar ();&#125;while ( ch &gt;= '0' &amp;&amp; ch &lt;= '9' ) &#123; s = s * 10 + ch - '0'; ch = getchar ();&#125;x = s * w;return;&#125;template &lt; class T , typename ...Argc &gt; inline void read ( T &amp;x , Argc &amp;...Args ) &#123;read ( x );read ( Args... );return;&#125; template &lt; class T &gt; inline T max ( T x , T y ) &#123;return x &gt; y ? x : y;&#125;template &lt; class T &gt; inline T min ( T x , T y ) &#123;return x &lt; y ? x : y;&#125;template &lt; class T &gt; inline void abs ( T x ) &#123;return x &gt; 0 ? x : -x;&#125;template &lt; typename T &gt; void write ( T x ) &#123;if ( x &lt; 0 ) x = -x , putchar ( '-' );if ( x &gt; 9 ) write ( x / 10 );putchar ( x % 10 + 48 );return;&#125;template &lt; typename T &gt; void writeln ( T x ) &#123;write ( x ); printf ("\n"); &#125;template &lt; class T &gt; inline T gcd ( T x , T y ) &#123;if ( x &lt; y ) swap ( x , y );if ( !y ) return x;return gcd ( y , x % y );&#125;template &lt; class T &gt; inline T ksm ( T x , T y , T Mod ) &#123;T tmp = 1;while ( y ) &#123;if ( y % 2 == 1 ) tmp = ( tmp * x % Mod );x = ( x * x ) % Mod;y &gt;&gt;= 1;&#125;return tmp;&#125; /**********************************************************************************************************************************************************************************************************************************************************************/int n;char mp[105][105];const int dx[] = &#123; 0 , 1 , 1 , -1 , -1 , 2 , 2 , -2 , - 2 &#125;;const int dy[] = &#123; 0 , 2 , -2 , 2 , -2 , 1 , -1 , 1 , -1 &#125;;void dfs ( int x , int y , char col ) &#123; mp[x][y] = col; for ( int i = 1 ; i &lt;= 8 ; i++ ) &#123; int xx = x + dx[i]; int yy = y + dy[i]; if ( xx &gt;= 1 &amp;&amp; xx &lt;= n &amp;&amp; yy &gt;= 1 &amp;&amp; yy &lt;= n &amp;&amp; mp[xx][yy] != 'W' &amp;&amp; mp[xx][yy] != 'B' ) dfs ( xx , yy , col == 'W' ? 'B' : 'W' ); &#125; return;&#125;int main ( void ) &#123; n = _read (); dfs ( 1 , 1 , 'W' ); bool flag = 1; for ( int i = 1 ; i &lt;= n ; i++ ) &#123; for ( int j = 1 ; j &lt;= n ; j++ ) &#123; if ( mp[i][j] == 'W' || mp[i][j] == 'B' ) printf ("%c",mp[i][j]); else &#123; printf ("%c" , flag?'B':'W'); flag ^= 1; &#125; &#125; puts(""); &#125; return 0;&#125;// Main Code C.Perfect Team一个直观的感觉就是你从$c,m$中取一个$Min$,然后我们会发现可能人数凑不够$Min*3$,所以我们判断一下$min(Min,sum/3)$就是答案了. 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152#include &lt;cstdio&gt;#include &lt;algorithm&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;queue&gt;#include &lt;map&gt;#include &lt;set&gt;#include &lt;cmath&gt;#include &lt;cctype&gt;#include &lt;ctime&gt;#include &lt;vector&gt;#include &lt;cstdlib&gt;#include &lt;stack&gt;#define ll long long#define pll std::pair&lt;int,int&gt;#define mp std::make_pair#define fi first#define se second#define oo 2147483647#define PI 3.141592653590#define rint register int#define F(i,a,b) for(rint i=a;i&lt;=b;i++)#define D(i,a,b) for(rint i=a;i&gt;=b;i--)inline int _read () &#123;int s = 0 , w = 1;char ch = getchar ();while ( ch &gt; '9' || ch &lt; '0' ) &#123; if ( ch == '-' ) w = -1; ch = getchar ();&#125;while ( ch &gt;= '0' &amp;&amp; ch &lt;= '9' ) &#123; s = s * 10 + ch - '0'; ch = getchar ();&#125;return s * w;&#125;template &lt; class T &gt; inline void read ( T &amp;x ) &#123;T s = 0 , w = 1;char ch = getchar ();while ( ch &gt; '9' || ch &lt; '0' ) &#123; if ( ch == '-' ) w = -1; ch = getchar ();&#125;while ( ch &gt;= '0' &amp;&amp; ch &lt;= '9' ) &#123; s = s * 10 + ch - '0'; ch = getchar ();&#125;x = s * w;return;&#125;template &lt; class T , typename ...Argc &gt; inline void read ( T &amp;x , Argc &amp;...Args ) &#123;read ( x );read ( Args... );return;&#125; template &lt; class T &gt; inline T max ( T x , T y ) &#123;return x &gt; y ? x : y;&#125;template &lt; class T &gt; inline T min ( T x , T y ) &#123;return x &lt; y ? x : y;&#125;template &lt; class T &gt; inline void abs ( T x ) &#123;return x &gt; 0 ? x : -x;&#125;template &lt; typename T &gt; void write ( T x ) &#123;if ( x &lt; 0 ) x = -x , putchar ( '-' );if ( x &gt; 9 ) write ( x / 10 );putchar ( x % 10 + 48 );return;&#125;template &lt; typename T &gt; void writeln ( T x ) &#123;write ( x ); printf ("\n"); &#125;template &lt; class T &gt; inline T gcd ( T x , T y ) &#123;if ( x &lt; y ) swap ( x , y );if ( !y ) return x;return gcd ( y , x % y );&#125;template &lt; class T &gt; inline T ksm ( T x , T y , T Mod ) &#123;T tmp = 1;while ( y ) &#123;if ( y % 2 == 1 ) tmp = ( tmp * x % Mod );x = ( x * x ) % Mod;y &gt;&gt;= 1;&#125;return tmp;&#125; /**********************************************************************************************************************************************************************************************************************************************************************/int n;int c , m , x;int main ( void ) &#123; int T = _read (); while ( T-- ) &#123; read ( c , m , x ); int mins = min ( c , m ); int sums = c + m + x; printf ( "%d\n" , min ( mins , sums / 3 ) ); &#125; return 0;&#125;// Main Code D.Make The Fence Great Again毒瘤出题人一个DP数据范围开3e5 看到$3e5$的数据范围,第一反应就是贪心,但是发现貌似不怎么可做?然后开始考虑$DP$,发现如果$i$这个点被升高了的话,貌似对后边的点是有影响的,有后效性,怎么办?我们经过观察可知,如果一个点要升高,那么它最多升高两次,所以我们可以设$f_{i,j}$表示现在是第$i$个位置,其中$i$这个位置升高了$j$次. 转移的话很显然,我们枚举一个最小的$f_{i-1,k}$并且要保证$fence_{i-1}.high+k$不等于$fence_i.high+j$然后转移就好了. 时间复杂度的话是$O(n*16)$硬核O(nlogn) 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475#include &lt;cstdio&gt;#include &lt;algorithm&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;queue&gt;#include &lt;map&gt;#include &lt;set&gt;#include &lt;cmath&gt;#include &lt;cctype&gt;#include &lt;ctime&gt;#include &lt;vector&gt;#include &lt;cstdlib&gt;#include &lt;stack&gt;#define int long long#define pll std::pair&lt;int,int&gt;#define mp std::make_pair#define fi first#define se second#define oo 2147483647#define PI 3.141592653590#define rint register int#define F(i,a,b) for(rint i=a;i&lt;=b;i++)#define D(i,a,b) for(rint i=a;i&gt;=b;i--)inline int _read () &#123;int s = 0 , w = 1;char ch = getchar ();while ( ch &gt; '9' || ch &lt; '0' ) &#123; if ( ch == '-' ) w = -1; ch = getchar ();&#125;while ( ch &gt;= '0' &amp;&amp; ch &lt;= '9' ) &#123; s = s * 10 + ch - '0'; ch = getchar ();&#125;return s * w;&#125;template &lt; class T &gt; inline void read ( T &amp;x ) &#123;T s = 0 , w = 1;char ch = getchar ();while ( ch &gt; '9' || ch &lt; '0' ) &#123; if ( ch == '-' ) w = -1; ch = getchar ();&#125;while ( ch &gt;= '0' &amp;&amp; ch &lt;= '9' ) &#123; s = s * 10 + ch - '0'; ch = getchar ();&#125;x = s * w;return;&#125;template &lt; class T , typename ...Argc &gt; inline void read ( T &amp;x , Argc &amp;...Args ) &#123;read ( x );read ( Args... );return;&#125; template &lt; class T &gt; inline T max ( T x , T y ) &#123;return x &gt; y ? x : y;&#125;template &lt; class T &gt; inline T min ( T x , T y ) &#123;return x &lt; y ? x : y;&#125;template &lt; class T &gt; inline void abs ( T x ) &#123;return x &gt; 0 ? x : -x;&#125;template &lt; typename T &gt; void write ( T x ) &#123;if ( x &lt; 0 ) x = -x , putchar ( '-' );if ( x &gt; 9 ) write ( x / 10 );putchar ( x % 10 + 48 );return;&#125;template &lt; typename T &gt; void writeln ( T x ) &#123;write ( x ); printf ("\n"); &#125;template &lt; class T &gt; inline T gcd ( T x , T y ) &#123;if ( x &lt; y ) swap ( x , y );if ( !y ) return x;return gcd ( y , x % y );&#125;template &lt; class T &gt; inline T ksm ( T x , T y , T Mod ) &#123;T tmp = 1;while ( y ) &#123;if ( y % 2 == 1 ) tmp = ( tmp * x % Mod );x = ( x * x ) % Mod;y &gt;&gt;= 1;&#125;return tmp;&#125; /**********************************************************************************************************************************************************************************************************************************************************************/const int N = 3e5 + 10;int n , idx;struct Node &#123; int hi; int vi;&#125;fence[N];int f[N][5];signed main ( void ) &#123; int T = _read (); while ( T-- ) &#123; n = _read (); for ( int i = 1 ; i &lt;= n ; i++ ) &#123; read ( fence[i].hi , fence[i].vi ); for ( int j = 0 ; j &lt;= 4 ; j++ ) f[i][j] = 1e17; &#125; for ( int i = 1 ; i &lt;= n ; i++ ) &#123; for ( int j = 0 ; j &lt;= 4 ; j++ ) &#123; for ( int k = 0 ; k &lt;= 4 ; k++ ) &#123; if ( fence[i].hi + j == fence[i - 1].hi + k ) continue; f[i][j] = min ( f[i][j] , f[i - 1][k] ); &#125; if ( f[i][j] == 1e17 ) continue; f[i][j] += 1ll * j * fence[i].vi; &#125; &#125; int ans = 1e17; for ( int i = 0 ; i &lt;= 4 ; i++ ) ans = min ( ans , f[n][i] ); writeln ( ans ); &#125; return 0;&#125;// Main Code 因为知道了自己是多么的菜,所以才要更加努力去追求那个永远也不可能实现的梦想]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>CodeForces题解</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[[USACO09FEB]改造路Revamping Trails题解]]></title>
    <url>%2F2019%2F09%2F18%2F%E6%94%B9%E9%80%A0%E8%B7%AF%E9%A2%98%E8%A7%A3%2F</url>
    <content type="text"><![CDATA[复习了一波分层图…. 可以发现这道题就是分层图裸题.我们可以设$dis_{time,i}$表示现在已经用了$time$次免费机会,到达了$i$这个点的时候的最短路径.那么我们在进行堆优化$Dijkstra$时($SPFA$跑分层图一般会死的很惨),我们对于每次转移时,判断一下是否使用一次免费机会即可. 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;#include &lt;queue&gt;#define K 25#define N 10005#define M 4200005#define F(i,a,b) for(int i=a;i&lt;=b;i++)#define G(i,a,b) for(int i=head[a];i;i=b[i].next)using namespace std;int n,m,k,t,start,end;struct Edge&#123; int to; int data; int next;&#125;e[M];struct Que&#123; int time,cur; Que(int a,int b):time(a),cur(b)&#123;&#125;&#125;;int head[N],vis[K][N];bool inque[K][N];int ans=2147483647;struct cmp &#123; bool operator () ( Que x , Que y ) &#123; return vis[x.time][x.cur] &gt; vis[y.time][y.cur]; &#125;&#125;;priority_queue &lt; Que , vector &lt; Que &gt; , cmp &gt; qu;void add (int x,int y,int z)&#123; e[++t].to=y; e[t].data=z; e[t].next=head[x]; head[x]=t; return;&#125;inline void spfa (int x)&#123; memset(vis,0x3f3f3f3f,sizeof(vis)); vis[0][x]=0; inque[0][x]=1; qu.push(Que(0,1)); while (!qu.empty())&#123; Que j=qu.top(); qu.pop(); inque[j.time][j.cur]=0; G(i,j.cur,e)&#123; int k=e[i].to; if (vis[j.time][k]&gt;vis[j.time][j.cur]+e[i].data)&#123; vis[j.time][k]=vis[j.time][j.cur]+e[i].data; if (!inque[j.time][k])&#123; inque[j.time][k]=1; qu.push(Que(j.time,k)); &#125; &#125; &#125; if (j.time&lt;k) G(i,j.cur,e)&#123; int k=e[i].to; if (vis[j.time+1][k]&gt;vis[j.time][j.cur])&#123; vis[j.time+1][k]=vis[j.time][j.cur]; if (!inque[j.time+1][k])&#123; inque[j.time+1][k]=1; qu.push(Que(j.time+1,k)); &#125; &#125; &#125; &#125; F(i,0,k) ans=min(ans,vis[i][n]); return;&#125;int main()&#123; scanf ("%d%d%d",&amp;n,&amp;m,&amp;k); F(i,1,m)&#123; int x,y,z; scanf ("%d%d%d",&amp;x,&amp;y,&amp;z); add (x,y,z); add (y,x,z); &#125; spfa(1); printf ("%d\n",ans); return 0;&#125; 因为知道了自己是多么的菜,所以才要更加努力去追求那个永远也不可能实现的梦想]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>图论</tag>
        <tag>最短路</tag>
        <tag>DP</tag>
        <tag>分层图</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[提高失恋测D3]]></title>
    <url>%2F2019%2F09%2F16%2F%E6%8F%90%E9%AB%98%E5%A4%B1%E6%81%8B%E6%B5%8BD3%2F</url>
    <content type="text"><![CDATA[你一定知道密码趴 Incorrect Password! No content to display! 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]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>ZROI</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CodeForces round585题解]]></title>
    <url>%2F2019%2F09%2F15%2Fround585%E9%A2%98%E8%A7%A3%2F</url>
    <content type="text"><![CDATA[A.傻逼题,暴力枚举即可(我也就只会傻逼题了) 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586#include &lt;cstdio&gt;#include &lt;algorithm&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;queue&gt;#include &lt;map&gt;#include &lt;set&gt;#include &lt;cmath&gt;#include &lt;cctype&gt;#include &lt;ctime&gt;#include &lt;vector&gt;#include &lt;cstdlib&gt;#include &lt;stack&gt;#define ll long long#define pll std::pair&lt;int,int&gt;#define MP std::make_pair#define fi first#define se second#define oo 2147483647#define PI 3.141592653590#define rint register int#define F(i,a,b) for(rint i=a;i&lt;=b;i++)#define D(i,a,b) for(rint i=a;i&gt;=b;i--)#define G(i,a,b,c) for(rint a=head[b];a;a=c[a].next)inline int _read () &#123;int s = 0 , w = 1;char ch = getchar ();while ( ch &gt; '9' || ch &lt; '0' ) &#123; if ( ch == '-' ) w = -1; ch = getchar ();&#125;while ( ch &gt;= '0' &amp;&amp; ch &lt;= '9' ) &#123; s = s * 10 + ch - '0'; ch = getchar ();&#125;return s * w;&#125;template &lt; class T &gt; inline void read ( T &amp;x ) &#123;T s = 0 , w = 1;char ch = getchar ();while ( ch &gt; '9' || ch &lt; '0' ) &#123; if ( ch == '-' ) w = -1; ch = getchar ();&#125;while ( ch &gt;= '0' &amp;&amp; ch &lt;= '9' ) &#123; s = s * 10 + ch - '0'; ch = getchar ();&#125;x = s * w;return;&#125;template &lt; class T , typename ...Argc &gt; inline void read ( T &amp;x , Argc &amp;...Args ) &#123;read ( x );read ( Args... );return;&#125; template &lt; class T &gt; inline T max ( T x , T y ) &#123;return x &gt; y ? x : y;&#125;template &lt; class T &gt; inline T min ( T x , T y ) &#123;return x &lt; y ? x : y;&#125;template &lt; class T &gt; inline void abs ( T x ) &#123;return x &gt; 0 ? x : -x;&#125;template &lt; typename T &gt; void write ( T x ) &#123;if ( x &lt; 0 ) x = -x , putchar ( '-' );if ( x &gt; 9 ) write ( x / 10 );putchar ( x % 10 + 48 );return;&#125;template &lt; typename T &gt; void writeln ( T x ) &#123;write ( x ); printf ("\n"); &#125;template &lt; class T &gt; inline T gcd ( T x , T y ) &#123;if ( x &lt; y ) swap ( x , y );if ( !y ) return x;return gcd ( y , x % y );&#125;template &lt; class T &gt; inline T ksm ( T x , T y , T Mod ) &#123;T tmp = 1;while ( y ) &#123;if ( y % 2 == 1 ) tmp = ( tmp * x % Mod );x = ( x * x ) % Mod;y &gt;&gt;= 1;&#125;return tmp;&#125; /**********************************************************************************************************************************************************************************************************************************************************************/const int N = 10005;int n , a1 , a2 , k1 , k2 , idx;int num[N];inline bool cmp1 ( int x , int y ) &#123; return x &gt; y;&#125;inline bool cmp2 ( int x , int y ) &#123; return x &lt; y;&#125;int main ( void ) &#123; read ( a1 , a2 , k1 , k2 , n ); for ( int i = 1 ; i &lt;= a1 ; i++ ) num[++idx] = k1; for ( int i = 1 ; i &lt;= a2 ; i++ ) num[++idx] = k2; std :: sort ( num + 1 , num + 1 + idx , cmp1 ); int ans = 0; int tmp = n; for ( int i = 1 ; i &lt;= idx ; i++ ) if ( tmp &lt; num[i] ) &#123; tmp = 0; break; &#125; else tmp -= num[i] - 1; if ( tmp == 0 ) printf ( "%d " , ans ); else printf ( "%d " , tmp ); std :: sort ( num + 1 , num + 1 + idx , cmp2 ); ans = 0 , tmp = n; for ( int i = 1 ; i &lt;= idx ; i++ ) if ( tmp &lt; num[i] ) break; else &#123; ans ++; tmp -= num[i]; &#125; printf ( "%d\n" , ans ); return 0;&#125;// Main Code B.分从后往前现在的数的正负性讨论即可,负负得正. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566#include &lt;cstdio&gt;#include &lt;algorithm&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;queue&gt;#include &lt;map&gt;#include &lt;set&gt;#include &lt;cmath&gt;#include &lt;cctype&gt;#include &lt;ctime&gt;#include &lt;vector&gt;#include &lt;cstdlib&gt;#include &lt;stack&gt;#define ll long long#define pll std::pair&lt;int,int&gt;#define MP std::make_pair#define fi first#define se second#define oo 2147483647#define PI 3.141592653590#define rint register int#define F(i,num,b) for(rint i=num;i&lt;=b;i++)#define D(i,num,b) for(rint i=num;i&gt;=b;i--)#define G(i,num,b,c) for(rint num=head[b];num;num=c[num].next)inline int _read () &#123;int s = 0 , w = 1;char ch = getchar ();while ( ch &gt; '9' || ch &lt; '0' ) &#123; if ( ch == '-' ) w = -1; ch = getchar ();&#125;while ( ch &gt;= '0' &amp;&amp; ch &lt;= '9' ) &#123; s = s * 10 + ch - '0'; ch = getchar ();&#125;return s * w;&#125;template &lt; class T &gt; inline void read ( T &amp;x ) &#123;T s = 0 , w = 1;char ch = getchar ();while ( ch &gt; '9' || ch &lt; '0' ) &#123; if ( ch == '-' ) w = -1; ch = getchar ();&#125;while ( ch &gt;= '0' &amp;&amp; ch &lt;= '9' ) &#123; s = s * 10 + ch - '0'; ch = getchar ();&#125;x = s * w;return;&#125;template &lt; class T , typename ...Argc &gt; inline void read ( T &amp;x , Argc &amp;...Args ) &#123;read ( x );read ( Args... );return;&#125; template &lt; class T &gt; inline T max ( T x , T y ) &#123;return x &gt; y ? x : y;&#125;template &lt; class T &gt; inline T min ( T x , T y ) &#123;return x &lt; y ? x : y;&#125;template &lt; class T &gt; inline void abs ( T x ) &#123;return x &gt; 0 ? x : -x;&#125;template &lt; typename T &gt; void write ( T x ) &#123;if ( x &lt; 0 ) x = -x , putchar ( '-' );if ( x &gt; 9 ) write ( x / 10 );putchar ( x % 10 + 48 );return;&#125;template &lt; typename T &gt; void writeln ( T x ) &#123;write ( x ); printf ("\n"); &#125;template &lt; class T &gt; inline T gcd ( T x , T y ) &#123;if ( x &lt; y ) swap ( x , y );if ( !y ) return x;return gcd ( y , x % y );&#125;template &lt; class T &gt; inline T ksm ( T x , T y , T Mod ) &#123;T tmp = 1;while ( y ) &#123;if ( y % 2 == 1 ) tmp = ( tmp * x % Mod );x = ( x * x ) % Mod;y &gt;&gt;= 1;&#125;return tmp;&#125; /**********************************************************************************************************************************************************************************************************************************************************************/const int N = 4e5 + 10;int n;ll num[N] , s[N];ll tai,fro;ll odd,uodd;int main ( void ) &#123; read ( n ); F ( i , 1 , n ) &#123; num[i] = _read (); s[i] = s[i - 1] ^ ( num[i] &lt; 0 ); if ( s[i] == 1 ) &#123; tai += odd; fro += uodd; odd++; fro++; &#125; else &#123; tai += uodd; fro += odd; tai++; uodd++; &#125; &#125; std :: cout &lt;&lt; fro &lt;&lt; " " &lt;&lt; tai &lt;&lt; std :: endl; return 0;&#125; C.发现只有$A$和$B$,两种字符,很容易发现规律. 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485#include &lt;cstdio&gt;#include &lt;algorithm&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;queue&gt;#include &lt;map&gt;#include &lt;set&gt;#include &lt;cmath&gt;#include &lt;cctype&gt;#include &lt;ctime&gt;#include &lt;vector&gt;#include &lt;cstdlib&gt;#include &lt;stack&gt;#define ll long long#define pll std::pair&lt;int,int&gt;#define MP std::make_pair#define fi first#define se second#define oo 2147483647#define PI 3.141592653590#define rint register int#define F(i,num,b) for(rint i=num;i&lt;=b;i++)#define D(i,num,b) for(rint i=num;i&gt;=b;i--)#define G(i,num,b,c) for(rint num=head[b];num;num=c[num].next)inline int _read () &#123;int s = 0 , w = 1;char ch = getchar ();while ( ch &gt; '9' || ch &lt; '0' ) &#123; if ( ch == '-' ) w = -1; ch = getchar ();&#125;while ( ch &gt;= '0' &amp;&amp; ch &lt;= '9' ) &#123; s = s * 10 + ch - '0'; ch = getchar ();&#125;return s * w;&#125;template &lt; class T &gt; inline void read ( T &amp;x ) &#123;T s = 0 , w = 1;char ch = getchar ();while ( ch &gt; '9' || ch &lt; '0' ) &#123; if ( ch == '-' ) w = -1; ch = getchar ();&#125;while ( ch &gt;= '0' &amp;&amp; ch &lt;= '9' ) &#123; s = s * 10 + ch - '0'; ch = getchar ();&#125;x = s * w;return;&#125;template &lt; class T , typename ...Argc &gt; inline void read ( T &amp;x , Argc &amp;...Args ) &#123;read ( x );read ( Args... );return;&#125; template &lt; class T &gt; inline T max ( T x , T y ) &#123;return x &gt; y ? x : y;&#125;template &lt; class T &gt; inline T min ( T x , T y ) &#123;return x &lt; y ? x : y;&#125;template &lt; class T &gt; inline void abs ( T x ) &#123;return x &gt; 0 ? x : -x;&#125;template &lt; typename T &gt; void write ( T x ) &#123;if ( x &lt; 0 ) x = -x , putchar ( '-' );if ( x &gt; 9 ) write ( x / 10 );putchar ( x % 10 + 48 );return;&#125;template &lt; typename T &gt; void writeln ( T x ) &#123;write ( x ); printf ("\n"); &#125;template &lt; class T &gt; inline T gcd ( T x , T y ) &#123;if ( x &lt; y ) swap ( x , y );if ( !y ) return x;return gcd ( y , x % y );&#125;template &lt; class T &gt; inline T ksm ( T x , T y , T Mod ) &#123;T tmp = 1;while ( y ) &#123;if ( y % 2 == 1 ) tmp = ( tmp * x % Mod );x = ( x * x ) % Mod;y &gt;&gt;= 1;&#125;return tmp;&#125; /**********************************************************************************************************************************************************************************************************************************************************************/char s[3][200005];int n , sum;int can1,can2,bc;int cnt1[200005],cnt2[200005];int main()&#123; read ( n ); scanf ( "%s%s" , s[1] , s[2] ); for(int i=0;i&lt;n;i++)&#123; if(s[1][i]!=s[2][i])&#123; if(s[1][i]=='a')&#123; can1++; cnt1[can1]=i+1; &#125; else&#123; can2++; cnt2[can2]=i+1; &#125; &#125; &#125; if(n%2==1)&#123; puts ( "-1" ); return 0; &#125; if(can1%2==1)&#123; sum+=2; sum+=(n-2)/2; writeln ( sum ); printf ( "%d %d\n" , cnt1[1] , cnt1[1] ); printf ( "%d %d\n" , cnt1[1] , cnt2[1] ); for(int i=2;i&lt;=can1;i+=2) printf ( "%d %d\n" , cnt1[i] , cnt1[i + 1] ); for(int i=2;i&lt;=can2;i+=2) printf ( "%d %d\n" , cnt2[i] , cnt2[i + 1] ); return 0; &#125; sum=(can1+can2)/2; writeln ( sum ); for(int i=1;i&lt;=can1;i+=2) printf ( "%d %d\n" , cnt1[i] , cnt1[i + 1] ); for(int i=1;i&lt;=can2;i+=2) printf ( "%d %d\n" , cnt2[i] , cnt2[i + 1] ); return 0;&#125; 因为知道了自己是多么的菜,所以才要更加努力去追求那个永远也不可能实现的梦想]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>CodeForces题解</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[普转提七连测D2]]></title>
    <url>%2F2019%2F09%2F15%2F%E6%99%AE%E4%B8%93%E6%8F%90D2%2F</url>
    <content type="text"><![CDATA[你一定知道密码趴 Incorrect Password! No content to display! ]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>ZROI</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据生成]]></title>
    <url>%2F2019%2F09%2F14%2F%E6%95%B0%E6%8D%AE%E7%94%9F%E6%88%90%2F</url>
    <content type="text"><![CDATA[图和树的数据生成器 图有向图和无向图同样适用的数据生成器,可生成随机图 12345678910111213141516171819202122232425262728293031323334353637383940#include&lt;cstdio&gt;#include&lt;algorithm&gt;#include&lt;cstdlib&gt;#include&lt;cstring&gt;#include&lt;set&gt;#include&lt;ctime&gt;#include&lt;iostream&gt;using namespace std;int n,m,s,T;inline int random() &#123; static int seed = s; return seed = (int)(seed*48271ll%2147483647);&#125;set&lt;int&gt;to[100005];//去重int main() &#123; srand ( time ( NULL ) ) ; cin &gt;&gt; T; cout &lt;&lt; T &lt;&lt; endl; while(T--) &#123; s = rand(); n = 96; m = 102; printf("%d %d \n",n,m); for(int i = 1 ; i &lt;= m ; i++) &#123; int u = random() % n + 1; int v = random() % n + 1; while(to[u].find(v) != to[u].end() || u == v) &#123; u = random() % n + 1; v = random() % n + 1; &#125; printf("%d %d\n",u,v); to[u].insert(v); &#125; printf("\n"); &#125; return 0;&#125; 树保证数据为一棵随机树 1234567891011121314151617181920212223242526272829303132333435363738#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;algorithm&gt;#include&lt;ctime&gt;#include&lt;cstring&gt;#include&lt;cstdlib&gt;using namespace std;int a[10005],e[10005][2];int n = 1000;bool flag[10005];int main() &#123; freopen("testdata.in","w",stdout); printf("%d\n",n); for(int i = 1 ; i &lt;= n ; i++) &#123; a[i] = rand() % n + 1; while(flag[a[i]]) a[i] = rand() % n + 1; flag[a[i]] = 1; &#125; for(int i = 2 ; i &lt;= n ; i++) &#123; e[i-1][0] = a[i]; e[i-1][1] = a[rand() % (i - 1) + 1]; &#125; memset(flag,0,sizeof(flag)); for(int i = 1 ; i &lt; n ; i++) &#123; int x = rand() % (n - 1) + 1; while(flag[x]) x = rand() % (n - 1) + 1; flag[x] = 1; int f = rand() % 2; if(f) printf("%d %d\n",e[x][0],e[x][1]); else printf("%d %d\n",e[x][1],e[x][0]); &#125; return 0;&#125;]]></content>
      <categories>
        <category>知识水平</category>
      </categories>
      <tags>
        <tag>数据制造</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[普及五联测D1]]></title>
    <url>%2F2019%2F09%2F14%2F%E6%99%AE%E5%8F%8A%E4%BA%94%E8%81%94%E6%B5%8BD1%2F</url>
    <content type="text"><![CDATA[你一定知道密码趴 Incorrect Password! No content to display! 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]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>ZROI</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[题解:树]]></title>
    <url>%2F2019%2F09%2F12%2F%E9%A2%98%E8%A7%A3-%E6%A0%91%2F</url>
    <content type="text"><![CDATA[暴力都不想写的题… 考虑到题目中要求的最小的那个东西不太好求所以我们可以找一个最大的符合条件的值,我们记为$tmp$,那么有$ans=tmp+1$ 那我们考虑一下这个$tmp$怎么求.]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>树的直径</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ZROI普转提D1题解]]></title>
    <url>%2F2019%2F09%2F11%2FZROI%E9%A2%98%E8%A7%A3%2F</url>
    <content type="text"><![CDATA[你一定知道密码趴 Incorrect Password! No content to display! ]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>ZROI</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[散步]]></title>
    <url>%2F2019%2F09%2F11%2F%E6%95%A3%E6%AD%A5%E9%A2%98%E8%A7%A3%2F</url>
    <content type="text"><![CDATA[这题好难啊 首先可以发现可以二分答案. 我们可以考虑二分一个最长的路径长度$mid$,然后将每个点看成不能在最多连续走$mid$个相同的路的情况下,从$1$号点到$n$号点是否联通. 然后现在的问题就变成了判断图的连通性的问题.我们发现,每个点只有两条出边.而且每种类型的出边只有一条,那么可以发现同样的类型的路径的走路的路径,可以看作一个集合.我们可以设$dis_{i,siz}$表示$i$这个点一直按照$siz$类型的路径一直走,最后一段$siz$路径的长度,然后我们发现,如果$i$这个点走到$j$这个点时,那么$dis_{j,siz}=dis_{i,siz}+1$,而我们发现这个东西显然可以用带权并查集来维护.在使用了带权并查集之后,我们每次就可以在$O(logn)$的时间复杂度内求出以某个点为起点走到最远能走到那个点了.然后我们可以进行一次$bfs$.在某次更新中,可以发现,如果现在到达这个点的最后的路径是$siz$类型的话,如果现在这个点连向的$siz xor 1$类型的点还没有被入队过,那么就将这个点扔进队里. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113#include &lt;cstdio&gt;#include &lt;algorithm&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;queue&gt;#include &lt;map&gt;#include &lt;set&gt;#include &lt;cmath&gt;#include &lt;cctype&gt;#include &lt;ctime&gt;#include &lt;vector&gt;#include &lt;cstdlib&gt;#include &lt;stack&gt;#define ll long long#define pll std::pair&lt;int,int&gt;#define mp std::make_pair#define oo 2147483647#define PI 3.141592653590#define rint register int#define F(i,a,b) for(rint i=a;i&lt;=b;i++)#define D(i,a,b) for(rint i=a;i&gt;=b;i--)inline int _read () &#123;int s = 0 , w = 1;char ch = getchar ();while ( ch &gt; '9' || ch &lt; '0' ) &#123; if ( ch == '-' ) w = -1; ch = getchar ();&#125;while ( ch &gt;= '0' &amp;&amp; ch &lt;= '9' ) &#123; s = s * 10 + ch - '0'; ch = getchar ();&#125;return s * w;&#125;template &lt; class T &gt; inline void read ( T &amp;x ) &#123;T s = 0 , w = 1;char ch = getchar ();while ( ch &gt; '9' || ch &lt; '0' ) &#123; if ( ch == '-' ) w = -1; ch = getchar ();&#125;while ( ch &gt;= '0' &amp;&amp; ch &lt;= '9' ) &#123; s = s * 10 + ch - '0'; ch = getchar ();&#125;x = s * w;return;&#125;template &lt; class T , typename ...Argc &gt; inline void read ( T &amp;x , Argc &amp;...Args ) &#123;read ( x );read ( Args... );return;&#125; template &lt; class T &gt; inline T max ( T x , T y ) &#123;return x &gt; y ? x : y;&#125;template &lt; class T &gt; inline T min ( T x , T y ) &#123;return x &lt; y ? x : y;&#125;template &lt; class T &gt; inline void abs ( T x ) &#123;return x &gt; 0 ? x : -x;&#125;template &lt; typename T &gt; void write ( T x ) &#123;if ( x &lt; 0 ) x = -x , putchar ( '-' );if ( x &gt; 9 ) write ( x / 10 );putchar ( x % 10 + 48 );return;&#125;template &lt; typename T &gt; void writeln ( T x ) &#123;write ( x ); printf ("\n"); &#125;template &lt; class T &gt; inline T gcd ( T x , T y ) &#123;if ( x &lt; y ) swap ( x , y );if ( !y ) return x;return gcd ( y , x % y );&#125;template &lt; class T &gt; inline T ksm ( T x , T y , T Mod ) &#123;T tmp = 1;while ( y ) &#123;if ( y % 2 == 1 ) tmp = ( tmp * x % Mod );x = ( x * x ) % Mod;y &gt;&gt;= 1;&#125;return tmp;&#125; /**********************************************************************************************************************************************************************************************************************************************************************/const int N = 2e5 + 10; int n;int G[N][2];int father[N][2] , dis[N][2];bool vis[N][2];struct Node &#123; int pos; int kid;&#125;;std :: queue &lt; Node &gt; qu;int find ( int x , int kd ) &#123; if ( father[x][kd] != x ) &#123; int tmp = father[x][kd]; father[x][kd] = find ( father[x][kd] , kd ); dis[x][kd] += dis[tmp][kd]; &#125; return father[x][kd];&#125;inline bool check ( int rdm ) &#123; memset ( vis , false , sizeof ( vis ) ); memset ( dis , 0 , sizeof ( dis ) ); F ( i , 1 , n ) father[i][0] = father[i][1] = i; qu.push ( Node &#123; 1 , 0 &#125; ); qu.push ( Node &#123; 1 , 1 &#125; ); while ( !qu.empty() ) &#123; int j = qu.front().pos; int siz = qu.front().kid; qu.pop(); int now = 0; while ( 1 ) &#123; int root = find ( j , siz ); now = dis[j][siz]; if ( now + 1 &gt; rdm ) break; int kt = G[root][siz]; int kj = find ( kt , siz ); if ( !vis[kt][siz ^ 1] ) &#123; vis[kt][siz ^ 1] = 1; qu.push ( Node &#123; kt , siz ^ 1 &#125; ); &#125; if ( kj == root ) break; father[root][siz] = kt; dis[root][siz] = 1; &#125; &#125; if ( vis[n][0] || vis[n][1] ) return 1; return 0;&#125;int main ( void ) &#123; read ( n ); F ( i , 1 , n ) &#123; G[i][0] = _read(); G[i][1] = _read(); &#125; int l = 0 , r = n + 1; while ( l &lt;= r ) &#123; int mid = ( l + r ) &gt;&gt; 1; if ( check ( mid ) ) r = mid - 1; else l = mid + 1; &#125; if ( l &gt; n ) puts ( "-1" ); else writeln ( l ); return 0;&#125;// Main Code]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>图论</tag>
        <tag>最短路</tag>
        <tag>二分</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Codeforces Round 72 题解报告]]></title>
    <url>%2F2019%2F09%2F11%2F%E9%A2%98%E8%A7%A3%E6%8A%A5%E5%91%8A%2F</url>
    <content type="text"><![CDATA[qwq A.第一眼看上去貌似是个找规律$O(1)$题,实际看了一下,确实是找规律$O(1)$题.所以就开始愉快的找规律,于是就有了以下的提交记录: emmm…. QAQ然后我们考虑一下正解. 我们设原来我们有$str in exp$,我们设我们分给$str x$点的$exp$,分给$in y$点的$exp$,那么显然有: x+y=exp \ and \ str+x>in+y发现上边的这个方程,通过将$y$用$exp-x$代替之后,我们可以解出$x$的具体范围.而且我们可以发现:所有$x$的取值范围一共只有$exp + 1$种,所以就可以愉快的求出答案了. 最后别忘了判断$exp$为$0$的情况. 1234567891011121314151617181920212223242526272829#include&lt;bits/stdc++.h&gt;#define int long longusing namespace std;signed main()&#123; ios::sync_with_stdio(false); cin.tie(0),cout.tie(0); int T; cin&gt;&gt;T; while(T--)&#123; int str,in,exp; cin&gt;&gt;str&gt;&gt;in&gt;&gt;exp; if (exp==0)&#123; if(str&gt;in) cout&lt;&lt;"1"&lt;&lt;endl; else cout&lt;&lt;"0"&lt;&lt;endl; continue; &#125; if(in+exp-str&lt;0)&#123; cout&lt;&lt;exp+1&lt;&lt;endl; continue; &#125; int ans=min(exp+1,(exp+1)-max(0ll,((in+exp-str)/2+1))); if ( ans &lt; 0 ) ans = 0; cout&lt;&lt;ans&lt;&lt;endl; &#125; return 0;&#125; B.这么可爱的怪兽我怎么可能忍心去打它呢 我们看到题,首先想到,如果我们砍一刀,这个怪兽不死,那么它如果长出来的头大于我们我们这次砍掉的头.那么我们这次的操作显然没用.所以,在前几刀砍不死怪兽的情况下,我们需要最大化每一次砍头时的$d_i-h_i$,同时我们发现.在某一次砍头中,如果这次的$d_j$非常大,大到一下子可以把怪兽剩下的头砍完.我们就可以不用管这次砍头的副作用$h_j$了. 所以我们维护两个最大值,即$d_i-h_i$的最大值以及$d_i$的最大值,然后直接找题意做即可. 1234567891011121314151617181920212223242526272829303132333435363738#include&lt;bits/stdc++.h&gt;#define int long longusing namespace std;int n,x;signed main()&#123; ios::sync_with_stdio(false); cin.tie(0),cout.tie(0); int T; cin&gt;&gt;T; while(T--)&#123; int maxs=-1e16; int Damage=-1e16; cin&gt;&gt;n&gt;&gt;x; for(int i=1;i&lt;=n;i++) &#123; int tx,ty; cin&gt;&gt;tx&gt;&gt;ty; maxs=max(maxs,tx); Damage=max(Damage,tx-ty); &#125; if ( x &lt;= maxs ) &#123; cout &lt;&lt; "1" &lt;&lt; endl; continue; &#125; if(Damage&lt;=0)&#123; cout&lt;&lt;"-1"&lt;&lt;endl; continue; &#125; int now = ( x - maxs ) / Damage; if ( now * Damage &lt; x - maxs ) now+=2; else now++; cout&lt;&lt;now&lt;&lt;endl; &#125; return 0;&#125; C.通过读题,我们可以发现一个很重要的东西:$\sum_{i=1}^t len_i&lt;=2*10^5$. 通过这个性质,我们可以发现,我们在枚举每一次的区间时,这个区间的最长长度为$log_2len$. 然后就做完了?? 我们枚举一下每个区间的左/右端点,然后直接暴力统计答案就好了. 123456789101112131415161718192021222324252627282930#include &lt;iostream&gt;#include &lt;vector&gt;#include &lt;algorithm&gt;#include &lt;cstring&gt;using namespace std;typedef long long LL;const int N = 200000 + 10;int t,nex[N];char s[N];int main() &#123; scanf("%d",&amp;t); while(t--) &#123; scanf("%s",s+1); int n=strlen(s+1); nex[n+1]=n+1; for(int i=n;i&gt;=1;i--) &#123; if(s[i]=='0') nex[i]=nex[i+1]; else nex[i]=i; &#125; int ans=0; for(int i=1;i&lt;=n;i++)&#123; int now=0; for(int j=nex[i];j&lt;=min(n,nex[i]+20);j++)&#123; now=now*2+s[j]-'0'; if(now==j-i+1) ans++; &#125; &#125; printf("%d\n", ans); &#125;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>CodeForces题解</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Round #582解题报告]]></title>
    <url>%2F2019%2F09%2F11%2FRound-2%2F</url>
    <content type="text"><![CDATA[qwq A.Chips Moving题意就是给你n个数,你每次可以选择一个数,对他进行免费的加2或者减2.或者花费1的代价,对某个数进行加一或者减一,求让所有的数变成一样的最小代价. 很显然可以发现,奇数和奇数之间可以相互转变,偶数和偶数之间也可以相互转变,那么我们只需要考虑让奇数全部变成偶数或者让偶数变成奇数就好了. 1234567891011121314#include &lt;bits/stdc++.h&gt;using namespace std;int main() &#123; int n; cin &gt;&gt; n; int cnto = 0; for (int i = 0; i &lt; n; ++i) &#123; int x; cin &gt;&gt; x; cnto += x &amp; 1; &#125; cout &lt;&lt; min(cnto, n - cnto) &lt;&lt; endl; return 0;&#125; B.Bad Prices题意就是给你一个序列$A$,让你求出所有$A_i$中,$\sum_{i=1}^n[A_i&gt;A_{j(i&lt;j&lt;=n)}?0:1]$ 显然可以直接维护一个后缀最小值,然后判断一下当前$A_i$的值和当前后缀最小值的大小关系,如果$A_i&gt;num_i$,那么ans++ 123456789101112131415161718192021222324252627282930#include&lt;bits/stdc++.h&gt;using namespace std; const int N=150005; int n;int num[N];int mins[N]; int main()&#123; int T; scanf("%d",&amp;T); while(T--)&#123; memset(mins,0x3f3f3f3f,sizeof(mins)); scanf("%d",&amp;n); for(int i=1;i&lt;=n;i++) scanf("%d",&amp;num[i]); for(int i=n-1;i&gt;=1;i--) mins[i]=min(mins[i+1],num[i+1]); int ans=0; for(int i=1;i&lt;n;i++) if(num[i]&gt;mins[i]) ans++; printf("%d\n",ans); &#125; return 0;&#125; // C.Book Reading显然可以发现,题目中要求的个位数字只受要除的数的个位的影响,所以我们在求出来了倍数的个数$num$时,可以发现,个位数字的出现是有周期的,而这个周期和周期中的数字是由要除的数字的个位决定的.而因为要除的数字的个位最多只有10个,所以我们可以先预处理出每个数字的周期以及他们的和,再对多出来的部分直接暴力就可以了. 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253#include&lt;bits/stdc++.h&gt;#define int long long using namespace std; int n,m;int ned[10],idx[10];int sum[10][10]; signed main()&#123; ios::sync_with_stdio(false); cin.tie(0),cout.tie(0); for(int i=1;i&lt;=9;i++)&#123; int now=i; sum[i][++idx[i]]=i; now+=i; while(now!=i)&#123; if(now&gt;=10) now-=10; sum[i][++idx[i]]=now; now+=i; &#125; &#125; for(int i=1;i&lt;=9;i++) for(int j=1;j&lt;=idx[i];j++) ned[i]+=sum[i][j]; int T; cin&gt;&gt;T; while(T--)&#123; int ans=0; cin&gt;&gt;n&gt;&gt;m; int numm=n/m; int tmp = m; tmp%=10; if(tmp==0||numm==0)&#123; cout&lt;&lt;"0"&lt;&lt;endl; continue; &#125; int fir = numm/idx[tmp]; ans+=fir*ned[tmp]; // cout&lt;&lt;fir&lt;&lt;" "&lt;&lt;tmp&lt;&lt;endl; int sos=0; for(int i=fir*idx[tmp]+1;i&lt;=numm;i++) ans+=sum[tmp][i-fir*idx[tmp]]; cout&lt;&lt;ans&lt;&lt;endl; &#125; return 0;&#125; // D.Equalizing by Division我们可以发现,对于某一个数$i$,他能变成的数的个数为$log_2i+1$个,而且题目中$i$的权值也不大,所以我们可以开一个桶,按照从小到大的顺序处理每一个数字,每次处理的时候将它能变成的$log_2i$个数字在桶中的权值全部+1,同时花费就是从原来的i到目前的数字要除几次二,当发现有桶中的数字大于给定的$k$时,更新答案. 123456789101112131415161718192021222324252627282930313233343536373839404142#include&lt;bits/stdc++.h&gt;using namespace std; const int N = 2e5 + 10; int n,k,ans=2147483647;int num[N];struct Node&#123; int val; int now;&#125;buck[N]; int main()&#123; ios::sync_with_stdio(false); cin.tie(0),cout.tie(0); cin&gt;&gt;n&gt;&gt;k; for(int i=1;i&lt;=n;i++) &#123; cin&gt;&gt;num[i]; buck[num[i]].now++; if(buck[num[i]].now&gt;=k)&#123; cout&lt;&lt;"0"&lt;&lt;endl; return 0; &#125; &#125; sort(num+1,num+1+n); for(int i=1;i&lt;=n;i++)&#123; int idx=1,tmp=num[i]/2; while(tmp)&#123; buck[tmp].now++; buck[tmp].val+=idx; if(buck[tmp].now&gt;=k) ans=min(ans,buck[tmp].val); tmp/=2; idx++; &#125; &#125; cout&lt;&lt;ans&lt;&lt;endl; return 0;&#125; //]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>CodeForces题解</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Atcoder Qualification解题报告]]></title>
    <url>%2F2019%2F09%2F11%2FQualification%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A%2F</url>
    <content type="text"><![CDATA[qwq T1:题目中给你一个$D$和一个$M$(一年有$D$个月,一个月有$M$天)让你求出: 的个数.其中$d_1$表示个位,$d_{10}$表示十位. 因为数据范围比较小,所以可以直接暴力枚举解决qwq… 12345678910111213141516#include&lt;bits/stdc++.h&gt;using namespace std;int m,d,ans;int main(void)&#123; scanf("%d%d",&amp;m,&amp;d); for(int i=1;i&lt;=m;i++)&#123; for(int sw=22;sw&lt;=d;sw++)&#123; int g=sw%10; int s=sw/10; if(g&gt;=2&amp;&amp;s&gt;=2&amp;&amp;s*g==i) ans++; &#125; &#125; printf("%d\n",ans); return 0;&#125; T2:给你一个数列$A$,将这个$A$不断$copy k$次变成数列$B$.最后让你求出数列$B$的逆序对个数.$k&lt;=10^9$ 看到$k$那么大,肯定可以$n^2$暴力了啊qwq 我们考虑这k组中的每一组.如果我们考虑原数列$A$中的每一位$A_i$,如果出现了一个$A_j&lt;A_i$,那么在从第$2$组开始,到第$k$组,这些比$A_i$小的数都会对$A_i$有贡献,而且第$3$组到第$k$组也会对第$2$组有贡献,这样一直递推下去,会发现有$1+(k-1)*(k-1)/2$次贡献,而且最后不要忘了一组中对自己的贡献. 1234567891011121314151617181920212223242526272829303132333435363738#include&lt;bits/stdc++.h&gt;#define int long longusing namespace std;const int N=2004;const int HA=1e9+7;int n,k,ans;int num[N],dd[N];inline int ksm(int x,int y)&#123; int tmp=1; while(y)&#123; if(y&amp;1) tmp=(tmp*x)%HA; x=(x*x)%HA; y&gt;&gt;=1; &#125; return tmp%HA;&#125;signed main()&#123; scanf("%lld%lld",&amp;n,&amp;k); for(int i=1;i&lt;=n;i++) scanf("%lld",&amp;num[i]); for(int i=1;i&lt;=n;i++) for(int j=1;j&lt;=n;j++)&#123; if(num[j]&lt;num[i]) dd[i]++; &#125; for(int i=1;i&lt;=n;i++)&#123; ans=(ans+k*(k-1)%HA*ksm(2,HA-2)%HA*dd[i]%HA)%HA; int tdp = 0; for(int j=i+1;j&lt;=n;j++) if(num[j]&lt;num[i]) tdp++; ans = ( ans + tdp * k ) % HA; &#125; printf("%lld\n",ans); return 0; &#125; T4:T3我不会欸qwq(捂脸)]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>Atcoder题解</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Round #573 (Div. 2)解题报告]]></title>
    <url>%2F2019%2F09%2F11%2FRound-1%2F</url>
    <content type="text"><![CDATA[qwq A:没啥可说的,直接按照$Mod 4$分类然后讨论就好了. B:显然可以发现答案只能是0,1,2,3中的某一个,我们只需要将读入记录下来,然后对于每一种胜利的情况分组枚举一下,记录一个最小的ans就可以了. C:考虑每一次操作中,这一页的最右边能消除几个.我们可以设我们已经消除了$sum$个数字,那么当前的$m_i$在消除之后中的书中的位置就是$m_i-sum$,我们就可以推导出来当前$m_i$的这一页的最右边的一个数字就是$((m_i-sum)/k+1)*k$,我们只需要开一个关于i的指针就可以了,时间复杂度为$O(m)$. D:考虑必胜情况:在另外一个人开始取的时候有$2$个或者以上的重复组.或者在有1个重复组时,取出一个重复组(因为不取就会输)之后回和另外一个元素再组成一个重复组. 我们再考虑完这种情况之后,可以发现,我们在将原来的数组排序之后,如果两边都按照最优方式取石子,那么最后的(在决定胜负之前),石子的序列一定是$B_i=i-1$的这样的一个等差数列.所以我们需要对原数组排序,然后统计一个$\sum_{i=1}^n A_i-(i-1)$,判断一下这个$sum$的奇偶性就可以了. PS:一定要先判断有没有例外的必胜情况(我就是这么WA了4发qwq….) 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859#include&lt;bits/stdc++.h&gt;#define int long longusing namespace std;const int N=1e5+10;int n,idxx;int num[N],dis[N];map&lt;int,bool&gt;mp;signed main()&#123; ios::sync_with_stdio(false); cin.tie(0),cout.tie(0); cin&gt;&gt;n; for(int i=1;i&lt;=n;i++) cin&gt;&gt;num[i]; sort(num+1,num+1+n); int sum=0,dpp=0; for(int i=1;i&lt;=n;i++)&#123; if(num[i]==num[i-1]&amp;&amp;i&gt;=2)&#123; dpp++; dis[++idxx]=num[i]; &#125; sum+=num[i]-i+1; mp[num[i]]=1; &#125; if(n==1)&#123; if(sum&amp;1) cout&lt;&lt;"sjfnb"&lt;&lt;endl; else cout&lt;&lt;"cslnb"&lt;&lt;endl; return 0; &#125; if(dpp==1&amp;&amp;num[1]==0&amp;&amp;num[2]==0)&#123; cout&lt;&lt;"cslnb"&lt;&lt;endl; return 0; &#125; if(dpp==1&amp;&amp;n==2)&#123; cout&lt;&lt;"sjfnb"&lt;&lt;endl; return 0; &#125; if(dpp==1)&#123; if(mp[dis[1]-1]) cout&lt;&lt;"cslnb"&lt;&lt;endl; else &#123; if(!(sum&amp;1)) cout&lt;&lt;"cslnb"&lt;&lt;endl; else cout&lt;&lt;"sjfnb"&lt;&lt;endl; &#125; return 0; &#125; if(dpp&gt;=2)&#123; cout&lt;&lt;"cslnb"&lt;&lt;endl; return 0; &#125; if(!(sum&amp;1)) cout&lt;&lt;"cslnb"&lt;&lt;endl; else cout&lt;&lt;"sjfnb"&lt;&lt;endl; return 0;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>CodeForces题解</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Round]]></title>
    <url>%2F2019%2F09%2F11%2FRound%2F</url>
    <content type="text"><![CDATA[qwq A:这道题能想到二进制转十进制然后判断满足的个数，但是转十进制范围已经超过了$long long$，直接模拟会溢出因为满足条件数值的都是4的次幂，所以二进制首位1后跟的$2k$个$0$即为$4$的$k$次幂直接对$0$的个数分析即可 B:很明显的一道贪心题目,当求最小的$sum$时,显然当$1$最多时,$sum$最小.当求$sum$最大时同理.又因为当$a_i$是一个偶数时,$\frac{a_i}{2}$肯定存在,而且$a_i$的最小值为1,所以显然$a_i$的值就只能是$2^j$. C:(个人感觉比$D$难$QAQ…$)让你在给定的序列$P$中求一个子序列,使得在图中按照该子序列进行最短路径移动时可以完整经过原序列$P$.乍一看一点思路都没有.但是仔细思考可以发现一点点思路.我们可以从题目中给出的起点(也就是一号点)开始进行移动,然后在原序列$P$中如果需要经过$P_{i}$和$P_{i+1}$,那么我们显然可以得到$P_i$与$P_{i+1}$一定是直接相连的(因为题目中没有给出无解的情况).那么我们可以扩展一下,假设我们现在在$P_j$号点,我们要走到$P_k$号点.那么如果$dis[P_j][P_k]==j-k$,那么在有解的情况下,一定是有$P_j$经过了所有的$j&lt;i&lt;k$的点(可以自己画个图证明一下).在这种情况下,我们就可以选择扩展答案了. (感觉还是放一下代码比较好qwq) 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556#include&lt;bits/stdc++.h&gt;using namespace std;const int oo = 0x3f3f3f3f;const int N = 105;const int M = 1e6 + 10;int n,m,idx;char mp[N][N];int G[N][N],point[M],ans[M];int qu[M&lt;&lt;1];int head=1,tai=0;int main()&#123; memset ( G , 0x3f3f3f3f , sizeof ( G ) ); scanf ( "%d" , &amp;n ); for ( int i = 1 ; i &lt;= n ; i++ ) scanf ( "%s" , mp[i] + 1 ); for ( int i = 1 ; i &lt;= n ; i++ ) &#123; for ( int j = 1 ; j &lt;= n ; j++ ) if ( mp[i][j] == '1' ) G[i][j] = 1; G[i][i] = 1; &#125; for ( int k = 1 ; k &lt;= n ; k++ ) for ( int i = 1 ; i &lt;= n ; i++ ) for ( int j = 1 ; j &lt;= n ; j++ ) G[i][j] = min ( G[i][j] , G[i][k] + G[k][j] ); scanf("%d",&amp;m); for ( int i = 1 ; i &lt;= m ; i++ ) scanf ( "%d" , &amp;point[i] );// for(int i=1;i&lt;=n;i++)&#123;// for(int j=1;j&lt;=n;j++)// printf("%d " ,G[i][j]);// puts("");// &#125; int st=1,now=2; while(now&lt;=m)&#123; int diss=now-st; if(diss==G[point[st]][point[now]])&#123; if(head&lt;=tai) head++; qu[++tai]=now; now++; &#125; else &#123; ans[++idx]=point[st]; if(head&lt;=tai) st=qu[head++]; &#125; &#125; ans[++idx]=point[st]; if(ans[idx]!=point[m]) ans[++idx]=point[m]; printf("%d\n",idx); for(int i=1;i&lt;=idx;i++) printf ("%d ",ans[i]); return 0;&#125; D:感觉比$C$简单啊$QAQ$….让你求一个字符串使得这个字符串和给定01字符串的每一个子区间的最长单调不降区间长度一样长.我们自己理解了以后可以发现,一个区间的最长单调不降区间长度只是和每一个$1$后的$0$有关系,而和$0$后的$1$无关.(因为对于两个子串$11$和$01$,它们的最长不降区间是一样的).那么我们就可以考虑把原字符串的一些$1$变成$0$.就可以了. 但是怎么改变呢?我们考虑到,对于某一段连续的$1$,那么这段连续区间中的第一个1很显然是不必要的(而且不是最后一个1),那么我们可以把这些个1变成0.(然后就做完辣qwq) 123456789101112131415161718192021#include&lt;bits/stdc++.h&gt;using namespace std;const int N = 1e5 + 10;int tmpp;char ss[N] , tt[N];int main()&#123; scanf ( "%s" , ss + 1 ); int len = strlen ( ss + 1 ); for ( int i = 1 ; i &lt;= len ; i++ ) tt[i] = ss[i]; for ( int i = len ; i &gt;= 1 ; i-- ) &#123; if ( ss[i] == '1' &amp;&amp; tmpp &gt;= 0 ) tt[i] = '0'; int cur=ss[i] == '1' ? 1 : -1; tmpp = min ( tmpp + cur , cur ); &#125; for ( int i = 1 ; i &lt;= len ; i++ ) printf ( "%c" , tt[i] ); return 0;&#125;// E:现在还不会qwq]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>CodeForces题解</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[20190819模拟赛题解]]></title>
    <url>%2F2019%2F09%2F11%2F20190819%E6%A8%A1%E6%8B%9F%E8%B5%9B%E9%A2%98%E8%A7%A3%2F</url>
    <content type="text"><![CDATA[qwq 又是爆零的一次比赛欸qwq… T1: 让你在一个矩阵中,找出一条路径,使得经过的路径方差最小. 我就直接放题解了qwq… 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849#include&lt;bits/stdc++.h&gt;template &lt;class T&gt;bool Reduce(T &amp;a,T const &amp;b)&#123; return a&gt;b?a=b,1:0;&#125;const int N=31,inf=1e9+7,S=59*30;int n,m,ans;int a[N][N];int f[N][N];int cnt=0;void init()&#123; std::ios::sync_with_stdio(false); freopen("path.in","r",stdin); freopen("path.out","w",stdout); std::cin&gt;&gt;n&gt;&gt;m; for(int i=1;i&lt;=n;++i) for(int j=1;j&lt;=m;++j) std::cin&gt;&gt;a[i][j];&#125;int calc(const int &amp;sum,const int &amp;i,const int &amp;j)&#123; return (n+m-1)*a[i][j]*a[i][j]-2*sum*a[i][j];&#125;int dp(int sum)&#123; for(int i=0;i&lt;N;++i) for(int j=0;j&lt;N;++j) f[i][j]=inf; f[1][1]=calc(sum,1,1); for(int j=2;j&lt;=m;++j) Reduce(f[1][j],f[1][j-1]+calc(sum,1,j)); for(int i=2;i&lt;=n;++i) Reduce(f[i][1],f[i-1][1]+calc(sum,i,1)); for(int i=2;i&lt;=n;++i) for(int j=2;j&lt;=m;++j)&#123; Reduce(f[i][j],f[i-1][j]+calc(sum,i,j)); Reduce(f[i][j],f[i][j-1]+calc(sum,i,j)); &#125; return sum*sum+f[n][m];&#125;int main()&#123; init(); ans=inf; for(int sum=1;sum&lt;=S;++sum) Reduce(ans,dp(sum)); std::cout&lt;&lt;ans; return 0;&#125; T2:让你每次从一个区间向另一个区间连边,最后求起点到所有点的最短路. 很显然是线段树优化建图,开两颗线段树A,B,第一颗线段树从儿子节点向父亲连边,另外一条线段树从父亲向儿子连边.但是一个点一个点的向区间连边太麻烦了,所以我们需要建一个虚点,每次从区间[l1,r1]向一个虚点连边,然后再用这个虚点向区间[l2,r2]连边,这样就可以了. (但是我被卡常了) 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;#include &lt;queue&gt;inline int read () &#123; int s = 0 , w = 1; char ch = getchar (); while ( ch &gt; '9' || ch &lt; '0' ) &#123; if ( ch == '-' ) w = -1; ch = getchar ();&#125; while ( ch &gt;= '0' &amp;&amp; ch &lt;= '9' ) &#123; s = s * 10 + ch - '0'; ch = getchar ();&#125; return s * w;&#125; const int N = 500010;const int M = 2210000;int n , m , p , tot , cnt , root_f , root_s;struct edge&#123; int to; int next; int date;&#125;e[11000000];struct Node&#123; int lc; int rc;&#125;tree[N&lt;&lt;2];int head[M] , dis[M] , pos[N];bool vis[M];std :: priority_queue &lt; std :: pair &lt; int , int &gt; , std :: vector &lt; std :: pair &lt; int , int &gt; &gt; , std :: greater &lt; std :: pair &lt; int , int &gt; &gt; &gt; q; inline void add(int x,int y,int date)&#123; e[++cnt].to=y; e[cnt].next=head[x]; head[x]=cnt; e[cnt].date=date; return;&#125;void FBuild(int &amp;root,int l,int r)&#123; root=++tot; if ( l == r ) &#123; pos[l]=root; return; &#125; int mid=l+r&gt;&gt;1; FBuild(tree[root].lc,l,mid); FBuild(tree[root].rc,mid+1,r); add(tree[root].lc,root,0); add(tree[root].rc,root,0); return;&#125;void SBuild(int &amp;root,int l,int r)&#123; root=++tot; if(l==r)&#123; add(root,pos[l],0); return; &#125; int mid=l+r&gt;&gt;1; SBuild(tree[root].lc,l,mid); SBuild(tree[root].rc,mid+1,r); add(root,tree[root].lc,0); add(root,tree[root].rc,0); return;&#125;void FAdd(int root,int l,int r,int x,int y)&#123; if(x&lt;=l&amp;&amp;r&lt;=y) &#123; add(root,tot,1); return; &#125; int mid=l+r&gt;&gt;1; if(x&lt;=mid) FAdd(tree[root].lc,l,mid,x,y); if(y&gt;mid) FAdd(tree[root].rc,mid+1,r,x,y);&#125;void SAdd(int root,int l,int r,int x,int y)&#123; if(x&lt;=l&amp;&amp;r&lt;=y) &#123; add(tot,root,1); return; &#125; int mid=l+r&gt;&gt;1; if(x&lt;=mid) SAdd(tree[root].lc,l,mid,x,y); if(y&gt;mid) SAdd(tree[root].rc,mid+1,r,x,y); return;&#125;inline void Dijkstra()&#123; memset(dis,0x3f3f3f3f,sizeof(dis)); q.push(std :: make_pair(0,pos[p])); dis[pos[p]]=0; while(!q.empty())&#123; int x=q.top().second; q.pop(); if(vis[x]) continue; vis[x]=1; for(int i=head[x];i;i=e[i].next)&#123; int y=e[i].to; if(dis[x]+e[i].date&lt;dis[y])&#123; dis[y]=dis[x]+e[i].date; q.push(std ::make_pair(dis[y],y)); &#125; &#125; &#125; return;&#125;int main ( void ) &#123; freopen("road.in","r",stdin); freopen("road.out","w",stdout); n = read(); m = read(); p = read(); FBuild ( root_f , 1 , n ); SBuild ( root_s , 1 , n ); while ( m-- ) &#123; int x1 = read() , y1 = read() , x2 = read() , y2 = read(); tot++; FAdd(root_f,1,n,x1,y1); SAdd(root_s,1,n,x2,y2); tot++; FAdd(root_f,1,n,x2,y2); SAdd(root_s,1,n,x1,y1); &#125; Dijkstra(); for(int i=1;i&lt;=n;++i) printf("%d\n",dis[pos[i]]/2); return 0;&#125; T3:给你一个矩阵,让你求出这个矩阵中的一个最大的子矩阵,使得这个子矩阵的每一行和每一列都是等差数列 暂时咕咕咕一会,不会]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>模拟赛题解</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[邪教算法学习小结]]></title>
    <url>%2F2019%2F09%2F11%2F%E9%82%AA%E6%95%99%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E5%B0%8F%E7%BB%93%2F</url>
    <content type="text"><![CDATA[qwq 事实证明,邪教算法是很有用的qwq(以下材料大多抄袭OI-wiki)qwq Part1:随机函数:但是并找不到什么随机化好题qwq,,,,,先Pass了再说qwq… Part2:爬山算法:个人理解就是一个比较跳的贪心(真的是个贪心)….一般常用于单峰函数的求解,但是单峰函数为啥不写三分呢? 爬山算法的一般流程其实就是:选定一个初始答案,通过某种方法计算出另外一个答案,if 另一个答案更优 then 转移否则不变, 很形象的就是了爬山这种东西. 例题 JSOI2008球形空间产生器 空间模型的爬山就是很正常的模板了,直接给代码了qwq 1234567891011121314151617181920212223242526272829303132333435363738394041#include &lt;bits/stdc++.h&gt;using namespace std;const int N = 10005;int n;double tot , f[1005][1005];double ans[N] , cans[N] , dis[N];inline void check () &#123; tot = 0; for ( int i = 1 ; i &lt;= n + 1 ; i++ ) &#123; cans[i] = 0; dis[i] = 0; for ( int j = 1 ; j &lt;= n ; j++ ) dis[i] += ( f[i][j] - ans[j] ) * ( f[i][j] - ans[j] ); dis[i] = sqrt ( dis[i] ); tot += dis[i]; &#125; tot /= ( n + 1 ); for ( int i = 1 ; i &lt;= n + 1 ; i++ ) for ( int j = 1 ; j &lt;= n ; j++ ) cans[j] += ( dis[i] - tot ) * ( f[i][j] - ans[j] ) / tot; return;&#125;int main() &#123; scanf ( "%d" , &amp;n ); for ( int i = 1 ; i &lt;= n + 1 ; i++ ) for ( int j = 1 ; j &lt;= n ; j++ ) &#123; scanf ( "%lf" , &amp;f[i][j] ); ans[j] += f[i][j]; &#125; for ( int i = 1 ; i &lt;= n ; i++ ) ans[i] /= ( n + 1 ); for ( double T = 10001 ; T &gt;= 0.0000001 ; T *= 0.99995 ) &#123; check (); for ( int j = 1 ; j &lt;= n ; j++ ) ans[j] += cans[j] * T; &#125; for ( int i = 1 ; i &lt;= n ; i++ ) printf ( "%.3lf " , ans[i] ); return 0;&#125; Part3. 模拟退火理解了爬山算法了之后,可以发现爬山算法存在的很显然的一个局限性:只能贪心,而这种在处理一些多峰函数时往往会只找到函数的某个极大值而不是最大值.所以我们就要引入模拟退火这种方法.,那么$What is $模拟退火呢? (以下内容来自WIKI) : 12345模拟退火来自冶金学的专有名词退火。退火是将材料加热后再经特定速率冷却，目的是增大晶粒的体积，并且减少晶格中的缺陷。材料中的原子原来会停留在使内能有局部最小值的位置，加热使能量变大，原子会离开原来位置，而随机在其他位置中移动。退火冷却时速度较慢，使得原子有较多可能可以找到内能比原先更低的位置。模拟退火的原理也和金属退火的原理近似：我们将热力学的理论套用到统计学上，将搜寻空间内每一点想像成空气内的分子；分子的能量，就是它本身的动能；而搜寻空间内的每一点，也像空气分子一样带有“能量”，以表示该点对命题的合适程度。算法先以搜寻空间内一个任意点作起始：每一步先选择一个“邻居”，然后再计算从现有位置到达“邻居”的概率。可以证明，模拟退火算法所得解依概率收敛到全局最优解。 听起来很懵逼是不是qwq..没关系,其实就是如果你通过现在的这个状态,以某种方式得到了另外一个答案时,你不再像爬山算法那样直接转移,而已要像下图: 发生转移之后,随着温度T的不断降低,可以发现$\frac{-\Delta E}{T}$是不断减小的(因为在新状态更劣的情况下,$-\Delta E$一定为负数),那么$e^\frac{-\Delta E}{T}$一定也是不断减小的并且趋向于0.即模拟退火算法在温度较低时退化为爬山算法.这时只能寻找当前的函数极大值,所以怎么调参使得温度$T$较大时转移到正确的峰函数区间是解决问题的关键(但是还是只能靠运气qwq) 一般模拟退火的代码大概框架如下: 123456789101112inline void SA () &#123; for ( double T = StartTemplature ; T &gt;= EndTemplature ; T *= Coolingcoefficient ) &#123; Typename Newans = Getans();//此处Getans为某个获得新答案的函数. Typename delta = ans - Newans; if ( Newans &gt; ans ) //这里假设当值大时答案更优 ans = Newans; else if ( exp ( -delta / T ) &lt; ( double ) rand () % RAND_MAX ) ans = Newans; &#125; return;&#125; 其实为了保证答案的正确性,一般都会跑多次模拟退火从而增加求得最优解的概率.(调参也是个非常痛苦的过程,因为模拟退火比爬山算法更为看脸随机,所以每个参数的小差别可能导致答案的天壤之别.) 例题 [TJOI2010]分金币 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758#include &lt;iostream&gt;#include &lt;cstdio&gt;#include &lt;algorithm&gt;#include &lt;cmath&gt;#include &lt;cstring&gt; #include &lt;ctime&gt;#define int long longconst int N = 1005;inline int read () &#123; int s = 0 , w = 1; char ch = getchar (); while ( ch &gt; '9' || ch &lt; '0' ) &#123; if ( ch == '-' ) w = -1; ch = getchar ();&#125; while ( ch &gt;= '0' &amp;&amp; ch &lt;= '9' ) &#123; s = s * 10 + ch - '0'; ch = getchar ();&#125; return s * w;&#125;int n , ans = 2147483647;int num[N];inline int get () &#123; int sum1 = 0 , sum2 = 0; for ( int i = 1 ; i &lt;= ( n + 1 ) / 2 ; i++ ) sum1 += num[i]; for ( int i = ( n + 1 ) / 2 + 1 ; i &lt;= n ; i++ ) sum2 += num[i]; return abs ( sum1 - sum2 );&#125;inline void SA () &#123; double T = 5000; while ( T &gt;= 1e-10 ) &#123; int l = rand () % n + 1 , r = rand () % n + 1; std :: swap ( num[l] , num[r] ); int sum = get (); if ( sum &lt; ans ) ans = sum; else if ( exp ( ( ans - sum ) / T ) &lt; (double(rand())/RAND_MAX) ) std :: swap ( num[l] , num[r] ); T *= 0.98; &#125; return;&#125;signed main ( void ) &#123; srand ( rand() ); int T = read (); while ( T-- ) &#123; n = read (); for ( int i = 1 ; i &lt;= n ; i++ ) num[i] = read (); for ( int i = 1 ; i &lt;= 100 ; i++ ) SA (); printf ( "%lld\n" , ans ); ans = 2147483647; &#125; return 0;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>玄学</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Noip2018游记]]></title>
    <url>%2F2018%2F11%2F17%2FNoip2018%E6%B8%B8%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[真没想到我能活着苟到写游记的一天$qwq$ Day-1最近几天有点累，早上就不去学校了（然而事实证明这是很正确的抉择）。早上一觉睡到了$8:20$，早上起来想起来$wucstdio$大佬说过立过的$flag$不拔在$Noip$会掉$rp$然后早睡起来就开始肝猪国杀，一直到$10:40$左右重构完了（历时$3$天终于写完了）下午回到学校，发现早上是信心鼓励赛幸好没去23333然后下午+晚上一直在写模板题。（顺便凑出来了$AC520$） Day 0早上教练居然给我们请假不用早来了哎$qwq….$上午开始走，一开始的时候还想在车上背个板子什么的然后SCP真好看又颓了会知乎然后就发现到了$cyyz$了 住宿安排完成了之后居然才$2:30$多一点，然后在宿舍里不知道该干啥。不过感觉$cyyz$的移动信号貌似比$SDSC$的时候快了一点（大雾）然后$wucstdio$给我打电话说楼下有很多大佬，自己迅速下楼去膜神仙。 终于见到了$rqy$姐姐本人了好兴奋$qwq$，不过$rqy$姐姐好像比自己想的稍微内敛了一点。 但是这并改变不了rqy姐姐是人赢的性质据说看见神仙可以rp++,（但是rp貌似被rqy姐姐吸走了QAQ) 晚上全宿舍都在打板子，但是试机的时候$wyxdrqc$和$zyp$大佬还有很多人（包括我）试机的时候线段树都打错了（大雾）。给自己喜欢的人打了个电话，加油qaq… Day 1早上起来，自己冷静了一下，打开题目一看$T1$，哎我为什么$T1$只会$70$分啊….，然后自己又推了1h还是没有推出来，心态当场爆炸qwq…T2当成数论推了半天，然后自己冷静的写了一个乱搞做法，也不知道能得多少分。T3完全不会，打一个直径分滚粗了。 出考场：啊你们怎么都做过原题吗？啊T2是个裸背包吗？啊T3你们都会写70分吗？心态崩了我要妹子QWQ….. 下午心态一直RE中，在宿舍里颓了一下午。不管怎么说第二天都想翻盘。 Day 2第二天睡了一觉，发现心情稍微好了一点。到了考场之后，看到第一题$m=n$我就感觉药丸…. 为什么$Noip$的$T1$要考基环树啊….. 写了个$60$分的树上贪心，然后开始想环上怎么做。然而我很$zz$的没有看数据范围可以$n^2$过，一直在写$O(n)$的做法。然后我就写挂了，自己补了只有环的做法，$72分滚了$。 T2看的时候：啊？读题读了$10mins$确定我不会，然后就决定打表了。 T3：……为什么$Noip$要考$ddp$啊。。。。 出了考场发现大家都说D2不会做当时甚至有些开心。 然后晚上就回去上晚自习了。 一年半的OI一场空，$D1TI$见祖宗说我是再适合不过的了。本来还以为自己能去$PKUWC$,好吧，我还是太$naive$了，感觉自己要与省一擦肩而过….剩下一年自己就养生好了，再来一年起码要拿一个$1=$啊$qwq…..$ 回家之后心态一直RE,,,,不过幸好$wucstdio$大佬能和我谈了谈人生….瞬间感觉$wucstdio$成了我的人生导师qaq…. 以后的路自己就要自己决定了，不过自己决定那些比赛也是要一起参加的qaq… 那些能进入省选的$OIer$们要加油鸭$qaq…$我会一直陪着你们的$@wyxdrqc @wucstdio @lingyuqing$ 你们的$wqyzstql$也要和你们一起努力了。]]></content>
      <categories>
        <category>吹水</category>
      </categories>
      <tags>
        <tag>游记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[考前模板整理]]></title>
    <url>%2F2018%2F11%2F07%2F%E8%80%83%E5%89%8D%E6%A8%A1%E6%9D%BF%E6%95%B4%E7%90%86%2F</url>
    <content type="text"><![CDATA[$Noip$之前在这里整理一波模板….集成了一下所有的$TG$和$PJ$应该会考的模板 PS:所有模板纯属现场手搓，不保证正确性（比如手抖打错字母什么的），如果找到错误请及时告知我qwq 快速排序最基本的板子了吧,$C++$选手表示开心$qaq$。1234567891011121314151617#include &lt;algorithm&gt;#include &lt;cstdio&gt;const int N = 1e5 + 10int n;int num[N];int main ( void ) &#123; scanf ( "%d" , &amp;n ); for ( int i = 1 ; i &lt;= n ; i++ ) scanf ( "%d" , &amp;num[i] ); sort ( num + 1 , num + 1 + n ); for ( int i = 1 ; i &lt;= n ; i++ ) printf ( "%d%c" , num[i] , i == n ? '\n' : ' ' ); return 0;&#125; 并查集12345678910111213141516171819202122232425262728293031323334#include &lt;iostream&gt;#include &lt;cstring&gt;#include &lt;algorithm&gt;#include &lt;cstdio&gt;const int N = 1e5 + 10;int n , m;int find ( int x ) &#123; if ( x != father[x] ) father[x] = find ( father[x] ); return father[x];&#125;int main ( void ) &#123; scanf ( "%d%d" , &amp;n , &amp;m ); for ( int i = 1 ; i &lt;= n ; i++ ) father[i] = i; for ( int i = 1 ; i &lt;= m ; i++ ) &#123; int x , y , z; scanf ( "%d%d%d" , &amp;z , &amp;x , &amp;y ); if ( z == 1 ) &#123; x = find ( x ) , y = find ( y ); father[x] = y; &#125; else if ( z == 2 ) &#123; x = find ( x ) , y = find ( y ); if ( x == y ) puts ( "Y" ); else puts ( "N" ); &#125; &#125; return 0;&#125; 快速幂个人感觉这个还是个挺重要的板子了吧…..12345678910111213141516171819202122#include &lt;cstdio&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;#include &lt;cstring&gt;inline int Fast_Power ( int x , int y ) &#123; int sum = 1; while ( y ) &#123; if ( y &amp; 1 ) sum = sum * x; x = x * x; y &gt;&gt;= 1; &#125; return sum;&#125;int main ( void ) &#123; int n , m; scanf ( "%d%d" , &amp;n , &amp;m ); printf ( "%d\n" , Fast_Power ( n , m ) ); return 0;&#125; 线性筛素数这个其实只是筛素数的话是挺简单的，但是我决定连$\phi$一起筛出来（如果用不到的话就把$phi$数组自动忽略掉就好了）12345678910111213141516171819202122232425262728293031323334353637#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;const int N = 5e5 + 10;int n , cnt;int prime[N] , phi[N];bool flag[N];int main ( void ) &#123; flag[1] = 1; phi[1] = 1; scanf ( "%d" , &amp;n ); for ( int i = 2 ; i &lt;= n ; i++ ) &#123; if ( !flag[i] ) &#123; flag[i] = 1; prime[++cnt] = i; phi[i] = i - 1; &#125; for ( int j = 1 ; j &lt;= cnt &amp;&amp; i * prime[j] &lt;= n ; j++ ) &#123; flag[i * prime[j]] = 1; if ( i % prime[j] == 0 ) &#123; phi[i * prime[j]] = phi[i] * prime[j]; break; &#125; phi[i * prime[j]] = phi[i] * phi[prime[j]]; &#125; &#125; for ( int i = 1 ; i &lt;= cnt ; i++ ) printf ( "%d " , prime[i] ); puts ( "" ); for ( int i = 1 ; i &lt;= n ; i++ ) printf ( "%d " , phi[i] ); return 0;&#125; 【模板】堆又是一个$C++$党的福利$qwq$,直接用$priority_queue$模拟就好啦123456789101112131415161718192021222324252627#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;using std :: priority_queue;int n;priority_queue &lt; int , std :: vector &lt; int &gt; , std :: greater &lt; int &gt; &gt; qu;int main ( void ) &#123; scanf ( "%d" , &amp;n ); for ( int i = 1 ; i &lt;= n ; i++ ) &#123; int opts; scanf ( "%d" , &amp;opts ); if ( opts == 1 ) &#123; int x; scanf ( "%d" , &amp;x ); qu.push ( x ); &#125; else if ( opts == 2 ) printf ( "%d\n" , qu.top () ); else if ( opts == 3 ) qu.pop (); &#125; return 0;&#125; 字符串蛤希其实我个人比较倾向于写自然溢出或者直接随机一个质数$qwq$12345678910111213141516171819202122232425262728293031#include &lt;cstdio&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;#include &lt;cstring&gt;typedef unsigned long long ull;const ull base = 233;const int N = 1e4;const int M = 1e3;int n;char s[N][M];ull has[N];int main ( void ) &#123; scanf ( "%d" , &amp;n ); for ( int i = 1 ; i &lt;= n ; i++ ) scanf ( "%s" , s[i] + 1 ); for ( int i = 1 ; i &lt;= n ; i++ ) &#123; int len = strlen ( s[i] + 1 ); for ( int j = 1 ; j &lt;= len ; j++ ) has[i] = has[i] * base + s[i][j]; &#125; std :: sort ( has + 1 , has + 1 + n ); int ans = 0; for ( int i = 1 ; i &lt;= n ; i++ ) if ( has[i] != has[i + 1] ) ans++; printf ( "%d\n" , ans ); return 0;&#125; 最小生成树不会写$prim$的蒟蒻瑟瑟发抖….123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;const int N = 1e4 + 10;const int M = 2e5 + 10;int n , m;struct Edge &#123; int from; int to; int data;&#125;e[M];int father[N];inline int read () &#123; int s = 0 , w = 1; char ch = getchar (); while ( ch &gt; '9' || ch &lt; '0' ) &#123; if ( ch == '-' ) w = -1; ch = getchar ();&#125; while ( ch &gt;= '0' &amp;&amp; ch &lt;= '9' ) &#123; s = s * 10 + ch - '0'; ch = getchar ();&#125; return s * w;&#125;inline bool cmp ( Edge x , Edge y ) &#123; return x.data &lt; y.data;&#125;int find ( int x ) &#123; if ( x != father[x] ) father[x] = find ( father[x] ); return father[x];&#125;void Union ( int x , int y ) &#123; x = find ( x ) , y = find ( y ); father[x] = y; return;&#125;inline bool Judge ( int x , int y ) &#123; x = find ( x ) , y = find ( y ); return ( x == y ) ? true : false;&#125;int main ( void ) &#123; n = read () , m = read (); for ( int i = 1 ; i &lt;= n ; i++ ) father[i] = i; for ( int i = 1 ; i &lt;= m ; i++ ) &#123; int x = read () , y = read () , z = read (); e[i].from = x; e[i].to = y; e[i].data = z; &#125; std :: sort ( e + 1 , e + 1 + m , cmp ); int NowEdge = 0 , NowVal = 0; for ( int i = 1 ; i &lt;= m ; i++ ) &#123; int l = e[i].from , r = e[i].to; if ( Judge ( l ,r ) ) continue; Union ( l , r ); NowEdge++; NowVal += e[i].data; if ( NowEdge == n - 1 ) break; &#125; if ( NowEdge == n - 1 ) printf ( "%d\n" , NowVal ); else puts ( "orz" ); return 0;&#125; 单源最短路 （有负权边）这张图有负权边，所以只能写某已经死掉的$SPFA$了123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960#include &lt;cstdio&gt;#include &lt;iostream&gt;#include &lt;cstring&gt;#include &lt;algorithm&gt;#include &lt;queue&gt;const int N = 1e4 + 10;const int M = 1e5 + 10;using std :: queue;int n , m , t;struct Edge &#123; int to; int data; int next;&#125;e[M];int head[N] , dis[N];bool inque[N];inline int read () &#123; int s = 0; bool flag = 0; char ch = getchar (); while ( ch &gt; '9' || ch &lt; '0' ) &#123; if ( ch == '0' ) flag = 1; ch = getchar ();&#125; while ( ch &gt;= '0' &amp;&amp; ch &lt;= '9' ) &#123; s = s * 10 + ch - '0'; ch = getchar ();&#125; return ( flag ) ? -s : s;&#125;void Spfa ( int x ) &#123; memset ( dis , 0x3f3f3f3f , sizeof ( dis ) ); inque[x] = 1;dis[x] = 0; qu.push ( x ); while ( !qu.empty () ) &#123; int j = qu.front (); qu.pop (); inque[j] = 0; for ( int i = head[j] ; i ; i = e[i].next ) &#123; int k = e[i].to; if ( dis[k] &gt; dis[j] + e[i].data ) &#123; dis[k] = dis[j] + e[i].data; if ( !inque[k] ) &#123; inque[k] = 1; qu.push ( k ); &#125; &#125; &#125; &#125; return;&#125;int main ( void ) &#123; n = read () , m = read (); for ( int i = 1 ; i &lt;= m ; i++ ) &#123; int x = read () , y = read () , z = read (); add ( x , y , z ); &#125; Spfa ( 1 ); for ( int i = 1 ; i &lt;= n ; i++ ) printf ( "%d%c" , dis[i] == 0x3f3f3f3f ? 2147483647 : dis[i] , i == n ? '\n' : ' ' ); return 0;&#125; 单源最短路 （无负权边）在题目明确说没有负权边的情况下，跑堆优化的$Dijkstra$一定是最稳的其实代码长得都差不多123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172#include &lt;queue&gt;#include &lt;iostream&gt;#include &lt;cstring&gt;#include &lt;algorithm&gt;#include &lt;cstdio&gt;#define F(i,a,b) for ( int i = a ; i &lt;= b ; i++ )#define MP std::make_pair#define se second#define fi firsttypedef std::pair &lt; int , int &gt; pll;const int N = 1e5 + 10; const int M = 4e5 + 20;std::priority_queue &lt; pll , std::vector &lt; pll &gt; , std::greater &lt; pll &gt; &gt; qu;int n , m , s , t;struct Edge &#123; int to; int data; int next;&#125;e[M];int head[N] , dis[N];bool inque[N];inline int read () &#123; int s = 0 , w = 1; char ch = getchar (); while ( ch &gt; '9' || ch &lt; '0' ) &#123; if ( ch == '-' ) w = -1; ch = getchar ();&#125; while ( ch &gt;= '0' &amp;&amp; ch &lt;= '9' ) &#123; s = s * 10 + ch - '0'; ch = getchar ();&#125; return s * w;&#125;void add ( int x , int y , int z ) &#123; e[++t].to = y; e[t].data = z; e[t].next = head[x]; head[x] = t; return;&#125;inline void Heap_Dijkstra ( int x ) &#123; memset ( dis , 0x3f3f3f3f , sizeof ( dis ) ); dis[x] = 0; qu.push ( MP ( dis[x] , x ) ); while ( !qu.empty () ) &#123; int j = qu.top ().se; qu.pop (); if ( inque[j] ) continue; inque[j] = 1; for ( int i = head[j] ; i ; i = e[i].next ) &#123; int k = e[i].to; if ( dis[k] &gt; dis[j] + e[i].data ) &#123; dis[k] = dis[j] + e[i].data; qu.push ( MP ( dis[k] , k ) ); &#125; &#125; &#125; return;&#125;int main ( void ) &#123; n = read (); m = read (); s = read (); F ( i , 1 , m ) &#123; int x = read () , y = read () , z = read (); add ( x , y , z ); &#125; Heap_Dijkstra ( s ); F ( i , 1 , n ) printf ( "%d " , dis[i] ); return 0;&#125; 就先整理这些吧…留个坑等着填….]]></content>
      <categories>
        <category>吹水</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[[SDOI2010] 所驼门王的宝藏]]></title>
    <url>%2F2018%2F11%2F05%2Fi-t%2F</url>
    <content type="text"><![CDATA[一道思维难度很简单，代码实现难度非常$mmp$的毒瘤题…..(这很$SDOI…..$) 题目连接：SDOI2010 所驼门王的宝藏 好，我们直接跳过题目背景。 然后我们会发现，如果这道题能把图建出来，那么直接一遍$DAG$上$DP$就过了。 蒽，这不是$sb$题吗？ 然后让我们看数据范围：$1&lt;=n&lt;=1000000$ 笑容逐渐消失 但是我们考虑一下，既然我们要建一张$DAG$。那么，我们完全没有必要对所有的点进行两两连边。我们只需要对每一行和每一列进行连边，把他们连成一个环，这样的话，建边复杂度就会从$O(n^2)$变成$O(n)$了。 然后对于自由门的情况，对不起，我不知道怎么优化，所以我决定暴力建边。 （分析可以发现即使全是自由门，你暴力建边也不会$TLE$） 代码如下： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197#include &lt;cstdio&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;#include &lt;cstring&gt;#include &lt;stack&gt;#include &lt;map&gt;const int N = 1e6 + 10;const int M = 5e6 + 10;using std :: map;using std :: stack;int ans = -0x3f3f3f3f;int n , r , c , t;int dx[] = &#123; 0 , 0 , 1 , 1 , 1 , -1 , -1 , -1 &#125;;int dy[] = &#123; 1 , -1 , 1 , 0 , -1 , 1 , 0 , -1 &#125;;struct Node &#123; int x; int y; int opts; int id;&#125;p[N];struct Edge &#123; int from; int to; int next; &#125;e[M];int idx , Bcnt;int head[N] , dfn[N] , low[N];int Belong[N] , size[N] , f[N];int degree[N];bool instack[N];map &lt; std :: pair &lt; int , int &gt; , int &gt; mp;map &lt; std :: pair &lt; int , int &gt; , int &gt; mat;stack &lt; int &gt; st;inline int read () &#123; int s = 0 , w = 1; char ch = getchar (); while ( ch &gt; '9' || ch &lt; '0' ) &#123; if ( ch == '-' ) w = -1; ch = getchar ();&#125; while ( ch &gt;= '0' &amp;&amp; ch &lt;= '9' ) &#123; s = s * 10 + ch - '0'; ch = getchar ();&#125; return s * w;&#125;template &lt; class T &gt;inline T min ( T x , T y ) &#123; return x &lt; y ? x : y;&#125;template &lt; class T &gt;inline T max ( T x , T y ) &#123; return x &gt; y ? x : y;&#125;inline void add ( int x , int y ) &#123; e[++t].to = y; e[t].from = x; e[t].next = head[x]; head[x] = t; return;&#125;bool cmp1 ( Node a , Node b ) &#123; if ( a.x != b.x ) return a.x &lt; b.x; if ( a.opts == 1 ) return 1; if ( b .opts == 1 ) return 0; return a.y &lt; b.y;&#125;bool cmp2 ( Node a , Node b ) &#123; if ( a.y != b.y ) return a.y &lt; b.y; if ( a.opts == 2 ) return 1; if ( b.opts == 2 ) return 0; return a.x &lt; b.x;&#125;void Tarjan ( int cur ) &#123; dfn[cur] = low[cur] = ++idx; instack[cur] = 1; st.push ( cur ); for ( int i = head[cur] ; i ; i = e[i].next ) &#123; int j = e[i].to; if ( !dfn[j] ) &#123; Tarjan ( j ); low[cur] = min ( low[cur] , low[j] ); &#125; else if ( instack[j] ) low[cur] = min ( low[cur] , dfn[j] ); &#125; int k; if ( low[cur] == dfn[cur] ) &#123; Bcnt++; do &#123; k = st.top ();; st.pop (); instack[k] = 0; Belong[k] = Bcnt; size[Bcnt]++; &#125; while ( k != cur ); &#125; return;&#125;void dfs ( int cur , int father ) &#123; if ( f[cur] &gt; size[cur] ) return; f[cur] = size[cur]; for ( int i = head[cur] ; i ; i = e[i].next ) &#123; int j = e[i].to; if ( j == father ) continue; dfs ( j , cur ); f[cur] = max ( f[cur] , f[j] + size[cur] ); &#125; return;&#125;int main ( void ) &#123; n = read () , r = read () , c = read (); for ( int i = 1 ; i &lt;= n ; i++ ) &#123; p[i].x = read (); p[i].y = read (); p[i].opts = read (); p[i].id = i; mp[std::make_pair ( p[i].x , p[i].y )] = i; &#125; std :: sort ( p + 1 , p + n + 1 , cmp1 ); int first = 1 , last = 1; for ( int i = 1 ; i &lt;= n ; i++ ) &#123; if ( p[i].x != p[i + 1].x ) &#123; if ( first != last ) add ( p[last].id , p[first].id ); last = first = i + 1; &#125; else &#123; if ( p[last].opts == 1 ) add ( p[last].id , p[i + 1].id ); if ( p[i + 1].opts == 1 ) last = i + 1; if ( p[first].opts != 1 ) last = first = i + 1; &#125; &#125; first = last = 1; std :: sort ( p + 1 , p + 1 + n , cmp2 ); for ( int i = 1 ; i &lt;= n ; i++ ) &#123; if ( p[i].y != p[i + 1].y ) &#123; if ( first != last ) add ( p[last].id , p[first].id ); last = first = i + 1; &#125; else &#123; if ( p[last].opts == 2 ) add ( p[last].id , p[i + 1].id ); if ( p[i + 1].opts == 2 ) last = i + 1; if ( p[first].opts != 2 ) last = first = i + 1; &#125; &#125; //printf ( "%d\n" , t ); for ( int i = 1 ; i &lt;= n ; i++ ) if ( p[i].opts == 3 ) for ( int j = 0 ; j &lt; 8 ; j++ ) &#123; int xx = p[i].x + dx[j]; int yy = p[i].y + dy[j]; if ( mp[std :: pair &lt; int , int &gt; ( xx , yy )] ) add ( p[i].id , mp[std :: pair &lt; int , int &gt; ( xx , yy )] ); &#125; // printf ( "%d\n" , t ); // for ( int i = 1 ; i &lt;= t ; i++ ) // printf ( "%d %d\n" , e[i].from , e[i].to ); for ( int i = 1 ; i &lt;= n ; i++ ) if ( !Belong[i] ) Tarjan ( i ); for ( int i = 1 ; i &lt;= n ; i++ ) for ( int j = head[i] ; j ; j = e[j].next ) &#123; int k = e[j].to; if ( Belong[i] != Belong[k] ) mat[std :: make_pair ( Belong[i] , Belong[k] )] = 1; &#125; t = 0; memset ( head, 0 , sizeof ( head ) ); for ( auto it = mat.begin () ; it != mat.end() ; it++ ) &#123; add ( it -&gt; first.first , it -&gt; first.second ); degree[it -&gt; first.second]++; &#125; // for ( int i = 1 ; i &lt;= Bcnt ; i++ ) // printf ( "%d " , degree[i] ); for ( int i = 1 ; i &lt;= Bcnt ; i++ ) if ( degree[i] == 0 ) &#123; dfs ( i , 0 ); ans = max ( ans , f[i] ); &#125; printf ( "%d\n" , ans ); return 0;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>图论</tag>
        <tag>DAG</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[qbxt D2T2 Code 题解]]></title>
    <url>%2F2018%2F11%2F04%2F%E9%A2%98%E8%A7%A3%2F</url>
    <content type="text"><![CDATA[看了一眼之后完全就是一脸懵逼的题…. 首先先读题$qaq$…..题目的大致意思就是给你一个矩阵，然后问你把这个矩阵横竖填成异或值为$1$的矩阵的方案数。 很明显，这道题没有什么枚举上界，所以你想直接枚举的话是不太可能的。那么我们怎么办呢$?$ 我也不知道 既然枚举补星，那么我们就用一个比较常见的正难则反的思想。对于这道题，我们可以容斥的去做 那么，首先，所有的方案是什么呢？ All = 2^{n*m}为什么呢？一共有n+m个校验码，我们按位数考虑，在只有1位的情况下，那么这一位可能是$0$或者$1$。那么就是$(2^n)^m$的方案数了。 然后我们考虑对于每一位删掉不合法的情况：因为异或起来是$1$，那么对于没一行或者每一列，$1$的个数总是奇数。那么我们就可以根据这个东西来进行删除不合法状态的操作了 最后统计出来答案 我们发现，因为有$k$位，而我们是按位考虑的。所以我们最后要取答案的$k$次方。 代码如下：12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152#include &lt;bits/stdc++.h&gt;#define int long longconst int N = 505;const int MOD = 1e9 + 7;int c[N][N];int n , m , k , t , ans;inline int read () &#123; int s = 0 , w = 1; char ch = getchar (); while ( ch &gt; '9' || ch &lt; '0' ) &#123; if ( ch == '-' ) w = -1; ch = getchar ();&#125; while ( ch &gt;= '0' &amp;&amp; ch &lt;= '9' ) &#123; s = s * 10 + ch - '0'; ch = getchar ();&#125; return s * w;&#125;int Fast_Power ( int x , int y ) &#123; int sum = 1; while ( y ) &#123; if ( y &amp; 1 ) sum = sum * x % MOD; x = x * x % MOD; y &gt;&gt;= 1; &#125; return sum;&#125;signed main() &#123; for ( int i = 1 ; i &lt;= 500 ; i++ ) c[i][i] = c[i][0]=1; for ( int i = 2 ; i &lt;= 500 ; i++ ) for ( int j = 1 ; j &lt; i ; j++ ) c[i][j] = ( c[i - 1][j] + c[i - 1][j - 1] ) %MOD; t = read(); while ( t-- ) &#123; n = read () , m = read() , k = read (); int ans = Fast_Power ( 2 , n * m ); for ( int i = 0 ; i &lt;= n ; i++ ) for ( int j = 0 ; j &lt;= m ; j++ ) &#123; if ( i == 0 &amp;&amp; j == 0 ) continue; if ( ( i + j ) &amp; 1 ) ans = ( ans + MOD - Fast_Power ( 2 , ( n - i ) * ( m - j ) ) * c[n][i] % MOD * c[m][j] % MOD ) % MOD; else ans = ( ans + Fast_Power ( 2 , ( n - i ) * ( m - j ) ) * c[n][i] % MOD * c[m][j] % MOD ) % MOD; &#125; ans = Fast_Power ( ans , k ); printf ( "%lld\n" , ans ); &#125; return 0;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>思维</tag>
        <tag>数学</tag>
        <tag>容斥原理</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[[题解] Noip2016D1T3 换教室]]></title>
    <url>%2F2018%2F11%2F02%2F%E6%8D%A2%E6%95%99%E5%AE%A4%E9%A2%98%E8%A7%A3%2F</url>
    <content type="text"><![CDATA[一道被天天爱跑步抢尽了风头的最没有排面的$T3…..$说实话，这道题我刚开始是不会的，然后我看了L_Y_T大爷的$Blog$之后才恍然大悟（$Blog$写的很好，赞一个）先安利完$Blog$再说L_Y_T大爷的Blog 看了$Blog$之后,突然发现，这东西要求的概率知识点我都是会的，只是DP式子想不出来而已$qaq…$(我好菜啊) 因为题目中说，我们最多可以换$m$次，而题目中说的你只能在开始之前选择方案的说法完全没用，毕竟谁会知道你是预测了未来呢（逃 然后，因为有$n$个课程，所以我们设$f[i][j][0/1]$来表示第i个点,第j次换,换不换 然后我们分情况来表示转移：每个教室分为两种情况 1.换2.不换这个是挺平常的然后复杂在换与不换的分情况上了~~~不换:不换是分为这样几种情况:上一个也不换 , 上一个换 且成功,上一个换但失败同理,换也有好多种情况:上一个点不换,这个点失败上一个点不换,这个点成功上一个点换成功,这个点成功上一个点换成功,这个点失败上一个点换失败,这个点成功上一个点换失败,这个点也失败 然后方程好复杂的，是：1234567891011121314151617181920212223242526 上一点不换:f[i-1][j-1][0]这一点换1.失败消耗体力: dis[c[i-1]][c[i]] 分析: 由于上一个点不换,所以上一个点一定是在c[]中的;假定这次失败,那么这次也只能去c[]中的教室;2.成功消耗体力: dis[c[i-1]][d[i]]分析: 由于上一个点不换,所以上一个点一定是在c[]中的;假定这次成功,那么这次能去d[]中的教室;那么,失败的概率是1-k[],成功的概率是k[].综上,这种情况就是:f[i-1][j-1][0]+dis[c[i-1]][d[i]]*k[i]+dis[c[i-1]][c[i]]*(1.0-k[i]) 同理,上一点换,这一点换1.上一点失败,这一点失败(以后省一点哈)消耗体力: dis[c[i-1]][c[i]]概率:都失败这运气也没谁了!!!! 概率:(1.0-k[i-1])*(1.0-k[i])2.失败,成功消耗体力: dis[c[i-1]][d[i]]概率 : (1.0-k[i-1])*k[i]3.成功,失败消耗体力 : dis[d[i-1]][c[i]]概率: k[i-1]*(1.0-k[i])4.成功,成功消耗体力: dis[d[i-1]][d[i]] 概率: k[i-1]*k[i] 然后对于不换的方程：12f[i][j][0] = min(f[i-1][j][0]+dis[c[i-1]][c[i]],f[i-1][j][1]+dis[c[i-1]][c[i]]*(1.0-k[i-1])+dis[d[i-1]][c[i]]*k[i-1]) ; 之前需要Floyd预处理一下，然后就好啦(这道题的确比天天爱跑步简单23333)123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;const int N = 2050;const int M = 350;int n , m , v , e;int c[N] , d[N] ;double G[M][M] , f[N][N][2];double k[N];template &lt; class T &gt;inline T min ( T x , T y ) &#123; return x &lt; y ? x : y;&#125;int main ( void ) &#123; scanf ( "%d%d%d%d" , &amp;n , &amp;m , &amp;v , &amp;e ); for ( int i = 1 ; i &lt;= n ; i++ ) scanf ( "%d" , &amp;c[i] ); for ( int i = 1 ; i &lt;= n ; i++ ) scanf ( "%d" , &amp;d[i] ); for ( int i = 1 ; i &lt;= n ; i++ ) scanf ( "%lf" , &amp;k[i] ); for ( int i = 1 ; i &lt;= v ; i++ ) for ( int j = 1 ; j &lt;= v ; j++ ) G[i][j] = 0x3f3f3f3f; for ( int i = 1 ; i &lt;= n ; i++ ) for ( int j = 0 ; j &lt;= m ; j++ ) f[i][j][0] = f[i][j][1] = 0x3f3f3f3f; for ( int i = 1 ; i &lt;= v ; i++ ) G[i][i] = 0 ; for ( int i = 1 ; i &lt;= e ; i++ ) &#123; int x , y; double z; scanf ( "%d%d%lf" , &amp;x , &amp;y , &amp;z ); if ( G[x][y] &gt; z ) G[x][y] = G[y][x] = z; &#125; for ( int l = 1 ; l &lt;= v ; l++ ) for ( int i = 1 ; i &lt;= v ; i++ ) for ( int j = 1 ; j &lt;= v ; j++ ) G[i][j] = min ( G[i][j] , G[i][l] + G[l][j] ); f[1][0][0] = f[1][1][1] = 0.0000; for ( int i = 2 ; i &lt;= n ; i++ ) for ( int j = 0 ; j &lt;= min ( i , m ) ; j++ ) &#123; f[i][j][0] = min ( f[i - 1][j][0] + G[c[i - 1]][c[i]] , f[i - 1][j][1] + G[c[i - 1]][c[i]] * ( 1.0 - k[i - 1] ) + G[d[i - 1]][c[i]] * k[i - 1] ); if(j &gt;= 1) &#123; f[i][j][1] = min ( f[i - 1][j - 1][0] + G[c[i - 1]][d[i]] * k[i] + G[c[i - 1]][c[i]] * ( 1.0 - k[i] ) , f[i - 1][j - 1][1] + G[c[i - 1]][c[i]] * ( 1.0 - k[i - 1] ) * ( 1.0 - k[i] ) + G[c[i - 1]][d[i]] *k[i] * ( 1.0 - k[i - 1] ) + G[d[i - 1]][c[i]] * k[i - 1]* ( 1.0 - k[i] ) + G[d[i - 1]][d[i]] * k[i - 1] * k[i] ); &#125; &#125; double ans = 0x7fffffff; for ( int i = 0 ; i &lt;= m ; i++ ) for ( int j = 0 ; j &lt;= 1 ; j++ ) ans = min ( ans , f[n][i][j] ); printf ( "%.2lf\n" , ans ) ; return 0 ;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>概率期望</tag>
        <tag>DP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[概率入门]]></title>
    <url>%2F2018%2F11%2F02%2F%E6%A6%82%E7%8E%87%E5%85%A5%E9%97%A8%2F</url>
    <content type="text"><![CDATA[其实这道初赛题是我第一次做的概率题 我们来看一眼这道毒瘤题： 题面其实已经很清楚了，我们可以发现，当这个青蛙在第$1$块石头时，那么这只青蛙完全可以不用跳，我们设$f(k)$表示这只青蛙在$k$号荷叶上，期望需要$f(k)$次跳到$1$号荷叶，那么我们有： f(1)=0我们接着来考虑当这只青蛙在$2$号荷叶时的情况，它可以跳到$1$号和$2$号荷叶，当它跳到$1$号荷叶时，它完成了任务，跳了一步。当它跳到$2$号时，它还有$f(2)$步，因为每一次跳跃时，跳跃到每一个荷叶上的几率是相等的，所以我们有： f(2)=[1+(1+f(2))]/2同理，我们可以得到： f(3)=[1+(1+f(2))+(1+f(3))]/3推广到一般形式则有: f(k)=[\sum_{i=1}^k{f(i)+1}]/k我们化简一下，有： f(k)=1+\frac {1}{k}\sum_{i=1}^kf(i) 我们看到这个式子：$f(k)=1+\frac {1}{k}\sum_{i=1}^kf(i)$ 当$i==k$的时候,我们会发现式子里出现了一个$f(k)$….. 这咋求啊 我们展开这个式子，会发现原来的式子等价于： f(k)=1+\frac {1}{k}\sum_{i=1}^{k-1}f(i)+\frac 1kf(k)这时候如果把$f(k)$看作一个未知数的话，我们可以发现$f(k)$的这一项是可以合并的。但是我们先两边同乘一个$k$，把分母去掉，就会有： k*f(k)=k+\sum_{i=1}^{k-1}f(i)+f(k)这样答案就很显然了，合并掉等式两边相等的$f(k)$，会得到： (k-1)*f(k)=k+\sum_{i=1}^{k-1}f(i)最后，两边同除$(k-1)$，有最后答案上的公式： f(k)=\frac{k}{k-1}(1+\frac {\sum_{i=1}^{k-1}f(i)}{k-1})通过这个式子计算可以得到$f(5)=\frac{37}{12}$,也就是答案 做完了QAQ(写Markdown好累啊qwq…)]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>概率期望</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[[POI2015]WIL-Wilcze题解]]></title>
    <url>%2F2018%2F11%2F02%2FPOI2015-WIL-Wilcze%E9%A2%98%E8%A7%A3%2F</url>
    <content type="text"><![CDATA[其实这本来是$QBXT$的$T2$，但是由于毒瘤$zhw$跑得快（雾），导致我们发现这是某$poi$原题。 首先看题面:题目链接 详细读了一遍之后，其实对于这道题，我的第一反应是贪心（也许是因为我太菜了）。然后打了一遍，小样例过了，然后被大样例$hack$。 之后我又用命分析了一下。可以发现，因为题目中保证每个数的值全部$&gt;=0$，即每个数都是正整数。所以我们与其选长度不到$d$的区间删除，不如直接选择长度为$d$的区间删除。 那么在一段长度已知的序列中，长度为$d$的子序列个数是已知的，那么我们就可以预处理出每一段长度为$d$的子序列。然后我们又发现，题目中要求区间的长度不超过p，那么我们很明显的可以想到尺取法。 然后我们就可以用单调队列来维护我们预处理出的这些长度为$d$的子序列。然后对于区间长度取$max$就是答案了。 最后怒斥一波出原题的出题人$qaq$….(虽然$zhw$很帅) 代码： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950#include&lt;cstdio&gt;#include&lt;deque&gt;typedef long long ll;using std::deque;const ll N=2000010;ll n,p,d;ll a[N];ll sum[N];ll hea[N];struct Node&#123; ll pos,val; Node(ll pos,ll val):pos(pos),val(val)&#123;&#125; Node()&#123;&#125;&#125;;inline void read(ll &amp;x)&#123; ll s=0,w=1; char ch=getchar(); while(ch&gt;'9'||ch&lt;'0')&#123;if(ch=='-')w=-1;ch=getchar();&#125; while(ch&gt;='0'&amp;&amp;ch&lt;='9')&#123;s=s*10+ch-'0';ch=getchar();&#125; x=s*w; return;&#125;deque&lt;Node&gt;q;int main()&#123; read(n);read(p);read(d); for(int i=1;i&lt;=n;i++)read(a[i]),sum[i]=sum[i-1]+a[i]; for(int i=1;i&lt;=n-d;i++) hea[i]=sum[i+d]-sum[i]; for(int i=n-d+1;i&lt;=n;i++) hea[i]=sum[n]-sum[i]; ll ans=0; int l=0; for(int i=d+1;i&lt;=n;i++) &#123; while(!q.empty()&amp;&amp;q.back().val&lt;hea[i-d])q.pop_back(); q.push_back(Node(i-d,hea[i-d])); while(l&lt;i-d&amp;&amp;sum[i]-sum[l]-q.front().val&gt;p) &#123; l++; while(l&gt;q.front().pos)q.pop_front(); &#125; ans=std::max(ans,(ll)i-l); &#125; printf("%lld",ans); return 0;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>单调队列</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[复赛冲刺Day1R1-Color题解]]></title>
    <url>%2F2018%2F11%2F01%2F%E5%A4%8D%E8%B5%9B%E5%86%B2%E5%88%BADay1R1-Colory%E9%A2%98%E8%A7%A3%2F</url>
    <content type="text"><![CDATA[这道题是考试时的$T2$，我感觉这道题出的特别好（虽然当时并不会做 首先看题目:$emmmmm…..$什么鬼啊这个题是$QAQ$ 当时直接一脸懵逼，然后只会写2^n 枚举每一种填充方式，然后再检测的方法…然而这道题这么做只有10分啊$qaq….$ 然后赛后题解告诉我：这题TM是个欧拉回路！！！！当时我就懵逼了….然后当dalao们给我把这道题讲明白了之后，我才发现这道题思路的奇妙。 首先，我们发现，对于一个点，它对应着一个横坐标和一个纵坐标。蒽….一个点对应着两个数值，这个时候我们应该想到什么？二分图？对了，这东西还真的就是要你用二分图的思想来建图….(心态崩了我要妹子$QAQ$) 我们建图，然后我们发现，因为一个点对应着一个横坐标和一个纵坐标，那么我们想到：在二分图中，每一条边也是对应着两种点。那么受到这样的启发，我们就可以建图了：我们把横坐标和纵坐标分别看成一种点，然后将题目中给你的点看成这张图上的边，那么因为题目中要求：黑点和白点的绝对值差不大于1…..，那么我们能想到什么呢？我们要对这些边进行黑白染色，所以我们要一个点出发，一直走一条欧拉回路，这样能走遍所有的边。 但是这样做，我们会发现一个问题：只有$subtask4$的$30$分数据告诉你是偶数。而存在欧拉回路的图的特点是什么呢？每个点的度数都是偶数，那么当点的度数是奇数的时候，我们怎么办呢？ 我在这里选择了度数为奇数的点向一个虚拟节点连边，然后当所有点的度数都是偶数时，这时候没有其他点向这个点连边所以这时候这个虚拟节点对答案没有影响。 然后，我们就直接对边进行染色就可以了。 我只想说，这道题出的真的好，佩服出题人。 代码：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt; const int N = 5e5 + 10; struct Data &#123; int v; int p;&#125;data[N];struct Edge &#123; int to; int next;&#125;e[N &lt;&lt; 1];int n , m , t = 1 , num;int head[N] , d[N];int x[N] , y[N] , ans[N];bool flag[N]; inline int read () &#123; int s = 0 , w = 1; char ch = getchar (); while ( ch &gt; '9' || ch &lt; '0' ) &#123; if ( ch == '-' ) w = -1; ch = getchar ();&#125; while ( ch &gt;= '0' &amp;&amp; ch &lt;= '9' ) &#123; s = s * 10 + ch - '0'; ch = getchar ();&#125; return s * w;&#125;inline void add ( int x , int y ) &#123; e[++t].to = y; e[t].next = head[x]; head[x] = t; return;&#125;inline bool cmp ( Data x , Data y ) &#123; return x.v&lt;y.v;&#125;void lisanhua () &#123; for ( int i = 1 ; i &lt;= n ; i++ ) &#123; data[i].v = x[i]; data[i].p = i; &#125; std :: sort ( data + 1 , data + 1 + n , cmp ); data[0].v = -1; for ( int i = 1 ; i &lt;= n ; i++ ) &#123; if ( data[i].v != data[i - 1].v ) num++; x[data[i].p] = num; &#125; for ( int i = 1 ; i &lt;= n ; i++ ) &#123; data[i].v = y[i]; data[i].p = i; &#125; std :: sort ( data + 1 , data + 1 + n , cmp ); data[0].v = -1; for ( int i = 1 ; i &lt;= n ; i++ ) &#123; if ( data[i].v != data[i - 1].v ) num++; y[data[i].p] = num; &#125; return;&#125;void dfs ( int cur , bool last ) &#123; for ( int i = head[cur] ; i ; i = e[i].next ) &#123; if ( flag[i &gt;&gt; 1] ) continue; int j = e[i].to; flag[i &gt;&gt; 1] = 1; d[cur]--; d[j]--; ans[i &gt;&gt; 1] = !last; dfs ( j , !last ); &#125; return;&#125; int main ( void ) &#123; n = read (); for ( int i = 1 ; i &lt;= n ; i++ ) &#123; x[i] = read (); y[i] = read (); &#125; lisanhua(); for ( int i = 1 ; i &lt;= n ; i++ ) &#123; d[x[i]]++; d[y[i]]++; add ( x[i] , y[i] ); add ( y[i] , x[i] ); &#125; for ( int i = 1 ; i &lt;= num ; i++ ) if ( d[i] &amp; 1 ) &#123; d[i]++; d[num + 1]++; add ( i , num + 1 ); add ( num + 1 , i ); &#125; num++; memset ( ans , -1 , sizeof ( ans ) ); for ( int i = 1 ; i &lt;= num ; i++ ) while ( d[i] ) dfs ( i , 1 ); for ( int i = 1 ; i &lt;= n ; i++ ) printf ( "%d%c" , ans[i] , i == n ? '\n' : ' ' ); return 0;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>模拟赛题解</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[复赛冲刺Day1R1-Count题解]]></title>
    <url>%2F2018%2F11%2F01%2FqbxtD1T1%E9%A2%98%E8%A7%A3%2F</url>
    <content type="text"><![CDATA[其实我感觉这道数论题还是挺简单的（虽然我不会） 这道数论题，我初看的时候是挺一脸懵逼的，然后据$wucstdio$大爷提供的思路，我们可以发现：题意求的是$x$,$y$在$mod P$下的逆元，存在解的条件是$gcd(x,p)==1$，即x,p互质。所以由题解有设 1 到 P − 1 中与 P 互质的数有 s 个，考虑这 s 个数与它们的逆元组成的二元组，这些二元组一定符合条件，那么只要考虑去重的问题 所以我们只需要知道从$1$到$n$中和$n$互质的数的个数这个东西是什么呢？这个东西很明显是$phi$函数。所以我们只需要求出$\phi(p)$，再加上$x^2\equiv1\pmod{p}$的数，最后除$2$就好了。 代码：123456789101112131415161718192021222324252627282930313233343536#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;const int N = 1e7 + 10;int n;int tot , prime[N] , phi[N];bool flag[N];int main ( void ) &#123; scanf ( "%d" , &amp;n ); flag[1] = 1; phi[1] = 1; for ( int i = 2 ; i &lt;= n ; i++ ) &#123; if ( !flag[i] ) &#123; prime[++tot] = i; phi[i] = i - 1; &#125; for ( int j = 1 ; j &lt;= tot &amp;&amp; i * prime[j] &lt;= n ; j++ ) &#123; flag[i * prime[j]] = 1; if ( i % prime[j] == 0 ) &#123; phi[i * prime[j]] = phi[i] *prime[j]; break; &#125; phi[i * prime[j]] = phi[i] * phi[prime[j]]; &#125; &#125; long long ans = phi[n]; for ( long long i = 1 ; i &lt;= n ; i++ ) if ( i * i % n == 1 ) ans++; printf ( "%lld\n" , ( long long ) ( ans ) / 2 ); return 0;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>模拟赛题解</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[A*学习笔记]]></title>
    <url>%2F2018%2F10%2F19%2FA-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[例题：$LuoguP2324$:骑士精神 $A*$嘛，很早时候就听说过，貌似是一种很神奇的算法。听长者讲过一遍，一直都想自己打一遍。但是一直没机会。所以来自己写一遍就好啦。 $A*$的重点就是一个叫做估价函数的东西，但是这个叫估价函数的东西你必须要好好写，不然你会搜出来$WA$的好成绩对于这道题，我就是将现在的棋盘和目标棋盘不同棋子数的差当作估价函数（其实是正确的)。然后，我们就可以加一个类似于剪枝的东西：如果现在的步数$+$估价函数估计的值$&gt;$现在的$max$，直接$return$就好。剩下的东西就是个大爆搜了， 以下是代码： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990#include &lt;cstdio&gt;#include &lt;iostream&gt;#include &lt;cstring&gt;#include &lt;cstring&gt;#include &lt;algorithm&gt;const int goal[7][7] = &#123; &#123; 0 , 0 , 0 , 0 , 0 , 0 &#125;, &#123; 0 , 1 , 1 , 1 , 1 , 1 &#125;, &#123; 0 , 0 , 1 , 1 , 1 , 1 &#125;, &#123; 0 , 0 , 0 , 2 , 1 , 1 &#125;, &#123; 0 , 0 , 0 , 0 , 0 , 1 &#125;, &#123; 0 , 0 , 0 , 0 , 0 , 0 &#125;&#125;;char mp[6][6];int now[6][6];bool flag;int dx[] = &#123; 0 , 1 , 1 , -1 , -1 , 2 , 2 , -2 , -2 &#125;;int dy[] = &#123; 0 , 2 , -2 , 2 , -2 , 1 , -1 , 1 , -1 &#125;;inline int calcu () &#123; int tmp = 0; for ( int i = 1 ; i &lt;= 5 ; i++ ) for ( int j = 1 ; j &lt;= 5 ; j++ ) &#123; if ( now[i][j] != goal[i][j] ) tmp++; &#125; return tmp;&#125;inline void swap ( int &amp;x , int &amp;y ) &#123; int t = x; x = y; y = t; return;&#125;void A_Star ( int x , int y , int dep , int MaxStep ) &#123; if ( flag ) return; if ( dep == MaxStep ) &#123; if ( calcu () == 0 ) &#123; flag = 1; printf ( "%d\n" , MaxStep ); return; &#125; return; &#125; for ( int i = 1 ; i &lt;= 8 ; i++ ) &#123; int xx = x + dx[i]; int yy = y + dy[i]; if ( xx &gt; 5 || xx &lt; 1 || yy &gt; 5 || yy &lt; 1 ) continue; swap ( now[x][y] , now[xx][yy] ); if ( calcu () + dep &lt;= MaxStep ) A_Star ( xx , yy , dep + 1 , MaxStep ); swap ( now[x][y] , now[xx][yy] ); &#125; return;&#125;int main ( void ) &#123; int ttt; scanf ( "%d" , &amp;ttt ); while ( ttt-- ) &#123; flag = 0; for ( int i = 1 ; i &lt;= 5 ; i++ ) scanf ( "%s" , mp[i] + 1 ); int st_x , st_y; for ( int i = 1 ; i &lt;= 5 ; i++ ) for ( int j = 1 ; j &lt;= 5 ; j++ ) if ( mp[i][j] == '*' ) &#123; st_x = i; st_y = j; now[i][j] = 2; &#125; else now[i][j] = mp[i][j] - '0'; if ( calcu () == 0 ) &#123; puts ( "0" ); return 0; &#125; for ( int i = 1 ; i &lt;= 15 ; i++ ) if ( !flag ) A_Star ( st_x , st_y , 0 , i ); if ( !flag ) puts ( "-1" ); &#125; return 0;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>玄学</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[wucstdio的毒瘤模拟赛]]></title>
    <url>%2F2018%2F10%2F18%2Fwucstdio%E7%9A%84%E6%AF%92%E7%98%A4%E6%A8%A1%E6%8B%9F%E8%B5%9B%2F</url>
    <content type="text"><![CDATA[$wucstdio$大爷的Flag还是没有倒…. T1: 反正我刚开始对这道题是完全没有什么信心的qaq（才不会告诉你我直接去看的$T2$） 考虑$50$分的情况：一条链。所以就是一个等差数列了qwq 考虑剩余的正解，我们可以把每一步的期望值当成这棵树的权值，然后因为从上向下和从下向上的期望值可能不太一样，所以我们需要两个函数来表示：（相当于两条边）。 我们设$f(x) g(x)$分别表示从下向上和从上向下的情况，所以我们考虑求出$f(x)$时，我们要考虑以下情况： 直接走到这个节点的父节点，所以这种情况下，对这个节点对答案的贡献就是$\frac {1}{d[x]}了$ 还有一种情况就是这个节点先跳到他的儿子，再跳回这个节点，再跳过去。这个时候，因为我们需要一步来跳过去，所以这种情况对答案的贡献就是:$\sum_{j=son} \frac {1}{d[x]}[1 + f(x) + f(j) ]$ 我们综合考虑一下这两种情况对答案的贡献值，将这两个式子加起来，我们就会得到下边的这个式子： f(x) = \frac{1}{d} + \sum_{j=son}\frac{1}{d}\times[1 +f(x) + f ( j )]我们安置我们做期望的一贯思路（好像我做过多少期望一样QwQ），因为$num[son]=p-1$，所以我们可以得到这样一个式子： d\times f(x)=1+d-1+(d-1)f(x)+\sum_{j}f(j)化简一下之后有： f(x)=d+\sum_{j}f(j)然后我们来考虑一下$g(x)$这个东西怎么求，当我们经过观察之后，我们可以发现这个式子有三种情况： 他的父亲直接跳到他这里，这种情况对答案的贡献就是$\frac{1}{d[father]}$ 他的父亲先跳到他的爷爷，然后再跳回来，这种情况下，对答案的贡献就是：$\frac{1}{d[father]}\times (1 + g(p) +g(x) )$ 他的父亲跳到他的兄弟然后再跳到他自己。 我们把这三种情况加起来，就会有： g(x)=\dfrac {1}{d[father]} \times(1+g(p)+g(x))+\dfrac {1}{d[father]}+\sum_{pa_j=pa_x\&\&j\not=x}\dfrac {1}{d[father]} (1+f(j)+g(x))继续化简有： g(x)=g(p)+f(p)-f(x)通过这种方式，我们就可以把$g(x) f(x)$算出来，相当于边长。 算出边长后，这个问题就转化成了：给你一颗树，求树的直径。我选择了DP求直径，就很简单了。 代码：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104#include &lt;cstdio&gt;#include &lt;iostream&gt;#include &lt;cstdio&gt;#include &lt;algorithm&gt;#include &lt;cmath&gt;const int N = 2e5 + 10;int n , m , t;struct Edge &#123; int to; int next;&#125;e[N &lt;&lt; 1];int head[N];int now_ans;int f[N] , g[N] , p[N];int LongDis[N][2] , SecondDis[N][2];inline int read () &#123; int s = 0 , w = 1; char ch = getchar (); while ( ch &gt; '9' || ch &lt; '0' ) &#123; if ( ch == '-' ) w = -1; ch = getchar ();&#125; while ( ch &gt;= '0' &amp;&amp; ch &lt;= '9' ) &#123; s = s * 10 + ch - '0'; ch = getchar ();&#125; return s * w;&#125; inline void add ( int x , int y ) &#123; e[++t].to = y; e[t].next = head[x]; head[x] = t; return;&#125;inline int min ( int x , int y ) &#123; return x &lt; y ? x : y;&#125;inline int max ( int x , int y ) &#123; return x &gt; y ? x : y;&#125;void Find_f ( int root , int fa ) &#123; f[root] = p[root]; for ( int i = head[root] ; i ; i = e[i].next ) &#123; int j = e[i].to; if ( j == fa ) continue; Find_f ( j , root ); f[root] += f[j]; &#125; return;&#125;void Find_g ( int root , int fa ) &#123; for ( int i = head[root] ; i ; i = e[i].next ) &#123; int j = e[i].to; if ( j == fa ) continue; g[j] = f[root] + g[root] - f[j]; Find_g ( j , root ); &#125; return;&#125;void Work ( int root , int fa ) &#123; int Frist = 0 , Second = 0; for ( int i = head[root] ; i ; i = e[i].next ) &#123; int j = e[i].to; if ( j == fa ) continue; Work ( j , root ); if ( LongDis[j][0] + g[j] &gt; LongDis[root][0] ) &#123; SecondDis[root][0] = LongDis[root][0]; LongDis[root][0] = LongDis[j][0] + g[j]; Frist = j; &#125; else if ( LongDis[j][0] + g[j] &gt; SecondDis[root][0] ) SecondDis[root][0] = LongDis[j][0] + g[j]; if ( LongDis[j][1] + f[j] &gt; LongDis[root][1] ) &#123; SecondDis[root][1] = LongDis[root][1]; LongDis[root][1] = LongDis[j][1] + f[j]; Second = j; &#125; else if ( LongDis[j][1] + f[j] &gt; SecondDis[root][1] ) SecondDis[root][1] = LongDis[j][1] + f[j]; &#125; if ( Frist != Second ) now_ans = max ( LongDis[root][0] + LongDis[root][1] , now_ans ); else if ( Frist == Second ) now_ans = max ( now_ans , max ( SecondDis[root][1] + LongDis[root][0] , SecondDis[root][0] + LongDis[root][1] ) ); return;&#125;int main ( void ) &#123; freopen ( "tree.in" , "r" , stdin ); freopen ( "tree.out" , "w" , stdout ); n = read (); for ( int i = 1 ; i &lt; n ; i++ ) &#123; int x = read () , y = read (); add ( x , y ); add ( y , x ); p[x]++; p[y]++; &#125; Find_f ( 1 , 0 ); Find_g ( 1 , 0 ); Work ( 1 , 0 ); printf ( "%d.00000\n" , now_ans ); return 0;&#125; T2:其实暴力还是挺显然的]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>模拟赛题解</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[前排打出题人的一套题]]></title>
    <url>%2F2018%2F10%2F17%2F%E5%89%8D%E6%8E%92%E6%89%93%E5%87%BA%E9%A2%98%E4%BA%BA%E7%9A%84%E4%B8%80%E5%A5%97%E9%A2%98%2F</url>
    <content type="text"><![CDATA[不管怎么样，先打死出题人再说qaq… T1:人贩子$LLFZ$ 题意很显然就是最优贸易啊…. 一眼看出来是缩点+DP….但是为什么我之前是SPFA过的啊QAQ…写SPFA比较稳….然后….就写了…. 上代码吧…. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123#include &lt;cstdio&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;#include &lt;cstring&gt;#include &lt;queue&gt;const int N = 1e5 + 10;const int M = 1e6 + 10;const int INF = 2147483647;#define G(i,a,b,c) for ( int i = b[a] ; i ; i = c[i].next )int n , m , t , cnt;struct Edge &#123; int to; int data; int next;&#125;e[M] , e_[M];int head[N] , head_[N];int maxs[N] , mins[N];int dis[N] , value[N];bool inque[N];std :: queue &lt; int &gt; qu;inline int read () &#123; int s = 0 , w = 1; char ch = getchar (); while ( ch &gt; '9' || ch &lt; '0' ) &#123; if ( ch == '-' ) w = -1; ch = getchar ();&#125; while ( ch &gt;= '0' &amp;&amp; ch &lt;= '9' ) &#123; s = s * 10 + ch - '0'; ch = getchar ();&#125; return s * w;&#125;inline void add ( int x , int y , int z ) &#123; e[++t].to = y; e[t].data = z; e[t].next = head[x]; head[x] = t; return;&#125;inline void add_ ( int x , int y , int z ) &#123; e_[++cnt].to = y; e_[cnt].data = z; e_[cnt].next = head_[x]; head_[x] = cnt; return;&#125;template &lt; class T &gt; inline T min ( T x , T y ) &#123; return x &lt; y ? x : y;&#125;template &lt; class T &gt;inline T max ( T x , T y ) &#123; return x &gt; y ? x : y;&#125;void Heap_Dijkstra () &#123; std :: memset ( dis , 0x3f3f3f3f , sizeof ( dis ) ); inque[1] = 1 , dis[1] = value[1]; qu.push ( 1 ); while ( !qu.empty () ) &#123; int j = qu.front (); inque[j] = 0; qu.pop (); G ( i , j , head , e ) &#123; int k = e[i].to; if ( dis[k] &gt; min ( dis[j] , e[i].data ) ) &#123; dis[k] = min ( dis[j] , e[i].data ); if ( !inque[k] ) &#123; inque[k] = 1; qu.push ( k ); &#125; &#125; &#125; &#125; for ( int i = 1 ; i &lt;= n ; i++ ) mins[i] = dis[i]; std :: memset ( dis , -0x3f3f3f3f , sizeof ( dis ) ); inque[n] = 1 , dis[n] = value[n]; qu.push ( n ); while ( !qu.empty () ) &#123; int j = qu.front (); qu.pop (); inque[j] = 0; G ( i , j , head_ , e_ ) &#123; int k = e_[i].to; if ( dis[k] &lt; max ( dis[j] , e_[i].data ) ) &#123; dis[k] = max ( dis[j] , e_[i].data ); if ( !inque[k] ) &#123; inque[k] = 1; qu.push ( k ); &#125; &#125; &#125; &#125; for ( int i = 1 ; i &lt;= n ; i++ ) maxs[i] = dis[i]; return;&#125; int main ( void ) &#123; freopen ( "child.in" , "r" , stdin ); freopen ( "child.out" , "w" , stdout ); n = read (); m = read (); for ( int i = 1 ; i &lt;= n ; i++ ) value[i] = read (); for ( int i = 1 ; i &lt;= m ; i++ ) &#123; int x = read () , y = read () , z = read (); if ( z == 1 ) &#123; add ( x , y , value[y] ); add_ ( y , x , value[x] ); &#125; else if ( z == 2 ) &#123; add ( x , y , value[y] ); add ( y , x , value[x] ); add_ ( y , x , value[x] ); add_ ( x , y , value[y] ); &#125; &#125; Heap_Dijkstra (); int ans = -INF; for ( int i = 1 ; i &lt;= n ; i++ ) ans = max ( ans , maxs[i] - mins[i] ); printf ( "%d\n" , ans ); return 0;&#125; T2 : food 再来拿出题人祭天祭一波… 话说我直接读题读错了然后写了个错误的DP然后还A了是什么鬼啊…. 话说我考虑了前缀和，那么我还过了，说明直接加起来然后除就可以? 123456789101112131415161718192021222324252627282930313233343536373839404142434445#include &lt;cstdio&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;#include &lt;cstring&gt;const int N = 15;int n , ans = -1;int A , B , C;int p1 , p2 , p3;int MaxTime[N];int f[N][105][105][105];inline int read () &#123; int s = 0 , w = 1; char ch = getchar (); while ( ch &gt; '9' || ch &lt; '0' ) &#123; if ( ch == '-' ) w = -1; ch = getchar ();&#125; while ( ch &gt;= '0' &amp;&amp; ch &lt;= '9' ) &#123; s = s * 10 + ch - '0'; ch = getchar ();&#125; return s * w;&#125;inline int max ( int x , int y ) &#123; return x &gt; y ? x : y;&#125;int main ( void ) &#123; freopen ( "food.in" , "r" , stdin ); freopen ( "food.out" , "w" , stdout ); A = read () , B = read () , C = read (); p1 = read () , p2 = read () , p3 = read (); n = read (); for ( int i = 1 ; i &lt;= n ; i++ ) &#123; MaxTime[i] = read (); MaxTime[i] = MaxTime[i - 1] + MaxTime[i]; &#125; for ( int i = 1 ; i &lt;= n ; i++ ) for ( int j = A ; j * p1 &lt;= MaxTime[i] &amp;&amp; j&lt;=100 ; j++ ) for ( int k = B; j * p1 + k * p2 &lt;= MaxTime[i] &amp;&amp; k &lt;= 100 ; k++ ) for ( int l = C ; j * p1 + k * p2 + l * p3 &lt;= MaxTime[i] &amp;&amp; l &lt;=100 ; l++ ) &#123; f[i][j][k][l] = max ( f[i][j][k][l] , max ( f[i - 1][j - A][k - B][l - C] + 1 , f[i][j - A][k - B][l - C] + 1 ) ); ans = max ( ans , f[i][j][k][l] ); &#125; printf ( "%d\n" , ans ); return 0;&#125; T3: Happy 再吐槽一波为什么Noip模拟赛会考离散对数（然而我并不会….） 其实应该是一道签到题吧。。。 暴力水过…. 123456789101112131415161718192021222324252627282930313233343536373839#include &lt;cstdio&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;#include &lt;cstring&gt;inline int read () &#123; int s = 0 , w = 1; char ch = getchar (); while ( ch &gt; '9' || ch &lt; '0' ) &#123; if ( ch == '-' ) w = -1; ch = getchar ();&#125; while ( ch &gt;= '0' &amp;&amp; ch &lt;= '9' ) &#123; s = s * 10 + ch - '0'; ch = getchar ();&#125; return s * w;&#125;int P , A , B;bool app[50005];int main ( void ) &#123; freopen ( "happy.in" , "r" , stdin ); freopen ( "happy.out" , "w" , stdout ); int T = read (); while ( T-- ) &#123; int now = 1; memset ( app , false , sizeof ( app ) ); P = read () , A = read () , B = read (); for ( int i = 1 ; ; i++ ) &#123; now = ( now * A ) % P; if ( now == B ) &#123; printf ( "%d\n" , i ); break; &#125; if ( app[now] ) &#123; puts ( "Couldn't Produce!" ); break; &#125; app[now] = 1; &#125; &#125; return 0;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>模拟赛题解</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[My_Code_Style]]></title>
    <url>%2F2018%2F10%2F13%2FMy_Code_Style%2F</url>
    <content type="text"><![CDATA[介绍下本蒟蒻的丑死的码风$qwq$…(码风大概是魔改了神犇$Menci$的) 在打CF时并不是这个码风 码风概述： 所有的#include后必须有一个空格,例如#include 无论什么样子的程序，都必须写cstdio cstring algorithm iostream这四个头文件。 在主程序的int main()中要加$void$，即为int main(void) 一般不写using namespace std; 所有的变量必须定义在第一个自定义函数之前，且变量和第一个自定义函数，最后一个自定义函数和$main$之间必须有一个换行 每个函数之后尽可能有$return$， 在一般情况下，在花括号内的内容不加逗号 缩进： 对于每个代码块，使用4空格或者等长的Tab缩进。 括号： 大括号不换行 空格： 个人感觉自己的空格比较的毒瘤。 1.在每个函数声明时，函数名后的括号与函数名之间必须有一个空格,而且括号内如果需要声明变量，则要先有一个空格，且逗号的前后都必须有一个空格。 2.在for循环的声明中，每一个字符（变量名除外），都要用空格隔开。 3.数组内一般不加空格，但是如果有运算符则运算符前后必须有空格。 4.每个可以前后匹配的括号前后必须有空格。 变量： 1.基本所有变量都是全局变量，但有些ans,sum最后统计答案时使用的变量可以定义为局部变量。 2.所有的变量名称都必须与要存储的东西的中文意思有沾边，比如树直接定义为tree而不是T。（极度不能容忍变量名直接为a,b,c,d,e,f,g,的情况。 3.定义N,M等时一般只用N,M为名称而不是MAXN,MAXM. 4.定义的结构体类型在定义变量时必须紧接着声明完成结构体后，并且结构体中变量需要定义一个加一个换行。 5.在变量命名时较长的变量名可以用_来连接，并且大小写交替使用，如Add_Tree_Val 把上边所有毒瘤的码风结合起来之后代码大概长这个样子qwq.. update:还是加上模板舒服qwq 不要吐槽我的丑逼$Splay…..$ 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181#include &lt;cstdio&gt;#include &lt;algorithm&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;queue&gt;#include &lt;map&gt;#include &lt;set&gt;#include &lt;cmath&gt;#include &lt;cctype&gt;#include &lt;ctime&gt;#include &lt;vector&gt;#include &lt;cstdlib&gt;#include &lt;stack&gt;#define ll long long#define pll std::pair&lt;int,int&gt;#define mp std::make_pair#define fi first#define se second#define oo 2147483647#define PI 3.141592653590#define rint register inttemplate &lt; class T &gt; inline void read ( T &amp;x ) &#123;T s = 0 , w = 1;char ch = getchar ();while ( ch &gt; '9' || ch &lt; '0' ) &#123; if ( ch == '-' ) w = -1; ch = getchar ();&#125;while ( ch &gt;= '0' &amp;&amp; ch &lt;= '9' ) &#123; s = s * 10 + ch - '0'; ch = getchar ();&#125;x = s * w;return;&#125;template &lt; class T , typename ...Argc &gt; inline void read ( T &amp;x , Argc &amp;...Args ) &#123;read ( x );read ( Args... );return;&#125; template &lt; class T &gt; inline T max ( T x , T y ) &#123;return x &gt; y ? x : y;&#125;template &lt; class T &gt; inline T min ( T x , T y ) &#123;return x &lt; y ? x : y;&#125;template &lt; class T &gt; inline void abs ( T x ) &#123;return x &gt; 0 ? x : -x;&#125;inline int _read () &#123;int s = 0 , w = 1;char ch = getchar ();while ( ch &gt; '9' || ch &lt; '0' ) &#123; if ( ch == '-' ) w = -1; ch = getchar ();&#125;while ( ch &gt;= '0' &amp;&amp; ch &lt;= '9' ) &#123; s = s * 10 + ch - '0'; ch = getchar ();&#125;return s * w;&#125;template &lt;typename T&gt; void write(T x) &#123;if (x &lt; 0) x = -x, putchar('-');if (x &gt; 9) write(x / 10);putchar(x % 10 + 48);return;&#125;template &lt;typename T&gt; void writeln(T x) &#123; write(x); printf ("\n"); &#125;/**********************************************************************************************************************************************************************************************************************************************************************/const int N = 1e6 + 5;int root , tot , n;struct Tree &#123; int ch[2]; int val; int father; int size; int cnt;&#125;tree[N];void pushup ( int cur ) &#123; tree[cur].size = tree[tree[cur].ch[0]].size + tree[tree[cur].ch[1]].size + tree[cur].cnt; return;&#125;void rotate ( int x ) &#123; int y = tree[x].father; int z = tree[y].father; int k = tree[y].ch[1] == x; tree[z].ch[tree[z].ch[1] == y] = x; tree[x].father = z; tree[y].ch[k] = tree[x].ch[k ^ 1]; tree[tree[x].ch[k ^1]].father = y; tree[x].ch[k ^ 1] = y; tree[y].father = x; pushup ( x ); pushup ( y ); return;&#125;void Splay ( int x , int goal ) &#123; while ( tree[x].father != goal ) &#123; int y = tree[x].father; int z = tree[y].father; if ( z != goal ) ( tree[y].ch[0] == x ) ^ ( tree[z].ch[0] == y ) ? rotate ( x ) : rotate ( y ); rotate ( x ); &#125; if ( goal == 0 ) root = x; return;&#125;void insert ( int x ) &#123; int cur = root , father = 0; while ( cur &amp;&amp; tree[cur].val != x ) &#123; father = cur; cur = tree[cur].ch[x &gt; tree[cur].val]; &#125; if ( cur ) tree[cur].cnt++; else &#123; cur = ++tot; if ( father ) tree[father].ch[x &gt; tree[father].val] = cur; tree[cur].ch[0] = tree[cur].ch[1] = 0; tree[cur].father = father; tree[cur].val = x; tree[cur].cnt = 1; tree[cur].size = 1; &#125; Splay ( cur , 0 ); return;&#125;void Find ( int x ) &#123; int cur = root; if ( !cur ) return; while ( tree[cur].ch[x &gt; tree[cur].val] &amp;&amp; x != tree[cur].val ) cur = tree[cur].ch[ x &gt; tree[cur].val]; Splay ( cur , 0 ); return;&#125;int Next ( int x , int f )&#123; Find ( x ); int cur = root; if ( tree[cur].val &gt; x &amp;&amp; f ) return cur; if ( tree[cur].val &lt; x &amp;&amp; !f ) return cur; cur = tree[cur].ch[f]; while ( tree[cur].ch[f ^ 1] ) cur = tree[cur].ch [f ^ 1]; return cur;&#125;void Delete ( int x ) &#123; int last = Next ( x , 0 ); int next = Next ( x , 1 ); Splay ( last , 0 ); Splay ( next , last ); int del = tree[next].ch[0]; if ( tree[del].cnt &gt; 1 ) &#123; tree[del].cnt--; Splay ( del , 0 ); &#125; else tree[next].ch[0] = 0; return;&#125;int kth ( int x ) &#123; int cur = root; if ( tree[cur].size &lt; x ) return 0; while ( 1 ) &#123; int y = tree[cur].ch[0]; if ( x &gt; tree[y].size + tree[cur].cnt ) &#123; x -= tree[y].size + tree[cur].cnt; cur = tree[cur].ch[1]; &#125; else if ( tree[y].size &gt;= x ) cur = y; else return tree[cur].val; &#125;&#125;int main ( void ) &#123; n = read (); insert ( 2147483647 ); insert ( -2147483647 ); while ( n-- ) &#123; int opt = read (); if ( opt == 1 ) &#123; int x = read (); insert ( x ); &#125; else if ( opt == 2 ) &#123; int x = read (); Delete ( x ); &#125; else if ( opt == 3 ) &#123; int x = read (); Find ( x ); printf ( "%d\n" , tree[tree[root].ch[0]].size ); &#125; else if ( opt == 4 ) &#123; int x = read (); printf ( "%d\n" , kth ( x + 1 ) ); &#125; else if ( opt == 5 ) &#123; int x = read (); printf ( "%d\n" , tree[Next ( x , 0 )].val ); &#125; else if ( opt == 6 ) &#123; int x = read (); printf ( "%d\n" , tree[Next ( x , 1 )].val ); &#125; &#125; return 0;&#125; 因为知道了自己是多么的菜,所以才要更加努力去追求那个永远也不可能实现的梦想]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>CodeStyle</tag>
      </tags>
  </entry>
</search>
